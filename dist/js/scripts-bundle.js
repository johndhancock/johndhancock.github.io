!function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){return o(e[i][1][r]||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}({1:[function(require,module,exports){},{}],2:[function(require,module,exports){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.__esModule=!0;var _handlebarsRuntime2=_interopRequireDefault(require("./handlebars.runtime")),_handlebarsCompilerAst2=_interopRequireDefault(require("./handlebars/compiler/ast")),_handlebarsCompilerBase=require("./handlebars/compiler/base"),_handlebarsCompilerCompiler=require("./handlebars/compiler/compiler"),_handlebarsCompilerJavascriptCompiler2=_interopRequireDefault(require("./handlebars/compiler/javascript-compiler")),_handlebarsCompilerVisitor2=_interopRequireDefault(require("./handlebars/compiler/visitor")),_handlebarsNoConflict2=_interopRequireDefault(require("./handlebars/no-conflict")),_create=_handlebarsRuntime2.default.create;function create(){var hb=_create();return hb.compile=function(input,options){return _handlebarsCompilerCompiler.compile(input,options,hb)},hb.precompile=function(input,options){return _handlebarsCompilerCompiler.precompile(input,options,hb)},hb.AST=_handlebarsCompilerAst2.default,hb.Compiler=_handlebarsCompilerCompiler.Compiler,hb.JavaScriptCompiler=_handlebarsCompilerJavascriptCompiler2.default,hb.Parser=_handlebarsCompilerBase.parser,hb.parse=_handlebarsCompilerBase.parse,hb}var inst=create();inst.create=create,_handlebarsNoConflict2.default(inst),inst.Visitor=_handlebarsCompilerVisitor2.default,inst.default=inst,exports.default=inst,module.exports=exports.default},{"./handlebars.runtime":3,"./handlebars/compiler/ast":5,"./handlebars/compiler/base":6,"./handlebars/compiler/compiler":8,"./handlebars/compiler/javascript-compiler":10,"./handlebars/compiler/visitor":13,"./handlebars/no-conflict":27}],3:[function(require,module,exports){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj.default=obj,newObj}exports.__esModule=!0;var base=_interopRequireWildcard(require("./handlebars/base")),_handlebarsSafeString2=_interopRequireDefault(require("./handlebars/safe-string")),_handlebarsException2=_interopRequireDefault(require("./handlebars/exception")),Utils=_interopRequireWildcard(require("./handlebars/utils")),runtime=_interopRequireWildcard(require("./handlebars/runtime")),_handlebarsNoConflict2=_interopRequireDefault(require("./handlebars/no-conflict"));function create(){var hb=new base.HandlebarsEnvironment;return Utils.extend(hb,base),hb.SafeString=_handlebarsSafeString2.default,hb.Exception=_handlebarsException2.default,hb.Utils=Utils,hb.escapeExpression=Utils.escapeExpression,hb.VM=runtime,hb.template=function(spec){return runtime.template(spec,hb)},hb}var inst=create();inst.create=create,_handlebarsNoConflict2.default(inst),inst.default=inst,exports.default=inst,module.exports=exports.default},{"./handlebars/base":4,"./handlebars/exception":17,"./handlebars/no-conflict":27,"./handlebars/runtime":28,"./handlebars/safe-string":29,"./handlebars/utils":30}],4:[function(require,module,exports){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.__esModule=!0,exports.HandlebarsEnvironment=HandlebarsEnvironment;var _utils=require("./utils"),_exception2=_interopRequireDefault(require("./exception")),_helpers=require("./helpers"),_decorators=require("./decorators"),_logger2=_interopRequireDefault(require("./logger"));exports.VERSION="4.0.12";exports.COMPILER_REVISION=7;exports.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};function HandlebarsEnvironment(helpers,partials,decorators){this.helpers=helpers||{},this.partials=partials||{},this.decorators=decorators||{},_helpers.registerDefaultHelpers(this),_decorators.registerDefaultDecorators(this)}HandlebarsEnvironment.prototype={constructor:HandlebarsEnvironment,logger:_logger2.default,log:_logger2.default.log,registerHelper:function(name,fn){if("[object Object]"===_utils.toString.call(name)){if(fn)throw new _exception2.default("Arg not supported with multiple helpers");_utils.extend(this.helpers,name)}else this.helpers[name]=fn},unregisterHelper:function(name){delete this.helpers[name]},registerPartial:function(name,partial){if("[object Object]"===_utils.toString.call(name))_utils.extend(this.partials,name);else{if(void 0===partial)throw new _exception2.default('Attempting to register a partial called "'+name+'" as undefined');this.partials[name]=partial}},unregisterPartial:function(name){delete this.partials[name]},registerDecorator:function(name,fn){if("[object Object]"===_utils.toString.call(name)){if(fn)throw new _exception2.default("Arg not supported with multiple decorators");_utils.extend(this.decorators,name)}else this.decorators[name]=fn},unregisterDecorator:function(name){delete this.decorators[name]}};var log=_logger2.default.log;exports.log=log,exports.createFrame=_utils.createFrame,exports.logger=_logger2.default},{"./decorators":15,"./exception":17,"./helpers":18,"./logger":26,"./utils":30}],5:[function(require,module,exports){"use strict";exports.__esModule=!0;var AST={helpers:{helperExpression:function(node){return"SubExpression"===node.type||("MustacheStatement"===node.type||"BlockStatement"===node.type)&&!!(node.params&&node.params.length||node.hash)},scopedId:function(path){return/^\.|this\b/.test(path.original)},simpleId:function(path){return 1===path.parts.length&&!AST.helpers.scopedId(path)&&!path.depth}}};exports.default=AST,module.exports=exports.default},{}],6:[function(require,module,exports){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.__esModule=!0,exports.parse=function(input,options){return"Program"!==input.type?((_parser2.default.yy=yy).locInfo=function(locInfo){return new yy.SourceLocation(options&&options.srcName,locInfo)},new _whitespaceControl2.default(options).accept(_parser2.default.parse(input))):input};var _parser2=_interopRequireDefault(require("./parser")),_whitespaceControl2=_interopRequireDefault(require("./whitespace-control")),Helpers=function(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj.default=obj,newObj}(require("./helpers")),_utils=require("../utils");exports.parser=_parser2.default;var yy={};_utils.extend(yy,Helpers)},{"../utils":30,"./helpers":9,"./parser":11,"./whitespace-control":14}],7:[function(require,module,exports){"use strict";exports.__esModule=!0;var _utils=require("../utils"),SourceNode=void 0;try{if("function"!=typeof define||!define.amd){var SourceMap=require("source-map");SourceNode=SourceMap.SourceNode}}catch(err){}function castChunk(chunk,codeGen,loc){if(_utils.isArray(chunk)){for(var ret=[],i=0,len=chunk.length;i<len;i++)ret.push(codeGen.wrap(chunk[i],loc));return ret}return"boolean"==typeof chunk||"number"==typeof chunk?chunk+"":chunk}function CodeGen(srcFile){this.srcFile=srcFile,this.source=[]}SourceNode||((SourceNode=function(line,column,srcFile,chunks){this.src="",chunks&&this.add(chunks)}).prototype={add:function(chunks){_utils.isArray(chunks)&&(chunks=chunks.join("")),this.src+=chunks},prepend:function(chunks){_utils.isArray(chunks)&&(chunks=chunks.join("")),this.src=chunks+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}),CodeGen.prototype={isEmpty:function(){return!this.source.length},prepend:function(source,loc){this.source.unshift(this.wrap(source,loc))},push:function(source,loc){this.source.push(this.wrap(source,loc))},merge:function(){var source=this.empty();return this.each(function(line){source.add(["  ",line,"\n"])}),source},each:function(iter){for(var i=0,len=this.source.length;i<len;i++)iter(this.source[i])},empty:function(){var loc=this.currentLocation||{start:{}};return new SourceNode(loc.start.line,loc.start.column,this.srcFile)},wrap:function(chunk){var loc=arguments.length<=1||void 0===arguments[1]?this.currentLocation||{start:{}}:arguments[1];return chunk instanceof SourceNode?chunk:(chunk=castChunk(chunk,this,loc),new SourceNode(loc.start.line,loc.start.column,this.srcFile,chunk))},functionCall:function(fn,type,params){return params=this.generateList(params),this.wrap([fn,type?"."+type+"(":"(",params,")"])},quotedString:function(str){return'"'+(str+"").replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},objectLiteral:function(obj){var pairs=[];for(var key in obj)if(obj.hasOwnProperty(key)){var value=castChunk(obj[key],this);"undefined"!==value&&pairs.push([this.quotedString(key),":",value])}var ret=this.generateList(pairs);return ret.prepend("{"),ret.add("}"),ret},generateList:function(entries){for(var ret=this.empty(),i=0,len=entries.length;i<len;i++)i&&ret.add(","),ret.add(castChunk(entries[i],this));return ret},generateArray:function(entries){var ret=this.generateList(entries);return ret.prepend("["),ret.add("]"),ret}},exports.default=CodeGen,module.exports=exports.default},{"../utils":30,"source-map":42}],8:[function(require,module,exports){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.__esModule=!0,exports.Compiler=Compiler,exports.precompile=function(input,options,env){if(null==input||"string"!=typeof input&&"Program"!==input.type)throw new _exception2.default("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+input);"data"in(options=options||{})||(options.data=!0);options.compat&&(options.useDepths=!0);var ast=env.parse(input,options),environment=(new env.Compiler).compile(ast,options);return(new env.JavaScriptCompiler).compile(environment,options)},exports.compile=function(input,options,env){void 0===options&&(options={});if(null==input||"string"!=typeof input&&"Program"!==input.type)throw new _exception2.default("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+input);"data"in(options=_utils.extend({},options))||(options.data=!0);options.compat&&(options.useDepths=!0);var compiled=void 0;function compileInput(){var ast=env.parse(input,options),environment=(new env.Compiler).compile(ast,options),templateSpec=(new env.JavaScriptCompiler).compile(environment,options,void 0,!0);return env.template(templateSpec)}function ret(context,execOptions){return compiled||(compiled=compileInput()),compiled.call(this,context,execOptions)}return ret._setup=function(setupOptions){return compiled||(compiled=compileInput()),compiled._setup(setupOptions)},ret._child=function(i,data,blockParams,depths){return compiled||(compiled=compileInput()),compiled._child(i,data,blockParams,depths)},ret};var _exception2=_interopRequireDefault(require("../exception")),_utils=require("../utils"),_ast2=_interopRequireDefault(require("./ast")),slice=[].slice;function Compiler(){}function argEquals(a,b){if(a===b)return!0;if(_utils.isArray(a)&&_utils.isArray(b)&&a.length===b.length){for(var i=0;i<a.length;i++)if(!argEquals(a[i],b[i]))return!1;return!0}}function transformLiteralToPath(sexpr){if(!sexpr.path.parts){var literal=sexpr.path;sexpr.path={type:"PathExpression",data:!1,depth:0,parts:[literal.original+""],original:literal.original+"",loc:literal.loc}}}Compiler.prototype={compiler:Compiler,equals:function(other){var len=this.opcodes.length;if(other.opcodes.length!==len)return!1;for(var i=0;i<len;i++){var opcode=this.opcodes[i],otherOpcode=other.opcodes[i];if(opcode.opcode!==otherOpcode.opcode||!argEquals(opcode.args,otherOpcode.args))return!1}len=this.children.length;for(i=0;i<len;i++)if(!this.children[i].equals(other.children[i]))return!1;return!0},guid:0,compile:function(program,options){this.sourceNode=[],this.opcodes=[],this.children=[],this.options=options,this.stringParams=options.stringParams,this.trackIds=options.trackIds,options.blockParams=options.blockParams||[];var knownHelpers=options.knownHelpers;if(options.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,if:!0,unless:!0,with:!0,log:!0,lookup:!0},knownHelpers)for(var _name in knownHelpers)this.options.knownHelpers[_name]=knownHelpers[_name];return this.accept(program)},compileProgram:function(program){var result=(new this.compiler).compile(program,this.options),guid=this.guid++;return this.usePartial=this.usePartial||result.usePartial,this.children[guid]=result,this.useDepths=this.useDepths||result.useDepths,guid},accept:function(node){if(!this[node.type])throw new _exception2.default("Unknown type: "+node.type,node);this.sourceNode.unshift(node);var ret=this[node.type](node);return this.sourceNode.shift(),ret},Program:function(program){this.options.blockParams.unshift(program.blockParams);for(var body=program.body,bodyLength=body.length,i=0;i<bodyLength;i++)this.accept(body[i]);return this.options.blockParams.shift(),this.isSimple=1===bodyLength,this.blockParams=program.blockParams?program.blockParams.length:0,this},BlockStatement:function(block){transformLiteralToPath(block);var program=block.program,inverse=block.inverse;program=program&&this.compileProgram(program),inverse=inverse&&this.compileProgram(inverse);var type=this.classifySexpr(block);"helper"===type?this.helperSexpr(block,program,inverse):"simple"===type?(this.simpleSexpr(block),this.opcode("pushProgram",program),this.opcode("pushProgram",inverse),this.opcode("emptyHash"),this.opcode("blockValue",block.path.original)):(this.ambiguousSexpr(block,program,inverse),this.opcode("pushProgram",program),this.opcode("pushProgram",inverse),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},DecoratorBlock:function(decorator){var program=decorator.program&&this.compileProgram(decorator.program),params=this.setupFullMustacheParams(decorator,program,void 0),path=decorator.path;this.useDecorators=!0,this.opcode("registerDecorator",params.length,path.original)},PartialStatement:function(partial){this.usePartial=!0;var program=partial.program;program&&(program=this.compileProgram(partial.program));var params=partial.params;if(1<params.length)throw new _exception2.default("Unsupported number of partial arguments: "+params.length,partial);params.length||(this.options.explicitPartialContext?this.opcode("pushLiteral","undefined"):params.push({type:"PathExpression",parts:[],depth:0}));var partialName=partial.name.original,isDynamic="SubExpression"===partial.name.type;isDynamic&&this.accept(partial.name),this.setupFullMustacheParams(partial,program,void 0,!0);var indent=partial.indent||"";this.options.preventIndent&&indent&&(this.opcode("appendContent",indent),indent=""),this.opcode("invokePartial",isDynamic,partialName,indent),this.opcode("append")},PartialBlockStatement:function(partialBlock){this.PartialStatement(partialBlock)},MustacheStatement:function(mustache){this.SubExpression(mustache),mustache.escaped&&!this.options.noEscape?this.opcode("appendEscaped"):this.opcode("append")},Decorator:function(decorator){this.DecoratorBlock(decorator)},ContentStatement:function(content){content.value&&this.opcode("appendContent",content.value)},CommentStatement:function(){},SubExpression:function(sexpr){transformLiteralToPath(sexpr);var type=this.classifySexpr(sexpr);"simple"===type?this.simpleSexpr(sexpr):"helper"===type?this.helperSexpr(sexpr):this.ambiguousSexpr(sexpr)},ambiguousSexpr:function(sexpr,program,inverse){var path=sexpr.path,name=path.parts[0],isBlock=null!=program||null!=inverse;this.opcode("getContext",path.depth),this.opcode("pushProgram",program),this.opcode("pushProgram",inverse),path.strict=!0,this.accept(path),this.opcode("invokeAmbiguous",name,isBlock)},simpleSexpr:function(sexpr){var path=sexpr.path;path.strict=!0,this.accept(path),this.opcode("resolvePossibleLambda")},helperSexpr:function(sexpr,program,inverse){var params=this.setupFullMustacheParams(sexpr,program,inverse),path=sexpr.path,name=path.parts[0];if(this.options.knownHelpers[name])this.opcode("invokeKnownHelper",params.length,name);else{if(this.options.knownHelpersOnly)throw new _exception2.default("You specified knownHelpersOnly, but used the unknown helper "+name,sexpr);path.strict=!0,path.falsy=!0,this.accept(path),this.opcode("invokeHelper",params.length,path.original,_ast2.default.helpers.simpleId(path))}},PathExpression:function(path){this.addDepth(path.depth),this.opcode("getContext",path.depth);var name=path.parts[0],scoped=_ast2.default.helpers.scopedId(path),blockParamId=!path.depth&&!scoped&&this.blockParamIndex(name);blockParamId?this.opcode("lookupBlockParam",blockParamId,path.parts):name?path.data?(this.options.data=!0,this.opcode("lookupData",path.depth,path.parts,path.strict)):this.opcode("lookupOnContext",path.parts,path.falsy,path.strict,scoped):this.opcode("pushContext")},StringLiteral:function(string){this.opcode("pushString",string.value)},NumberLiteral:function(number){this.opcode("pushLiteral",number.value)},BooleanLiteral:function(bool){this.opcode("pushLiteral",bool.value)},UndefinedLiteral:function(){this.opcode("pushLiteral","undefined")},NullLiteral:function(){this.opcode("pushLiteral","null")},Hash:function(hash){var pairs=hash.pairs,i=0,l=pairs.length;for(this.opcode("pushHash");i<l;i++)this.pushParam(pairs[i].value);for(;i--;)this.opcode("assignToHash",pairs[i].key);this.opcode("popHash")},opcode:function(name){this.opcodes.push({opcode:name,args:slice.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(depth){depth&&(this.useDepths=!0)},classifySexpr:function(sexpr){var isSimple=_ast2.default.helpers.simpleId(sexpr.path),isBlockParam=isSimple&&!!this.blockParamIndex(sexpr.path.parts[0]),isHelper=!isBlockParam&&_ast2.default.helpers.helperExpression(sexpr),isEligible=!isBlockParam&&(isHelper||isSimple);if(isEligible&&!isHelper){var _name2=sexpr.path.parts[0],options=this.options;options.knownHelpers[_name2]?isHelper=!0:options.knownHelpersOnly&&(isEligible=!1)}return isHelper?"helper":isEligible?"ambiguous":"simple"},pushParams:function(params){for(var i=0,l=params.length;i<l;i++)this.pushParam(params[i])},pushParam:function(val){var value=null!=val.value?val.value:val.original||"";if(this.stringParams)value.replace&&(value=value.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),val.depth&&this.addDepth(val.depth),this.opcode("getContext",val.depth||0),this.opcode("pushStringParam",value,val.type),"SubExpression"===val.type&&this.accept(val);else{if(this.trackIds){var blockParamIndex=void 0;if(!val.parts||_ast2.default.helpers.scopedId(val)||val.depth||(blockParamIndex=this.blockParamIndex(val.parts[0])),blockParamIndex){var blockParamChild=val.parts.slice(1).join(".");this.opcode("pushId","BlockParam",blockParamIndex,blockParamChild)}else(value=val.original||value).replace&&(value=value.replace(/^this(?:\.|$)/,"").replace(/^\.\//,"").replace(/^\.$/,"")),this.opcode("pushId",val.type,value)}this.accept(val)}},setupFullMustacheParams:function(sexpr,program,inverse,omitEmpty){var params=sexpr.params;return this.pushParams(params),this.opcode("pushProgram",program),this.opcode("pushProgram",inverse),sexpr.hash?this.accept(sexpr.hash):this.opcode("emptyHash",omitEmpty),params},blockParamIndex:function(name){for(var depth=0,len=this.options.blockParams.length;depth<len;depth++){var blockParams=this.options.blockParams[depth],param=blockParams&&_utils.indexOf(blockParams,name);if(blockParams&&0<=param)return[depth,param]}}}},{"../exception":17,"../utils":30,"./ast":5}],9:[function(require,module,exports){"use strict";exports.__esModule=!0,exports.SourceLocation=function(source,locInfo){this.source=source,this.start={line:locInfo.first_line,column:locInfo.first_column},this.end={line:locInfo.last_line,column:locInfo.last_column}},exports.id=function(token){return/^\[.*\]$/.test(token)?token.substr(1,token.length-2):token},exports.stripFlags=function(open,close){return{open:"~"===open.charAt(2),close:"~"===close.charAt(close.length-3)}},exports.stripComment=function(comment){return comment.replace(/^\{\{~?!-?-?/,"").replace(/-?-?~?\}\}$/,"")},exports.preparePath=function(data,parts,loc){loc=this.locInfo(loc);for(var original=data?"@":"",dig=[],depth=0,i=0,l=parts.length;i<l;i++){var part=parts[i].part,isLiteral=parts[i].original!==part;if(original+=(parts[i].separator||"")+part,isLiteral||".."!==part&&"."!==part&&"this"!==part)dig.push(part);else{if(0<dig.length)throw new _exception2.default("Invalid path: "+original,{loc:loc});".."===part&&depth++}}return{type:"PathExpression",data:data,depth:depth,parts:dig,original:original,loc:loc}},exports.prepareMustache=function(path,params,hash,open,strip,locInfo){var escapeFlag=open.charAt(3)||open.charAt(2),escaped="{"!==escapeFlag&&"&"!==escapeFlag;return{type:/\*/.test(open)?"Decorator":"MustacheStatement",path:path,params:params,hash:hash,escaped:escaped,strip:strip,loc:this.locInfo(locInfo)}},exports.prepareRawBlock=function(openRawBlock,contents,close,locInfo){validateClose(openRawBlock,close),locInfo=this.locInfo(locInfo);var program={type:"Program",body:contents,strip:{},loc:locInfo};return{type:"BlockStatement",path:openRawBlock.path,params:openRawBlock.params,hash:openRawBlock.hash,program:program,openStrip:{},inverseStrip:{},closeStrip:{},loc:locInfo}},exports.prepareBlock=function(openBlock,program,inverseAndProgram,close,inverted,locInfo){close&&close.path&&validateClose(openBlock,close);var decorator=/\*/.test(openBlock.open);program.blockParams=openBlock.blockParams;var inverse=void 0,inverseStrip=void 0;if(inverseAndProgram){if(decorator)throw new _exception2.default("Unexpected inverse block on decorator",inverseAndProgram);inverseAndProgram.chain&&(inverseAndProgram.program.body[0].closeStrip=close.strip),inverseStrip=inverseAndProgram.strip,inverse=inverseAndProgram.program}inverted&&(inverted=inverse,inverse=program,program=inverted);return{type:decorator?"DecoratorBlock":"BlockStatement",path:openBlock.path,params:openBlock.params,hash:openBlock.hash,program:program,inverse:inverse,openStrip:openBlock.strip,inverseStrip:inverseStrip,closeStrip:close&&close.strip,loc:this.locInfo(locInfo)}},exports.prepareProgram=function(statements,loc){if(!loc&&statements.length){var firstLoc=statements[0].loc,lastLoc=statements[statements.length-1].loc;firstLoc&&lastLoc&&(loc={source:firstLoc.source,start:{line:firstLoc.start.line,column:firstLoc.start.column},end:{line:lastLoc.end.line,column:lastLoc.end.column}})}return{type:"Program",body:statements,strip:{},loc:loc}},exports.preparePartialBlock=function(open,program,close,locInfo){return validateClose(open,close),{type:"PartialBlockStatement",name:open.path,params:open.params,hash:open.hash,program:program,openStrip:open.strip,closeStrip:close&&close.strip,loc:this.locInfo(locInfo)}};var obj,_exception=require("../exception"),_exception2=(obj=_exception)&&obj.__esModule?obj:{default:obj};function validateClose(open,close){if(close=close.path?close.path.original:close,open.path.original!==close){var errorNode={loc:open.path.loc};throw new _exception2.default(open.path.original+" doesn't match "+close,errorNode)}}},{"../exception":17}],10:[function(require,module,exports){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.__esModule=!0;var _base=require("../base"),_exception2=_interopRequireDefault(require("../exception")),_utils=require("../utils"),_codeGen2=_interopRequireDefault(require("./code-gen"));function Literal(value){this.value=value}function JavaScriptCompiler(){}JavaScriptCompiler.prototype={nameLookup:function(parent,name){return JavaScriptCompiler.isValidJavaScriptVariableName(name)?[parent,".",name]:[parent,"[",JSON.stringify(name),"]"]},depthedLookup:function(name){return[this.aliasable("container.lookup"),'(depths, "',name,'")']},compilerInfo:function(){var revision=_base.COMPILER_REVISION;return[revision,_base.REVISION_CHANGES[revision]]},appendToBuffer:function(source,location,explicit){return _utils.isArray(source)||(source=[source]),source=this.source.wrap(source,location),this.environment.isSimple?["return ",source,";"]:explicit?["buffer += ",source,";"]:(source.appendToBuffer=!0,source)},initializeBuffer:function(){return this.quotedString("")},compile:function(environment,options,context,asObject){this.environment=environment,this.options=options,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!asObject,this.name=this.environment.name,this.isChild=!!context,this.context=context||{decorators:[],programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(environment,options),this.useDepths=this.useDepths||environment.useDepths||environment.useDecorators||this.options.compat,this.useBlockParams=this.useBlockParams||environment.useBlockParams;var opcodes=environment.opcodes,opcode=void 0,firstLoc=void 0,i=void 0,l=void 0;for(i=0,l=opcodes.length;i<l;i++)opcode=opcodes[i],this.source.currentLocation=opcode.loc,firstLoc=firstLoc||opcode.loc,this[opcode.opcode].apply(this,opcode.args);if(this.source.currentLocation=firstLoc,this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new _exception2.default("Compile completed with content left on stack");this.decorators.isEmpty()?this.decorators=void 0:(this.useDecorators=!0,this.decorators.prepend("var decorators = container.decorators;\n"),this.decorators.push("return fn;"),this.decorators=asObject?Function.apply(this,["fn","props","container","depth0","data","blockParams","depths",this.decorators.merge()]):(this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n"),this.decorators.push("}\n"),this.decorators.merge()));var fn=this.createFunctionContext(asObject);if(this.isChild)return fn;var ret={compiler:this.compilerInfo(),main:fn};this.decorators&&(ret.main_d=this.decorators,ret.useDecorators=!0);var _context=this.context,programs=_context.programs,decorators=_context.decorators;for(i=0,l=programs.length;i<l;i++)programs[i]&&(ret[i]=programs[i],decorators[i]&&(ret[i+"_d"]=decorators[i],ret.useDecorators=!0));return this.environment.usePartial&&(ret.usePartial=!0),this.options.data&&(ret.useData=!0),this.useDepths&&(ret.useDepths=!0),this.useBlockParams&&(ret.useBlockParams=!0),this.options.compat&&(ret.compat=!0),asObject?ret.compilerOptions=this.options:(ret.compiler=JSON.stringify(ret.compiler),this.source.currentLocation={start:{line:1,column:0}},ret=this.objectLiteral(ret),options.srcName?(ret=ret.toStringWithSourceMap({file:options.destName})).map=ret.map&&ret.map.toString():ret=ret.toString()),ret},preamble:function(){this.lastContext=0,this.source=new _codeGen2.default(this.options.srcName),this.decorators=new _codeGen2.default(this.options.srcName)},createFunctionContext:function(asObject){var varDeclarations="",locals=this.stackVars.concat(this.registers.list);0<locals.length&&(varDeclarations+=", "+locals.join(", "));var aliasCount=0;for(var alias in this.aliases){var node=this.aliases[alias];this.aliases.hasOwnProperty(alias)&&node.children&&1<node.referenceCount&&(varDeclarations+=", alias"+ ++aliasCount+"="+alias,node.children[0]="alias"+aliasCount)}var params=["container","depth0","helpers","partials","data"];(this.useBlockParams||this.useDepths)&&params.push("blockParams"),this.useDepths&&params.push("depths");var source=this.mergeSource(varDeclarations);return asObject?(params.push(source),Function.apply(this,params)):this.source.wrap(["function(",params.join(","),") {\n  ",source,"}"])},mergeSource:function(varDeclarations){var isSimple=this.environment.isSimple,appendOnly=!this.forceBuffer,appendFirst=void 0,sourceSeen=void 0,bufferStart=void 0,bufferEnd=void 0;return this.source.each(function(line){line.appendToBuffer?(bufferStart?line.prepend("  + "):bufferStart=line,bufferEnd=line):(bufferStart&&(sourceSeen?bufferStart.prepend("buffer += "):appendFirst=!0,bufferEnd.add(";"),bufferStart=bufferEnd=void 0),sourceSeen=!0,isSimple||(appendOnly=!1))}),appendOnly?bufferStart?(bufferStart.prepend("return "),bufferEnd.add(";")):sourceSeen||this.source.push('return "";'):(varDeclarations+=", buffer = "+(appendFirst?"":this.initializeBuffer()),bufferStart?(bufferStart.prepend("return buffer + "),bufferEnd.add(";")):this.source.push("return buffer;")),varDeclarations&&this.source.prepend("var "+varDeclarations.substring(2)+(appendFirst?"":";\n")),this.source.merge()},blockValue:function(name){var blockHelperMissing=this.aliasable("helpers.blockHelperMissing"),params=[this.contextName(0)];this.setupHelperArgs(name,0,params);var blockName=this.popStack();params.splice(1,0,blockName),this.push(this.source.functionCall(blockHelperMissing,"call",params))},ambiguousBlockValue:function(){var blockHelperMissing=this.aliasable("helpers.blockHelperMissing"),params=[this.contextName(0)];this.setupHelperArgs("",0,params,!0),this.flushInline();var current=this.topStack();params.splice(1,0,current),this.pushSource(["if (!",this.lastHelper,") { ",current," = ",this.source.functionCall(blockHelperMissing,"call",params),"}"])},appendContent:function(content){this.pendingContent?content=this.pendingContent+content:this.pendingLocation=this.source.currentLocation,this.pendingContent=content},append:function(){if(this.isInline())this.replaceStack(function(current){return[" != null ? ",current,' : ""']}),this.pushSource(this.appendToBuffer(this.popStack()));else{var local=this.popStack();this.pushSource(["if (",local," != null) { ",this.appendToBuffer(local,void 0,!0)," }"]),this.environment.isSimple&&this.pushSource(["else { ",this.appendToBuffer("''",void 0,!0)," }"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"),"(",this.popStack(),")"]))},getContext:function(depth){this.lastContext=depth},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(parts,falsy,strict,scoped){var i=0;scoped||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(parts[i++])),this.resolvePath("context",parts,i,falsy,strict)},lookupBlockParam:function(blockParamId,parts){this.useBlockParams=!0,this.push(["blockParams[",blockParamId[0],"][",blockParamId[1],"]"]),this.resolvePath("context",parts,1)},lookupData:function(depth,parts,strict){depth?this.pushStackLiteral("container.data(data, "+depth+")"):this.pushStackLiteral("data"),this.resolvePath("data",parts,0,!0,strict)},resolvePath:function(type,parts,i,falsy,strict){var _this=this;if(this.options.strict||this.options.assumeObjects)this.push(function(requireTerminal,compiler,parts,type){var stack=compiler.popStack(),i=0,len=parts.length;requireTerminal&&len--;for(;i<len;i++)stack=compiler.nameLookup(stack,parts[i],type);return requireTerminal?[compiler.aliasable("container.strict"),"(",stack,", ",compiler.quotedString(parts[i]),")"]:stack}(this.options.strict&&strict,this,parts,type));else for(var len=parts.length;i<len;i++)this.replaceStack(function(current){var lookup=_this.nameLookup(current,parts[i],type);return falsy?[" && ",lookup]:[" != null ? ",lookup," : ",current]})},resolvePossibleLambda:function(){this.push([this.aliasable("container.lambda"),"(",this.popStack(),", ",this.contextName(0),")"])},pushStringParam:function(string,type){this.pushContext(),this.pushString(type),"SubExpression"!==type&&("string"==typeof string?this.pushString(string):this.pushStackLiteral(string))},emptyHash:function(omitEmpty){this.trackIds&&this.push("{}"),this.stringParams&&(this.push("{}"),this.push("{}")),this.pushStackLiteral(omitEmpty?"undefined":"{}")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:[],types:[],contexts:[],ids:[]}},popHash:function(){var hash=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(hash.ids)),this.stringParams&&(this.push(this.objectLiteral(hash.contexts)),this.push(this.objectLiteral(hash.types))),this.push(this.objectLiteral(hash.values))},pushString:function(string){this.pushStackLiteral(this.quotedString(string))},pushLiteral:function(value){this.pushStackLiteral(value)},pushProgram:function(guid){null!=guid?this.pushStackLiteral(this.programExpression(guid)):this.pushStackLiteral(null)},registerDecorator:function(paramSize,name){var foundDecorator=this.nameLookup("decorators",name,"decorator"),options=this.setupHelperArgs(name,paramSize);this.decorators.push(["fn = ",this.decorators.functionCall(foundDecorator,"",["fn","props","container",options])," || fn;"])},invokeHelper:function(paramSize,name,isSimple){var nonHelper=this.popStack(),helper=this.setupHelper(paramSize,name),simple=isSimple?[helper.name," || "]:"",lookup=["("].concat(simple,nonHelper);this.options.strict||lookup.push(" || ",this.aliasable("helpers.helperMissing")),lookup.push(")"),this.push(this.source.functionCall(lookup,"call",helper.callParams))},invokeKnownHelper:function(paramSize,name){var helper=this.setupHelper(paramSize,name);this.push(this.source.functionCall(helper.name,"call",helper.callParams))},invokeAmbiguous:function(name,helperCall){this.useRegister("helper");var nonHelper=this.popStack();this.emptyHash();var helper=this.setupHelper(0,name,helperCall),lookup=["(","(helper = ",this.lastHelper=this.nameLookup("helpers",name,"helper")," || ",nonHelper,")"];this.options.strict||(lookup[0]="(helper = ",lookup.push(" != null ? helper : ",this.aliasable("helpers.helperMissing"))),this.push(["(",lookup,helper.paramsInit?["),(",helper.paramsInit]:[],"),","(typeof helper === ",this.aliasable('"function"')," ? ",this.source.functionCall("helper","call",helper.callParams)," : helper))"])},invokePartial:function(isDynamic,name,indent){var params=[],options=this.setupParams(name,1,params);isDynamic&&(name=this.popStack(),delete options.name),indent&&(options.indent=JSON.stringify(indent)),options.helpers="helpers",options.partials="partials",options.decorators="container.decorators",isDynamic?params.unshift(name):params.unshift(this.nameLookup("partials",name,"partial")),this.options.compat&&(options.depths="depths"),options=this.objectLiteral(options),params.push(options),this.push(this.source.functionCall("container.invokePartial","",params))},assignToHash:function(key){var value=this.popStack(),context=void 0,type=void 0,id=void 0;this.trackIds&&(id=this.popStack()),this.stringParams&&(type=this.popStack(),context=this.popStack());var hash=this.hash;context&&(hash.contexts[key]=context),type&&(hash.types[key]=type),id&&(hash.ids[key]=id),hash.values[key]=value},pushId:function(type,name,child){"BlockParam"===type?this.pushStackLiteral("blockParams["+name[0]+"].path["+name[1]+"]"+(child?" + "+JSON.stringify("."+child):"")):"PathExpression"===type?this.pushString(name):"SubExpression"===type?this.pushStackLiteral("true"):this.pushStackLiteral("null")},compiler:JavaScriptCompiler,compileChildren:function(environment,options){for(var children=environment.children,child=void 0,compiler=void 0,i=0,l=children.length;i<l;i++){child=children[i],compiler=new this.compiler;var existing=this.matchExistingProgram(child);if(null==existing){this.context.programs.push("");var index=this.context.programs.length;child.index=index,child.name="program"+index,this.context.programs[index]=compiler.compile(child,options,this.context,!this.precompile),this.context.decorators[index]=compiler.decorators,this.context.environments[index]=child,this.useDepths=this.useDepths||compiler.useDepths,this.useBlockParams=this.useBlockParams||compiler.useBlockParams,child.useDepths=this.useDepths,child.useBlockParams=this.useBlockParams}else child.index=existing.index,child.name="program"+existing.index,this.useDepths=this.useDepths||existing.useDepths,this.useBlockParams=this.useBlockParams||existing.useBlockParams}},matchExistingProgram:function(child){for(var i=0,len=this.context.environments.length;i<len;i++){var environment=this.context.environments[i];if(environment&&environment.equals(child))return environment}},programExpression:function(guid){var child=this.environment.children[guid],programParams=[child.index,"data",child.blockParams];return(this.useBlockParams||this.useDepths)&&programParams.push("blockParams"),this.useDepths&&programParams.push("depths"),"container.program("+programParams.join(", ")+")"},useRegister:function(name){this.registers[name]||(this.registers[name]=!0,this.registers.list.push(name))},push:function(expr){return expr instanceof Literal||(expr=this.source.wrap(expr)),this.inlineStack.push(expr),expr},pushStackLiteral:function(item){this.push(new Literal(item))},pushSource:function(source){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),source&&this.source.push(source)},replaceStack:function(callback){var prefix=["("],stack=void 0,createdStack=void 0,usedLiteral=void 0;if(!this.isInline())throw new _exception2.default("replaceStack on non-inline");var top=this.popStack(!0);if(top instanceof Literal)prefix=["(",stack=[top.value]],usedLiteral=!0;else{createdStack=!0;var _name=this.incrStack();prefix=["((",this.push(_name)," = ",top,")"],stack=this.topStack()}var item=callback.call(this,stack);usedLiteral||this.popStack(),createdStack&&this.stackSlot--,this.push(prefix.concat(item,")"))},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function(){return"stack"+this.stackSlot},flushInline:function(){var inlineStack=this.inlineStack;this.inlineStack=[];for(var i=0,len=inlineStack.length;i<len;i++){var entry=inlineStack[i];if(entry instanceof Literal)this.compileStack.push(entry);else{var stack=this.incrStack();this.pushSource([stack," = ",entry,";"]),this.compileStack.push(stack)}}},isInline:function(){return this.inlineStack.length},popStack:function(wrapped){var inline=this.isInline(),item=(inline?this.inlineStack:this.compileStack).pop();if(!wrapped&&item instanceof Literal)return item.value;if(!inline){if(!this.stackSlot)throw new _exception2.default("Invalid stack pop");this.stackSlot--}return item},topStack:function(){var stack=this.isInline()?this.inlineStack:this.compileStack,item=stack[stack.length-1];return item instanceof Literal?item.value:item},contextName:function(context){return this.useDepths&&context?"depths["+context+"]":"depth"+context},quotedString:function(str){return this.source.quotedString(str)},objectLiteral:function(obj){return this.source.objectLiteral(obj)},aliasable:function(name){var ret=this.aliases[name];return ret?ret.referenceCount++:((ret=this.aliases[name]=this.source.wrap(name)).aliasable=!0,ret.referenceCount=1),ret},setupHelper:function(paramSize,name,blockHelper){var params=[];return{params:params,paramsInit:this.setupHelperArgs(name,paramSize,params,blockHelper),name:this.nameLookup("helpers",name,"helper"),callParams:[this.aliasable(this.contextName(0)+" != null ? "+this.contextName(0)+" : (container.nullContext || {})")].concat(params)}},setupParams:function(helper,paramSize,params){var options={},contexts=[],types=[],ids=[],objectArgs=!params,param=void 0;objectArgs&&(params=[]),options.name=this.quotedString(helper),options.hash=this.popStack(),this.trackIds&&(options.hashIds=this.popStack()),this.stringParams&&(options.hashTypes=this.popStack(),options.hashContexts=this.popStack());var inverse=this.popStack(),program=this.popStack();(program||inverse)&&(options.fn=program||"container.noop",options.inverse=inverse||"container.noop");for(var i=paramSize;i--;)param=this.popStack(),params[i]=param,this.trackIds&&(ids[i]=this.popStack()),this.stringParams&&(types[i]=this.popStack(),contexts[i]=this.popStack());return objectArgs&&(options.args=this.source.generateArray(params)),this.trackIds&&(options.ids=this.source.generateArray(ids)),this.stringParams&&(options.types=this.source.generateArray(types),options.contexts=this.source.generateArray(contexts)),this.options.data&&(options.data="data"),this.useBlockParams&&(options.blockParams="blockParams"),options},setupHelperArgs:function(helper,paramSize,params,useRegister){var options=this.setupParams(helper,paramSize,params);return options=this.objectLiteral(options),useRegister?(this.useRegister("options"),params.push("options"),["options=",options]):params?(params.push(options),""):options}},function(){for(var reservedWords="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "),compilerWords=JavaScriptCompiler.RESERVED_WORDS={},i=0,l=reservedWords.length;i<l;i++)compilerWords[reservedWords[i]]=!0}(),JavaScriptCompiler.isValidJavaScriptVariableName=function(name){return!JavaScriptCompiler.RESERVED_WORDS[name]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name)},exports.default=JavaScriptCompiler,module.exports=exports.default},{"../base":4,"../exception":17,"../utils":30,"./code-gen":7}],11:[function(require,module,exports){"use strict";exports.__esModule=!0;var handlebars=function(){var parser={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,partialBlock:12,content:13,COMMENT:14,CONTENT:15,openRawBlock:16,rawBlock_repetition_plus0:17,END_RAW_BLOCK:18,OPEN_RAW_BLOCK:19,helperName:20,openRawBlock_repetition0:21,openRawBlock_option0:22,CLOSE_RAW_BLOCK:23,openBlock:24,block_option0:25,closeBlock:26,openInverse:27,block_option1:28,OPEN_BLOCK:29,openBlock_repetition0:30,openBlock_option0:31,openBlock_option1:32,CLOSE:33,OPEN_INVERSE:34,openInverse_repetition0:35,openInverse_option0:36,openInverse_option1:37,openInverseChain:38,OPEN_INVERSE_CHAIN:39,openInverseChain_repetition0:40,openInverseChain_option0:41,openInverseChain_option1:42,inverseAndProgram:43,INVERSE:44,inverseChain:45,inverseChain_option0:46,OPEN_ENDBLOCK:47,OPEN:48,mustache_repetition0:49,mustache_option0:50,OPEN_UNESCAPED:51,mustache_repetition1:52,mustache_option1:53,CLOSE_UNESCAPED:54,OPEN_PARTIAL:55,partialName:56,partial_repetition0:57,partial_option0:58,openPartialBlock:59,OPEN_PARTIAL_BLOCK:60,openPartialBlock_repetition0:61,openPartialBlock_option0:62,param:63,sexpr:64,OPEN_SEXPR:65,sexpr_repetition0:66,sexpr_option0:67,CLOSE_SEXPR:68,hash:69,hash_repetition_plus0:70,hashSegment:71,ID:72,EQUALS:73,blockParams:74,OPEN_BLOCK_PARAMS:75,blockParams_repetition_plus0:76,CLOSE_BLOCK_PARAMS:77,path:78,dataName:79,STRING:80,NUMBER:81,BOOLEAN:82,UNDEFINED:83,NULL:84,DATA:85,pathSegments:86,SEP:87,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"COMMENT",15:"CONTENT",18:"END_RAW_BLOCK",19:"OPEN_RAW_BLOCK",23:"CLOSE_RAW_BLOCK",29:"OPEN_BLOCK",33:"CLOSE",34:"OPEN_INVERSE",39:"OPEN_INVERSE_CHAIN",44:"INVERSE",47:"OPEN_ENDBLOCK",48:"OPEN",51:"OPEN_UNESCAPED",54:"CLOSE_UNESCAPED",55:"OPEN_PARTIAL",60:"OPEN_PARTIAL_BLOCK",65:"OPEN_SEXPR",68:"CLOSE_SEXPR",72:"ID",73:"EQUALS",75:"OPEN_BLOCK_PARAMS",77:"CLOSE_BLOCK_PARAMS",80:"STRING",81:"NUMBER",82:"BOOLEAN",83:"UNDEFINED",84:"NULL",85:"DATA",87:"SEP"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,1],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],performAction:function(yytext,yyleng,yylineno,yy,yystate,$$,_$){var $0=$$.length-1;switch(yystate){case 1:return $$[$0-1];case 2:this.$=yy.prepareProgram($$[$0]);break;case 3:case 4:case 5:case 6:case 7:case 8:this.$=$$[$0];break;case 9:this.$={type:"CommentStatement",value:yy.stripComment($$[$0]),strip:yy.stripFlags($$[$0],$$[$0]),loc:yy.locInfo(this._$)};break;case 10:this.$={type:"ContentStatement",original:$$[$0],value:$$[$0],loc:yy.locInfo(this._$)};break;case 11:this.$=yy.prepareRawBlock($$[$0-2],$$[$0-1],$$[$0],this._$);break;case 12:this.$={path:$$[$0-3],params:$$[$0-2],hash:$$[$0-1]};break;case 13:this.$=yy.prepareBlock($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],!1,this._$);break;case 14:this.$=yy.prepareBlock($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],!0,this._$);break;case 15:this.$={open:$$[$0-5],path:$$[$0-4],params:$$[$0-3],hash:$$[$0-2],blockParams:$$[$0-1],strip:yy.stripFlags($$[$0-5],$$[$0])};break;case 16:case 17:this.$={path:$$[$0-4],params:$$[$0-3],hash:$$[$0-2],blockParams:$$[$0-1],strip:yy.stripFlags($$[$0-5],$$[$0])};break;case 18:this.$={strip:yy.stripFlags($$[$0-1],$$[$0-1]),program:$$[$0]};break;case 19:var inverse=yy.prepareBlock($$[$0-2],$$[$0-1],$$[$0],$$[$0],!1,this._$),program=yy.prepareProgram([inverse],$$[$0-1].loc);program.chained=!0,this.$={strip:$$[$0-2].strip,program:program,chain:!0};break;case 20:this.$=$$[$0];break;case 21:this.$={path:$$[$0-1],strip:yy.stripFlags($$[$0-2],$$[$0])};break;case 22:case 23:this.$=yy.prepareMustache($$[$0-3],$$[$0-2],$$[$0-1],$$[$0-4],yy.stripFlags($$[$0-4],$$[$0]),this._$);break;case 24:this.$={type:"PartialStatement",name:$$[$0-3],params:$$[$0-2],hash:$$[$0-1],indent:"",strip:yy.stripFlags($$[$0-4],$$[$0]),loc:yy.locInfo(this._$)};break;case 25:this.$=yy.preparePartialBlock($$[$0-2],$$[$0-1],$$[$0],this._$);break;case 26:this.$={path:$$[$0-3],params:$$[$0-2],hash:$$[$0-1],strip:yy.stripFlags($$[$0-4],$$[$0])};break;case 27:case 28:this.$=$$[$0];break;case 29:this.$={type:"SubExpression",path:$$[$0-3],params:$$[$0-2],hash:$$[$0-1],loc:yy.locInfo(this._$)};break;case 30:this.$={type:"Hash",pairs:$$[$0],loc:yy.locInfo(this._$)};break;case 31:this.$={type:"HashPair",key:yy.id($$[$0-2]),value:$$[$0],loc:yy.locInfo(this._$)};break;case 32:this.$=yy.id($$[$0-1]);break;case 33:case 34:this.$=$$[$0];break;case 35:this.$={type:"StringLiteral",value:$$[$0],original:$$[$0],loc:yy.locInfo(this._$)};break;case 36:this.$={type:"NumberLiteral",value:Number($$[$0]),original:Number($$[$0]),loc:yy.locInfo(this._$)};break;case 37:this.$={type:"BooleanLiteral",value:"true"===$$[$0],original:"true"===$$[$0],loc:yy.locInfo(this._$)};break;case 38:this.$={type:"UndefinedLiteral",original:void 0,value:void 0,loc:yy.locInfo(this._$)};break;case 39:this.$={type:"NullLiteral",original:null,value:null,loc:yy.locInfo(this._$)};break;case 40:case 41:this.$=$$[$0];break;case 42:this.$=yy.preparePath(!0,$$[$0],this._$);break;case 43:this.$=yy.preparePath(!1,$$[$0],this._$);break;case 44:$$[$0-2].push({part:yy.id($$[$0]),original:$$[$0],separator:$$[$0-1]}),this.$=$$[$0-2];break;case 45:this.$=[{part:yy.id($$[$0]),original:$$[$0]}];break;case 46:this.$=[];break;case 47:$$[$0-1].push($$[$0]);break;case 48:this.$=[$$[$0]];break;case 49:$$[$0-1].push($$[$0]);break;case 50:this.$=[];break;case 51:$$[$0-1].push($$[$0]);break;case 58:this.$=[];break;case 59:$$[$0-1].push($$[$0]);break;case 64:this.$=[];break;case 65:$$[$0-1].push($$[$0]);break;case 70:this.$=[];break;case 71:$$[$0-1].push($$[$0]);break;case 78:this.$=[];break;case 79:$$[$0-1].push($$[$0]);break;case 82:this.$=[];break;case 83:$$[$0-1].push($$[$0]);break;case 86:this.$=[];break;case 87:$$[$0-1].push($$[$0]);break;case 90:this.$=[];break;case 91:$$[$0-1].push($$[$0]);break;case 94:this.$=[];break;case 95:$$[$0-1].push($$[$0]);break;case 98:this.$=[$$[$0]];break;case 99:$$[$0-1].push($$[$0]);break;case 100:this.$=[$$[$0]];break;case 101:$$[$0-1].push($$[$0])}},table:[{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{13:40,15:[1,20],17:39},{20:42,56:41,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:45,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:48,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:42,56:49,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:50,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,51]},{72:[1,35],86:52},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:53,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:54,38:56,39:[1,58],43:57,44:[1,59],45:55,47:[2,54]},{28:60,43:61,44:[1,59],47:[2,56]},{13:63,15:[1,20],18:[1,62]},{15:[2,48],18:[2,48]},{33:[2,86],57:64,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:65,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:66,47:[1,67]},{30:68,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:69,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:70,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:71,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:75,33:[2,80],50:72,63:73,64:76,65:[1,44],69:74,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,80]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,51]},{20:75,53:81,54:[2,84],63:82,64:76,65:[1,44],69:83,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:84,47:[1,67]},{47:[2,55]},{4:85,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:86,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:87,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:88,47:[1,67]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:75,33:[2,88],58:89,63:90,64:76,65:[1,44],69:91,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:92,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:93,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,31:94,33:[2,60],63:95,64:76,65:[1,44],69:96,70:77,71:78,72:[1,79],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,66],36:97,63:98,64:76,65:[1,44],69:99,70:77,71:78,72:[1,79],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,22:100,23:[2,52],63:101,64:76,65:[1,44],69:102,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,92],62:103,63:104,64:76,65:[1,44],69:105,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,106]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:107,72:[1,108],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,109],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,110]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:56,39:[1,58],43:57,44:[1,59],45:112,46:111,47:[2,76]},{33:[2,70],40:113,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,114]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:75,63:116,64:76,65:[1,44],67:115,68:[2,96],69:117,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,118]},{32:119,33:[2,62],74:120,75:[1,121]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:122,74:123,75:[1,121]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,124]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,125]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,109]},{20:75,63:126,64:76,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:75,33:[2,72],41:127,63:128,64:76,65:[1,44],69:129,70:77,71:78,72:[1,79],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,130]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,131]},{33:[2,63]},{72:[1,133],76:132},{33:[1,134]},{33:[2,69]},{15:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:135,74:136,75:[1,121]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,138],77:[1,137]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,139]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],defaultActions:{4:[2,1],55:[2,55],57:[2,20],61:[2,57],74:[2,81],83:[2,85],87:[2,18],91:[2,89],102:[2,53],105:[2,93],111:[2,19],112:[2,77],117:[2,97],120:[2,63],123:[2,69],124:[2,12],136:[2,75],137:[2,32]},parseError:function(str,hash){throw new Error(str)},parse:function(input){var self=this,stack=[0],vstack=[null],lstack=[],table=this.table,yytext="",yylineno=0,yyleng=0,recovering=0;this.lexer.setInput(input),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,void 0===(this.yy.parser=this).lexer.yylloc&&(this.lexer.yylloc={});var yyloc=this.lexer.yylloc;lstack.push(yyloc);var ranges=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var symbol,preErrorSymbol,state,action,r,p,len,newState,expected,token,yyval={};;){if(state=stack[stack.length-1],void 0===(action=this.defaultActions[state]?this.defaultActions[state]:(null==symbol&&(token=void 0,"number"!=typeof(token=self.lexer.lex()||1)&&(token=self.symbols_[token]||token),symbol=token),table[state]&&table[state][symbol]))||!action.length||!action[0]){var errStr="";if(!recovering){for(p in expected=[],table[state])this.terminals_[p]&&2<p&&expected.push("'"+this.terminals_[p]+"'");errStr=this.lexer.showPosition?"Parse error on line "+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(", ")+", got '"+(this.terminals_[symbol]||symbol)+"'":"Parse error on line "+(yylineno+1)+": Unexpected "+(1==symbol?"end of input":"'"+(this.terminals_[symbol]||symbol)+"'"),this.parseError(errStr,{text:this.lexer.match,token:this.terminals_[symbol]||symbol,line:this.lexer.yylineno,loc:yyloc,expected:expected})}}if(action[0]instanceof Array&&1<action.length)throw new Error("Parse Error: multiple actions possible at state: "+state+", token: "+symbol);switch(action[0]){case 1:stack.push(symbol),vstack.push(this.lexer.yytext),lstack.push(this.lexer.yylloc),stack.push(action[1]),symbol=null,preErrorSymbol?(symbol=preErrorSymbol,preErrorSymbol=null):(yyleng=this.lexer.yyleng,yytext=this.lexer.yytext,yylineno=this.lexer.yylineno,yyloc=this.lexer.yylloc,0<recovering&&recovering--);break;case 2:if(len=this.productions_[action[1]][1],yyval.$=vstack[vstack.length-len],yyval._$={first_line:lstack[lstack.length-(len||1)].first_line,last_line:lstack[lstack.length-1].last_line,first_column:lstack[lstack.length-(len||1)].first_column,last_column:lstack[lstack.length-1].last_column},ranges&&(yyval._$.range=[lstack[lstack.length-(len||1)].range[0],lstack[lstack.length-1].range[1]]),void 0!==(r=this.performAction.call(yyval,yytext,yyleng,yylineno,this.yy,action[1],vstack,lstack)))return r;len&&(stack=stack.slice(0,-1*len*2),vstack=vstack.slice(0,-1*len),lstack=lstack.slice(0,-1*len)),stack.push(this.productions_[action[1]][0]),vstack.push(yyval.$),lstack.push(yyval._$),newState=table[stack[stack.length-2]][stack[stack.length-1]],stack.push(newState);break;case 3:return!0}}return!0}},lexer=function(){var lexer={EOF:1,parseError:function(str,hash){if(!this.yy.parser)throw new Error(str);this.yy.parser.parseError(str,hash)},setInput:function(input){return this._input=input,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var ch=this._input[0];return this.yytext+=ch,this.yyleng++,this.offset++,this.match+=ch,this.matched+=ch,ch.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),ch},unput:function(ch){var len=ch.length,lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-len-1),this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),lines.length-1&&(this.yylineno-=lines.length-1);var r=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len},this.options.ranges&&(this.yylloc.range=[r[0],r[0]+this.yyleng-len]),this},more:function(){return this._more=!0,this},less:function(n){this.unput(this.match.slice(n))},pastInput:function(){var past=this.matched.substr(0,this.matched.length-this.match.length);return(20<past.length?"...":"")+past.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var next=this.match;return next.length<20&&(next+=this._input.substr(0,20-next.length)),(next.substr(0,20)+(20<next.length?"...":"")).replace(/\n/g,"")},showPosition:function(){var pre=this.pastInput(),c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},next:function(){if(this.done)return this.EOF;var token,match,tempMatch,index,lines;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var rules=this._currentRules(),i=0;i<rules.length&&(!(tempMatch=this._input.match(this.rules[rules[i]]))||match&&!(tempMatch[0].length>match[0].length)||(match=tempMatch,index=i,this.options.flex));i++);return match?((lines=match[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=lines.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length},this.yytext+=match[0],this.match+=match[0],this.matches=match,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(match[0].length),this.matched+=match[0],token=this.performAction.call(this,this.yy,this,rules[index],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),token||void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var r=this.next();return void 0!==r?r:this.lex()},begin:function(condition){this.conditionStack.push(condition)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(condition){this.begin(condition)},options:{},performAction:function(yy,yy_,$avoiding_name_collisions,YY_START){function strip(start,end){return yy_.yytext=yy_.yytext.substr(start,yy_.yyleng-end)}switch($avoiding_name_collisions){case 0:if("\\\\"===yy_.yytext.slice(-2)?(strip(0,1),this.begin("mu")):"\\"===yy_.yytext.slice(-1)?(strip(0,1),this.begin("emu")):this.begin("mu"),yy_.yytext)return 15;break;case 1:return 15;case 2:return this.popState(),15;case 3:return this.begin("raw"),15;case 4:return this.popState(),"raw"===this.conditionStack[this.conditionStack.length-1]?15:(yy_.yytext=yy_.yytext.substr(5,yy_.yyleng-9),"END_RAW_BLOCK");case 5:return 15;case 6:return this.popState(),14;case 7:return 65;case 8:return 68;case 9:return 19;case 10:return this.popState(),this.begin("raw"),23;case 11:return 55;case 12:return 60;case 13:return 29;case 14:return 47;case 15:case 16:return this.popState(),44;case 17:return 34;case 18:return 39;case 19:return 51;case 20:return 48;case 21:this.unput(yy_.yytext),this.popState(),this.begin("com");break;case 22:return this.popState(),14;case 23:return 48;case 24:return 73;case 25:case 26:return 72;case 27:return 87;case 28:break;case 29:return this.popState(),54;case 30:return this.popState(),33;case 31:return yy_.yytext=strip(1,2).replace(/\\"/g,'"'),80;case 32:return yy_.yytext=strip(1,2).replace(/\\'/g,"'"),80;case 33:return 85;case 34:case 35:return 82;case 36:return 83;case 37:return 84;case 38:return 81;case 39:return 75;case 40:return 77;case 41:return 72;case 42:return yy_.yytext=yy_.yytext.replace(/\\([\\\]])/g,"$1"),72;case 43:return"INVALID";case 44:return 5}},rules:[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{(?=[^\/]))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]*?(?=(\{\{\{\{)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#>)/,/^(?:\{\{(~)?#\*?)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?\*?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:undefined(?=([~}\s)])))/,/^(?:null(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[(\\\]|[^\]])*\])/,/^(?:.)/,/^(?:$)/],conditions:{mu:{rules:[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[6],inclusive:!1},raw:{rules:[3,4,5],inclusive:!1},INITIAL:{rules:[0,1,44],inclusive:!0}}};return lexer}();function Parser(){this.yy={}}return parser.lexer=lexer,new((Parser.prototype=parser).Parser=Parser)}();exports.default=handlebars,module.exports=exports.default},{}],12:[function(require,module,exports){"use strict";exports.__esModule=!0,exports.print=function(ast){return(new PrintVisitor).accept(ast)},exports.PrintVisitor=PrintVisitor;var obj,_visitor=require("./visitor"),_visitor2=(obj=_visitor)&&obj.__esModule?obj:{default:obj};function PrintVisitor(){this.padding=0}(PrintVisitor.prototype=new _visitor2.default).pad=function(string){for(var out="",i=0,l=this.padding;i<l;i++)out+="  ";return out+=string+"\n"},PrintVisitor.prototype.Program=function(program){var out="",body=program.body,i=void 0,l=void 0;if(program.blockParams){var blockParams="BLOCK PARAMS: [";for(i=0,l=program.blockParams.length;i<l;i++)blockParams+=" "+program.blockParams[i];blockParams+=" ]",out+=this.pad(blockParams)}for(i=0,l=body.length;i<l;i++)out+=this.accept(body[i]);return this.padding--,out},PrintVisitor.prototype.MustacheStatement=function(mustache){return this.pad("{{ "+this.SubExpression(mustache)+" }}")},PrintVisitor.prototype.Decorator=function(mustache){return this.pad("{{ DIRECTIVE "+this.SubExpression(mustache)+" }}")},PrintVisitor.prototype.BlockStatement=PrintVisitor.prototype.DecoratorBlock=function(block){var out="";return out+=this.pad(("DecoratorBlock"===block.type?"DIRECTIVE ":"")+"BLOCK:"),this.padding++,out+=this.pad(this.SubExpression(block)),block.program&&(out+=this.pad("PROGRAM:"),this.padding++,out+=this.accept(block.program),this.padding--),block.inverse&&(block.program&&this.padding++,out+=this.pad("{{^}}"),this.padding++,out+=this.accept(block.inverse),this.padding--,block.program&&this.padding--),this.padding--,out},PrintVisitor.prototype.PartialStatement=function(partial){var content="PARTIAL:"+partial.name.original;return partial.params[0]&&(content+=" "+this.accept(partial.params[0])),partial.hash&&(content+=" "+this.accept(partial.hash)),this.pad("{{> "+content+" }}")},PrintVisitor.prototype.PartialBlockStatement=function(partial){var content="PARTIAL BLOCK:"+partial.name.original;return partial.params[0]&&(content+=" "+this.accept(partial.params[0])),partial.hash&&(content+=" "+this.accept(partial.hash)),content+=" "+this.pad("PROGRAM:"),this.padding++,content+=this.accept(partial.program),this.padding--,this.pad("{{> "+content+" }}")},PrintVisitor.prototype.ContentStatement=function(content){return this.pad("CONTENT[ '"+content.value+"' ]")},PrintVisitor.prototype.CommentStatement=function(comment){return this.pad("{{! '"+comment.value+"' }}")},PrintVisitor.prototype.SubExpression=function(sexpr){for(var hash,params=sexpr.params,paramStrings=[],i=0,l=params.length;i<l;i++)paramStrings.push(this.accept(params[i]));return params="["+paramStrings.join(", ")+"]",hash=sexpr.hash?" "+this.accept(sexpr.hash):"",this.accept(sexpr.path)+" "+params+hash},PrintVisitor.prototype.PathExpression=function(id){var path=id.parts.join("/");return(id.data?"@":"")+"PATH:"+path},PrintVisitor.prototype.StringLiteral=function(string){return'"'+string.value+'"'},PrintVisitor.prototype.NumberLiteral=function(number){return"NUMBER{"+number.value+"}"},PrintVisitor.prototype.BooleanLiteral=function(bool){return"BOOLEAN{"+bool.value+"}"},PrintVisitor.prototype.UndefinedLiteral=function(){return"UNDEFINED"},PrintVisitor.prototype.NullLiteral=function(){return"NULL"},PrintVisitor.prototype.Hash=function(hash){for(var pairs=hash.pairs,joinedPairs=[],i=0,l=pairs.length;i<l;i++)joinedPairs.push(this.accept(pairs[i]));return"HASH{"+joinedPairs.join(", ")+"}"},PrintVisitor.prototype.HashPair=function(pair){return pair.key+"="+this.accept(pair.value)}},{"./visitor":13}],13:[function(require,module,exports){"use strict";exports.__esModule=!0;var obj,_exception=require("../exception"),_exception2=(obj=_exception)&&obj.__esModule?obj:{default:obj};function Visitor(){this.parents=[]}function visitSubExpression(mustache){this.acceptRequired(mustache,"path"),this.acceptArray(mustache.params),this.acceptKey(mustache,"hash")}function visitBlock(block){visitSubExpression.call(this,block),this.acceptKey(block,"program"),this.acceptKey(block,"inverse")}function visitPartial(partial){this.acceptRequired(partial,"name"),this.acceptArray(partial.params),this.acceptKey(partial,"hash")}Visitor.prototype={constructor:Visitor,mutating:!1,acceptKey:function(node,name){var value=this.accept(node[name]);if(this.mutating){if(value&&!Visitor.prototype[value.type])throw new _exception2.default('Unexpected node type "'+value.type+'" found when accepting '+name+" on "+node.type);node[name]=value}},acceptRequired:function(node,name){if(this.acceptKey(node,name),!node[name])throw new _exception2.default(node.type+" requires "+name)},acceptArray:function(array){for(var i=0,l=array.length;i<l;i++)this.acceptKey(array,i),array[i]||(array.splice(i,1),i--,l--)},accept:function(object){if(object){if(!this[object.type])throw new _exception2.default("Unknown type: "+object.type,object);this.current&&this.parents.unshift(this.current),this.current=object;var ret=this[object.type](object);return this.current=this.parents.shift(),!this.mutating||ret?ret:!1!==ret?object:void 0}},Program:function(program){this.acceptArray(program.body)},MustacheStatement:visitSubExpression,Decorator:visitSubExpression,BlockStatement:visitBlock,DecoratorBlock:visitBlock,PartialStatement:visitPartial,PartialBlockStatement:function(partial){visitPartial.call(this,partial),this.acceptKey(partial,"program")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:visitSubExpression,PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},UndefinedLiteral:function(){},NullLiteral:function(){},Hash:function(hash){this.acceptArray(hash.pairs)},HashPair:function(pair){this.acceptRequired(pair,"value")}},exports.default=Visitor,module.exports=exports.default},{"../exception":17}],14:[function(require,module,exports){"use strict";exports.__esModule=!0;var obj,_visitor=require("./visitor"),_visitor2=(obj=_visitor)&&obj.__esModule?obj:{default:obj};function WhitespaceControl(){var options=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=options}function isPrevWhitespace(body,i,isRoot){void 0===i&&(i=body.length);var prev=body[i-1],sibling=body[i-2];return prev?"ContentStatement"===prev.type?(sibling||!isRoot?/\r?\n\s*?$/:/(^|\r?\n)\s*?$/).test(prev.original):void 0:isRoot}function isNextWhitespace(body,i,isRoot){void 0===i&&(i=-1);var next=body[i+1],sibling=body[i+2];return next?"ContentStatement"===next.type?(sibling||!isRoot?/^\s*?\r?\n/:/^\s*?(\r?\n|$)/).test(next.original):void 0:isRoot}function omitRight(body,i,multiple){var current=body[null==i?0:i+1];if(current&&"ContentStatement"===current.type&&(multiple||!current.rightStripped)){var original=current.value;current.value=current.value.replace(multiple?/^\s+/:/^[ \t]*\r?\n?/,""),current.rightStripped=current.value!==original}}function omitLeft(body,i,multiple){var current=body[null==i?body.length-1:i-1];if(current&&"ContentStatement"===current.type&&(multiple||!current.leftStripped)){var original=current.value;return current.value=current.value.replace(multiple?/\s+$/:/[ \t]+$/,""),current.leftStripped=current.value!==original,current.leftStripped}}(WhitespaceControl.prototype=new _visitor2.default).Program=function(program){var doStandalone=!this.options.ignoreStandalone,isRoot=!this.isRootSeen;this.isRootSeen=!0;for(var body=program.body,i=0,l=body.length;i<l;i++){var current=body[i],strip=this.accept(current);if(strip){var _isPrevWhitespace=isPrevWhitespace(body,i,isRoot),_isNextWhitespace=isNextWhitespace(body,i,isRoot),openStandalone=strip.openStandalone&&_isPrevWhitespace,closeStandalone=strip.closeStandalone&&_isNextWhitespace,inlineStandalone=strip.inlineStandalone&&_isPrevWhitespace&&_isNextWhitespace;strip.close&&omitRight(body,i,!0),strip.open&&omitLeft(body,i,!0),doStandalone&&inlineStandalone&&(omitRight(body,i),omitLeft(body,i)&&"PartialStatement"===current.type&&(current.indent=/([ \t]+$)/.exec(body[i-1].original)[1])),doStandalone&&openStandalone&&(omitRight((current.program||current.inverse).body),omitLeft(body,i)),doStandalone&&closeStandalone&&(omitRight(body,i),omitLeft((current.inverse||current.program).body))}}return program},WhitespaceControl.prototype.BlockStatement=WhitespaceControl.prototype.DecoratorBlock=WhitespaceControl.prototype.PartialBlockStatement=function(block){this.accept(block.program),this.accept(block.inverse);var program=block.program||block.inverse,inverse=block.program&&block.inverse,firstInverse=inverse,lastInverse=inverse;if(inverse&&inverse.chained)for(firstInverse=inverse.body[0].program;lastInverse.chained;)lastInverse=lastInverse.body[lastInverse.body.length-1].program;var strip={open:block.openStrip.open,close:block.closeStrip.close,openStandalone:isNextWhitespace(program.body),closeStandalone:isPrevWhitespace((firstInverse||program).body)};if(block.openStrip.close&&omitRight(program.body,null,!0),inverse){var inverseStrip=block.inverseStrip;inverseStrip.open&&omitLeft(program.body,null,!0),inverseStrip.close&&omitRight(firstInverse.body,null,!0),block.closeStrip.open&&omitLeft(lastInverse.body,null,!0),!this.options.ignoreStandalone&&isPrevWhitespace(program.body)&&isNextWhitespace(firstInverse.body)&&(omitLeft(program.body),omitRight(firstInverse.body))}else block.closeStrip.open&&omitLeft(program.body,null,!0);return strip},WhitespaceControl.prototype.Decorator=WhitespaceControl.prototype.MustacheStatement=function(mustache){return mustache.strip},WhitespaceControl.prototype.PartialStatement=WhitespaceControl.prototype.CommentStatement=function(node){var strip=node.strip||{};return{inlineStandalone:!0,open:strip.open,close:strip.close}},exports.default=WhitespaceControl,module.exports=exports.default},{"./visitor":13}],15:[function(require,module,exports){"use strict";exports.__esModule=!0,exports.registerDefaultDecorators=function(instance){_decoratorsInline2.default(instance)};var obj,_decoratorsInline=require("./decorators/inline"),_decoratorsInline2=(obj=_decoratorsInline)&&obj.__esModule?obj:{default:obj}},{"./decorators/inline":16}],16:[function(require,module,exports){"use strict";exports.__esModule=!0;var _utils=require("../utils");exports.default=function(instance){instance.registerDecorator("inline",function(fn,props,container,options){var ret=fn;return props.partials||(props.partials={},ret=function(context,options){var original=container.partials;container.partials=_utils.extend({},original,props.partials);var ret=fn(context,options);return container.partials=original,ret}),props.partials[options.args[0]]=options.fn,ret})},module.exports=exports.default},{"../utils":30}],17:[function(require,module,exports){"use strict";exports.__esModule=!0;var errorProps=["description","fileName","lineNumber","message","name","number","stack"];function Exception(message,node){var loc=node&&node.loc,line=void 0,column=void 0;loc&&(message+=" - "+(line=loc.start.line)+":"+(column=loc.start.column));for(var tmp=Error.prototype.constructor.call(this,message),idx=0;idx<errorProps.length;idx++)this[errorProps[idx]]=tmp[errorProps[idx]];Error.captureStackTrace&&Error.captureStackTrace(this,Exception);try{loc&&(this.lineNumber=line,Object.defineProperty?Object.defineProperty(this,"column",{value:column,enumerable:!0}):this.column=column)}catch(nop){}}Exception.prototype=new Error,exports.default=Exception,module.exports=exports.default},{}],18:[function(require,module,exports){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.__esModule=!0,exports.registerDefaultHelpers=function(instance){_helpersBlockHelperMissing2.default(instance),_helpersEach2.default(instance),_helpersHelperMissing2.default(instance),_helpersIf2.default(instance),_helpersLog2.default(instance),_helpersLookup2.default(instance),_helpersWith2.default(instance)};var _helpersBlockHelperMissing2=_interopRequireDefault(require("./helpers/block-helper-missing")),_helpersEach2=_interopRequireDefault(require("./helpers/each")),_helpersHelperMissing2=_interopRequireDefault(require("./helpers/helper-missing")),_helpersIf2=_interopRequireDefault(require("./helpers/if")),_helpersLog2=_interopRequireDefault(require("./helpers/log")),_helpersLookup2=_interopRequireDefault(require("./helpers/lookup")),_helpersWith2=_interopRequireDefault(require("./helpers/with"))},{"./helpers/block-helper-missing":19,"./helpers/each":20,"./helpers/helper-missing":21,"./helpers/if":22,"./helpers/log":23,"./helpers/lookup":24,"./helpers/with":25}],19:[function(require,module,exports){"use strict";exports.__esModule=!0;var _utils=require("../utils");exports.default=function(instance){instance.registerHelper("blockHelperMissing",function(context,options){var inverse=options.inverse,fn=options.fn;if(!0===context)return fn(this);if(!1===context||null==context)return inverse(this);if(_utils.isArray(context))return 0<context.length?(options.ids&&(options.ids=[options.name]),instance.helpers.each(context,options)):inverse(this);if(options.data&&options.ids){var data=_utils.createFrame(options.data);data.contextPath=_utils.appendContextPath(options.data.contextPath,options.name),options={data:data}}return fn(context,options)})},module.exports=exports.default},{"../utils":30}],20:[function(require,module,exports){"use strict";exports.__esModule=!0;var obj,_utils=require("../utils"),_exception=require("../exception"),_exception2=(obj=_exception)&&obj.__esModule?obj:{default:obj};exports.default=function(instance){instance.registerHelper("each",function(context,options){if(!options)throw new _exception2.default("Must pass iterator to #each");var fn=options.fn,inverse=options.inverse,i=0,ret="",data=void 0,contextPath=void 0;function execIteration(field,index,last){data&&(data.key=field,data.index=index,data.first=0===index,data.last=!!last,contextPath&&(data.contextPath=contextPath+field)),ret+=fn(context[field],{data:data,blockParams:_utils.blockParams([context[field],field],[contextPath+field,null])})}if(options.data&&options.ids&&(contextPath=_utils.appendContextPath(options.data.contextPath,options.ids[0])+"."),_utils.isFunction(context)&&(context=context.call(this)),options.data&&(data=_utils.createFrame(options.data)),context&&"object"==typeof context)if(_utils.isArray(context))for(var j=context.length;i<j;i++)i in context&&execIteration(i,i,i===context.length-1);else{var priorKey=void 0;for(var key in context)context.hasOwnProperty(key)&&(void 0!==priorKey&&execIteration(priorKey,i-1),priorKey=key,i++);void 0!==priorKey&&execIteration(priorKey,i-1,!0)}return 0===i&&(ret=inverse(this)),ret})},module.exports=exports.default},{"../exception":17,"../utils":30}],21:[function(require,module,exports){"use strict";exports.__esModule=!0;var obj,_exception=require("../exception"),_exception2=(obj=_exception)&&obj.__esModule?obj:{default:obj};exports.default=function(instance){instance.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new _exception2.default('Missing helper: "'+arguments[arguments.length-1].name+'"')})},module.exports=exports.default},{"../exception":17}],22:[function(require,module,exports){"use strict";exports.__esModule=!0;var _utils=require("../utils");exports.default=function(instance){instance.registerHelper("if",function(conditional,options){return _utils.isFunction(conditional)&&(conditional=conditional.call(this)),!options.hash.includeZero&&!conditional||_utils.isEmpty(conditional)?options.inverse(this):options.fn(this)}),instance.registerHelper("unless",function(conditional,options){return instance.helpers.if.call(this,conditional,{fn:options.inverse,inverse:options.fn,hash:options.hash})})},module.exports=exports.default},{"../utils":30}],23:[function(require,module,exports){"use strict";exports.__esModule=!0,exports.default=function(instance){instance.registerHelper("log",function(){for(var args=[void 0],options=arguments[arguments.length-1],i=0;i<arguments.length-1;i++)args.push(arguments[i]);var level=1;null!=options.hash.level?level=options.hash.level:options.data&&null!=options.data.level&&(level=options.data.level),args[0]=level,instance.log.apply(instance,args)})},module.exports=exports.default},{}],24:[function(require,module,exports){"use strict";exports.__esModule=!0,exports.default=function(instance){instance.registerHelper("lookup",function(obj,field){return obj&&obj[field]})},module.exports=exports.default},{}],25:[function(require,module,exports){"use strict";exports.__esModule=!0;var _utils=require("../utils");exports.default=function(instance){instance.registerHelper("with",function(context,options){_utils.isFunction(context)&&(context=context.call(this));var fn=options.fn;if(_utils.isEmpty(context))return options.inverse(this);var data=options.data;return options.data&&options.ids&&((data=_utils.createFrame(options.data)).contextPath=_utils.appendContextPath(options.data.contextPath,options.ids[0])),fn(context,{data:data,blockParams:_utils.blockParams([context],[data&&data.contextPath])})})},module.exports=exports.default},{"../utils":30}],26:[function(require,module,exports){"use strict";exports.__esModule=!0;var _utils=require("./utils"),logger={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(level){if("string"==typeof level){var levelMap=_utils.indexOf(logger.methodMap,level.toLowerCase());level=0<=levelMap?levelMap:parseInt(level,10)}return level},log:function(level){if(level=logger.lookupLevel(level),"undefined"!=typeof console&&logger.lookupLevel(logger.level)<=level){var method=logger.methodMap[level];console[method]||(method="log");for(var _len=arguments.length,message=Array(1<_len?_len-1:0),_key=1;_key<_len;_key++)message[_key-1]=arguments[_key];console[method].apply(console,message)}}};exports.default=logger,module.exports=exports.default},{"./utils":30}],27:[function(require,module,exports){(function(global){"use strict";exports.__esModule=!0,exports.default=function(Handlebars){var root=void 0!==global?global:window,$Handlebars=root.Handlebars;Handlebars.noConflict=function(){return root.Handlebars===Handlebars&&(root.Handlebars=$Handlebars),Handlebars}},module.exports=exports.default}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],28:[function(require,module,exports){"use strict";exports.__esModule=!0,exports.checkRevision=function(compilerInfo){var compilerRevision=compilerInfo&&compilerInfo[0]||1,currentRevision=_base.COMPILER_REVISION;if(compilerRevision!==currentRevision){if(compilerRevision<currentRevision){var runtimeVersions=_base.REVISION_CHANGES[currentRevision],compilerVersions=_base.REVISION_CHANGES[compilerRevision];throw new _exception2.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").")}throw new _exception2.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+compilerInfo[1]+").")}},exports.template=function(templateSpec,env){if(!env)throw new _exception2.default("No environment passed to template");if(!templateSpec||!templateSpec.main)throw new _exception2.default("Unknown template object: "+typeof templateSpec);templateSpec.main.decorator=templateSpec.main_d,env.VM.checkRevision(templateSpec.compiler);var container={strict:function(obj,name){if(!(name in obj))throw new _exception2.default('"'+name+'" not defined in '+obj);return obj[name]},lookup:function(depths,name){for(var len=depths.length,i=0;i<len;i++)if(depths[i]&&null!=depths[i][name])return depths[i][name]},lambda:function(current,context){return"function"==typeof current?current.call(context):current},escapeExpression:Utils.escapeExpression,invokePartial:function(partial,context,options){options.hash&&(context=Utils.extend({},context,options.hash),options.ids&&(options.ids[0]=!0));partial=env.VM.resolvePartial.call(this,partial,context,options);var result=env.VM.invokePartial.call(this,partial,context,options);null==result&&env.compile&&(options.partials[options.name]=env.compile(partial,templateSpec.compilerOptions,env),result=options.partials[options.name](context,options));{if(null==result)throw new _exception2.default("The partial "+options.name+" could not be compiled when running in runtime-only mode");if(options.indent){for(var lines=result.split("\n"),i=0,l=lines.length;i<l&&(lines[i]||i+1!==l);i++)lines[i]=options.indent+lines[i];result=lines.join("\n")}return result}},fn:function(i){var ret=templateSpec[i];return ret.decorator=templateSpec[i+"_d"],ret},programs:[],program:function(i,data,declaredBlockParams,blockParams,depths){var programWrapper=this.programs[i],fn=this.fn(i);return data||depths||blockParams||declaredBlockParams?programWrapper=wrapProgram(this,i,fn,data,declaredBlockParams,blockParams,depths):programWrapper||(programWrapper=this.programs[i]=wrapProgram(this,i,fn)),programWrapper},data:function(value,depth){for(;value&&depth--;)value=value._parent;return value},merge:function(param,common){var obj=param||common;return param&&common&&param!==common&&(obj=Utils.extend({},common,param)),obj},nullContext:Object.seal({}),noop:env.VM.noop,compilerInfo:templateSpec.compiler};function ret(context){var options=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],data=options.data;ret._setup(options),!options.partial&&templateSpec.useData&&(data=function(context,data){data&&"root"in data||((data=data?_base.createFrame(data):{}).root=context);return data}(context,data));var depths=void 0,blockParams=templateSpec.useBlockParams?[]:void 0;function main(context){return""+templateSpec.main(container,context,container.helpers,container.partials,data,blockParams,depths)}return templateSpec.useDepths&&(depths=options.depths?context!=options.depths[0]?[context].concat(options.depths):options.depths:[context]),(main=executeDecorators(templateSpec.main,main,container,options.depths||[],data,blockParams))(context,options)}return ret.isTop=!0,ret._setup=function(options){options.partial?(container.helpers=options.helpers,container.partials=options.partials,container.decorators=options.decorators):(container.helpers=container.merge(options.helpers,env.helpers),templateSpec.usePartial&&(container.partials=container.merge(options.partials,env.partials)),(templateSpec.usePartial||templateSpec.useDecorators)&&(container.decorators=container.merge(options.decorators,env.decorators)))},ret._child=function(i,data,blockParams,depths){if(templateSpec.useBlockParams&&!blockParams)throw new _exception2.default("must pass block params");if(templateSpec.useDepths&&!depths)throw new _exception2.default("must pass parent depths");return wrapProgram(container,i,templateSpec[i],data,0,blockParams,depths)},ret},exports.wrapProgram=wrapProgram,exports.resolvePartial=function(partial,context,options){partial?partial.call||options.name||(options.name=partial,partial=options.partials[partial]):partial="@partial-block"===options.name?options.data["partial-block"]:options.partials[options.name];return partial},exports.invokePartial=function(partial,context,options){var currentPartialBlock=options.data&&options.data["partial-block"];options.partial=!0,options.ids&&(options.data.contextPath=options.ids[0]||options.data.contextPath);var partialBlock=void 0;options.fn&&options.fn!==noop&&function(){options.data=_base.createFrame(options.data);var fn=options.fn;partialBlock=options.data["partial-block"]=function(context){var options=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return options.data=_base.createFrame(options.data),options.data["partial-block"]=currentPartialBlock,fn(context,options)},fn.partials&&(options.partials=Utils.extend({},options.partials,fn.partials))}();void 0===partial&&partialBlock&&(partial=partialBlock);{if(void 0===partial)throw new _exception2.default("The partial "+options.name+" could not be found");if(partial instanceof Function)return partial(context,options)}},exports.noop=noop;var obj,Utils=function(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj.default=obj,newObj}(require("./utils")),_exception=require("./exception"),_exception2=(obj=_exception)&&obj.__esModule?obj:{default:obj},_base=require("./base");function wrapProgram(container,i,fn,data,declaredBlockParams,blockParams,depths){function prog(context){var options=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],currentDepths=depths;return!depths||context==depths[0]||context===container.nullContext&&null===depths[0]||(currentDepths=[context].concat(depths)),fn(container,context,container.helpers,container.partials,options.data||data,blockParams&&[options.blockParams].concat(blockParams),currentDepths)}return(prog=executeDecorators(fn,prog,container,depths,data,blockParams)).program=i,prog.depth=depths?depths.length:0,prog.blockParams=declaredBlockParams||0,prog}function noop(){return""}function executeDecorators(fn,prog,container,depths,data,blockParams){if(fn.decorator){var props={};prog=fn.decorator(prog,props,container,depths&&depths[0],data,blockParams,depths),Utils.extend(prog,props)}return prog}},{"./base":4,"./exception":17,"./utils":30}],29:[function(require,module,exports){"use strict";function SafeString(string){this.string=string}exports.__esModule=!0,SafeString.prototype.toString=SafeString.prototype.toHTML=function(){return""+this.string},exports.default=SafeString,module.exports=exports.default},{}],30:[function(require,module,exports){"use strict";exports.__esModule=!0,exports.extend=extend,exports.indexOf=function(array,value){for(var i=0,len=array.length;i<len;i++)if(array[i]===value)return i;return-1},exports.escapeExpression=function(string){if("string"!=typeof string){if(string&&string.toHTML)return string.toHTML();if(null==string)return"";if(!string)return string+"";string=""+string}return possible.test(string)?string.replace(badChars,escapeChar):string},exports.isEmpty=function(value){return!value&&0!==value||!(!isArray(value)||0!==value.length)},exports.createFrame=function(object){var frame=extend({},object);return frame._parent=object,frame},exports.blockParams=function(params,ids){return params.path=ids,params},exports.appendContextPath=function(contextPath,id){return(contextPath?contextPath+".":"")+id};var escape={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},badChars=/[&<>"'`=]/g,possible=/[&<>"'`=]/;function escapeChar(chr){return escape[chr]}function extend(obj){for(var i=1;i<arguments.length;i++)for(var key in arguments[i])Object.prototype.hasOwnProperty.call(arguments[i],key)&&(obj[key]=arguments[i][key]);return obj}var toString=Object.prototype.toString;exports.toString=toString;var isFunction=function(value){return"function"==typeof value};isFunction(/x/)&&(exports.isFunction=isFunction=function(value){return"function"==typeof value&&"[object Function]"===toString.call(value)}),exports.isFunction=isFunction;var isArray=Array.isArray||function(value){return!(!value||"object"!=typeof value)&&"[object Array]"===toString.call(value)};exports.isArray=isArray},{}],31:[function(require,module,exports){var handlebars=require("../dist/cjs/handlebars").default,printer=require("../dist/cjs/handlebars/compiler/printer");function extension(module,filename){var templateString=require("fs").readFileSync(filename,"utf8");module.exports=handlebars.compile(templateString)}handlebars.PrintVisitor=printer.PrintVisitor,handlebars.print=printer.print,module.exports=handlebars,void 0!==require&&require.extensions&&(require.extensions[".handlebars"]=extension,require.extensions[".hbs"]=extension)},{"../dist/cjs/handlebars":2,"../dist/cjs/handlebars/compiler/printer":12,fs:1}],32:[function(require,module,exports){var util=require("./util"),has=Object.prototype.hasOwnProperty,hasNativeMap="undefined"!=typeof Map;function ArraySet(){this._array=[],this._set=hasNativeMap?new Map:Object.create(null)}ArraySet.fromArray=function(aArray,aAllowDuplicates){for(var set=new ArraySet,i=0,len=aArray.length;i<len;i++)set.add(aArray[i],aAllowDuplicates);return set},ArraySet.prototype.size=function(){return hasNativeMap?this._set.size:Object.getOwnPropertyNames(this._set).length},ArraySet.prototype.add=function(aStr,aAllowDuplicates){var sStr=hasNativeMap?aStr:util.toSetString(aStr),isDuplicate=hasNativeMap?this.has(aStr):has.call(this._set,sStr),idx=this._array.length;isDuplicate&&!aAllowDuplicates||this._array.push(aStr),isDuplicate||(hasNativeMap?this._set.set(aStr,idx):this._set[sStr]=idx)},ArraySet.prototype.has=function(aStr){if(hasNativeMap)return this._set.has(aStr);var sStr=util.toSetString(aStr);return has.call(this._set,sStr)},ArraySet.prototype.indexOf=function(aStr){if(hasNativeMap){var idx=this._set.get(aStr);if(0<=idx)return idx}else{var sStr=util.toSetString(aStr);if(has.call(this._set,sStr))return this._set[sStr]}throw new Error('"'+aStr+'" is not in the set.')},ArraySet.prototype.at=function(aIdx){if(0<=aIdx&&aIdx<this._array.length)return this._array[aIdx];throw new Error("No element indexed by "+aIdx)},ArraySet.prototype.toArray=function(){return this._array.slice()},exports.ArraySet=ArraySet},{"./util":41}],33:[function(require,module,exports){var base64=require("./base64");exports.encode=function(aValue){for(var digit,encoded="",vlq=function(aValue){return aValue<0?1+(-aValue<<1):0+(aValue<<1)}(aValue);digit=31&vlq,0<(vlq>>>=5)&&(digit|=32),encoded+=base64.encode(digit),0<vlq;);return encoded},exports.decode=function(aStr,aIndex,aOutParam){var continuation,digit,aValue,shifted,strLen=aStr.length,result=0,shift=0;do{if(strLen<=aIndex)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(digit=base64.decode(aStr.charCodeAt(aIndex++))))throw new Error("Invalid base64 digit: "+aStr.charAt(aIndex-1));continuation=!!(32&digit),result+=(digit&=31)<<shift,shift+=5}while(continuation);aOutParam.value=(shifted=(aValue=result)>>1,1==(1&aValue)?-shifted:shifted),aOutParam.rest=aIndex}},{"./base64":34}],34:[function(require,module,exports){var intToCharMap="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");exports.encode=function(number){if(0<=number&&number<intToCharMap.length)return intToCharMap[number];throw new TypeError("Must be between 0 and 63: "+number)},exports.decode=function(charCode){return 65<=charCode&&charCode<=90?charCode-65:97<=charCode&&charCode<=122?charCode-97+26:48<=charCode&&charCode<=57?charCode-48+52:43==charCode?62:47==charCode?63:-1}},{}],35:[function(require,module,exports){exports.GREATEST_LOWER_BOUND=1,exports.LEAST_UPPER_BOUND=2,exports.search=function(aNeedle,aHaystack,aCompare,aBias){if(0===aHaystack.length)return-1;var index=function recursiveSearch(aLow,aHigh,aNeedle,aHaystack,aCompare,aBias){var mid=Math.floor((aHigh-aLow)/2)+aLow,cmp=aCompare(aNeedle,aHaystack[mid],!0);return 0===cmp?mid:0<cmp?1<aHigh-mid?recursiveSearch(mid,aHigh,aNeedle,aHaystack,aCompare,aBias):aBias==exports.LEAST_UPPER_BOUND?aHigh<aHaystack.length?aHigh:-1:mid:1<mid-aLow?recursiveSearch(aLow,mid,aNeedle,aHaystack,aCompare,aBias):aBias==exports.LEAST_UPPER_BOUND?mid:aLow<0?-1:aLow}(-1,aHaystack.length,aNeedle,aHaystack,aCompare,aBias||exports.GREATEST_LOWER_BOUND);if(index<0)return-1;for(;0<=index-1&&0===aCompare(aHaystack[index],aHaystack[index-1],!0);)--index;return index}},{}],36:[function(require,module,exports){var util=require("./util");function MappingList(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}MappingList.prototype.unsortedForEach=function(aCallback,aThisArg){this._array.forEach(aCallback,aThisArg)},MappingList.prototype.add=function(aMapping){var mappingA,mappingB,lineA,lineB,columnA,columnB;mappingA=this._last,mappingB=aMapping,lineA=mappingA.generatedLine,lineB=mappingB.generatedLine,columnA=mappingA.generatedColumn,columnB=mappingB.generatedColumn,lineA<lineB||lineB==lineA&&columnA<=columnB||util.compareByGeneratedPositionsInflated(mappingA,mappingB)<=0?this._last=aMapping:this._sorted=!1,this._array.push(aMapping)},MappingList.prototype.toArray=function(){return this._sorted||(this._array.sort(util.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},exports.MappingList=MappingList},{"./util":41}],37:[function(require,module,exports){function swap(ary,x,y){var temp=ary[x];ary[x]=ary[y],ary[y]=temp}function doQuickSort(ary,comparator,p,r){if(p<r){var i=p-1;swap(ary,(low=p,high=r,Math.round(low+Math.random()*(high-low))),r);for(var pivot=ary[r],j=p;j<r;j++)comparator(ary[j],pivot)<=0&&swap(ary,i+=1,j);swap(ary,i+1,j);var q=i+1;doQuickSort(ary,comparator,p,q-1),doQuickSort(ary,comparator,q+1,r)}var low,high}exports.quickSort=function(ary,comparator){doQuickSort(ary,comparator,0,ary.length-1)}},{}],38:[function(require,module,exports){var util=require("./util"),binarySearch=require("./binary-search"),ArraySet=require("./array-set").ArraySet,base64VLQ=require("./base64-vlq"),quickSort=require("./quick-sort").quickSort;function SourceMapConsumer(aSourceMap,aSourceMapURL){var sourceMap=aSourceMap;return"string"==typeof aSourceMap&&(sourceMap=util.parseSourceMapInput(aSourceMap)),null!=sourceMap.sections?new IndexedSourceMapConsumer(sourceMap,aSourceMapURL):new BasicSourceMapConsumer(sourceMap,aSourceMapURL)}function BasicSourceMapConsumer(aSourceMap,aSourceMapURL){var sourceMap=aSourceMap;"string"==typeof aSourceMap&&(sourceMap=util.parseSourceMapInput(aSourceMap));var version=util.getArg(sourceMap,"version"),sources=util.getArg(sourceMap,"sources"),names=util.getArg(sourceMap,"names",[]),sourceRoot=util.getArg(sourceMap,"sourceRoot",null),sourcesContent=util.getArg(sourceMap,"sourcesContent",null),mappings=util.getArg(sourceMap,"mappings"),file=util.getArg(sourceMap,"file",null);if(version!=this._version)throw new Error("Unsupported version: "+version);sourceRoot&&(sourceRoot=util.normalize(sourceRoot)),sources=sources.map(String).map(util.normalize).map(function(source){return sourceRoot&&util.isAbsolute(sourceRoot)&&util.isAbsolute(source)?util.relative(sourceRoot,source):source}),this._names=ArraySet.fromArray(names.map(String),!0),this._sources=ArraySet.fromArray(sources,!0),this._absoluteSources=this._sources.toArray().map(function(s){return util.computeSourceURL(sourceRoot,s,aSourceMapURL)}),this.sourceRoot=sourceRoot,this.sourcesContent=sourcesContent,this._mappings=mappings,this._sourceMapURL=aSourceMapURL,this.file=file}function Mapping(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function IndexedSourceMapConsumer(aSourceMap,aSourceMapURL){var sourceMap=aSourceMap;"string"==typeof aSourceMap&&(sourceMap=util.parseSourceMapInput(aSourceMap));var version=util.getArg(sourceMap,"version"),sections=util.getArg(sourceMap,"sections");if(version!=this._version)throw new Error("Unsupported version: "+version);this._sources=new ArraySet,this._names=new ArraySet;var lastOffset={line:-1,column:0};this._sections=sections.map(function(s){if(s.url)throw new Error("Support for url field in sections not implemented.");var offset=util.getArg(s,"offset"),offsetLine=util.getArg(offset,"line"),offsetColumn=util.getArg(offset,"column");if(offsetLine<lastOffset.line||offsetLine===lastOffset.line&&offsetColumn<lastOffset.column)throw new Error("Section offsets must be ordered and non-overlapping.");return lastOffset=offset,{generatedOffset:{generatedLine:offsetLine+1,generatedColumn:offsetColumn+1},consumer:new SourceMapConsumer(util.getArg(s,"map"),aSourceMapURL)}})}SourceMapConsumer.fromSourceMap=function(aSourceMap,aSourceMapURL){return BasicSourceMapConsumer.fromSourceMap(aSourceMap,aSourceMapURL)},SourceMapConsumer.prototype._version=3,SourceMapConsumer.prototype.__generatedMappings=null,Object.defineProperty(SourceMapConsumer.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),SourceMapConsumer.prototype.__originalMappings=null,Object.defineProperty(SourceMapConsumer.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),SourceMapConsumer.prototype._charIsMappingSeparator=function(aStr,index){var c=aStr.charAt(index);return";"===c||","===c},SourceMapConsumer.prototype._parseMappings=function(aStr,aSourceRoot){throw new Error("Subclasses must implement _parseMappings")},SourceMapConsumer.GENERATED_ORDER=1,SourceMapConsumer.ORIGINAL_ORDER=2,SourceMapConsumer.GREATEST_LOWER_BOUND=1,SourceMapConsumer.LEAST_UPPER_BOUND=2,SourceMapConsumer.prototype.eachMapping=function(aCallback,aContext,aOrder){var mappings,context=aContext||null;switch(aOrder||SourceMapConsumer.GENERATED_ORDER){case SourceMapConsumer.GENERATED_ORDER:mappings=this._generatedMappings;break;case SourceMapConsumer.ORIGINAL_ORDER:mappings=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var sourceRoot=this.sourceRoot;mappings.map(function(mapping){var source=null===mapping.source?null:this._sources.at(mapping.source);return{source:source=util.computeSourceURL(sourceRoot,source,this._sourceMapURL),generatedLine:mapping.generatedLine,generatedColumn:mapping.generatedColumn,originalLine:mapping.originalLine,originalColumn:mapping.originalColumn,name:null===mapping.name?null:this._names.at(mapping.name)}},this).forEach(aCallback,context)},SourceMapConsumer.prototype.allGeneratedPositionsFor=function(aArgs){var line=util.getArg(aArgs,"line"),needle={source:util.getArg(aArgs,"source"),originalLine:line,originalColumn:util.getArg(aArgs,"column",0)};if(needle.source=this._findSourceIndex(needle.source),needle.source<0)return[];var mappings=[],index=this._findMapping(needle,this._originalMappings,"originalLine","originalColumn",util.compareByOriginalPositions,binarySearch.LEAST_UPPER_BOUND);if(0<=index){var mapping=this._originalMappings[index];if(void 0===aArgs.column)for(var originalLine=mapping.originalLine;mapping&&mapping.originalLine===originalLine;)mappings.push({line:util.getArg(mapping,"generatedLine",null),column:util.getArg(mapping,"generatedColumn",null),lastColumn:util.getArg(mapping,"lastGeneratedColumn",null)}),mapping=this._originalMappings[++index];else for(var originalColumn=mapping.originalColumn;mapping&&mapping.originalLine===line&&mapping.originalColumn==originalColumn;)mappings.push({line:util.getArg(mapping,"generatedLine",null),column:util.getArg(mapping,"generatedColumn",null),lastColumn:util.getArg(mapping,"lastGeneratedColumn",null)}),mapping=this._originalMappings[++index]}return mappings},exports.SourceMapConsumer=SourceMapConsumer,(BasicSourceMapConsumer.prototype=Object.create(SourceMapConsumer.prototype)).consumer=SourceMapConsumer,BasicSourceMapConsumer.prototype._findSourceIndex=function(aSource){var i,relativeSource=aSource;if(null!=this.sourceRoot&&(relativeSource=util.relative(this.sourceRoot,relativeSource)),this._sources.has(relativeSource))return this._sources.indexOf(relativeSource);for(i=0;i<this._absoluteSources.length;++i)if(this._absoluteSources[i]==aSource)return i;return-1},BasicSourceMapConsumer.fromSourceMap=function(aSourceMap,aSourceMapURL){var smc=Object.create(BasicSourceMapConsumer.prototype),names=smc._names=ArraySet.fromArray(aSourceMap._names.toArray(),!0),sources=smc._sources=ArraySet.fromArray(aSourceMap._sources.toArray(),!0);smc.sourceRoot=aSourceMap._sourceRoot,smc.sourcesContent=aSourceMap._generateSourcesContent(smc._sources.toArray(),smc.sourceRoot),smc.file=aSourceMap._file,smc._sourceMapURL=aSourceMapURL,smc._absoluteSources=smc._sources.toArray().map(function(s){return util.computeSourceURL(smc.sourceRoot,s,aSourceMapURL)});for(var generatedMappings=aSourceMap._mappings.toArray().slice(),destGeneratedMappings=smc.__generatedMappings=[],destOriginalMappings=smc.__originalMappings=[],i=0,length=generatedMappings.length;i<length;i++){var srcMapping=generatedMappings[i],destMapping=new Mapping;destMapping.generatedLine=srcMapping.generatedLine,destMapping.generatedColumn=srcMapping.generatedColumn,srcMapping.source&&(destMapping.source=sources.indexOf(srcMapping.source),destMapping.originalLine=srcMapping.originalLine,destMapping.originalColumn=srcMapping.originalColumn,srcMapping.name&&(destMapping.name=names.indexOf(srcMapping.name)),destOriginalMappings.push(destMapping)),destGeneratedMappings.push(destMapping)}return quickSort(smc.__originalMappings,util.compareByOriginalPositions),smc},BasicSourceMapConsumer.prototype._version=3,Object.defineProperty(BasicSourceMapConsumer.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),BasicSourceMapConsumer.prototype._parseMappings=function(aStr,aSourceRoot){for(var mapping,str,segment,end,value,generatedLine=1,previousGeneratedColumn=0,previousOriginalLine=0,previousOriginalColumn=0,previousSource=0,previousName=0,length=aStr.length,index=0,cachedSegments={},temp={},originalMappings=[],generatedMappings=[];index<length;)if(";"===aStr.charAt(index))generatedLine++,index++,previousGeneratedColumn=0;else if(","===aStr.charAt(index))index++;else{for((mapping=new Mapping).generatedLine=generatedLine,end=index;end<length&&!this._charIsMappingSeparator(aStr,end);end++);if(segment=cachedSegments[str=aStr.slice(index,end)])index+=str.length;else{for(segment=[];index<end;)base64VLQ.decode(aStr,index,temp),value=temp.value,index=temp.rest,segment.push(value);if(2===segment.length)throw new Error("Found a source, but no line and column");if(3===segment.length)throw new Error("Found a source and line, but no column");cachedSegments[str]=segment}mapping.generatedColumn=previousGeneratedColumn+segment[0],previousGeneratedColumn=mapping.generatedColumn,1<segment.length&&(mapping.source=previousSource+segment[1],previousSource+=segment[1],mapping.originalLine=previousOriginalLine+segment[2],previousOriginalLine=mapping.originalLine,mapping.originalLine+=1,mapping.originalColumn=previousOriginalColumn+segment[3],previousOriginalColumn=mapping.originalColumn,4<segment.length&&(mapping.name=previousName+segment[4],previousName+=segment[4])),generatedMappings.push(mapping),"number"==typeof mapping.originalLine&&originalMappings.push(mapping)}quickSort(generatedMappings,util.compareByGeneratedPositionsDeflated),this.__generatedMappings=generatedMappings,quickSort(originalMappings,util.compareByOriginalPositions),this.__originalMappings=originalMappings},BasicSourceMapConsumer.prototype._findMapping=function(aNeedle,aMappings,aLineName,aColumnName,aComparator,aBias){if(aNeedle[aLineName]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+aNeedle[aLineName]);if(aNeedle[aColumnName]<0)throw new TypeError("Column must be greater than or equal to 0, got "+aNeedle[aColumnName]);return binarySearch.search(aNeedle,aMappings,aComparator,aBias)},BasicSourceMapConsumer.prototype.computeColumnSpans=function(){for(var index=0;index<this._generatedMappings.length;++index){var mapping=this._generatedMappings[index];if(index+1<this._generatedMappings.length){var nextMapping=this._generatedMappings[index+1];if(mapping.generatedLine===nextMapping.generatedLine){mapping.lastGeneratedColumn=nextMapping.generatedColumn-1;continue}}mapping.lastGeneratedColumn=1/0}},BasicSourceMapConsumer.prototype.originalPositionFor=function(aArgs){var needle={generatedLine:util.getArg(aArgs,"line"),generatedColumn:util.getArg(aArgs,"column")},index=this._findMapping(needle,this._generatedMappings,"generatedLine","generatedColumn",util.compareByGeneratedPositionsDeflated,util.getArg(aArgs,"bias",SourceMapConsumer.GREATEST_LOWER_BOUND));if(0<=index){var mapping=this._generatedMappings[index];if(mapping.generatedLine===needle.generatedLine){var source=util.getArg(mapping,"source",null);null!==source&&(source=this._sources.at(source),source=util.computeSourceURL(this.sourceRoot,source,this._sourceMapURL));var name=util.getArg(mapping,"name",null);return null!==name&&(name=this._names.at(name)),{source:source,line:util.getArg(mapping,"originalLine",null),column:util.getArg(mapping,"originalColumn",null),name:name}}}return{source:null,line:null,column:null,name:null}},BasicSourceMapConsumer.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some(function(sc){return null==sc}))},BasicSourceMapConsumer.prototype.sourceContentFor=function(aSource,nullOnMissing){if(!this.sourcesContent)return null;var index=this._findSourceIndex(aSource);if(0<=index)return this.sourcesContent[index];var url,relativeSource=aSource;if(null!=this.sourceRoot&&(relativeSource=util.relative(this.sourceRoot,relativeSource)),null!=this.sourceRoot&&(url=util.urlParse(this.sourceRoot))){var fileUriAbsPath=relativeSource.replace(/^file:\/\//,"");if("file"==url.scheme&&this._sources.has(fileUriAbsPath))return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];if((!url.path||"/"==url.path)&&this._sources.has("/"+relativeSource))return this.sourcesContent[this._sources.indexOf("/"+relativeSource)]}if(nullOnMissing)return null;throw new Error('"'+relativeSource+'" is not in the SourceMap.')},BasicSourceMapConsumer.prototype.generatedPositionFor=function(aArgs){var source=util.getArg(aArgs,"source");if((source=this._findSourceIndex(source))<0)return{line:null,column:null,lastColumn:null};var needle={source:source,originalLine:util.getArg(aArgs,"line"),originalColumn:util.getArg(aArgs,"column")},index=this._findMapping(needle,this._originalMappings,"originalLine","originalColumn",util.compareByOriginalPositions,util.getArg(aArgs,"bias",SourceMapConsumer.GREATEST_LOWER_BOUND));if(0<=index){var mapping=this._originalMappings[index];if(mapping.source===needle.source)return{line:util.getArg(mapping,"generatedLine",null),column:util.getArg(mapping,"generatedColumn",null),lastColumn:util.getArg(mapping,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},exports.BasicSourceMapConsumer=BasicSourceMapConsumer,(IndexedSourceMapConsumer.prototype=Object.create(SourceMapConsumer.prototype)).constructor=SourceMapConsumer,IndexedSourceMapConsumer.prototype._version=3,Object.defineProperty(IndexedSourceMapConsumer.prototype,"sources",{get:function(){for(var sources=[],i=0;i<this._sections.length;i++)for(var j=0;j<this._sections[i].consumer.sources.length;j++)sources.push(this._sections[i].consumer.sources[j]);return sources}}),IndexedSourceMapConsumer.prototype.originalPositionFor=function(aArgs){var needle={generatedLine:util.getArg(aArgs,"line"),generatedColumn:util.getArg(aArgs,"column")},sectionIndex=binarySearch.search(needle,this._sections,function(needle,section){var cmp=needle.generatedLine-section.generatedOffset.generatedLine;return cmp||needle.generatedColumn-section.generatedOffset.generatedColumn}),section=this._sections[sectionIndex];return section?section.consumer.originalPositionFor({line:needle.generatedLine-(section.generatedOffset.generatedLine-1),column:needle.generatedColumn-(section.generatedOffset.generatedLine===needle.generatedLine?section.generatedOffset.generatedColumn-1:0),bias:aArgs.bias}):{source:null,line:null,column:null,name:null}},IndexedSourceMapConsumer.prototype.hasContentsOfAllSources=function(){return this._sections.every(function(s){return s.consumer.hasContentsOfAllSources()})},IndexedSourceMapConsumer.prototype.sourceContentFor=function(aSource,nullOnMissing){for(var i=0;i<this._sections.length;i++){var content=this._sections[i].consumer.sourceContentFor(aSource,!0);if(content)return content}if(nullOnMissing)return null;throw new Error('"'+aSource+'" is not in the SourceMap.')},IndexedSourceMapConsumer.prototype.generatedPositionFor=function(aArgs){for(var i=0;i<this._sections.length;i++){var section=this._sections[i];if(-1!==section.consumer._findSourceIndex(util.getArg(aArgs,"source"))){var generatedPosition=section.consumer.generatedPositionFor(aArgs);if(generatedPosition)return{line:generatedPosition.line+(section.generatedOffset.generatedLine-1),column:generatedPosition.column+(section.generatedOffset.generatedLine===generatedPosition.line?section.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},IndexedSourceMapConsumer.prototype._parseMappings=function(aStr,aSourceRoot){this.__generatedMappings=[],this.__originalMappings=[];for(var i=0;i<this._sections.length;i++)for(var section=this._sections[i],sectionMappings=section.consumer._generatedMappings,j=0;j<sectionMappings.length;j++){var mapping=sectionMappings[j],source=section.consumer._sources.at(mapping.source);source=util.computeSourceURL(section.consumer.sourceRoot,source,this._sourceMapURL),this._sources.add(source),source=this._sources.indexOf(source);var name=null;mapping.name&&(name=section.consumer._names.at(mapping.name),this._names.add(name),name=this._names.indexOf(name));var adjustedMapping={source:source,generatedLine:mapping.generatedLine+(section.generatedOffset.generatedLine-1),generatedColumn:mapping.generatedColumn+(section.generatedOffset.generatedLine===mapping.generatedLine?section.generatedOffset.generatedColumn-1:0),originalLine:mapping.originalLine,originalColumn:mapping.originalColumn,name:name};this.__generatedMappings.push(adjustedMapping),"number"==typeof adjustedMapping.originalLine&&this.__originalMappings.push(adjustedMapping)}quickSort(this.__generatedMappings,util.compareByGeneratedPositionsDeflated),quickSort(this.__originalMappings,util.compareByOriginalPositions)},exports.IndexedSourceMapConsumer=IndexedSourceMapConsumer},{"./array-set":32,"./base64-vlq":33,"./binary-search":35,"./quick-sort":37,"./util":41}],39:[function(require,module,exports){var base64VLQ=require("./base64-vlq"),util=require("./util"),ArraySet=require("./array-set").ArraySet,MappingList=require("./mapping-list").MappingList;function SourceMapGenerator(aArgs){aArgs||(aArgs={}),this._file=util.getArg(aArgs,"file",null),this._sourceRoot=util.getArg(aArgs,"sourceRoot",null),this._skipValidation=util.getArg(aArgs,"skipValidation",!1),this._sources=new ArraySet,this._names=new ArraySet,this._mappings=new MappingList,this._sourcesContents=null}SourceMapGenerator.prototype._version=3,SourceMapGenerator.fromSourceMap=function(aSourceMapConsumer){var sourceRoot=aSourceMapConsumer.sourceRoot,generator=new SourceMapGenerator({file:aSourceMapConsumer.file,sourceRoot:sourceRoot});return aSourceMapConsumer.eachMapping(function(mapping){var newMapping={generated:{line:mapping.generatedLine,column:mapping.generatedColumn}};null!=mapping.source&&(newMapping.source=mapping.source,null!=sourceRoot&&(newMapping.source=util.relative(sourceRoot,newMapping.source)),newMapping.original={line:mapping.originalLine,column:mapping.originalColumn},null!=mapping.name&&(newMapping.name=mapping.name)),generator.addMapping(newMapping)}),aSourceMapConsumer.sources.forEach(function(sourceFile){var sourceRelative=sourceFile;null!==sourceRoot&&(sourceRelative=util.relative(sourceRoot,sourceFile)),generator._sources.has(sourceRelative)||generator._sources.add(sourceRelative);var content=aSourceMapConsumer.sourceContentFor(sourceFile);null!=content&&generator.setSourceContent(sourceFile,content)}),generator},SourceMapGenerator.prototype.addMapping=function(aArgs){var generated=util.getArg(aArgs,"generated"),original=util.getArg(aArgs,"original",null),source=util.getArg(aArgs,"source",null),name=util.getArg(aArgs,"name",null);this._skipValidation||this._validateMapping(generated,original,source,name),null!=source&&(source=String(source),this._sources.has(source)||this._sources.add(source)),null!=name&&(name=String(name),this._names.has(name)||this._names.add(name)),this._mappings.add({generatedLine:generated.line,generatedColumn:generated.column,originalLine:null!=original&&original.line,originalColumn:null!=original&&original.column,source:source,name:name})},SourceMapGenerator.prototype.setSourceContent=function(aSourceFile,aSourceContent){var source=aSourceFile;null!=this._sourceRoot&&(source=util.relative(this._sourceRoot,source)),null!=aSourceContent?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[util.toSetString(source)]=aSourceContent):this._sourcesContents&&(delete this._sourcesContents[util.toSetString(source)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},SourceMapGenerator.prototype.applySourceMap=function(aSourceMapConsumer,aSourceFile,aSourceMapPath){var sourceFile=aSourceFile;if(null==aSourceFile){if(null==aSourceMapConsumer.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');sourceFile=aSourceMapConsumer.file}var sourceRoot=this._sourceRoot;null!=sourceRoot&&(sourceFile=util.relative(sourceRoot,sourceFile));var newSources=new ArraySet,newNames=new ArraySet;this._mappings.unsortedForEach(function(mapping){if(mapping.source===sourceFile&&null!=mapping.originalLine){var original=aSourceMapConsumer.originalPositionFor({line:mapping.originalLine,column:mapping.originalColumn});null!=original.source&&(mapping.source=original.source,null!=aSourceMapPath&&(mapping.source=util.join(aSourceMapPath,mapping.source)),null!=sourceRoot&&(mapping.source=util.relative(sourceRoot,mapping.source)),mapping.originalLine=original.line,mapping.originalColumn=original.column,null!=original.name&&(mapping.name=original.name))}var source=mapping.source;null==source||newSources.has(source)||newSources.add(source);var name=mapping.name;null==name||newNames.has(name)||newNames.add(name)},this),this._sources=newSources,this._names=newNames,aSourceMapConsumer.sources.forEach(function(sourceFile){var content=aSourceMapConsumer.sourceContentFor(sourceFile);null!=content&&(null!=aSourceMapPath&&(sourceFile=util.join(aSourceMapPath,sourceFile)),null!=sourceRoot&&(sourceFile=util.relative(sourceRoot,sourceFile)),this.setSourceContent(sourceFile,content))},this)},SourceMapGenerator.prototype._validateMapping=function(aGenerated,aOriginal,aSource,aName){if(aOriginal&&"number"!=typeof aOriginal.line&&"number"!=typeof aOriginal.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(aGenerated&&"line"in aGenerated&&"column"in aGenerated&&0<aGenerated.line&&0<=aGenerated.column)||aOriginal||aSource||aName)&&!(aGenerated&&"line"in aGenerated&&"column"in aGenerated&&aOriginal&&"line"in aOriginal&&"column"in aOriginal&&0<aGenerated.line&&0<=aGenerated.column&&0<aOriginal.line&&0<=aOriginal.column&&aSource))throw new Error("Invalid mapping: "+JSON.stringify({generated:aGenerated,source:aSource,original:aOriginal,name:aName}))},SourceMapGenerator.prototype._serializeMappings=function(){for(var next,mapping,nameIdx,sourceIdx,previousGeneratedColumn=0,previousGeneratedLine=1,previousOriginalColumn=0,previousOriginalLine=0,previousName=0,previousSource=0,result="",mappings=this._mappings.toArray(),i=0,len=mappings.length;i<len;i++){if(next="",(mapping=mappings[i]).generatedLine!==previousGeneratedLine)for(previousGeneratedColumn=0;mapping.generatedLine!==previousGeneratedLine;)next+=";",previousGeneratedLine++;else if(0<i){if(!util.compareByGeneratedPositionsInflated(mapping,mappings[i-1]))continue;next+=","}next+=base64VLQ.encode(mapping.generatedColumn-previousGeneratedColumn),previousGeneratedColumn=mapping.generatedColumn,null!=mapping.source&&(sourceIdx=this._sources.indexOf(mapping.source),next+=base64VLQ.encode(sourceIdx-previousSource),previousSource=sourceIdx,next+=base64VLQ.encode(mapping.originalLine-1-previousOriginalLine),previousOriginalLine=mapping.originalLine-1,next+=base64VLQ.encode(mapping.originalColumn-previousOriginalColumn),previousOriginalColumn=mapping.originalColumn,null!=mapping.name&&(nameIdx=this._names.indexOf(mapping.name),next+=base64VLQ.encode(nameIdx-previousName),previousName=nameIdx)),result+=next}return result},SourceMapGenerator.prototype._generateSourcesContent=function(aSources,aSourceRoot){return aSources.map(function(source){if(!this._sourcesContents)return null;null!=aSourceRoot&&(source=util.relative(aSourceRoot,source));var key=util.toSetString(source);return Object.prototype.hasOwnProperty.call(this._sourcesContents,key)?this._sourcesContents[key]:null},this)},SourceMapGenerator.prototype.toJSON=function(){var map={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(map.file=this._file),null!=this._sourceRoot&&(map.sourceRoot=this._sourceRoot),this._sourcesContents&&(map.sourcesContent=this._generateSourcesContent(map.sources,map.sourceRoot)),map},SourceMapGenerator.prototype.toString=function(){return JSON.stringify(this.toJSON())},exports.SourceMapGenerator=SourceMapGenerator},{"./array-set":32,"./base64-vlq":33,"./mapping-list":36,"./util":41}],40:[function(require,module,exports){var SourceMapGenerator=require("./source-map-generator").SourceMapGenerator,util=require("./util"),REGEX_NEWLINE=/(\r?\n)/,isSourceNode="$$$isSourceNode$$$";function SourceNode(aLine,aColumn,aSource,aChunks,aName){this.children=[],this.sourceContents={},this.line=null==aLine?null:aLine,this.column=null==aColumn?null:aColumn,this.source=null==aSource?null:aSource,this.name=null==aName?null:aName,this[isSourceNode]=!0,null!=aChunks&&this.add(aChunks)}SourceNode.fromStringWithSourceMap=function(aGeneratedCode,aSourceMapConsumer,aRelativePath){var node=new SourceNode,remainingLines=aGeneratedCode.split(REGEX_NEWLINE),remainingLinesIndex=0,shiftNextLine=function(){return getNextLine()+(getNextLine()||"");function getNextLine(){return remainingLinesIndex<remainingLines.length?remainingLines[remainingLinesIndex++]:void 0}},lastGeneratedLine=1,lastGeneratedColumn=0,lastMapping=null;return aSourceMapConsumer.eachMapping(function(mapping){if(null!==lastMapping){if(!(lastGeneratedLine<mapping.generatedLine)){var code=(nextLine=remainingLines[remainingLinesIndex]||"").substr(0,mapping.generatedColumn-lastGeneratedColumn);return remainingLines[remainingLinesIndex]=nextLine.substr(mapping.generatedColumn-lastGeneratedColumn),lastGeneratedColumn=mapping.generatedColumn,addMappingWithCode(lastMapping,code),void(lastMapping=mapping)}addMappingWithCode(lastMapping,shiftNextLine()),lastGeneratedLine++,lastGeneratedColumn=0}for(;lastGeneratedLine<mapping.generatedLine;)node.add(shiftNextLine()),lastGeneratedLine++;if(lastGeneratedColumn<mapping.generatedColumn){var nextLine=remainingLines[remainingLinesIndex]||"";node.add(nextLine.substr(0,mapping.generatedColumn)),remainingLines[remainingLinesIndex]=nextLine.substr(mapping.generatedColumn),lastGeneratedColumn=mapping.generatedColumn}lastMapping=mapping},this),remainingLinesIndex<remainingLines.length&&(lastMapping&&addMappingWithCode(lastMapping,shiftNextLine()),node.add(remainingLines.splice(remainingLinesIndex).join(""))),aSourceMapConsumer.sources.forEach(function(sourceFile){var content=aSourceMapConsumer.sourceContentFor(sourceFile);null!=content&&(null!=aRelativePath&&(sourceFile=util.join(aRelativePath,sourceFile)),node.setSourceContent(sourceFile,content))}),node;function addMappingWithCode(mapping,code){if(null===mapping||void 0===mapping.source)node.add(code);else{var source=aRelativePath?util.join(aRelativePath,mapping.source):mapping.source;node.add(new SourceNode(mapping.originalLine,mapping.originalColumn,source,code,mapping.name))}}},SourceNode.prototype.add=function(aChunk){if(Array.isArray(aChunk))aChunk.forEach(function(chunk){this.add(chunk)},this);else{if(!aChunk[isSourceNode]&&"string"!=typeof aChunk)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+aChunk);aChunk&&this.children.push(aChunk)}return this},SourceNode.prototype.prepend=function(aChunk){if(Array.isArray(aChunk))for(var i=aChunk.length-1;0<=i;i--)this.prepend(aChunk[i]);else{if(!aChunk[isSourceNode]&&"string"!=typeof aChunk)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+aChunk);this.children.unshift(aChunk)}return this},SourceNode.prototype.walk=function(aFn){for(var chunk,i=0,len=this.children.length;i<len;i++)(chunk=this.children[i])[isSourceNode]?chunk.walk(aFn):""!==chunk&&aFn(chunk,{source:this.source,line:this.line,column:this.column,name:this.name})},SourceNode.prototype.join=function(aSep){var newChildren,i,len=this.children.length;if(0<len){for(newChildren=[],i=0;i<len-1;i++)newChildren.push(this.children[i]),newChildren.push(aSep);newChildren.push(this.children[i]),this.children=newChildren}return this},SourceNode.prototype.replaceRight=function(aPattern,aReplacement){var lastChild=this.children[this.children.length-1];return lastChild[isSourceNode]?lastChild.replaceRight(aPattern,aReplacement):"string"==typeof lastChild?this.children[this.children.length-1]=lastChild.replace(aPattern,aReplacement):this.children.push("".replace(aPattern,aReplacement)),this},SourceNode.prototype.setSourceContent=function(aSourceFile,aSourceContent){this.sourceContents[util.toSetString(aSourceFile)]=aSourceContent},SourceNode.prototype.walkSourceContents=function(aFn){for(var i=0,len=this.children.length;i<len;i++)this.children[i][isSourceNode]&&this.children[i].walkSourceContents(aFn);var sources=Object.keys(this.sourceContents);for(i=0,len=sources.length;i<len;i++)aFn(util.fromSetString(sources[i]),this.sourceContents[sources[i]])},SourceNode.prototype.toString=function(){var str="";return this.walk(function(chunk){str+=chunk}),str},SourceNode.prototype.toStringWithSourceMap=function(aArgs){var generated={code:"",line:1,column:0},map=new SourceMapGenerator(aArgs),sourceMappingActive=!1,lastOriginalSource=null,lastOriginalLine=null,lastOriginalColumn=null,lastOriginalName=null;return this.walk(function(chunk,original){generated.code+=chunk,null!==original.source&&null!==original.line&&null!==original.column?(lastOriginalSource===original.source&&lastOriginalLine===original.line&&lastOriginalColumn===original.column&&lastOriginalName===original.name||map.addMapping({source:original.source,original:{line:original.line,column:original.column},generated:{line:generated.line,column:generated.column},name:original.name}),lastOriginalSource=original.source,lastOriginalLine=original.line,lastOriginalColumn=original.column,lastOriginalName=original.name,sourceMappingActive=!0):sourceMappingActive&&(map.addMapping({generated:{line:generated.line,column:generated.column}}),lastOriginalSource=null,sourceMappingActive=!1);for(var idx=0,length=chunk.length;idx<length;idx++)10===chunk.charCodeAt(idx)?(generated.line++,generated.column=0,idx+1===length?(lastOriginalSource=null,sourceMappingActive=!1):sourceMappingActive&&map.addMapping({source:original.source,original:{line:original.line,column:original.column},generated:{line:generated.line,column:generated.column},name:original.name})):generated.column++}),this.walkSourceContents(function(sourceFile,sourceContent){map.setSourceContent(sourceFile,sourceContent)}),{code:generated.code,map:map}},exports.SourceNode=SourceNode},{"./source-map-generator":39,"./util":41}],41:[function(require,module,exports){exports.getArg=function(aArgs,aName,aDefaultValue){if(aName in aArgs)return aArgs[aName];if(3===arguments.length)return aDefaultValue;throw new Error('"'+aName+'" is a required argument.')};var urlRegexp=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,dataUrlRegexp=/^data:.+\,.+$/;function urlParse(aUrl){var match=aUrl.match(urlRegexp);return match?{scheme:match[1],auth:match[2],host:match[3],port:match[4],path:match[5]}:null}function urlGenerate(aParsedUrl){var url="";return aParsedUrl.scheme&&(url+=aParsedUrl.scheme+":"),url+="//",aParsedUrl.auth&&(url+=aParsedUrl.auth+"@"),aParsedUrl.host&&(url+=aParsedUrl.host),aParsedUrl.port&&(url+=":"+aParsedUrl.port),aParsedUrl.path&&(url+=aParsedUrl.path),url}function normalize(aPath){var path=aPath,url=urlParse(aPath);if(url){if(!url.path)return aPath;path=url.path}for(var part,isAbsolute=exports.isAbsolute(path),parts=path.split(/\/+/),up=0,i=parts.length-1;0<=i;i--)"."===(part=parts[i])?parts.splice(i,1):".."===part?up++:0<up&&(""===part?(parts.splice(i+1,up),up=0):(parts.splice(i,2),up--));return""===(path=parts.join("/"))&&(path=isAbsolute?"/":"."),url?(url.path=path,urlGenerate(url)):path}function join(aRoot,aPath){""===aRoot&&(aRoot="."),""===aPath&&(aPath=".");var aPathUrl=urlParse(aPath),aRootUrl=urlParse(aRoot);if(aRootUrl&&(aRoot=aRootUrl.path||"/"),aPathUrl&&!aPathUrl.scheme)return aRootUrl&&(aPathUrl.scheme=aRootUrl.scheme),urlGenerate(aPathUrl);if(aPathUrl||aPath.match(dataUrlRegexp))return aPath;if(aRootUrl&&!aRootUrl.host&&!aRootUrl.path)return aRootUrl.host=aPath,urlGenerate(aRootUrl);var joined="/"===aPath.charAt(0)?aPath:normalize(aRoot.replace(/\/+$/,"")+"/"+aPath);return aRootUrl?(aRootUrl.path=joined,urlGenerate(aRootUrl)):joined}exports.urlParse=urlParse,exports.urlGenerate=urlGenerate,exports.normalize=normalize,exports.join=join,exports.isAbsolute=function(aPath){return"/"===aPath.charAt(0)||urlRegexp.test(aPath)},exports.relative=function(aRoot,aPath){""===aRoot&&(aRoot="."),aRoot=aRoot.replace(/\/$/,"");for(var level=0;0!==aPath.indexOf(aRoot+"/");){var index=aRoot.lastIndexOf("/");if(index<0)return aPath;if((aRoot=aRoot.slice(0,index)).match(/^([^\/]+:\/)?\/*$/))return aPath;++level}return Array(level+1).join("../")+aPath.substr(aRoot.length+1)};var supportsNullProto=!("__proto__"in Object.create(null));function identity(s){return s}function isProtoString(s){if(!s)return!1;var length=s.length;if(length<9)return!1;if(95!==s.charCodeAt(length-1)||95!==s.charCodeAt(length-2)||111!==s.charCodeAt(length-3)||116!==s.charCodeAt(length-4)||111!==s.charCodeAt(length-5)||114!==s.charCodeAt(length-6)||112!==s.charCodeAt(length-7)||95!==s.charCodeAt(length-8)||95!==s.charCodeAt(length-9))return!1;for(var i=length-10;0<=i;i--)if(36!==s.charCodeAt(i))return!1;return!0}function strcmp(aStr1,aStr2){return aStr1===aStr2?0:null===aStr1?1:null===aStr2?-1:aStr2<aStr1?1:-1}exports.toSetString=supportsNullProto?identity:function(aStr){return isProtoString(aStr)?"$"+aStr:aStr},exports.fromSetString=supportsNullProto?identity:function(aStr){return isProtoString(aStr)?aStr.slice(1):aStr},exports.compareByOriginalPositions=function(mappingA,mappingB,onlyCompareOriginal){var cmp=strcmp(mappingA.source,mappingB.source);return 0!==cmp?cmp:0!=(cmp=mappingA.originalLine-mappingB.originalLine)?cmp:0!=(cmp=mappingA.originalColumn-mappingB.originalColumn)||onlyCompareOriginal?cmp:0!=(cmp=mappingA.generatedColumn-mappingB.generatedColumn)?cmp:0!=(cmp=mappingA.generatedLine-mappingB.generatedLine)?cmp:strcmp(mappingA.name,mappingB.name)},exports.compareByGeneratedPositionsDeflated=function(mappingA,mappingB,onlyCompareGenerated){var cmp=mappingA.generatedLine-mappingB.generatedLine;return 0!==cmp?cmp:0!=(cmp=mappingA.generatedColumn-mappingB.generatedColumn)||onlyCompareGenerated?cmp:0!==(cmp=strcmp(mappingA.source,mappingB.source))?cmp:0!=(cmp=mappingA.originalLine-mappingB.originalLine)?cmp:0!=(cmp=mappingA.originalColumn-mappingB.originalColumn)?cmp:strcmp(mappingA.name,mappingB.name)},exports.compareByGeneratedPositionsInflated=function(mappingA,mappingB){var cmp=mappingA.generatedLine-mappingB.generatedLine;return 0!==cmp?cmp:0!=(cmp=mappingA.generatedColumn-mappingB.generatedColumn)?cmp:0!==(cmp=strcmp(mappingA.source,mappingB.source))?cmp:0!=(cmp=mappingA.originalLine-mappingB.originalLine)?cmp:0!=(cmp=mappingA.originalColumn-mappingB.originalColumn)?cmp:strcmp(mappingA.name,mappingB.name)},exports.parseSourceMapInput=function(str){return JSON.parse(str.replace(/^\)]}'[^\n]*\n/,""))},exports.computeSourceURL=function(sourceRoot,sourceURL,sourceMapURL){if(sourceURL=sourceURL||"",sourceRoot&&("/"!==sourceRoot[sourceRoot.length-1]&&"/"!==sourceURL[0]&&(sourceRoot+="/"),sourceURL=sourceRoot+sourceURL),sourceMapURL){var parsed=urlParse(sourceMapURL);if(!parsed)throw new Error("sourceMapURL could not be parsed");if(parsed.path){var index=parsed.path.lastIndexOf("/");0<=index&&(parsed.path=parsed.path.substring(0,index+1))}sourceURL=join(urlGenerate(parsed),sourceURL)}return normalize(sourceURL)}},{}],42:[function(require,module,exports){exports.SourceMapGenerator=require("./lib/source-map-generator").SourceMapGenerator,exports.SourceMapConsumer=require("./lib/source-map-consumer").SourceMapConsumer,exports.SourceNode=require("./lib/source-node").SourceNode},{"./lib/source-map-consumer":38,"./lib/source-map-generator":39,"./lib/source-node":40}],43:[function(require,module,exports){!function(global,factory){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=global.document?factory(global,!0):function(w){if(!w.document)throw new Error("jQuery requires a window with a document");return factory(w)}:factory(global)}("undefined"!=typeof window?window:this,function(window,noGlobal){"use strict";var arr=[],document=window.document,getProto=Object.getPrototypeOf,slice=arr.slice,concat=arr.concat,push=arr.push,indexOf=arr.indexOf,class2type={},toString=class2type.toString,hasOwn=class2type.hasOwnProperty,fnToString=hasOwn.toString,ObjectFunctionString=fnToString.call(Object),support={},isFunction=function(obj){return"function"==typeof obj&&"number"!=typeof obj.nodeType},isWindow=function(obj){return null!=obj&&obj===obj.window},preservedScriptAttributes={type:!0,src:!0,noModule:!0};function DOMEval(code,doc,node){var i,script=(doc=doc||document).createElement("script");if(script.text=code,node)for(i in preservedScriptAttributes)node[i]&&(script[i]=node[i]);doc.head.appendChild(script).parentNode.removeChild(script)}function toType(obj){return null==obj?obj+"":"object"==typeof obj||"function"==typeof obj?class2type[toString.call(obj)]||"object":typeof obj}var jQuery=function(selector,context){return new jQuery.fn.init(selector,context)},rtrim=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function isArrayLike(obj){var length=!!obj&&"length"in obj&&obj.length,type=toType(obj);return!isFunction(obj)&&!isWindow(obj)&&("array"===type||0===length||"number"==typeof length&&0<length&&length-1 in obj)}jQuery.fn=jQuery.prototype={jquery:"3.3.1",constructor:jQuery,length:0,toArray:function(){return slice.call(this)},get:function(num){return null==num?slice.call(this):num<0?this[num+this.length]:this[num]},pushStack:function(elems){var ret=jQuery.merge(this.constructor(),elems);return ret.prevObject=this,ret},each:function(callback){return jQuery.each(this,callback)},map:function(callback){return this.pushStack(jQuery.map(this,function(elem,i){return callback.call(elem,i,elem)}))},slice:function(){return this.pushStack(slice.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(i){var len=this.length,j=+i+(i<0?len:0);return this.pushStack(0<=j&&j<len?[this[j]]:[])},end:function(){return this.prevObject||this.constructor()},push:push,sort:arr.sort,splice:arr.splice},jQuery.extend=jQuery.fn.extend=function(){var options,name,src,copy,copyIsArray,clone,target=arguments[0]||{},i=1,length=arguments.length,deep=!1;for("boolean"==typeof target&&(deep=target,target=arguments[i]||{},i++),"object"==typeof target||isFunction(target)||(target={}),i===length&&(target=this,i--);i<length;i++)if(null!=(options=arguments[i]))for(name in options)src=target[name],target!==(copy=options[name])&&(deep&&copy&&(jQuery.isPlainObject(copy)||(copyIsArray=Array.isArray(copy)))?(clone=copyIsArray?(copyIsArray=!1,src&&Array.isArray(src)?src:[]):src&&jQuery.isPlainObject(src)?src:{},target[name]=jQuery.extend(deep,clone,copy)):void 0!==copy&&(target[name]=copy));return target},jQuery.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(msg){throw new Error(msg)},noop:function(){},isPlainObject:function(obj){var proto,Ctor;return!(!obj||"[object Object]"!==toString.call(obj))&&(!(proto=getProto(obj))||"function"==typeof(Ctor=hasOwn.call(proto,"constructor")&&proto.constructor)&&fnToString.call(Ctor)===ObjectFunctionString)},isEmptyObject:function(obj){var name;for(name in obj)return!1;return!0},globalEval:function(code){DOMEval(code)},each:function(obj,callback){var length,i=0;if(isArrayLike(obj))for(length=obj.length;i<length&&!1!==callback.call(obj[i],i,obj[i]);i++);else for(i in obj)if(!1===callback.call(obj[i],i,obj[i]))break;return obj},trim:function(text){return null==text?"":(text+"").replace(rtrim,"")},makeArray:function(arr,results){var ret=results||[];return null!=arr&&(isArrayLike(Object(arr))?jQuery.merge(ret,"string"==typeof arr?[arr]:arr):push.call(ret,arr)),ret},inArray:function(elem,arr,i){return null==arr?-1:indexOf.call(arr,elem,i)},merge:function(first,second){for(var len=+second.length,j=0,i=first.length;j<len;j++)first[i++]=second[j];return first.length=i,first},grep:function(elems,callback,invert){for(var matches=[],i=0,length=elems.length,callbackExpect=!invert;i<length;i++)!callback(elems[i],i)!==callbackExpect&&matches.push(elems[i]);return matches},map:function(elems,callback,arg){var length,value,i=0,ret=[];if(isArrayLike(elems))for(length=elems.length;i<length;i++)null!=(value=callback(elems[i],i,arg))&&ret.push(value);else for(i in elems)null!=(value=callback(elems[i],i,arg))&&ret.push(value);return concat.apply([],ret)},guid:1,support:support}),"function"==typeof Symbol&&(jQuery.fn[Symbol.iterator]=arr[Symbol.iterator]),jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(i,name){class2type["[object "+name+"]"]=name.toLowerCase()});var Sizzle=function(window){var i,support,Expr,getText,isXML,tokenize,compile,select,outermostContext,sortInput,hasDuplicate,setDocument,document,docElem,documentIsHTML,rbuggyQSA,rbuggyMatches,matches,contains,expando="sizzle"+1*new Date,preferredDoc=window.document,dirruns=0,done=0,classCache=createCache(),tokenCache=createCache(),compilerCache=createCache(),sortOrder=function(a,b){return a===b&&(hasDuplicate=!0),0},hasOwn={}.hasOwnProperty,arr=[],pop=arr.pop,push_native=arr.push,push=arr.push,slice=arr.slice,indexOf=function(list,elem){for(var i=0,len=list.length;i<len;i++)if(list[i]===elem)return i;return-1},booleans="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",whitespace="[\\x20\\t\\r\\n\\f]",identifier="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",attributes="\\["+whitespace+"*("+identifier+")(?:"+whitespace+"*([*^$|!~]?=)"+whitespace+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+identifier+"))|)"+whitespace+"*\\]",pseudos=":("+identifier+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+attributes+")*)|.*)\\)|)",rwhitespace=new RegExp(whitespace+"+","g"),rtrim=new RegExp("^"+whitespace+"+|((?:^|[^\\\\])(?:\\\\.)*)"+whitespace+"+$","g"),rcomma=new RegExp("^"+whitespace+"*,"+whitespace+"*"),rcombinators=new RegExp("^"+whitespace+"*([>+~]|"+whitespace+")"+whitespace+"*"),rattributeQuotes=new RegExp("="+whitespace+"*([^\\]'\"]*?)"+whitespace+"*\\]","g"),rpseudo=new RegExp(pseudos),ridentifier=new RegExp("^"+identifier+"$"),matchExpr={ID:new RegExp("^#("+identifier+")"),CLASS:new RegExp("^\\.("+identifier+")"),TAG:new RegExp("^("+identifier+"|[*])"),ATTR:new RegExp("^"+attributes),PSEUDO:new RegExp("^"+pseudos),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+whitespace+"*(even|odd|(([+-]|)(\\d*)n|)"+whitespace+"*(?:([+-]|)"+whitespace+"*(\\d+)|))"+whitespace+"*\\)|)","i"),bool:new RegExp("^(?:"+booleans+")$","i"),needsContext:new RegExp("^"+whitespace+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+whitespace+"*((?:-\\d)?\\d*)"+whitespace+"*\\)|)(?=[^-]|$)","i")},rinputs=/^(?:input|select|textarea|button)$/i,rheader=/^h\d$/i,rnative=/^[^{]+\{\s*\[native \w/,rquickExpr=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,rsibling=/[+~]/,runescape=new RegExp("\\\\([\\da-f]{1,6}"+whitespace+"?|("+whitespace+")|.)","ig"),funescape=function(_,escaped,escapedWhitespace){var high="0x"+escaped-65536;return high!=high||escapedWhitespace?escaped:high<0?String.fromCharCode(high+65536):String.fromCharCode(high>>10|55296,1023&high|56320)},rcssescape=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,fcssescape=function(ch,asCodePoint){return asCodePoint?"\0"===ch?"�":ch.slice(0,-1)+"\\"+ch.charCodeAt(ch.length-1).toString(16)+" ":"\\"+ch},unloadHandler=function(){setDocument()},disabledAncestor=addCombinator(function(elem){return!0===elem.disabled&&("form"in elem||"label"in elem)},{dir:"parentNode",next:"legend"});try{push.apply(arr=slice.call(preferredDoc.childNodes),preferredDoc.childNodes),arr[preferredDoc.childNodes.length].nodeType}catch(e){push={apply:arr.length?function(target,els){push_native.apply(target,slice.call(els))}:function(target,els){for(var j=target.length,i=0;target[j++]=els[i++];);target.length=j-1}}}function Sizzle(selector,context,results,seed){var m,i,elem,nid,match,groups,newSelector,newContext=context&&context.ownerDocument,nodeType=context?context.nodeType:9;if(results=results||[],"string"!=typeof selector||!selector||1!==nodeType&&9!==nodeType&&11!==nodeType)return results;if(!seed&&((context?context.ownerDocument||context:preferredDoc)!==document&&setDocument(context),context=context||document,documentIsHTML)){if(11!==nodeType&&(match=rquickExpr.exec(selector)))if(m=match[1]){if(9===nodeType){if(!(elem=context.getElementById(m)))return results;if(elem.id===m)return results.push(elem),results}else if(newContext&&(elem=newContext.getElementById(m))&&contains(context,elem)&&elem.id===m)return results.push(elem),results}else{if(match[2])return push.apply(results,context.getElementsByTagName(selector)),results;if((m=match[3])&&support.getElementsByClassName&&context.getElementsByClassName)return push.apply(results,context.getElementsByClassName(m)),results}if(support.qsa&&!compilerCache[selector+" "]&&(!rbuggyQSA||!rbuggyQSA.test(selector))){if(1!==nodeType)newContext=context,newSelector=selector;else if("object"!==context.nodeName.toLowerCase()){for((nid=context.getAttribute("id"))?nid=nid.replace(rcssescape,fcssescape):context.setAttribute("id",nid=expando),i=(groups=tokenize(selector)).length;i--;)groups[i]="#"+nid+" "+toSelector(groups[i]);newSelector=groups.join(","),newContext=rsibling.test(selector)&&testContext(context.parentNode)||context}if(newSelector)try{return push.apply(results,newContext.querySelectorAll(newSelector)),results}catch(qsaError){}finally{nid===expando&&context.removeAttribute("id")}}}return select(selector.replace(rtrim,"$1"),context,results,seed)}function createCache(){var keys=[];return function cache(key,value){return keys.push(key+" ")>Expr.cacheLength&&delete cache[keys.shift()],cache[key+" "]=value}}function markFunction(fn){return fn[expando]=!0,fn}function assert(fn){var el=document.createElement("fieldset");try{return!!fn(el)}catch(e){return!1}finally{el.parentNode&&el.parentNode.removeChild(el),el=null}}function addHandle(attrs,handler){for(var arr=attrs.split("|"),i=arr.length;i--;)Expr.attrHandle[arr[i]]=handler}function siblingCheck(a,b){var cur=b&&a,diff=cur&&1===a.nodeType&&1===b.nodeType&&a.sourceIndex-b.sourceIndex;if(diff)return diff;if(cur)for(;cur=cur.nextSibling;)if(cur===b)return-1;return a?1:-1}function createInputPseudo(type){return function(elem){return"input"===elem.nodeName.toLowerCase()&&elem.type===type}}function createButtonPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return("input"===name||"button"===name)&&elem.type===type}}function createDisabledPseudo(disabled){return function(elem){return"form"in elem?elem.parentNode&&!1===elem.disabled?"label"in elem?"label"in elem.parentNode?elem.parentNode.disabled===disabled:elem.disabled===disabled:elem.isDisabled===disabled||elem.isDisabled!==!disabled&&disabledAncestor(elem)===disabled:elem.disabled===disabled:"label"in elem&&elem.disabled===disabled}}function createPositionalPseudo(fn){return markFunction(function(argument){return argument=+argument,markFunction(function(seed,matches){for(var j,matchIndexes=fn([],seed.length,argument),i=matchIndexes.length;i--;)seed[j=matchIndexes[i]]&&(seed[j]=!(matches[j]=seed[j]))})})}function testContext(context){return context&&void 0!==context.getElementsByTagName&&context}for(i in support=Sizzle.support={},isXML=Sizzle.isXML=function(elem){var documentElement=elem&&(elem.ownerDocument||elem).documentElement;return!!documentElement&&"HTML"!==documentElement.nodeName},setDocument=Sizzle.setDocument=function(node){var hasCompare,subWindow,doc=node?node.ownerDocument||node:preferredDoc;return doc!==document&&9===doc.nodeType&&doc.documentElement&&(docElem=(document=doc).documentElement,documentIsHTML=!isXML(document),preferredDoc!==document&&(subWindow=document.defaultView)&&subWindow.top!==subWindow&&(subWindow.addEventListener?subWindow.addEventListener("unload",unloadHandler,!1):subWindow.attachEvent&&subWindow.attachEvent("onunload",unloadHandler)),support.attributes=assert(function(el){return el.className="i",!el.getAttribute("className")}),support.getElementsByTagName=assert(function(el){return el.appendChild(document.createComment("")),!el.getElementsByTagName("*").length}),support.getElementsByClassName=rnative.test(document.getElementsByClassName),support.getById=assert(function(el){return docElem.appendChild(el).id=expando,!document.getElementsByName||!document.getElementsByName(expando).length}),support.getById?(Expr.filter.ID=function(id){var attrId=id.replace(runescape,funescape);return function(elem){return elem.getAttribute("id")===attrId}},Expr.find.ID=function(id,context){if(void 0!==context.getElementById&&documentIsHTML){var elem=context.getElementById(id);return elem?[elem]:[]}}):(Expr.filter.ID=function(id){var attrId=id.replace(runescape,funescape);return function(elem){var node=void 0!==elem.getAttributeNode&&elem.getAttributeNode("id");return node&&node.value===attrId}},Expr.find.ID=function(id,context){if(void 0!==context.getElementById&&documentIsHTML){var node,i,elems,elem=context.getElementById(id);if(elem){if((node=elem.getAttributeNode("id"))&&node.value===id)return[elem];for(elems=context.getElementsByName(id),i=0;elem=elems[i++];)if((node=elem.getAttributeNode("id"))&&node.value===id)return[elem]}return[]}}),Expr.find.TAG=support.getElementsByTagName?function(tag,context){return void 0!==context.getElementsByTagName?context.getElementsByTagName(tag):support.qsa?context.querySelectorAll(tag):void 0}:function(tag,context){var elem,tmp=[],i=0,results=context.getElementsByTagName(tag);if("*"!==tag)return results;for(;elem=results[i++];)1===elem.nodeType&&tmp.push(elem);return tmp},Expr.find.CLASS=support.getElementsByClassName&&function(className,context){if(void 0!==context.getElementsByClassName&&documentIsHTML)return context.getElementsByClassName(className)},rbuggyMatches=[],rbuggyQSA=[],(support.qsa=rnative.test(document.querySelectorAll))&&(assert(function(el){docElem.appendChild(el).innerHTML="<a id='"+expando+"'></a><select id='"+expando+"-\r\\' msallowcapture=''><option selected=''></option></select>",el.querySelectorAll("[msallowcapture^='']").length&&rbuggyQSA.push("[*^$]="+whitespace+"*(?:''|\"\")"),el.querySelectorAll("[selected]").length||rbuggyQSA.push("\\["+whitespace+"*(?:value|"+booleans+")"),el.querySelectorAll("[id~="+expando+"-]").length||rbuggyQSA.push("~="),el.querySelectorAll(":checked").length||rbuggyQSA.push(":checked"),el.querySelectorAll("a#"+expando+"+*").length||rbuggyQSA.push(".#.+[+~]")}),assert(function(el){el.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var input=document.createElement("input");input.setAttribute("type","hidden"),el.appendChild(input).setAttribute("name","D"),el.querySelectorAll("[name=d]").length&&rbuggyQSA.push("name"+whitespace+"*[*^$|!~]?="),2!==el.querySelectorAll(":enabled").length&&rbuggyQSA.push(":enabled",":disabled"),docElem.appendChild(el).disabled=!0,2!==el.querySelectorAll(":disabled").length&&rbuggyQSA.push(":enabled",":disabled"),el.querySelectorAll("*,:x"),rbuggyQSA.push(",.*:")})),(support.matchesSelector=rnative.test(matches=docElem.matches||docElem.webkitMatchesSelector||docElem.mozMatchesSelector||docElem.oMatchesSelector||docElem.msMatchesSelector))&&assert(function(el){support.disconnectedMatch=matches.call(el,"*"),matches.call(el,"[s!='']:x"),rbuggyMatches.push("!=",pseudos)}),rbuggyQSA=rbuggyQSA.length&&new RegExp(rbuggyQSA.join("|")),rbuggyMatches=rbuggyMatches.length&&new RegExp(rbuggyMatches.join("|")),hasCompare=rnative.test(docElem.compareDocumentPosition),contains=hasCompare||rnative.test(docElem.contains)?function(a,b){var adown=9===a.nodeType?a.documentElement:a,bup=b&&b.parentNode;return a===bup||!(!bup||1!==bup.nodeType||!(adown.contains?adown.contains(bup):a.compareDocumentPosition&&16&a.compareDocumentPosition(bup)))}:function(a,b){if(b)for(;b=b.parentNode;)if(b===a)return!0;return!1},sortOrder=hasCompare?function(a,b){if(a===b)return hasDuplicate=!0,0;var compare=!a.compareDocumentPosition-!b.compareDocumentPosition;return compare||(1&(compare=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1)||!support.sortDetached&&b.compareDocumentPosition(a)===compare?a===document||a.ownerDocument===preferredDoc&&contains(preferredDoc,a)?-1:b===document||b.ownerDocument===preferredDoc&&contains(preferredDoc,b)?1:sortInput?indexOf(sortInput,a)-indexOf(sortInput,b):0:4&compare?-1:1)}:function(a,b){if(a===b)return hasDuplicate=!0,0;var cur,i=0,aup=a.parentNode,bup=b.parentNode,ap=[a],bp=[b];if(!aup||!bup)return a===document?-1:b===document?1:aup?-1:bup?1:sortInput?indexOf(sortInput,a)-indexOf(sortInput,b):0;if(aup===bup)return siblingCheck(a,b);for(cur=a;cur=cur.parentNode;)ap.unshift(cur);for(cur=b;cur=cur.parentNode;)bp.unshift(cur);for(;ap[i]===bp[i];)i++;return i?siblingCheck(ap[i],bp[i]):ap[i]===preferredDoc?-1:bp[i]===preferredDoc?1:0}),document},Sizzle.matches=function(expr,elements){return Sizzle(expr,null,null,elements)},Sizzle.matchesSelector=function(elem,expr){if((elem.ownerDocument||elem)!==document&&setDocument(elem),expr=expr.replace(rattributeQuotes,"='$1']"),support.matchesSelector&&documentIsHTML&&!compilerCache[expr+" "]&&(!rbuggyMatches||!rbuggyMatches.test(expr))&&(!rbuggyQSA||!rbuggyQSA.test(expr)))try{var ret=matches.call(elem,expr);if(ret||support.disconnectedMatch||elem.document&&11!==elem.document.nodeType)return ret}catch(e){}return 0<Sizzle(expr,document,null,[elem]).length},Sizzle.contains=function(context,elem){return(context.ownerDocument||context)!==document&&setDocument(context),contains(context,elem)},Sizzle.attr=function(elem,name){(elem.ownerDocument||elem)!==document&&setDocument(elem);var fn=Expr.attrHandle[name.toLowerCase()],val=fn&&hasOwn.call(Expr.attrHandle,name.toLowerCase())?fn(elem,name,!documentIsHTML):void 0;return void 0!==val?val:support.attributes||!documentIsHTML?elem.getAttribute(name):(val=elem.getAttributeNode(name))&&val.specified?val.value:null},Sizzle.escape=function(sel){return(sel+"").replace(rcssescape,fcssescape)},Sizzle.error=function(msg){throw new Error("Syntax error, unrecognized expression: "+msg)},Sizzle.uniqueSort=function(results){var elem,duplicates=[],j=0,i=0;if(hasDuplicate=!support.detectDuplicates,sortInput=!support.sortStable&&results.slice(0),results.sort(sortOrder),hasDuplicate){for(;elem=results[i++];)elem===results[i]&&(j=duplicates.push(i));for(;j--;)results.splice(duplicates[j],1)}return sortInput=null,results},getText=Sizzle.getText=function(elem){var node,ret="",i=0,nodeType=elem.nodeType;if(nodeType){if(1===nodeType||9===nodeType||11===nodeType){if("string"==typeof elem.textContent)return elem.textContent;for(elem=elem.firstChild;elem;elem=elem.nextSibling)ret+=getText(elem)}else if(3===nodeType||4===nodeType)return elem.nodeValue}else for(;node=elem[i++];)ret+=getText(node);return ret},(Expr=Sizzle.selectors={cacheLength:50,createPseudo:markFunction,match:matchExpr,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(match){return match[1]=match[1].replace(runescape,funescape),match[3]=(match[3]||match[4]||match[5]||"").replace(runescape,funescape),"~="===match[2]&&(match[3]=" "+match[3]+" "),match.slice(0,4)},CHILD:function(match){return match[1]=match[1].toLowerCase(),"nth"===match[1].slice(0,3)?(match[3]||Sizzle.error(match[0]),match[4]=+(match[4]?match[5]+(match[6]||1):2*("even"===match[3]||"odd"===match[3])),match[5]=+(match[7]+match[8]||"odd"===match[3])):match[3]&&Sizzle.error(match[0]),match},PSEUDO:function(match){var excess,unquoted=!match[6]&&match[2];return matchExpr.CHILD.test(match[0])?null:(match[3]?match[2]=match[4]||match[5]||"":unquoted&&rpseudo.test(unquoted)&&(excess=tokenize(unquoted,!0))&&(excess=unquoted.indexOf(")",unquoted.length-excess)-unquoted.length)&&(match[0]=match[0].slice(0,excess),match[2]=unquoted.slice(0,excess)),match.slice(0,3))}},filter:{TAG:function(nodeNameSelector){var nodeName=nodeNameSelector.replace(runescape,funescape).toLowerCase();return"*"===nodeNameSelector?function(){return!0}:function(elem){return elem.nodeName&&elem.nodeName.toLowerCase()===nodeName}},CLASS:function(className){var pattern=classCache[className+" "];return pattern||(pattern=new RegExp("(^|"+whitespace+")"+className+"("+whitespace+"|$)"))&&classCache(className,function(elem){return pattern.test("string"==typeof elem.className&&elem.className||void 0!==elem.getAttribute&&elem.getAttribute("class")||"")})},ATTR:function(name,operator,check){return function(elem){var result=Sizzle.attr(elem,name);return null==result?"!="===operator:!operator||(result+="","="===operator?result===check:"!="===operator?result!==check:"^="===operator?check&&0===result.indexOf(check):"*="===operator?check&&-1<result.indexOf(check):"$="===operator?check&&result.slice(-check.length)===check:"~="===operator?-1<(" "+result.replace(rwhitespace," ")+" ").indexOf(check):"|="===operator&&(result===check||result.slice(0,check.length+1)===check+"-"))}},CHILD:function(type,what,argument,first,last){var simple="nth"!==type.slice(0,3),forward="last"!==type.slice(-4),ofType="of-type"===what;return 1===first&&0===last?function(elem){return!!elem.parentNode}:function(elem,context,xml){var cache,uniqueCache,outerCache,node,nodeIndex,start,dir=simple!==forward?"nextSibling":"previousSibling",parent=elem.parentNode,name=ofType&&elem.nodeName.toLowerCase(),useCache=!xml&&!ofType,diff=!1;if(parent){if(simple){for(;dir;){for(node=elem;node=node[dir];)if(ofType?node.nodeName.toLowerCase()===name:1===node.nodeType)return!1;start=dir="only"===type&&!start&&"nextSibling"}return!0}if(start=[forward?parent.firstChild:parent.lastChild],forward&&useCache){for(diff=(nodeIndex=(cache=(uniqueCache=(outerCache=(node=parent)[expando]||(node[expando]={}))[node.uniqueID]||(outerCache[node.uniqueID]={}))[type]||[])[0]===dirruns&&cache[1])&&cache[2],node=nodeIndex&&parent.childNodes[nodeIndex];node=++nodeIndex&&node&&node[dir]||(diff=nodeIndex=0)||start.pop();)if(1===node.nodeType&&++diff&&node===elem){uniqueCache[type]=[dirruns,nodeIndex,diff];break}}else if(useCache&&(diff=nodeIndex=(cache=(uniqueCache=(outerCache=(node=elem)[expando]||(node[expando]={}))[node.uniqueID]||(outerCache[node.uniqueID]={}))[type]||[])[0]===dirruns&&cache[1]),!1===diff)for(;(node=++nodeIndex&&node&&node[dir]||(diff=nodeIndex=0)||start.pop())&&((ofType?node.nodeName.toLowerCase()!==name:1!==node.nodeType)||!++diff||(useCache&&((uniqueCache=(outerCache=node[expando]||(node[expando]={}))[node.uniqueID]||(outerCache[node.uniqueID]={}))[type]=[dirruns,diff]),node!==elem)););return(diff-=last)===first||diff%first==0&&0<=diff/first}}},PSEUDO:function(pseudo,argument){var args,fn=Expr.pseudos[pseudo]||Expr.setFilters[pseudo.toLowerCase()]||Sizzle.error("unsupported pseudo: "+pseudo);return fn[expando]?fn(argument):1<fn.length?(args=[pseudo,pseudo,"",argument],Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())?markFunction(function(seed,matches){for(var idx,matched=fn(seed,argument),i=matched.length;i--;)seed[idx=indexOf(seed,matched[i])]=!(matches[idx]=matched[i])}):function(elem){return fn(elem,0,args)}):fn}},pseudos:{not:markFunction(function(selector){var input=[],results=[],matcher=compile(selector.replace(rtrim,"$1"));return matcher[expando]?markFunction(function(seed,matches,context,xml){for(var elem,unmatched=matcher(seed,null,xml,[]),i=seed.length;i--;)(elem=unmatched[i])&&(seed[i]=!(matches[i]=elem))}):function(elem,context,xml){return input[0]=elem,matcher(input,null,xml,results),input[0]=null,!results.pop()}}),has:markFunction(function(selector){return function(elem){return 0<Sizzle(selector,elem).length}}),contains:markFunction(function(text){return text=text.replace(runescape,funescape),function(elem){return-1<(elem.textContent||elem.innerText||getText(elem)).indexOf(text)}}),lang:markFunction(function(lang){return ridentifier.test(lang||"")||Sizzle.error("unsupported lang: "+lang),lang=lang.replace(runescape,funescape).toLowerCase(),function(elem){var elemLang;do{if(elemLang=documentIsHTML?elem.lang:elem.getAttribute("xml:lang")||elem.getAttribute("lang"))return(elemLang=elemLang.toLowerCase())===lang||0===elemLang.indexOf(lang+"-")}while((elem=elem.parentNode)&&1===elem.nodeType);return!1}}),target:function(elem){var hash=window.location&&window.location.hash;return hash&&hash.slice(1)===elem.id},root:function(elem){return elem===docElem},focus:function(elem){return elem===document.activeElement&&(!document.hasFocus||document.hasFocus())&&!!(elem.type||elem.href||~elem.tabIndex)},enabled:createDisabledPseudo(!1),disabled:createDisabledPseudo(!0),checked:function(elem){var nodeName=elem.nodeName.toLowerCase();return"input"===nodeName&&!!elem.checked||"option"===nodeName&&!!elem.selected},selected:function(elem){return elem.parentNode&&elem.parentNode.selectedIndex,!0===elem.selected},empty:function(elem){for(elem=elem.firstChild;elem;elem=elem.nextSibling)if(elem.nodeType<6)return!1;return!0},parent:function(elem){return!Expr.pseudos.empty(elem)},header:function(elem){return rheader.test(elem.nodeName)},input:function(elem){return rinputs.test(elem.nodeName)},button:function(elem){var name=elem.nodeName.toLowerCase();return"input"===name&&"button"===elem.type||"button"===name},text:function(elem){var attr;return"input"===elem.nodeName.toLowerCase()&&"text"===elem.type&&(null==(attr=elem.getAttribute("type"))||"text"===attr.toLowerCase())},first:createPositionalPseudo(function(){return[0]}),last:createPositionalPseudo(function(matchIndexes,length){return[length-1]}),eq:createPositionalPseudo(function(matchIndexes,length,argument){return[argument<0?argument+length:argument]}),even:createPositionalPseudo(function(matchIndexes,length){for(var i=0;i<length;i+=2)matchIndexes.push(i);return matchIndexes}),odd:createPositionalPseudo(function(matchIndexes,length){for(var i=1;i<length;i+=2)matchIndexes.push(i);return matchIndexes}),lt:createPositionalPseudo(function(matchIndexes,length,argument){for(var i=argument<0?argument+length:argument;0<=--i;)matchIndexes.push(i);return matchIndexes}),gt:createPositionalPseudo(function(matchIndexes,length,argument){for(var i=argument<0?argument+length:argument;++i<length;)matchIndexes.push(i);return matchIndexes})}}).pseudos.nth=Expr.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})Expr.pseudos[i]=createInputPseudo(i);for(i in{submit:!0,reset:!0})Expr.pseudos[i]=createButtonPseudo(i);function setFilters(){}function toSelector(tokens){for(var i=0,len=tokens.length,selector="";i<len;i++)selector+=tokens[i].value;return selector}function addCombinator(matcher,combinator,base){var dir=combinator.dir,skip=combinator.next,key=skip||dir,checkNonElements=base&&"parentNode"===key,doneName=done++;return combinator.first?function(elem,context,xml){for(;elem=elem[dir];)if(1===elem.nodeType||checkNonElements)return matcher(elem,context,xml);return!1}:function(elem,context,xml){var oldCache,uniqueCache,outerCache,newCache=[dirruns,doneName];if(xml){for(;elem=elem[dir];)if((1===elem.nodeType||checkNonElements)&&matcher(elem,context,xml))return!0}else for(;elem=elem[dir];)if(1===elem.nodeType||checkNonElements)if(uniqueCache=(outerCache=elem[expando]||(elem[expando]={}))[elem.uniqueID]||(outerCache[elem.uniqueID]={}),skip&&skip===elem.nodeName.toLowerCase())elem=elem[dir]||elem;else{if((oldCache=uniqueCache[key])&&oldCache[0]===dirruns&&oldCache[1]===doneName)return newCache[2]=oldCache[2];if((uniqueCache[key]=newCache)[2]=matcher(elem,context,xml))return!0}return!1}}function elementMatcher(matchers){return 1<matchers.length?function(elem,context,xml){for(var i=matchers.length;i--;)if(!matchers[i](elem,context,xml))return!1;return!0}:matchers[0]}function condense(unmatched,map,filter,context,xml){for(var elem,newUnmatched=[],i=0,len=unmatched.length,mapped=null!=map;i<len;i++)(elem=unmatched[i])&&(filter&&!filter(elem,context,xml)||(newUnmatched.push(elem),mapped&&map.push(i)));return newUnmatched}function setMatcher(preFilter,selector,matcher,postFilter,postFinder,postSelector){return postFilter&&!postFilter[expando]&&(postFilter=setMatcher(postFilter)),postFinder&&!postFinder[expando]&&(postFinder=setMatcher(postFinder,postSelector)),markFunction(function(seed,results,context,xml){var temp,i,elem,preMap=[],postMap=[],preexisting=results.length,elems=seed||function(selector,contexts,results){for(var i=0,len=contexts.length;i<len;i++)Sizzle(selector,contexts[i],results);return results}(selector||"*",context.nodeType?[context]:context,[]),matcherIn=!preFilter||!seed&&selector?elems:condense(elems,preMap,preFilter,context,xml),matcherOut=matcher?postFinder||(seed?preFilter:preexisting||postFilter)?[]:results:matcherIn;if(matcher&&matcher(matcherIn,matcherOut,context,xml),postFilter)for(temp=condense(matcherOut,postMap),postFilter(temp,[],context,xml),i=temp.length;i--;)(elem=temp[i])&&(matcherOut[postMap[i]]=!(matcherIn[postMap[i]]=elem));if(seed){if(postFinder||preFilter){if(postFinder){for(temp=[],i=matcherOut.length;i--;)(elem=matcherOut[i])&&temp.push(matcherIn[i]=elem);postFinder(null,matcherOut=[],temp,xml)}for(i=matcherOut.length;i--;)(elem=matcherOut[i])&&-1<(temp=postFinder?indexOf(seed,elem):preMap[i])&&(seed[temp]=!(results[temp]=elem))}}else matcherOut=condense(matcherOut===results?matcherOut.splice(preexisting,matcherOut.length):matcherOut),postFinder?postFinder(null,results,matcherOut,xml):push.apply(results,matcherOut)})}function matcherFromTokens(tokens){for(var checkContext,matcher,j,len=tokens.length,leadingRelative=Expr.relative[tokens[0].type],implicitRelative=leadingRelative||Expr.relative[" "],i=leadingRelative?1:0,matchContext=addCombinator(function(elem){return elem===checkContext},implicitRelative,!0),matchAnyContext=addCombinator(function(elem){return-1<indexOf(checkContext,elem)},implicitRelative,!0),matchers=[function(elem,context,xml){var ret=!leadingRelative&&(xml||context!==outermostContext)||((checkContext=context).nodeType?matchContext(elem,context,xml):matchAnyContext(elem,context,xml));return checkContext=null,ret}];i<len;i++)if(matcher=Expr.relative[tokens[i].type])matchers=[addCombinator(elementMatcher(matchers),matcher)];else{if((matcher=Expr.filter[tokens[i].type].apply(null,tokens[i].matches))[expando]){for(j=++i;j<len&&!Expr.relative[tokens[j].type];j++);return setMatcher(1<i&&elementMatcher(matchers),1<i&&toSelector(tokens.slice(0,i-1).concat({value:" "===tokens[i-2].type?"*":""})).replace(rtrim,"$1"),matcher,i<j&&matcherFromTokens(tokens.slice(i,j)),j<len&&matcherFromTokens(tokens=tokens.slice(j)),j<len&&toSelector(tokens))}matchers.push(matcher)}return elementMatcher(matchers)}return setFilters.prototype=Expr.filters=Expr.pseudos,Expr.setFilters=new setFilters,tokenize=Sizzle.tokenize=function(selector,parseOnly){var matched,match,tokens,type,soFar,groups,preFilters,cached=tokenCache[selector+" "];if(cached)return parseOnly?0:cached.slice(0);for(soFar=selector,groups=[],preFilters=Expr.preFilter;soFar;){for(type in matched&&!(match=rcomma.exec(soFar))||(match&&(soFar=soFar.slice(match[0].length)||soFar),groups.push(tokens=[])),matched=!1,(match=rcombinators.exec(soFar))&&(matched=match.shift(),tokens.push({value:matched,type:match[0].replace(rtrim," ")}),soFar=soFar.slice(matched.length)),Expr.filter)!(match=matchExpr[type].exec(soFar))||preFilters[type]&&!(match=preFilters[type](match))||(matched=match.shift(),tokens.push({value:matched,type:type,matches:match}),soFar=soFar.slice(matched.length));if(!matched)break}return parseOnly?soFar.length:soFar?Sizzle.error(selector):tokenCache(selector,groups).slice(0)},compile=Sizzle.compile=function(selector,match){var i,setMatchers=[],elementMatchers=[],cached=compilerCache[selector+" "];if(!cached){for(match||(match=tokenize(selector)),i=match.length;i--;)(cached=matcherFromTokens(match[i]))[expando]?setMatchers.push(cached):elementMatchers.push(cached);(cached=compilerCache(selector,function(elementMatchers,setMatchers){var bySet=0<setMatchers.length,byElement=0<elementMatchers.length,superMatcher=function(seed,context,xml,results,outermost){var elem,j,matcher,matchedCount=0,i="0",unmatched=seed&&[],setMatched=[],contextBackup=outermostContext,elems=seed||byElement&&Expr.find.TAG("*",outermost),dirrunsUnique=dirruns+=null==contextBackup?1:Math.random()||.1,len=elems.length;for(outermost&&(outermostContext=context===document||context||outermost);i!==len&&null!=(elem=elems[i]);i++){if(byElement&&elem){for(j=0,context||elem.ownerDocument===document||(setDocument(elem),xml=!documentIsHTML);matcher=elementMatchers[j++];)if(matcher(elem,context||document,xml)){results.push(elem);break}outermost&&(dirruns=dirrunsUnique)}bySet&&((elem=!matcher&&elem)&&matchedCount--,seed&&unmatched.push(elem))}if(matchedCount+=i,bySet&&i!==matchedCount){for(j=0;matcher=setMatchers[j++];)matcher(unmatched,setMatched,context,xml);if(seed){if(0<matchedCount)for(;i--;)unmatched[i]||setMatched[i]||(setMatched[i]=pop.call(results));setMatched=condense(setMatched)}push.apply(results,setMatched),outermost&&!seed&&0<setMatched.length&&1<matchedCount+setMatchers.length&&Sizzle.uniqueSort(results)}return outermost&&(dirruns=dirrunsUnique,outermostContext=contextBackup),unmatched};return bySet?markFunction(superMatcher):superMatcher}(elementMatchers,setMatchers))).selector=selector}return cached},select=Sizzle.select=function(selector,context,results,seed){var i,tokens,token,type,find,compiled="function"==typeof selector&&selector,match=!seed&&tokenize(selector=compiled.selector||selector);if(results=results||[],1===match.length){if(2<(tokens=match[0]=match[0].slice(0)).length&&"ID"===(token=tokens[0]).type&&9===context.nodeType&&documentIsHTML&&Expr.relative[tokens[1].type]){if(!(context=(Expr.find.ID(token.matches[0].replace(runescape,funescape),context)||[])[0]))return results;compiled&&(context=context.parentNode),selector=selector.slice(tokens.shift().value.length)}for(i=matchExpr.needsContext.test(selector)?0:tokens.length;i--&&(token=tokens[i],!Expr.relative[type=token.type]);)if((find=Expr.find[type])&&(seed=find(token.matches[0].replace(runescape,funescape),rsibling.test(tokens[0].type)&&testContext(context.parentNode)||context))){if(tokens.splice(i,1),!(selector=seed.length&&toSelector(tokens)))return push.apply(results,seed),results;break}}return(compiled||compile(selector,match))(seed,context,!documentIsHTML,results,!context||rsibling.test(selector)&&testContext(context.parentNode)||context),results},support.sortStable=expando.split("").sort(sortOrder).join("")===expando,support.detectDuplicates=!!hasDuplicate,setDocument(),support.sortDetached=assert(function(el){return 1&el.compareDocumentPosition(document.createElement("fieldset"))}),assert(function(el){return el.innerHTML="<a href='#'></a>","#"===el.firstChild.getAttribute("href")})||addHandle("type|href|height|width",function(elem,name,isXML){if(!isXML)return elem.getAttribute(name,"type"===name.toLowerCase()?1:2)}),support.attributes&&assert(function(el){return el.innerHTML="<input/>",el.firstChild.setAttribute("value",""),""===el.firstChild.getAttribute("value")})||addHandle("value",function(elem,name,isXML){if(!isXML&&"input"===elem.nodeName.toLowerCase())return elem.defaultValue}),assert(function(el){return null==el.getAttribute("disabled")})||addHandle(booleans,function(elem,name,isXML){var val;if(!isXML)return!0===elem[name]?name.toLowerCase():(val=elem.getAttributeNode(name))&&val.specified?val.value:null}),Sizzle}(window);jQuery.find=Sizzle,jQuery.expr=Sizzle.selectors,jQuery.expr[":"]=jQuery.expr.pseudos,jQuery.uniqueSort=jQuery.unique=Sizzle.uniqueSort,jQuery.text=Sizzle.getText,jQuery.isXMLDoc=Sizzle.isXML,jQuery.contains=Sizzle.contains,jQuery.escapeSelector=Sizzle.escape;var dir=function(elem,dir,until){for(var matched=[],truncate=void 0!==until;(elem=elem[dir])&&9!==elem.nodeType;)if(1===elem.nodeType){if(truncate&&jQuery(elem).is(until))break;matched.push(elem)}return matched},siblings=function(n,elem){for(var matched=[];n;n=n.nextSibling)1===n.nodeType&&n!==elem&&matched.push(n);return matched},rneedsContext=jQuery.expr.match.needsContext;function nodeName(elem,name){return elem.nodeName&&elem.nodeName.toLowerCase()===name.toLowerCase()}var rsingleTag=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function winnow(elements,qualifier,not){return isFunction(qualifier)?jQuery.grep(elements,function(elem,i){return!!qualifier.call(elem,i,elem)!==not}):qualifier.nodeType?jQuery.grep(elements,function(elem){return elem===qualifier!==not}):"string"!=typeof qualifier?jQuery.grep(elements,function(elem){return-1<indexOf.call(qualifier,elem)!==not}):jQuery.filter(qualifier,elements,not)}jQuery.filter=function(expr,elems,not){var elem=elems[0];return not&&(expr=":not("+expr+")"),1===elems.length&&1===elem.nodeType?jQuery.find.matchesSelector(elem,expr)?[elem]:[]:jQuery.find.matches(expr,jQuery.grep(elems,function(elem){return 1===elem.nodeType}))},jQuery.fn.extend({find:function(selector){var i,ret,len=this.length,self=this;if("string"!=typeof selector)return this.pushStack(jQuery(selector).filter(function(){for(i=0;i<len;i++)if(jQuery.contains(self[i],this))return!0}));for(ret=this.pushStack([]),i=0;i<len;i++)jQuery.find(selector,self[i],ret);return 1<len?jQuery.uniqueSort(ret):ret},filter:function(selector){return this.pushStack(winnow(this,selector||[],!1))},not:function(selector){return this.pushStack(winnow(this,selector||[],!0))},is:function(selector){return!!winnow(this,"string"==typeof selector&&rneedsContext.test(selector)?jQuery(selector):selector||[],!1).length}});var rootjQuery,rquickExpr=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(jQuery.fn.init=function(selector,context,root){var match,elem;if(!selector)return this;if(root=root||rootjQuery,"string"!=typeof selector)return selector.nodeType?(this[0]=selector,this.length=1,this):isFunction(selector)?void 0!==root.ready?root.ready(selector):selector(jQuery):jQuery.makeArray(selector,this);if(!(match="<"===selector[0]&&">"===selector[selector.length-1]&&3<=selector.length?[null,selector,null]:rquickExpr.exec(selector))||!match[1]&&context)return!context||context.jquery?(context||root).find(selector):this.constructor(context).find(selector);if(match[1]){if(context=context instanceof jQuery?context[0]:context,jQuery.merge(this,jQuery.parseHTML(match[1],context&&context.nodeType?context.ownerDocument||context:document,!0)),rsingleTag.test(match[1])&&jQuery.isPlainObject(context))for(match in context)isFunction(this[match])?this[match](context[match]):this.attr(match,context[match]);return this}return(elem=document.getElementById(match[2]))&&(this[0]=elem,this.length=1),this}).prototype=jQuery.fn,rootjQuery=jQuery(document);var rparentsprev=/^(?:parents|prev(?:Until|All))/,guaranteedUnique={children:!0,contents:!0,next:!0,prev:!0};function sibling(cur,dir){for(;(cur=cur[dir])&&1!==cur.nodeType;);return cur}jQuery.fn.extend({has:function(target){var targets=jQuery(target,this),l=targets.length;return this.filter(function(){for(var i=0;i<l;i++)if(jQuery.contains(this,targets[i]))return!0})},closest:function(selectors,context){var cur,i=0,l=this.length,matched=[],targets="string"!=typeof selectors&&jQuery(selectors);if(!rneedsContext.test(selectors))for(;i<l;i++)for(cur=this[i];cur&&cur!==context;cur=cur.parentNode)if(cur.nodeType<11&&(targets?-1<targets.index(cur):1===cur.nodeType&&jQuery.find.matchesSelector(cur,selectors))){matched.push(cur);break}return this.pushStack(1<matched.length?jQuery.uniqueSort(matched):matched)},index:function(elem){return elem?"string"==typeof elem?indexOf.call(jQuery(elem),this[0]):indexOf.call(this,elem.jquery?elem[0]:elem):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(selector,context){return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(),jQuery(selector,context))))},addBack:function(selector){return this.add(null==selector?this.prevObject:this.prevObject.filter(selector))}}),jQuery.each({parent:function(elem){var parent=elem.parentNode;return parent&&11!==parent.nodeType?parent:null},parents:function(elem){return dir(elem,"parentNode")},parentsUntil:function(elem,i,until){return dir(elem,"parentNode",until)},next:function(elem){return sibling(elem,"nextSibling")},prev:function(elem){return sibling(elem,"previousSibling")},nextAll:function(elem){return dir(elem,"nextSibling")},prevAll:function(elem){return dir(elem,"previousSibling")},nextUntil:function(elem,i,until){return dir(elem,"nextSibling",until)},prevUntil:function(elem,i,until){return dir(elem,"previousSibling",until)},siblings:function(elem){return siblings((elem.parentNode||{}).firstChild,elem)},children:function(elem){return siblings(elem.firstChild)},contents:function(elem){return nodeName(elem,"iframe")?elem.contentDocument:(nodeName(elem,"template")&&(elem=elem.content||elem),jQuery.merge([],elem.childNodes))}},function(name,fn){jQuery.fn[name]=function(until,selector){var matched=jQuery.map(this,fn,until);return"Until"!==name.slice(-5)&&(selector=until),selector&&"string"==typeof selector&&(matched=jQuery.filter(selector,matched)),1<this.length&&(guaranteedUnique[name]||jQuery.uniqueSort(matched),rparentsprev.test(name)&&matched.reverse()),this.pushStack(matched)}});var rnothtmlwhite=/[^\x20\t\r\n\f]+/g;function Identity(v){return v}function Thrower(ex){throw ex}function adoptValue(value,resolve,reject,noValue){var method;try{value&&isFunction(method=value.promise)?method.call(value).done(resolve).fail(reject):value&&isFunction(method=value.then)?method.call(value,resolve,reject):resolve.apply(void 0,[value].slice(noValue))}catch(value){reject.apply(void 0,[value])}}jQuery.Callbacks=function(options){options="string"==typeof options?function(options){var object={};return jQuery.each(options.match(rnothtmlwhite)||[],function(_,flag){object[flag]=!0}),object}(options):jQuery.extend({},options);var firing,memory,fired,locked,list=[],queue=[],firingIndex=-1,fire=function(){for(locked=locked||options.once,fired=firing=!0;queue.length;firingIndex=-1)for(memory=queue.shift();++firingIndex<list.length;)!1===list[firingIndex].apply(memory[0],memory[1])&&options.stopOnFalse&&(firingIndex=list.length,memory=!1);options.memory||(memory=!1),firing=!1,locked&&(list=memory?[]:"")},self={add:function(){return list&&(memory&&!firing&&(firingIndex=list.length-1,queue.push(memory)),function add(args){jQuery.each(args,function(_,arg){isFunction(arg)?options.unique&&self.has(arg)||list.push(arg):arg&&arg.length&&"string"!==toType(arg)&&add(arg)})}(arguments),memory&&!firing&&fire()),this},remove:function(){return jQuery.each(arguments,function(_,arg){for(var index;-1<(index=jQuery.inArray(arg,list,index));)list.splice(index,1),index<=firingIndex&&firingIndex--}),this},has:function(fn){return fn?-1<jQuery.inArray(fn,list):0<list.length},empty:function(){return list&&(list=[]),this},disable:function(){return locked=queue=[],list=memory="",this},disabled:function(){return!list},lock:function(){return locked=queue=[],memory||firing||(list=memory=""),this},locked:function(){return!!locked},fireWith:function(context,args){return locked||(args=[context,(args=args||[]).slice?args.slice():args],queue.push(args),firing||fire()),this},fire:function(){return self.fireWith(this,arguments),this},fired:function(){return!!fired}};return self},jQuery.extend({Deferred:function(func){var tuples=[["notify","progress",jQuery.Callbacks("memory"),jQuery.Callbacks("memory"),2],["resolve","done",jQuery.Callbacks("once memory"),jQuery.Callbacks("once memory"),0,"resolved"],["reject","fail",jQuery.Callbacks("once memory"),jQuery.Callbacks("once memory"),1,"rejected"]],state="pending",promise={state:function(){return state},always:function(){return deferred.done(arguments).fail(arguments),this},catch:function(fn){return promise.then(null,fn)},pipe:function(){var fns=arguments;return jQuery.Deferred(function(newDefer){jQuery.each(tuples,function(i,tuple){var fn=isFunction(fns[tuple[4]])&&fns[tuple[4]];deferred[tuple[1]](function(){var returned=fn&&fn.apply(this,arguments);returned&&isFunction(returned.promise)?returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject):newDefer[tuple[0]+"With"](this,fn?[returned]:arguments)})}),fns=null}).promise()},then:function(onFulfilled,onRejected,onProgress){var maxDepth=0;function resolve(depth,deferred,handler,special){return function(){var that=this,args=arguments,mightThrow=function(){var returned,then;if(!(depth<maxDepth)){if((returned=handler.apply(that,args))===deferred.promise())throw new TypeError("Thenable self-resolution");then=returned&&("object"==typeof returned||"function"==typeof returned)&&returned.then,isFunction(then)?special?then.call(returned,resolve(maxDepth,deferred,Identity,special),resolve(maxDepth,deferred,Thrower,special)):(maxDepth++,then.call(returned,resolve(maxDepth,deferred,Identity,special),resolve(maxDepth,deferred,Thrower,special),resolve(maxDepth,deferred,Identity,deferred.notifyWith))):(handler!==Identity&&(that=void 0,args=[returned]),(special||deferred.resolveWith)(that,args))}},process=special?mightThrow:function(){try{mightThrow()}catch(e){jQuery.Deferred.exceptionHook&&jQuery.Deferred.exceptionHook(e,process.stackTrace),maxDepth<=depth+1&&(handler!==Thrower&&(that=void 0,args=[e]),deferred.rejectWith(that,args))}};depth?process():(jQuery.Deferred.getStackHook&&(process.stackTrace=jQuery.Deferred.getStackHook()),window.setTimeout(process))}}return jQuery.Deferred(function(newDefer){tuples[0][3].add(resolve(0,newDefer,isFunction(onProgress)?onProgress:Identity,newDefer.notifyWith)),tuples[1][3].add(resolve(0,newDefer,isFunction(onFulfilled)?onFulfilled:Identity)),tuples[2][3].add(resolve(0,newDefer,isFunction(onRejected)?onRejected:Thrower))}).promise()},promise:function(obj){return null!=obj?jQuery.extend(obj,promise):promise}},deferred={};return jQuery.each(tuples,function(i,tuple){var list=tuple[2],stateString=tuple[5];promise[tuple[1]]=list.add,stateString&&list.add(function(){state=stateString},tuples[3-i][2].disable,tuples[3-i][3].disable,tuples[0][2].lock,tuples[0][3].lock),list.add(tuple[3].fire),deferred[tuple[0]]=function(){return deferred[tuple[0]+"With"](this===deferred?void 0:this,arguments),this},deferred[tuple[0]+"With"]=list.fireWith}),promise.promise(deferred),func&&func.call(deferred,deferred),deferred},when:function(singleValue){var remaining=arguments.length,i=remaining,resolveContexts=Array(i),resolveValues=slice.call(arguments),master=jQuery.Deferred(),updateFunc=function(i){return function(value){resolveContexts[i]=this,resolveValues[i]=1<arguments.length?slice.call(arguments):value,--remaining||master.resolveWith(resolveContexts,resolveValues)}};if(remaining<=1&&(adoptValue(singleValue,master.done(updateFunc(i)).resolve,master.reject,!remaining),"pending"===master.state()||isFunction(resolveValues[i]&&resolveValues[i].then)))return master.then();for(;i--;)adoptValue(resolveValues[i],updateFunc(i),master.reject);return master.promise()}});var rerrorNames=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;jQuery.Deferred.exceptionHook=function(error,stack){window.console&&window.console.warn&&error&&rerrorNames.test(error.name)&&window.console.warn("jQuery.Deferred exception: "+error.message,error.stack,stack)},jQuery.readyException=function(error){window.setTimeout(function(){throw error})};var readyList=jQuery.Deferred();function completed(){document.removeEventListener("DOMContentLoaded",completed),window.removeEventListener("load",completed),jQuery.ready()}jQuery.fn.ready=function(fn){return readyList.then(fn).catch(function(error){jQuery.readyException(error)}),this},jQuery.extend({isReady:!1,readyWait:1,ready:function(wait){(!0===wait?--jQuery.readyWait:jQuery.isReady)||(jQuery.isReady=!0)!==wait&&0<--jQuery.readyWait||readyList.resolveWith(document,[jQuery])}}),jQuery.ready.then=readyList.then,"complete"===document.readyState||"loading"!==document.readyState&&!document.documentElement.doScroll?window.setTimeout(jQuery.ready):(document.addEventListener("DOMContentLoaded",completed),window.addEventListener("load",completed));var access=function(elems,fn,key,value,chainable,emptyGet,raw){var i=0,len=elems.length,bulk=null==key;if("object"===toType(key))for(i in chainable=!0,key)access(elems,fn,i,key[i],!0,emptyGet,raw);else if(void 0!==value&&(chainable=!0,isFunction(value)||(raw=!0),bulk&&(fn=raw?(fn.call(elems,value),null):(bulk=fn,function(elem,key,value){return bulk.call(jQuery(elem),value)})),fn))for(;i<len;i++)fn(elems[i],key,raw?value:value.call(elems[i],i,fn(elems[i],key)));return chainable?elems:bulk?fn.call(elems):len?fn(elems[0],key):emptyGet},rmsPrefix=/^-ms-/,rdashAlpha=/-([a-z])/g;function fcamelCase(all,letter){return letter.toUpperCase()}function camelCase(string){return string.replace(rmsPrefix,"ms-").replace(rdashAlpha,fcamelCase)}var acceptData=function(owner){return 1===owner.nodeType||9===owner.nodeType||!+owner.nodeType};function Data(){this.expando=jQuery.expando+Data.uid++}Data.uid=1,Data.prototype={cache:function(owner){var value=owner[this.expando];return value||(value={},acceptData(owner)&&(owner.nodeType?owner[this.expando]=value:Object.defineProperty(owner,this.expando,{value:value,configurable:!0}))),value},set:function(owner,data,value){var prop,cache=this.cache(owner);if("string"==typeof data)cache[camelCase(data)]=value;else for(prop in data)cache[camelCase(prop)]=data[prop];return cache},get:function(owner,key){return void 0===key?this.cache(owner):owner[this.expando]&&owner[this.expando][camelCase(key)]},access:function(owner,key,value){return void 0===key||key&&"string"==typeof key&&void 0===value?this.get(owner,key):(this.set(owner,key,value),void 0!==value?value:key)},remove:function(owner,key){var i,cache=owner[this.expando];if(void 0!==cache){if(void 0!==key){i=(key=Array.isArray(key)?key.map(camelCase):(key=camelCase(key))in cache?[key]:key.match(rnothtmlwhite)||[]).length;for(;i--;)delete cache[key[i]]}(void 0===key||jQuery.isEmptyObject(cache))&&(owner.nodeType?owner[this.expando]=void 0:delete owner[this.expando])}},hasData:function(owner){var cache=owner[this.expando];return void 0!==cache&&!jQuery.isEmptyObject(cache)}};var dataPriv=new Data,dataUser=new Data,rbrace=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,rmultiDash=/[A-Z]/g;function dataAttr(elem,key,data){var name;if(void 0===data&&1===elem.nodeType)if(name="data-"+key.replace(rmultiDash,"-$&").toLowerCase(),"string"==typeof(data=elem.getAttribute(name))){try{data=function(data){return"true"===data||"false"!==data&&("null"===data?null:data===+data+""?+data:rbrace.test(data)?JSON.parse(data):data)}(data)}catch(e){}dataUser.set(elem,key,data)}else data=void 0;return data}jQuery.extend({hasData:function(elem){return dataUser.hasData(elem)||dataPriv.hasData(elem)},data:function(elem,name,data){return dataUser.access(elem,name,data)},removeData:function(elem,name){dataUser.remove(elem,name)},_data:function(elem,name,data){return dataPriv.access(elem,name,data)},_removeData:function(elem,name){dataPriv.remove(elem,name)}}),jQuery.fn.extend({data:function(key,value){var i,name,data,elem=this[0],attrs=elem&&elem.attributes;if(void 0!==key)return"object"==typeof key?this.each(function(){dataUser.set(this,key)}):access(this,function(value){var data;if(elem&&void 0===value)return void 0!==(data=dataUser.get(elem,key))?data:void 0!==(data=dataAttr(elem,key))?data:void 0;this.each(function(){dataUser.set(this,key,value)})},null,value,1<arguments.length,null,!0);if(this.length&&(data=dataUser.get(elem),1===elem.nodeType&&!dataPriv.get(elem,"hasDataAttrs"))){for(i=attrs.length;i--;)attrs[i]&&0===(name=attrs[i].name).indexOf("data-")&&(name=camelCase(name.slice(5)),dataAttr(elem,name,data[name]));dataPriv.set(elem,"hasDataAttrs",!0)}return data},removeData:function(key){return this.each(function(){dataUser.remove(this,key)})}}),jQuery.extend({queue:function(elem,type,data){var queue;if(elem)return type=(type||"fx")+"queue",queue=dataPriv.get(elem,type),data&&(!queue||Array.isArray(data)?queue=dataPriv.access(elem,type,jQuery.makeArray(data)):queue.push(data)),queue||[]},dequeue:function(elem,type){type=type||"fx";var queue=jQuery.queue(elem,type),startLength=queue.length,fn=queue.shift(),hooks=jQuery._queueHooks(elem,type);"inprogress"===fn&&(fn=queue.shift(),startLength--),fn&&("fx"===type&&queue.unshift("inprogress"),delete hooks.stop,fn.call(elem,function(){jQuery.dequeue(elem,type)},hooks)),!startLength&&hooks&&hooks.empty.fire()},_queueHooks:function(elem,type){var key=type+"queueHooks";return dataPriv.get(elem,key)||dataPriv.access(elem,key,{empty:jQuery.Callbacks("once memory").add(function(){dataPriv.remove(elem,[type+"queue",key])})})}}),jQuery.fn.extend({queue:function(type,data){var setter=2;return"string"!=typeof type&&(data=type,type="fx",setter--),arguments.length<setter?jQuery.queue(this[0],type):void 0===data?this:this.each(function(){var queue=jQuery.queue(this,type,data);jQuery._queueHooks(this,type),"fx"===type&&"inprogress"!==queue[0]&&jQuery.dequeue(this,type)})},dequeue:function(type){return this.each(function(){jQuery.dequeue(this,type)})},clearQueue:function(type){return this.queue(type||"fx",[])},promise:function(type,obj){var tmp,count=1,defer=jQuery.Deferred(),elements=this,i=this.length,resolve=function(){--count||defer.resolveWith(elements,[elements])};for("string"!=typeof type&&(obj=type,type=void 0),type=type||"fx";i--;)(tmp=dataPriv.get(elements[i],type+"queueHooks"))&&tmp.empty&&(count++,tmp.empty.add(resolve));return resolve(),defer.promise(obj)}});var pnum=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,rcssNum=new RegExp("^(?:([+-])=|)("+pnum+")([a-z%]*)$","i"),cssExpand=["Top","Right","Bottom","Left"],isHiddenWithinTree=function(elem,el){return"none"===(elem=el||elem).style.display||""===elem.style.display&&jQuery.contains(elem.ownerDocument,elem)&&"none"===jQuery.css(elem,"display")},swap=function(elem,options,callback,args){var ret,name,old={};for(name in options)old[name]=elem.style[name],elem.style[name]=options[name];for(name in ret=callback.apply(elem,args||[]),options)elem.style[name]=old[name];return ret};function adjustCSS(elem,prop,valueParts,tween){var adjusted,scale,maxIterations=20,currentValue=tween?function(){return tween.cur()}:function(){return jQuery.css(elem,prop,"")},initial=currentValue(),unit=valueParts&&valueParts[3]||(jQuery.cssNumber[prop]?"":"px"),initialInUnit=(jQuery.cssNumber[prop]||"px"!==unit&&+initial)&&rcssNum.exec(jQuery.css(elem,prop));if(initialInUnit&&initialInUnit[3]!==unit){for(initial/=2,unit=unit||initialInUnit[3],initialInUnit=+initial||1;maxIterations--;)jQuery.style(elem,prop,initialInUnit+unit),(1-scale)*(1-(scale=currentValue()/initial||.5))<=0&&(maxIterations=0),initialInUnit/=scale;initialInUnit*=2,jQuery.style(elem,prop,initialInUnit+unit),valueParts=valueParts||[]}return valueParts&&(initialInUnit=+initialInUnit||+initial||0,adjusted=valueParts[1]?initialInUnit+(valueParts[1]+1)*valueParts[2]:+valueParts[2],tween&&(tween.unit=unit,tween.start=initialInUnit,tween.end=adjusted)),adjusted}var defaultDisplayMap={};function getDefaultDisplay(elem){var temp,doc=elem.ownerDocument,nodeName=elem.nodeName,display=defaultDisplayMap[nodeName];return display||(temp=doc.body.appendChild(doc.createElement(nodeName)),display=jQuery.css(temp,"display"),temp.parentNode.removeChild(temp),"none"===display&&(display="block"),defaultDisplayMap[nodeName]=display)}function showHide(elements,show){for(var display,elem,values=[],index=0,length=elements.length;index<length;index++)(elem=elements[index]).style&&(display=elem.style.display,show?("none"===display&&(values[index]=dataPriv.get(elem,"display")||null,values[index]||(elem.style.display="")),""===elem.style.display&&isHiddenWithinTree(elem)&&(values[index]=getDefaultDisplay(elem))):"none"!==display&&(values[index]="none",dataPriv.set(elem,"display",display)));for(index=0;index<length;index++)null!=values[index]&&(elements[index].style.display=values[index]);return elements}jQuery.fn.extend({show:function(){return showHide(this,!0)},hide:function(){return showHide(this)},toggle:function(state){return"boolean"==typeof state?state?this.show():this.hide():this.each(function(){isHiddenWithinTree(this)?jQuery(this).show():jQuery(this).hide()})}});var rcheckableType=/^(?:checkbox|radio)$/i,rtagName=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,rscriptType=/^$|^module$|\/(?:java|ecma)script/i,wrapMap={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function getAll(context,tag){var ret;return ret=void 0!==context.getElementsByTagName?context.getElementsByTagName(tag||"*"):void 0!==context.querySelectorAll?context.querySelectorAll(tag||"*"):[],void 0===tag||tag&&nodeName(context,tag)?jQuery.merge([context],ret):ret}function setGlobalEval(elems,refElements){for(var i=0,l=elems.length;i<l;i++)dataPriv.set(elems[i],"globalEval",!refElements||dataPriv.get(refElements[i],"globalEval"))}wrapMap.optgroup=wrapMap.option,wrapMap.tbody=wrapMap.tfoot=wrapMap.colgroup=wrapMap.caption=wrapMap.thead,wrapMap.th=wrapMap.td;var div,input,rhtml=/<|&#?\w+;/;function buildFragment(elems,context,scripts,selection,ignored){for(var elem,tmp,tag,wrap,contains,j,fragment=context.createDocumentFragment(),nodes=[],i=0,l=elems.length;i<l;i++)if((elem=elems[i])||0===elem)if("object"===toType(elem))jQuery.merge(nodes,elem.nodeType?[elem]:elem);else if(rhtml.test(elem)){for(tmp=tmp||fragment.appendChild(context.createElement("div")),tag=(rtagName.exec(elem)||["",""])[1].toLowerCase(),wrap=wrapMap[tag]||wrapMap._default,tmp.innerHTML=wrap[1]+jQuery.htmlPrefilter(elem)+wrap[2],j=wrap[0];j--;)tmp=tmp.lastChild;jQuery.merge(nodes,tmp.childNodes),(tmp=fragment.firstChild).textContent=""}else nodes.push(context.createTextNode(elem));for(fragment.textContent="",i=0;elem=nodes[i++];)if(selection&&-1<jQuery.inArray(elem,selection))ignored&&ignored.push(elem);else if(contains=jQuery.contains(elem.ownerDocument,elem),tmp=getAll(fragment.appendChild(elem),"script"),contains&&setGlobalEval(tmp),scripts)for(j=0;elem=tmp[j++];)rscriptType.test(elem.type||"")&&scripts.push(elem);return fragment}div=document.createDocumentFragment().appendChild(document.createElement("div")),(input=document.createElement("input")).setAttribute("type","radio"),input.setAttribute("checked","checked"),input.setAttribute("name","t"),div.appendChild(input),support.checkClone=div.cloneNode(!0).cloneNode(!0).lastChild.checked,div.innerHTML="<textarea>x</textarea>",support.noCloneChecked=!!div.cloneNode(!0).lastChild.defaultValue;var documentElement=document.documentElement,rkeyEvent=/^key/,rmouseEvent=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,rtypenamespace=/^([^.]*)(?:\.(.+)|)/;function returnTrue(){return!0}function returnFalse(){return!1}function safeActiveElement(){try{return document.activeElement}catch(err){}}function on(elem,types,selector,data,fn,one){var origFn,type;if("object"==typeof types){for(type in"string"!=typeof selector&&(data=data||selector,selector=void 0),types)on(elem,type,selector,data,types[type],one);return elem}if(null==data&&null==fn?(fn=selector,data=selector=void 0):null==fn&&("string"==typeof selector?(fn=data,data=void 0):(fn=data,data=selector,selector=void 0)),!1===fn)fn=returnFalse;else if(!fn)return elem;return 1===one&&(origFn=fn,(fn=function(event){return jQuery().off(event),origFn.apply(this,arguments)}).guid=origFn.guid||(origFn.guid=jQuery.guid++)),elem.each(function(){jQuery.event.add(this,types,fn,data,selector)})}jQuery.event={global:{},add:function(elem,types,handler,data,selector){var handleObjIn,eventHandle,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=dataPriv.get(elem);if(elemData)for(handler.handler&&(handler=(handleObjIn=handler).handler,selector=handleObjIn.selector),selector&&jQuery.find.matchesSelector(documentElement,selector),handler.guid||(handler.guid=jQuery.guid++),(events=elemData.events)||(events=elemData.events={}),(eventHandle=elemData.handle)||(eventHandle=elemData.handle=function(e){return void 0!==jQuery&&jQuery.event.triggered!==e.type?jQuery.event.dispatch.apply(elem,arguments):void 0}),t=(types=(types||"").match(rnothtmlwhite)||[""]).length;t--;)type=origType=(tmp=rtypenamespace.exec(types[t])||[])[1],namespaces=(tmp[2]||"").split(".").sort(),type&&(special=jQuery.event.special[type]||{},type=(selector?special.delegateType:special.bindType)||type,special=jQuery.event.special[type]||{},handleObj=jQuery.extend({type:type,origType:origType,data:data,handler:handler,guid:handler.guid,selector:selector,needsContext:selector&&jQuery.expr.match.needsContext.test(selector),namespace:namespaces.join(".")},handleObjIn),(handlers=events[type])||((handlers=events[type]=[]).delegateCount=0,special.setup&&!1!==special.setup.call(elem,data,namespaces,eventHandle)||elem.addEventListener&&elem.addEventListener(type,eventHandle)),special.add&&(special.add.call(elem,handleObj),handleObj.handler.guid||(handleObj.handler.guid=handler.guid)),selector?handlers.splice(handlers.delegateCount++,0,handleObj):handlers.push(handleObj),jQuery.event.global[type]=!0)},remove:function(elem,types,handler,selector,mappedTypes){var j,origCount,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=dataPriv.hasData(elem)&&dataPriv.get(elem);if(elemData&&(events=elemData.events)){for(t=(types=(types||"").match(rnothtmlwhite)||[""]).length;t--;)if(type=origType=(tmp=rtypenamespace.exec(types[t])||[])[1],namespaces=(tmp[2]||"").split(".").sort(),type){for(special=jQuery.event.special[type]||{},handlers=events[type=(selector?special.delegateType:special.bindType)||type]||[],tmp=tmp[2]&&new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)"),origCount=j=handlers.length;j--;)handleObj=handlers[j],!mappedTypes&&origType!==handleObj.origType||handler&&handler.guid!==handleObj.guid||tmp&&!tmp.test(handleObj.namespace)||selector&&selector!==handleObj.selector&&("**"!==selector||!handleObj.selector)||(handlers.splice(j,1),handleObj.selector&&handlers.delegateCount--,special.remove&&special.remove.call(elem,handleObj));origCount&&!handlers.length&&(special.teardown&&!1!==special.teardown.call(elem,namespaces,elemData.handle)||jQuery.removeEvent(elem,type,elemData.handle),delete events[type])}else for(type in events)jQuery.event.remove(elem,type+types[t],handler,selector,!0);jQuery.isEmptyObject(events)&&dataPriv.remove(elem,"handle events")}},dispatch:function(nativeEvent){var i,j,ret,matched,handleObj,handlerQueue,event=jQuery.event.fix(nativeEvent),args=new Array(arguments.length),handlers=(dataPriv.get(this,"events")||{})[event.type]||[],special=jQuery.event.special[event.type]||{};for(args[0]=event,i=1;i<arguments.length;i++)args[i]=arguments[i];if(event.delegateTarget=this,!special.preDispatch||!1!==special.preDispatch.call(this,event)){for(handlerQueue=jQuery.event.handlers.call(this,event,handlers),i=0;(matched=handlerQueue[i++])&&!event.isPropagationStopped();)for(event.currentTarget=matched.elem,j=0;(handleObj=matched.handlers[j++])&&!event.isImmediatePropagationStopped();)event.rnamespace&&!event.rnamespace.test(handleObj.namespace)||(event.handleObj=handleObj,event.data=handleObj.data,void 0!==(ret=((jQuery.event.special[handleObj.origType]||{}).handle||handleObj.handler).apply(matched.elem,args))&&!1===(event.result=ret)&&(event.preventDefault(),event.stopPropagation()));return special.postDispatch&&special.postDispatch.call(this,event),event.result}},handlers:function(event,handlers){var i,handleObj,sel,matchedHandlers,matchedSelectors,handlerQueue=[],delegateCount=handlers.delegateCount,cur=event.target;if(delegateCount&&cur.nodeType&&!("click"===event.type&&1<=event.button))for(;cur!==this;cur=cur.parentNode||this)if(1===cur.nodeType&&("click"!==event.type||!0!==cur.disabled)){for(matchedHandlers=[],matchedSelectors={},i=0;i<delegateCount;i++)void 0===matchedSelectors[sel=(handleObj=handlers[i]).selector+" "]&&(matchedSelectors[sel]=handleObj.needsContext?-1<jQuery(sel,this).index(cur):jQuery.find(sel,this,null,[cur]).length),matchedSelectors[sel]&&matchedHandlers.push(handleObj);matchedHandlers.length&&handlerQueue.push({elem:cur,handlers:matchedHandlers})}return cur=this,delegateCount<handlers.length&&handlerQueue.push({elem:cur,handlers:handlers.slice(delegateCount)}),handlerQueue},addProp:function(name,hook){Object.defineProperty(jQuery.Event.prototype,name,{enumerable:!0,configurable:!0,get:isFunction(hook)?function(){if(this.originalEvent)return hook(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[name]},set:function(value){Object.defineProperty(this,name,{enumerable:!0,configurable:!0,writable:!0,value:value})}})},fix:function(originalEvent){return originalEvent[jQuery.expando]?originalEvent:new jQuery.Event(originalEvent)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==safeActiveElement()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===safeActiveElement()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&nodeName(this,"input"))return this.click(),!1},_default:function(event){return nodeName(event.target,"a")}},beforeunload:{postDispatch:function(event){void 0!==event.result&&event.originalEvent&&(event.originalEvent.returnValue=event.result)}}}},jQuery.removeEvent=function(elem,type,handle){elem.removeEventListener&&elem.removeEventListener(type,handle)},jQuery.Event=function(src,props){if(!(this instanceof jQuery.Event))return new jQuery.Event(src,props);src&&src.type?(this.originalEvent=src,this.type=src.type,this.isDefaultPrevented=src.defaultPrevented||void 0===src.defaultPrevented&&!1===src.returnValue?returnTrue:returnFalse,this.target=src.target&&3===src.target.nodeType?src.target.parentNode:src.target,this.currentTarget=src.currentTarget,this.relatedTarget=src.relatedTarget):this.type=src,props&&jQuery.extend(this,props),this.timeStamp=src&&src.timeStamp||Date.now(),this[jQuery.expando]=!0},jQuery.Event.prototype={constructor:jQuery.Event,isDefaultPrevented:returnFalse,isPropagationStopped:returnFalse,isImmediatePropagationStopped:returnFalse,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=returnTrue,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=returnTrue,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=returnTrue,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},jQuery.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(event){var button=event.button;return null==event.which&&rkeyEvent.test(event.type)?null!=event.charCode?event.charCode:event.keyCode:!event.which&&void 0!==button&&rmouseEvent.test(event.type)?1&button?1:2&button?3:4&button?2:0:event.which}},jQuery.event.addProp),jQuery.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(orig,fix){jQuery.event.special[orig]={delegateType:fix,bindType:fix,handle:function(event){var ret,related=event.relatedTarget,handleObj=event.handleObj;return related&&(related===this||jQuery.contains(this,related))||(event.type=handleObj.origType,ret=handleObj.handler.apply(this,arguments),event.type=fix),ret}}}),jQuery.fn.extend({on:function(types,selector,data,fn){return on(this,types,selector,data,fn)},one:function(types,selector,data,fn){return on(this,types,selector,data,fn,1)},off:function(types,selector,fn){var handleObj,type;if(types&&types.preventDefault&&types.handleObj)return handleObj=types.handleObj,jQuery(types.delegateTarget).off(handleObj.namespace?handleObj.origType+"."+handleObj.namespace:handleObj.origType,handleObj.selector,handleObj.handler),this;if("object"!=typeof types)return!1!==selector&&"function"!=typeof selector||(fn=selector,selector=void 0),!1===fn&&(fn=returnFalse),this.each(function(){jQuery.event.remove(this,types,fn,selector)});for(type in types)this.off(type,selector,types[type]);return this}});var rxhtmlTag=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,rnoInnerhtml=/<script|<style|<link/i,rchecked=/checked\s*(?:[^=]|=\s*.checked.)/i,rcleanScript=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function manipulationTarget(elem,content){return nodeName(elem,"table")&&nodeName(11!==content.nodeType?content:content.firstChild,"tr")&&jQuery(elem).children("tbody")[0]||elem}function disableScript(elem){return elem.type=(null!==elem.getAttribute("type"))+"/"+elem.type,elem}function restoreScript(elem){return"true/"===(elem.type||"").slice(0,5)?elem.type=elem.type.slice(5):elem.removeAttribute("type"),elem}function cloneCopyEvent(src,dest){var i,l,type,pdataOld,pdataCur,udataOld,udataCur,events;if(1===dest.nodeType){if(dataPriv.hasData(src)&&(pdataOld=dataPriv.access(src),pdataCur=dataPriv.set(dest,pdataOld),events=pdataOld.events))for(type in delete pdataCur.handle,pdataCur.events={},events)for(i=0,l=events[type].length;i<l;i++)jQuery.event.add(dest,type,events[type][i]);dataUser.hasData(src)&&(udataOld=dataUser.access(src),udataCur=jQuery.extend({},udataOld),dataUser.set(dest,udataCur))}}function domManip(collection,args,callback,ignored){args=concat.apply([],args);var fragment,first,scripts,hasScripts,node,doc,i=0,l=collection.length,iNoClone=l-1,value=args[0],valueIsFunction=isFunction(value);if(valueIsFunction||1<l&&"string"==typeof value&&!support.checkClone&&rchecked.test(value))return collection.each(function(index){var self=collection.eq(index);valueIsFunction&&(args[0]=value.call(this,index,self.html())),domManip(self,args,callback,ignored)});if(l&&(first=(fragment=buildFragment(args,collection[0].ownerDocument,!1,collection,ignored)).firstChild,1===fragment.childNodes.length&&(fragment=first),first||ignored)){for(hasScripts=(scripts=jQuery.map(getAll(fragment,"script"),disableScript)).length;i<l;i++)node=fragment,i!==iNoClone&&(node=jQuery.clone(node,!0,!0),hasScripts&&jQuery.merge(scripts,getAll(node,"script"))),callback.call(collection[i],node,i);if(hasScripts)for(doc=scripts[scripts.length-1].ownerDocument,jQuery.map(scripts,restoreScript),i=0;i<hasScripts;i++)node=scripts[i],rscriptType.test(node.type||"")&&!dataPriv.access(node,"globalEval")&&jQuery.contains(doc,node)&&(node.src&&"module"!==(node.type||"").toLowerCase()?jQuery._evalUrl&&jQuery._evalUrl(node.src):DOMEval(node.textContent.replace(rcleanScript,""),doc,node))}return collection}function remove(elem,selector,keepData){for(var node,nodes=selector?jQuery.filter(selector,elem):elem,i=0;null!=(node=nodes[i]);i++)keepData||1!==node.nodeType||jQuery.cleanData(getAll(node)),node.parentNode&&(keepData&&jQuery.contains(node.ownerDocument,node)&&setGlobalEval(getAll(node,"script")),node.parentNode.removeChild(node));return elem}jQuery.extend({htmlPrefilter:function(html){return html.replace(rxhtmlTag,"<$1></$2>")},clone:function(elem,dataAndEvents,deepDataAndEvents){var i,l,srcElements,destElements,src,dest,nodeName,clone=elem.cloneNode(!0),inPage=jQuery.contains(elem.ownerDocument,elem);if(!(support.noCloneChecked||1!==elem.nodeType&&11!==elem.nodeType||jQuery.isXMLDoc(elem)))for(destElements=getAll(clone),i=0,l=(srcElements=getAll(elem)).length;i<l;i++)src=srcElements[i],dest=destElements[i],void 0,"input"===(nodeName=dest.nodeName.toLowerCase())&&rcheckableType.test(src.type)?dest.checked=src.checked:"input"!==nodeName&&"textarea"!==nodeName||(dest.defaultValue=src.defaultValue);if(dataAndEvents)if(deepDataAndEvents)for(srcElements=srcElements||getAll(elem),destElements=destElements||getAll(clone),i=0,l=srcElements.length;i<l;i++)cloneCopyEvent(srcElements[i],destElements[i]);else cloneCopyEvent(elem,clone);return 0<(destElements=getAll(clone,"script")).length&&setGlobalEval(destElements,!inPage&&getAll(elem,"script")),clone},cleanData:function(elems){for(var data,elem,type,special=jQuery.event.special,i=0;void 0!==(elem=elems[i]);i++)if(acceptData(elem)){if(data=elem[dataPriv.expando]){if(data.events)for(type in data.events)special[type]?jQuery.event.remove(elem,type):jQuery.removeEvent(elem,type,data.handle);elem[dataPriv.expando]=void 0}elem[dataUser.expando]&&(elem[dataUser.expando]=void 0)}}}),jQuery.fn.extend({detach:function(selector){return remove(this,selector,!0)},remove:function(selector){return remove(this,selector)},text:function(value){return access(this,function(value){return void 0===value?jQuery.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=value)})},null,value,arguments.length)},append:function(){return domManip(this,arguments,function(elem){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||manipulationTarget(this,elem).appendChild(elem)})},prepend:function(){return domManip(this,arguments,function(elem){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var target=manipulationTarget(this,elem);target.insertBefore(elem,target.firstChild)}})},before:function(){return domManip(this,arguments,function(elem){this.parentNode&&this.parentNode.insertBefore(elem,this)})},after:function(){return domManip(this,arguments,function(elem){this.parentNode&&this.parentNode.insertBefore(elem,this.nextSibling)})},empty:function(){for(var elem,i=0;null!=(elem=this[i]);i++)1===elem.nodeType&&(jQuery.cleanData(getAll(elem,!1)),elem.textContent="");return this},clone:function(dataAndEvents,deepDataAndEvents){return dataAndEvents=null!=dataAndEvents&&dataAndEvents,deepDataAndEvents=null==deepDataAndEvents?dataAndEvents:deepDataAndEvents,this.map(function(){return jQuery.clone(this,dataAndEvents,deepDataAndEvents)})},html:function(value){return access(this,function(value){var elem=this[0]||{},i=0,l=this.length;if(void 0===value&&1===elem.nodeType)return elem.innerHTML;if("string"==typeof value&&!rnoInnerhtml.test(value)&&!wrapMap[(rtagName.exec(value)||["",""])[1].toLowerCase()]){value=jQuery.htmlPrefilter(value);try{for(;i<l;i++)1===(elem=this[i]||{}).nodeType&&(jQuery.cleanData(getAll(elem,!1)),elem.innerHTML=value);elem=0}catch(e){}}elem&&this.empty().append(value)},null,value,arguments.length)},replaceWith:function(){var ignored=[];return domManip(this,arguments,function(elem){var parent=this.parentNode;jQuery.inArray(this,ignored)<0&&(jQuery.cleanData(getAll(this)),parent&&parent.replaceChild(elem,this))},ignored)}}),jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name]=function(selector){for(var elems,ret=[],insert=jQuery(selector),last=insert.length-1,i=0;i<=last;i++)elems=i===last?this:this.clone(!0),jQuery(insert[i])[original](elems),push.apply(ret,elems.get());return this.pushStack(ret)}});var rnumnonpx=new RegExp("^("+pnum+")(?!px)[a-z%]+$","i"),getStyles=function(elem){var view=elem.ownerDocument.defaultView;return view&&view.opener||(view=window),view.getComputedStyle(elem)},rboxStyle=new RegExp(cssExpand.join("|"),"i");function curCSS(elem,name,computed){var width,minWidth,maxWidth,ret,style=elem.style;return(computed=computed||getStyles(elem))&&(""!==(ret=computed.getPropertyValue(name)||computed[name])||jQuery.contains(elem.ownerDocument,elem)||(ret=jQuery.style(elem,name)),!support.pixelBoxStyles()&&rnumnonpx.test(ret)&&rboxStyle.test(name)&&(width=style.width,minWidth=style.minWidth,maxWidth=style.maxWidth,style.minWidth=style.maxWidth=style.width=ret,ret=computed.width,style.width=width,style.minWidth=minWidth,style.maxWidth=maxWidth)),void 0!==ret?ret+"":ret}function addGetHookIf(conditionFn,hookFn){return{get:function(){if(!conditionFn())return(this.get=hookFn).apply(this,arguments);delete this.get}}}!function(){function computeStyleTests(){if(div){container.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",div.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",documentElement.appendChild(container).appendChild(div);var divStyle=window.getComputedStyle(div);pixelPositionVal="1%"!==divStyle.top,reliableMarginLeftVal=12===roundPixelMeasures(divStyle.marginLeft),div.style.right="60%",pixelBoxStylesVal=36===roundPixelMeasures(divStyle.right),boxSizingReliableVal=36===roundPixelMeasures(divStyle.width),div.style.position="absolute",scrollboxSizeVal=36===div.offsetWidth||"absolute",documentElement.removeChild(container),div=null}}function roundPixelMeasures(measure){return Math.round(parseFloat(measure))}var pixelPositionVal,boxSizingReliableVal,scrollboxSizeVal,pixelBoxStylesVal,reliableMarginLeftVal,container=document.createElement("div"),div=document.createElement("div");div.style&&(div.style.backgroundClip="content-box",div.cloneNode(!0).style.backgroundClip="",support.clearCloneStyle="content-box"===div.style.backgroundClip,jQuery.extend(support,{boxSizingReliable:function(){return computeStyleTests(),boxSizingReliableVal},pixelBoxStyles:function(){return computeStyleTests(),pixelBoxStylesVal},pixelPosition:function(){return computeStyleTests(),pixelPositionVal},reliableMarginLeft:function(){return computeStyleTests(),reliableMarginLeftVal},scrollboxSize:function(){return computeStyleTests(),scrollboxSizeVal}}))}();var rdisplayswap=/^(none|table(?!-c[ea]).+)/,rcustomProp=/^--/,cssShow={position:"absolute",visibility:"hidden",display:"block"},cssNormalTransform={letterSpacing:"0",fontWeight:"400"},cssPrefixes=["Webkit","Moz","ms"],emptyStyle=document.createElement("div").style;function finalPropName(name){var ret=jQuery.cssProps[name];return ret||(ret=jQuery.cssProps[name]=function(name){if(name in emptyStyle)return name;for(var capName=name[0].toUpperCase()+name.slice(1),i=cssPrefixes.length;i--;)if((name=cssPrefixes[i]+capName)in emptyStyle)return name}(name)||name),ret}function setPositiveNumber(elem,value,subtract){var matches=rcssNum.exec(value);return matches?Math.max(0,matches[2]-(subtract||0))+(matches[3]||"px"):value}function boxModelAdjustment(elem,dimension,box,isBorderBox,styles,computedVal){var i="width"===dimension?1:0,extra=0,delta=0;if(box===(isBorderBox?"border":"content"))return 0;for(;i<4;i+=2)"margin"===box&&(delta+=jQuery.css(elem,box+cssExpand[i],!0,styles)),isBorderBox?("content"===box&&(delta-=jQuery.css(elem,"padding"+cssExpand[i],!0,styles)),"margin"!==box&&(delta-=jQuery.css(elem,"border"+cssExpand[i]+"Width",!0,styles))):(delta+=jQuery.css(elem,"padding"+cssExpand[i],!0,styles),"padding"!==box?delta+=jQuery.css(elem,"border"+cssExpand[i]+"Width",!0,styles):extra+=jQuery.css(elem,"border"+cssExpand[i]+"Width",!0,styles));return!isBorderBox&&0<=computedVal&&(delta+=Math.max(0,Math.ceil(elem["offset"+dimension[0].toUpperCase()+dimension.slice(1)]-computedVal-delta-extra-.5))),delta}function getWidthOrHeight(elem,dimension,extra){var styles=getStyles(elem),val=curCSS(elem,dimension,styles),isBorderBox="border-box"===jQuery.css(elem,"boxSizing",!1,styles),valueIsBorderBox=isBorderBox;if(rnumnonpx.test(val)){if(!extra)return val;val="auto"}return valueIsBorderBox=valueIsBorderBox&&(support.boxSizingReliable()||val===elem.style[dimension]),("auto"===val||!parseFloat(val)&&"inline"===jQuery.css(elem,"display",!1,styles))&&(val=elem["offset"+dimension[0].toUpperCase()+dimension.slice(1)],valueIsBorderBox=!0),(val=parseFloat(val)||0)+boxModelAdjustment(elem,dimension,extra||(isBorderBox?"border":"content"),valueIsBorderBox,styles,val)+"px"}function Tween(elem,options,prop,end,easing){return new Tween.prototype.init(elem,options,prop,end,easing)}jQuery.extend({cssHooks:{opacity:{get:function(elem,computed){if(computed){var ret=curCSS(elem,"opacity");return""===ret?"1":ret}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(elem,name,value,extra){if(elem&&3!==elem.nodeType&&8!==elem.nodeType&&elem.style){var ret,type,hooks,origName=camelCase(name),isCustomProp=rcustomProp.test(name),style=elem.style;if(isCustomProp||(name=finalPropName(origName)),hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName],void 0===value)return hooks&&"get"in hooks&&void 0!==(ret=hooks.get(elem,!1,extra))?ret:style[name];"string"===(type=typeof value)&&(ret=rcssNum.exec(value))&&ret[1]&&(value=adjustCSS(elem,name,ret),type="number"),null!=value&&value==value&&("number"===type&&(value+=ret&&ret[3]||(jQuery.cssNumber[origName]?"":"px")),support.clearCloneStyle||""!==value||0!==name.indexOf("background")||(style[name]="inherit"),hooks&&"set"in hooks&&void 0===(value=hooks.set(elem,value,extra))||(isCustomProp?style.setProperty(name,value):style[name]=value))}},css:function(elem,name,extra,styles){var val,num,hooks,origName=camelCase(name);return rcustomProp.test(name)||(name=finalPropName(origName)),(hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName])&&"get"in hooks&&(val=hooks.get(elem,!0,extra)),void 0===val&&(val=curCSS(elem,name,styles)),"normal"===val&&name in cssNormalTransform&&(val=cssNormalTransform[name]),""===extra||extra?(num=parseFloat(val),!0===extra||isFinite(num)?num||0:val):val}}),jQuery.each(["height","width"],function(i,dimension){jQuery.cssHooks[dimension]={get:function(elem,computed,extra){if(computed)return!rdisplayswap.test(jQuery.css(elem,"display"))||elem.getClientRects().length&&elem.getBoundingClientRect().width?getWidthOrHeight(elem,dimension,extra):swap(elem,cssShow,function(){return getWidthOrHeight(elem,dimension,extra)})},set:function(elem,value,extra){var matches,styles=getStyles(elem),isBorderBox="border-box"===jQuery.css(elem,"boxSizing",!1,styles),subtract=extra&&boxModelAdjustment(elem,dimension,extra,isBorderBox,styles);return isBorderBox&&support.scrollboxSize()===styles.position&&(subtract-=Math.ceil(elem["offset"+dimension[0].toUpperCase()+dimension.slice(1)]-parseFloat(styles[dimension])-boxModelAdjustment(elem,dimension,"border",!1,styles)-.5)),subtract&&(matches=rcssNum.exec(value))&&"px"!==(matches[3]||"px")&&(elem.style[dimension]=value,value=jQuery.css(elem,dimension)),setPositiveNumber(0,value,subtract)}}}),jQuery.cssHooks.marginLeft=addGetHookIf(support.reliableMarginLeft,function(elem,computed){if(computed)return(parseFloat(curCSS(elem,"marginLeft"))||elem.getBoundingClientRect().left-swap(elem,{marginLeft:0},function(){return elem.getBoundingClientRect().left}))+"px"}),jQuery.each({margin:"",padding:"",border:"Width"},function(prefix,suffix){jQuery.cssHooks[prefix+suffix]={expand:function(value){for(var i=0,expanded={},parts="string"==typeof value?value.split(" "):[value];i<4;i++)expanded[prefix+cssExpand[i]+suffix]=parts[i]||parts[i-2]||parts[0];return expanded}},"margin"!==prefix&&(jQuery.cssHooks[prefix+suffix].set=setPositiveNumber)}),jQuery.fn.extend({css:function(name,value){return access(this,function(elem,name,value){var styles,len,map={},i=0;if(Array.isArray(name)){for(styles=getStyles(elem),len=name.length;i<len;i++)map[name[i]]=jQuery.css(elem,name[i],!1,styles);return map}return void 0!==value?jQuery.style(elem,name,value):jQuery.css(elem,name)},name,value,1<arguments.length)}}),((jQuery.Tween=Tween).prototype={constructor:Tween,init:function(elem,options,prop,end,easing,unit){this.elem=elem,this.prop=prop,this.easing=easing||jQuery.easing._default,this.options=options,this.start=this.now=this.cur(),this.end=end,this.unit=unit||(jQuery.cssNumber[prop]?"":"px")},cur:function(){var hooks=Tween.propHooks[this.prop];return hooks&&hooks.get?hooks.get(this):Tween.propHooks._default.get(this)},run:function(percent){var eased,hooks=Tween.propHooks[this.prop];return this.options.duration?this.pos=eased=jQuery.easing[this.easing](percent,this.options.duration*percent,0,1,this.options.duration):this.pos=eased=percent,this.now=(this.end-this.start)*eased+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),hooks&&hooks.set?hooks.set(this):Tween.propHooks._default.set(this),this}}).init.prototype=Tween.prototype,(Tween.propHooks={_default:{get:function(tween){var result;return 1!==tween.elem.nodeType||null!=tween.elem[tween.prop]&&null==tween.elem.style[tween.prop]?tween.elem[tween.prop]:(result=jQuery.css(tween.elem,tween.prop,""))&&"auto"!==result?result:0},set:function(tween){jQuery.fx.step[tween.prop]?jQuery.fx.step[tween.prop](tween):1!==tween.elem.nodeType||null==tween.elem.style[jQuery.cssProps[tween.prop]]&&!jQuery.cssHooks[tween.prop]?tween.elem[tween.prop]=tween.now:jQuery.style(tween.elem,tween.prop,tween.now+tween.unit)}}}).scrollTop=Tween.propHooks.scrollLeft={set:function(tween){tween.elem.nodeType&&tween.elem.parentNode&&(tween.elem[tween.prop]=tween.now)}},jQuery.easing={linear:function(p){return p},swing:function(p){return.5-Math.cos(p*Math.PI)/2},_default:"swing"},jQuery.fx=Tween.prototype.init,jQuery.fx.step={};var fxNow,inProgress,rfxtypes=/^(?:toggle|show|hide)$/,rrun=/queueHooks$/;function schedule(){inProgress&&(!1===document.hidden&&window.requestAnimationFrame?window.requestAnimationFrame(schedule):window.setTimeout(schedule,jQuery.fx.interval),jQuery.fx.tick())}function createFxNow(){return window.setTimeout(function(){fxNow=void 0}),fxNow=Date.now()}function genFx(type,includeWidth){var which,i=0,attrs={height:type};for(includeWidth=includeWidth?1:0;i<4;i+=2-includeWidth)attrs["margin"+(which=cssExpand[i])]=attrs["padding"+which]=type;return includeWidth&&(attrs.opacity=attrs.width=type),attrs}function createTween(value,prop,animation){for(var tween,collection=(Animation.tweeners[prop]||[]).concat(Animation.tweeners["*"]),index=0,length=collection.length;index<length;index++)if(tween=collection[index].call(animation,prop,value))return tween}function Animation(elem,properties,options){var result,stopped,index=0,length=Animation.prefilters.length,deferred=jQuery.Deferred().always(function(){delete tick.elem}),tick=function(){if(stopped)return!1;for(var currentTime=fxNow||createFxNow(),remaining=Math.max(0,animation.startTime+animation.duration-currentTime),percent=1-(remaining/animation.duration||0),index=0,length=animation.tweens.length;index<length;index++)animation.tweens[index].run(percent);return deferred.notifyWith(elem,[animation,percent,remaining]),percent<1&&length?remaining:(length||deferred.notifyWith(elem,[animation,1,0]),deferred.resolveWith(elem,[animation]),!1)},animation=deferred.promise({elem:elem,props:jQuery.extend({},properties),opts:jQuery.extend(!0,{specialEasing:{},easing:jQuery.easing._default},options),originalProperties:properties,originalOptions:options,startTime:fxNow||createFxNow(),duration:options.duration,tweens:[],createTween:function(prop,end){var tween=jQuery.Tween(elem,animation.opts,prop,end,animation.opts.specialEasing[prop]||animation.opts.easing);return animation.tweens.push(tween),tween},stop:function(gotoEnd){var index=0,length=gotoEnd?animation.tweens.length:0;if(stopped)return this;for(stopped=!0;index<length;index++)animation.tweens[index].run(1);return gotoEnd?(deferred.notifyWith(elem,[animation,1,0]),deferred.resolveWith(elem,[animation,gotoEnd])):deferred.rejectWith(elem,[animation,gotoEnd]),this}}),props=animation.props;for(!function(props,specialEasing){var index,name,easing,value,hooks;for(index in props)if(easing=specialEasing[name=camelCase(index)],value=props[index],Array.isArray(value)&&(easing=value[1],value=props[index]=value[0]),index!==name&&(props[name]=value,delete props[index]),(hooks=jQuery.cssHooks[name])&&"expand"in hooks)for(index in value=hooks.expand(value),delete props[name],value)index in props||(props[index]=value[index],specialEasing[index]=easing);else specialEasing[name]=easing}(props,animation.opts.specialEasing);index<length;index++)if(result=Animation.prefilters[index].call(animation,elem,props,animation.opts))return isFunction(result.stop)&&(jQuery._queueHooks(animation.elem,animation.opts.queue).stop=result.stop.bind(result)),result;return jQuery.map(props,createTween,animation),isFunction(animation.opts.start)&&animation.opts.start.call(elem,animation),animation.progress(animation.opts.progress).done(animation.opts.done,animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always),jQuery.fx.timer(jQuery.extend(tick,{elem:elem,anim:animation,queue:animation.opts.queue})),animation}jQuery.Animation=jQuery.extend(Animation,{tweeners:{"*":[function(prop,value){var tween=this.createTween(prop,value);return adjustCSS(tween.elem,prop,rcssNum.exec(value),tween),tween}]},tweener:function(props,callback){for(var prop,index=0,length=(props=isFunction(props)?(callback=props,["*"]):props.match(rnothtmlwhite)).length;index<length;index++)prop=props[index],Animation.tweeners[prop]=Animation.tweeners[prop]||[],Animation.tweeners[prop].unshift(callback)},prefilters:[function(elem,props,opts){var prop,value,toggle,hooks,oldfire,propTween,restoreDisplay,display,isBox="width"in props||"height"in props,anim=this,orig={},style=elem.style,hidden=elem.nodeType&&isHiddenWithinTree(elem),dataShow=dataPriv.get(elem,"fxshow");for(prop in opts.queue||(null==(hooks=jQuery._queueHooks(elem,"fx")).unqueued&&(hooks.unqueued=0,oldfire=hooks.empty.fire,hooks.empty.fire=function(){hooks.unqueued||oldfire()}),hooks.unqueued++,anim.always(function(){anim.always(function(){hooks.unqueued--,jQuery.queue(elem,"fx").length||hooks.empty.fire()})})),props)if(value=props[prop],rfxtypes.test(value)){if(delete props[prop],toggle=toggle||"toggle"===value,value===(hidden?"hide":"show")){if("show"!==value||!dataShow||void 0===dataShow[prop])continue;hidden=!0}orig[prop]=dataShow&&dataShow[prop]||jQuery.style(elem,prop)}if((propTween=!jQuery.isEmptyObject(props))||!jQuery.isEmptyObject(orig))for(prop in isBox&&1===elem.nodeType&&(opts.overflow=[style.overflow,style.overflowX,style.overflowY],null==(restoreDisplay=dataShow&&dataShow.display)&&(restoreDisplay=dataPriv.get(elem,"display")),"none"===(display=jQuery.css(elem,"display"))&&(restoreDisplay?display=restoreDisplay:(showHide([elem],!0),restoreDisplay=elem.style.display||restoreDisplay,display=jQuery.css(elem,"display"),showHide([elem]))),("inline"===display||"inline-block"===display&&null!=restoreDisplay)&&"none"===jQuery.css(elem,"float")&&(propTween||(anim.done(function(){style.display=restoreDisplay}),null==restoreDisplay&&(display=style.display,restoreDisplay="none"===display?"":display)),style.display="inline-block")),opts.overflow&&(style.overflow="hidden",anim.always(function(){style.overflow=opts.overflow[0],style.overflowX=opts.overflow[1],style.overflowY=opts.overflow[2]})),propTween=!1,orig)propTween||(dataShow?"hidden"in dataShow&&(hidden=dataShow.hidden):dataShow=dataPriv.access(elem,"fxshow",{display:restoreDisplay}),toggle&&(dataShow.hidden=!hidden),hidden&&showHide([elem],!0),anim.done(function(){for(prop in hidden||showHide([elem]),dataPriv.remove(elem,"fxshow"),orig)jQuery.style(elem,prop,orig[prop])})),propTween=createTween(hidden?dataShow[prop]:0,prop,anim),prop in dataShow||(dataShow[prop]=propTween.start,hidden&&(propTween.end=propTween.start,propTween.start=0))}],prefilter:function(callback,prepend){prepend?Animation.prefilters.unshift(callback):Animation.prefilters.push(callback)}}),jQuery.speed=function(speed,easing,fn){var opt=speed&&"object"==typeof speed?jQuery.extend({},speed):{complete:fn||!fn&&easing||isFunction(speed)&&speed,duration:speed,easing:fn&&easing||easing&&!isFunction(easing)&&easing};return jQuery.fx.off?opt.duration=0:"number"!=typeof opt.duration&&(opt.duration in jQuery.fx.speeds?opt.duration=jQuery.fx.speeds[opt.duration]:opt.duration=jQuery.fx.speeds._default),null!=opt.queue&&!0!==opt.queue||(opt.queue="fx"),opt.old=opt.complete,opt.complete=function(){isFunction(opt.old)&&opt.old.call(this),opt.queue&&jQuery.dequeue(this,opt.queue)},opt},jQuery.fn.extend({fadeTo:function(speed,to,easing,callback){return this.filter(isHiddenWithinTree).css("opacity",0).show().end().animate({opacity:to},speed,easing,callback)},animate:function(prop,speed,easing,callback){var empty=jQuery.isEmptyObject(prop),optall=jQuery.speed(speed,easing,callback),doAnimation=function(){var anim=Animation(this,jQuery.extend({},prop),optall);(empty||dataPriv.get(this,"finish"))&&anim.stop(!0)};return doAnimation.finish=doAnimation,empty||!1===optall.queue?this.each(doAnimation):this.queue(optall.queue,doAnimation)},stop:function(type,clearQueue,gotoEnd){var stopQueue=function(hooks){var stop=hooks.stop;delete hooks.stop,stop(gotoEnd)};return"string"!=typeof type&&(gotoEnd=clearQueue,clearQueue=type,type=void 0),clearQueue&&!1!==type&&this.queue(type||"fx",[]),this.each(function(){var dequeue=!0,index=null!=type&&type+"queueHooks",timers=jQuery.timers,data=dataPriv.get(this);if(index)data[index]&&data[index].stop&&stopQueue(data[index]);else for(index in data)data[index]&&data[index].stop&&rrun.test(index)&&stopQueue(data[index]);for(index=timers.length;index--;)timers[index].elem!==this||null!=type&&timers[index].queue!==type||(timers[index].anim.stop(gotoEnd),dequeue=!1,timers.splice(index,1));!dequeue&&gotoEnd||jQuery.dequeue(this,type)})},finish:function(type){return!1!==type&&(type=type||"fx"),this.each(function(){var index,data=dataPriv.get(this),queue=data[type+"queue"],hooks=data[type+"queueHooks"],timers=jQuery.timers,length=queue?queue.length:0;for(data.finish=!0,jQuery.queue(this,type,[]),hooks&&hooks.stop&&hooks.stop.call(this,!0),index=timers.length;index--;)timers[index].elem===this&&timers[index].queue===type&&(timers[index].anim.stop(!0),timers.splice(index,1));for(index=0;index<length;index++)queue[index]&&queue[index].finish&&queue[index].finish.call(this);delete data.finish})}}),jQuery.each(["toggle","show","hide"],function(i,name){var cssFn=jQuery.fn[name];jQuery.fn[name]=function(speed,easing,callback){return null==speed||"boolean"==typeof speed?cssFn.apply(this,arguments):this.animate(genFx(name,!0),speed,easing,callback)}}),jQuery.each({slideDown:genFx("show"),slideUp:genFx("hide"),slideToggle:genFx("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(name,props){jQuery.fn[name]=function(speed,easing,callback){return this.animate(props,speed,easing,callback)}}),jQuery.timers=[],jQuery.fx.tick=function(){var timer,i=0,timers=jQuery.timers;for(fxNow=Date.now();i<timers.length;i++)(timer=timers[i])()||timers[i]!==timer||timers.splice(i--,1);timers.length||jQuery.fx.stop(),fxNow=void 0},jQuery.fx.timer=function(timer){jQuery.timers.push(timer),jQuery.fx.start()},jQuery.fx.interval=13,jQuery.fx.start=function(){inProgress||(inProgress=!0,schedule())},jQuery.fx.stop=function(){inProgress=null},jQuery.fx.speeds={slow:600,fast:200,_default:400},jQuery.fn.delay=function(time,type){return time=jQuery.fx&&jQuery.fx.speeds[time]||time,type=type||"fx",this.queue(type,function(next,hooks){var timeout=window.setTimeout(next,time);hooks.stop=function(){window.clearTimeout(timeout)}})},function(){var input=document.createElement("input"),opt=document.createElement("select").appendChild(document.createElement("option"));input.type="checkbox",support.checkOn=""!==input.value,support.optSelected=opt.selected,(input=document.createElement("input")).value="t",input.type="radio",support.radioValue="t"===input.value}();var boolHook,attrHandle=jQuery.expr.attrHandle;jQuery.fn.extend({attr:function(name,value){return access(this,jQuery.attr,name,value,1<arguments.length)},removeAttr:function(name){return this.each(function(){jQuery.removeAttr(this,name)})}}),jQuery.extend({attr:function(elem,name,value){var ret,hooks,nType=elem.nodeType;if(3!==nType&&8!==nType&&2!==nType)return void 0===elem.getAttribute?jQuery.prop(elem,name,value):(1===nType&&jQuery.isXMLDoc(elem)||(hooks=jQuery.attrHooks[name.toLowerCase()]||(jQuery.expr.match.bool.test(name)?boolHook:void 0)),void 0!==value?null===value?void jQuery.removeAttr(elem,name):hooks&&"set"in hooks&&void 0!==(ret=hooks.set(elem,value,name))?ret:(elem.setAttribute(name,value+""),value):hooks&&"get"in hooks&&null!==(ret=hooks.get(elem,name))?ret:null==(ret=jQuery.find.attr(elem,name))?void 0:ret)},attrHooks:{type:{set:function(elem,value){if(!support.radioValue&&"radio"===value&&nodeName(elem,"input")){var val=elem.value;return elem.setAttribute("type",value),val&&(elem.value=val),value}}}},removeAttr:function(elem,value){var name,i=0,attrNames=value&&value.match(rnothtmlwhite);if(attrNames&&1===elem.nodeType)for(;name=attrNames[i++];)elem.removeAttribute(name)}}),boolHook={set:function(elem,value,name){return!1===value?jQuery.removeAttr(elem,name):elem.setAttribute(name,name),name}},jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g),function(i,name){var getter=attrHandle[name]||jQuery.find.attr;attrHandle[name]=function(elem,name,isXML){var ret,handle,lowercaseName=name.toLowerCase();return isXML||(handle=attrHandle[lowercaseName],attrHandle[lowercaseName]=ret,ret=null!=getter(elem,name,isXML)?lowercaseName:null,attrHandle[lowercaseName]=handle),ret}});var rfocusable=/^(?:input|select|textarea|button)$/i,rclickable=/^(?:a|area)$/i;function stripAndCollapse(value){return(value.match(rnothtmlwhite)||[]).join(" ")}function getClass(elem){return elem.getAttribute&&elem.getAttribute("class")||""}function classesToArray(value){return Array.isArray(value)?value:"string"==typeof value&&value.match(rnothtmlwhite)||[]}jQuery.fn.extend({prop:function(name,value){return access(this,jQuery.prop,name,value,1<arguments.length)},removeProp:function(name){return this.each(function(){delete this[jQuery.propFix[name]||name]})}}),jQuery.extend({prop:function(elem,name,value){var ret,hooks,nType=elem.nodeType;if(3!==nType&&8!==nType&&2!==nType)return 1===nType&&jQuery.isXMLDoc(elem)||(name=jQuery.propFix[name]||name,hooks=jQuery.propHooks[name]),void 0!==value?hooks&&"set"in hooks&&void 0!==(ret=hooks.set(elem,value,name))?ret:elem[name]=value:hooks&&"get"in hooks&&null!==(ret=hooks.get(elem,name))?ret:elem[name]},propHooks:{tabIndex:{get:function(elem){var tabindex=jQuery.find.attr(elem,"tabindex");return tabindex?parseInt(tabindex,10):rfocusable.test(elem.nodeName)||rclickable.test(elem.nodeName)&&elem.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),support.optSelected||(jQuery.propHooks.selected={get:function(elem){var parent=elem.parentNode;return parent&&parent.parentNode&&parent.parentNode.selectedIndex,null},set:function(elem){var parent=elem.parentNode;parent&&(parent.selectedIndex,parent.parentNode&&parent.parentNode.selectedIndex)}}),jQuery.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){jQuery.propFix[this.toLowerCase()]=this}),jQuery.fn.extend({addClass:function(value){var classes,elem,cur,curValue,clazz,j,finalValue,i=0;if(isFunction(value))return this.each(function(j){jQuery(this).addClass(value.call(this,j,getClass(this)))});if((classes=classesToArray(value)).length)for(;elem=this[i++];)if(curValue=getClass(elem),cur=1===elem.nodeType&&" "+stripAndCollapse(curValue)+" "){for(j=0;clazz=classes[j++];)cur.indexOf(" "+clazz+" ")<0&&(cur+=clazz+" ");curValue!==(finalValue=stripAndCollapse(cur))&&elem.setAttribute("class",finalValue)}return this},removeClass:function(value){var classes,elem,cur,curValue,clazz,j,finalValue,i=0;if(isFunction(value))return this.each(function(j){jQuery(this).removeClass(value.call(this,j,getClass(this)))});if(!arguments.length)return this.attr("class","");if((classes=classesToArray(value)).length)for(;elem=this[i++];)if(curValue=getClass(elem),cur=1===elem.nodeType&&" "+stripAndCollapse(curValue)+" "){for(j=0;clazz=classes[j++];)for(;-1<cur.indexOf(" "+clazz+" ");)cur=cur.replace(" "+clazz+" "," ");curValue!==(finalValue=stripAndCollapse(cur))&&elem.setAttribute("class",finalValue)}return this},toggleClass:function(value,stateVal){var type=typeof value,isValidValue="string"===type||Array.isArray(value);return"boolean"==typeof stateVal&&isValidValue?stateVal?this.addClass(value):this.removeClass(value):isFunction(value)?this.each(function(i){jQuery(this).toggleClass(value.call(this,i,getClass(this),stateVal),stateVal)}):this.each(function(){var className,i,self,classNames;if(isValidValue)for(i=0,self=jQuery(this),classNames=classesToArray(value);className=classNames[i++];)self.hasClass(className)?self.removeClass(className):self.addClass(className);else void 0!==value&&"boolean"!==type||((className=getClass(this))&&dataPriv.set(this,"__className__",className),this.setAttribute&&this.setAttribute("class",className||!1===value?"":dataPriv.get(this,"__className__")||""))})},hasClass:function(selector){var className,elem,i=0;for(className=" "+selector+" ";elem=this[i++];)if(1===elem.nodeType&&-1<(" "+stripAndCollapse(getClass(elem))+" ").indexOf(className))return!0;return!1}});var rreturn=/\r/g;jQuery.fn.extend({val:function(value){var hooks,ret,valueIsFunction,elem=this[0];return arguments.length?(valueIsFunction=isFunction(value),this.each(function(i){var val;1===this.nodeType&&(null==(val=valueIsFunction?value.call(this,i,jQuery(this).val()):value)?val="":"number"==typeof val?val+="":Array.isArray(val)&&(val=jQuery.map(val,function(value){return null==value?"":value+""})),(hooks=jQuery.valHooks[this.type]||jQuery.valHooks[this.nodeName.toLowerCase()])&&"set"in hooks&&void 0!==hooks.set(this,val,"value")||(this.value=val))})):elem?(hooks=jQuery.valHooks[elem.type]||jQuery.valHooks[elem.nodeName.toLowerCase()])&&"get"in hooks&&void 0!==(ret=hooks.get(elem,"value"))?ret:"string"==typeof(ret=elem.value)?ret.replace(rreturn,""):null==ret?"":ret:void 0}}),jQuery.extend({valHooks:{option:{get:function(elem){var val=jQuery.find.attr(elem,"value");return null!=val?val:stripAndCollapse(jQuery.text(elem))}},select:{get:function(elem){var value,option,i,options=elem.options,index=elem.selectedIndex,one="select-one"===elem.type,values=one?null:[],max=one?index+1:options.length;for(i=index<0?max:one?index:0;i<max;i++)if(((option=options[i]).selected||i===index)&&!option.disabled&&(!option.parentNode.disabled||!nodeName(option.parentNode,"optgroup"))){if(value=jQuery(option).val(),one)return value;values.push(value)}return values},set:function(elem,value){for(var optionSet,option,options=elem.options,values=jQuery.makeArray(value),i=options.length;i--;)((option=options[i]).selected=-1<jQuery.inArray(jQuery.valHooks.option.get(option),values))&&(optionSet=!0);return optionSet||(elem.selectedIndex=-1),values}}}}),jQuery.each(["radio","checkbox"],function(){jQuery.valHooks[this]={set:function(elem,value){if(Array.isArray(value))return elem.checked=-1<jQuery.inArray(jQuery(elem).val(),value)}},support.checkOn||(jQuery.valHooks[this].get=function(elem){return null===elem.getAttribute("value")?"on":elem.value})}),support.focusin="onfocusin"in window;var rfocusMorph=/^(?:focusinfocus|focusoutblur)$/,stopPropagationCallback=function(e){e.stopPropagation()};jQuery.extend(jQuery.event,{trigger:function(event,data,elem,onlyHandlers){var i,cur,tmp,bubbleType,ontype,handle,special,lastElement,eventPath=[elem||document],type=hasOwn.call(event,"type")?event.type:event,namespaces=hasOwn.call(event,"namespace")?event.namespace.split("."):[];if(cur=lastElement=tmp=elem=elem||document,3!==elem.nodeType&&8!==elem.nodeType&&!rfocusMorph.test(type+jQuery.event.triggered)&&(-1<type.indexOf(".")&&(type=(namespaces=type.split(".")).shift(),namespaces.sort()),ontype=type.indexOf(":")<0&&"on"+type,(event=event[jQuery.expando]?event:new jQuery.Event(type,"object"==typeof event&&event)).isTrigger=onlyHandlers?2:3,event.namespace=namespaces.join("."),event.rnamespace=event.namespace?new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,event.result=void 0,event.target||(event.target=elem),data=null==data?[event]:jQuery.makeArray(data,[event]),special=jQuery.event.special[type]||{},onlyHandlers||!special.trigger||!1!==special.trigger.apply(elem,data))){if(!onlyHandlers&&!special.noBubble&&!isWindow(elem)){for(bubbleType=special.delegateType||type,rfocusMorph.test(bubbleType+type)||(cur=cur.parentNode);cur;cur=cur.parentNode)eventPath.push(cur),tmp=cur;tmp===(elem.ownerDocument||document)&&eventPath.push(tmp.defaultView||tmp.parentWindow||window)}for(i=0;(cur=eventPath[i++])&&!event.isPropagationStopped();)lastElement=cur,event.type=1<i?bubbleType:special.bindType||type,(handle=(dataPriv.get(cur,"events")||{})[event.type]&&dataPriv.get(cur,"handle"))&&handle.apply(cur,data),(handle=ontype&&cur[ontype])&&handle.apply&&acceptData(cur)&&(event.result=handle.apply(cur,data),!1===event.result&&event.preventDefault());return event.type=type,onlyHandlers||event.isDefaultPrevented()||special._default&&!1!==special._default.apply(eventPath.pop(),data)||!acceptData(elem)||ontype&&isFunction(elem[type])&&!isWindow(elem)&&((tmp=elem[ontype])&&(elem[ontype]=null),jQuery.event.triggered=type,event.isPropagationStopped()&&lastElement.addEventListener(type,stopPropagationCallback),elem[type](),event.isPropagationStopped()&&lastElement.removeEventListener(type,stopPropagationCallback),jQuery.event.triggered=void 0,tmp&&(elem[ontype]=tmp)),event.result}},simulate:function(type,elem,event){var e=jQuery.extend(new jQuery.Event,event,{type:type,isSimulated:!0});jQuery.event.trigger(e,null,elem)}}),jQuery.fn.extend({trigger:function(type,data){return this.each(function(){jQuery.event.trigger(type,data,this)})},triggerHandler:function(type,data){var elem=this[0];if(elem)return jQuery.event.trigger(type,data,elem,!0)}}),support.focusin||jQuery.each({focus:"focusin",blur:"focusout"},function(orig,fix){var handler=function(event){jQuery.event.simulate(fix,event.target,jQuery.event.fix(event))};jQuery.event.special[fix]={setup:function(){var doc=this.ownerDocument||this,attaches=dataPriv.access(doc,fix);attaches||doc.addEventListener(orig,handler,!0),dataPriv.access(doc,fix,(attaches||0)+1)},teardown:function(){var doc=this.ownerDocument||this,attaches=dataPriv.access(doc,fix)-1;attaches?dataPriv.access(doc,fix,attaches):(doc.removeEventListener(orig,handler,!0),dataPriv.remove(doc,fix))}}});var location=window.location,nonce=Date.now(),rquery=/\?/;jQuery.parseXML=function(data){var xml;if(!data||"string"!=typeof data)return null;try{xml=(new window.DOMParser).parseFromString(data,"text/xml")}catch(e){xml=void 0}return xml&&!xml.getElementsByTagName("parsererror").length||jQuery.error("Invalid XML: "+data),xml};var rbracket=/\[\]$/,rCRLF=/\r?\n/g,rsubmitterTypes=/^(?:submit|button|image|reset|file)$/i,rsubmittable=/^(?:input|select|textarea|keygen)/i;function buildParams(prefix,obj,traditional,add){var name;if(Array.isArray(obj))jQuery.each(obj,function(i,v){traditional||rbracket.test(prefix)?add(prefix,v):buildParams(prefix+"["+("object"==typeof v&&null!=v?i:"")+"]",v,traditional,add)});else if(traditional||"object"!==toType(obj))add(prefix,obj);else for(name in obj)buildParams(prefix+"["+name+"]",obj[name],traditional,add)}jQuery.param=function(a,traditional){var prefix,s=[],add=function(key,valueOrFunction){var value=isFunction(valueOrFunction)?valueOrFunction():valueOrFunction;s[s.length]=encodeURIComponent(key)+"="+encodeURIComponent(null==value?"":value)};if(Array.isArray(a)||a.jquery&&!jQuery.isPlainObject(a))jQuery.each(a,function(){add(this.name,this.value)});else for(prefix in a)buildParams(prefix,a[prefix],traditional,add);return s.join("&")},jQuery.fn.extend({serialize:function(){return jQuery.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var elements=jQuery.prop(this,"elements");return elements?jQuery.makeArray(elements):this}).filter(function(){var type=this.type;return this.name&&!jQuery(this).is(":disabled")&&rsubmittable.test(this.nodeName)&&!rsubmitterTypes.test(type)&&(this.checked||!rcheckableType.test(type))}).map(function(i,elem){var val=jQuery(this).val();return null==val?null:Array.isArray(val)?jQuery.map(val,function(val){return{name:elem.name,value:val.replace(rCRLF,"\r\n")}}):{name:elem.name,value:val.replace(rCRLF,"\r\n")}}).get()}});var r20=/%20/g,rhash=/#.*$/,rantiCache=/([?&])_=[^&]*/,rheaders=/^(.*?):[ \t]*([^\r\n]*)$/gm,rnoContent=/^(?:GET|HEAD)$/,rprotocol=/^\/\//,prefilters={},transports={},allTypes="*/".concat("*"),originAnchor=document.createElement("a");function addToPrefiltersOrTransports(structure){return function(dataTypeExpression,func){"string"!=typeof dataTypeExpression&&(func=dataTypeExpression,dataTypeExpression="*");var dataType,i=0,dataTypes=dataTypeExpression.toLowerCase().match(rnothtmlwhite)||[];if(isFunction(func))for(;dataType=dataTypes[i++];)"+"===dataType[0]?(dataType=dataType.slice(1)||"*",(structure[dataType]=structure[dataType]||[]).unshift(func)):(structure[dataType]=structure[dataType]||[]).push(func)}}function inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR){var inspected={},seekingTransport=structure===transports;function inspect(dataType){var selected;return inspected[dataType]=!0,jQuery.each(structure[dataType]||[],function(_,prefilterOrFactory){var dataTypeOrTransport=prefilterOrFactory(options,originalOptions,jqXHR);return"string"!=typeof dataTypeOrTransport||seekingTransport||inspected[dataTypeOrTransport]?seekingTransport?!(selected=dataTypeOrTransport):void 0:(options.dataTypes.unshift(dataTypeOrTransport),inspect(dataTypeOrTransport),!1)}),selected}return inspect(options.dataTypes[0])||!inspected["*"]&&inspect("*")}function ajaxExtend(target,src){var key,deep,flatOptions=jQuery.ajaxSettings.flatOptions||{};for(key in src)void 0!==src[key]&&((flatOptions[key]?target:deep||(deep={}))[key]=src[key]);return deep&&jQuery.extend(!0,target,deep),target}originAnchor.href=location.href,jQuery.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:location.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(location.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":allTypes,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":jQuery.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(target,settings){return settings?ajaxExtend(ajaxExtend(target,jQuery.ajaxSettings),settings):ajaxExtend(jQuery.ajaxSettings,target)},ajaxPrefilter:addToPrefiltersOrTransports(prefilters),ajaxTransport:addToPrefiltersOrTransports(transports),ajax:function(url,options){"object"==typeof url&&(options=url,url=void 0),options=options||{};var transport,cacheURL,responseHeadersString,responseHeaders,timeoutTimer,urlAnchor,completed,fireGlobals,i,uncached,s=jQuery.ajaxSetup({},options),callbackContext=s.context||s,globalEventContext=s.context&&(callbackContext.nodeType||callbackContext.jquery)?jQuery(callbackContext):jQuery.event,deferred=jQuery.Deferred(),completeDeferred=jQuery.Callbacks("once memory"),statusCode=s.statusCode||{},requestHeaders={},requestHeadersNames={},strAbort="canceled",jqXHR={readyState:0,getResponseHeader:function(key){var match;if(completed){if(!responseHeaders)for(responseHeaders={};match=rheaders.exec(responseHeadersString);)responseHeaders[match[1].toLowerCase()]=match[2];match=responseHeaders[key.toLowerCase()]}return null==match?null:match},getAllResponseHeaders:function(){return completed?responseHeadersString:null},setRequestHeader:function(name,value){return null==completed&&(name=requestHeadersNames[name.toLowerCase()]=requestHeadersNames[name.toLowerCase()]||name,requestHeaders[name]=value),this},overrideMimeType:function(type){return null==completed&&(s.mimeType=type),this},statusCode:function(map){var code;if(map)if(completed)jqXHR.always(map[jqXHR.status]);else for(code in map)statusCode[code]=[statusCode[code],map[code]];return this},abort:function(statusText){var finalText=statusText||strAbort;return transport&&transport.abort(finalText),done(0,finalText),this}};if(deferred.promise(jqXHR),s.url=((url||s.url||location.href)+"").replace(rprotocol,location.protocol+"//"),s.type=options.method||options.type||s.method||s.type,s.dataTypes=(s.dataType||"*").toLowerCase().match(rnothtmlwhite)||[""],null==s.crossDomain){urlAnchor=document.createElement("a");try{urlAnchor.href=s.url,urlAnchor.href=urlAnchor.href,s.crossDomain=originAnchor.protocol+"//"+originAnchor.host!=urlAnchor.protocol+"//"+urlAnchor.host}catch(e){s.crossDomain=!0}}if(s.data&&s.processData&&"string"!=typeof s.data&&(s.data=jQuery.param(s.data,s.traditional)),inspectPrefiltersOrTransports(prefilters,s,options,jqXHR),completed)return jqXHR;for(i in(fireGlobals=jQuery.event&&s.global)&&0==jQuery.active++&&jQuery.event.trigger("ajaxStart"),s.type=s.type.toUpperCase(),s.hasContent=!rnoContent.test(s.type),cacheURL=s.url.replace(rhash,""),s.hasContent?s.data&&s.processData&&0===(s.contentType||"").indexOf("application/x-www-form-urlencoded")&&(s.data=s.data.replace(r20,"+")):(uncached=s.url.slice(cacheURL.length),s.data&&(s.processData||"string"==typeof s.data)&&(cacheURL+=(rquery.test(cacheURL)?"&":"?")+s.data,delete s.data),!1===s.cache&&(cacheURL=cacheURL.replace(rantiCache,"$1"),uncached=(rquery.test(cacheURL)?"&":"?")+"_="+nonce+++uncached),s.url=cacheURL+uncached),s.ifModified&&(jQuery.lastModified[cacheURL]&&jqXHR.setRequestHeader("If-Modified-Since",jQuery.lastModified[cacheURL]),jQuery.etag[cacheURL]&&jqXHR.setRequestHeader("If-None-Match",jQuery.etag[cacheURL])),(s.data&&s.hasContent&&!1!==s.contentType||options.contentType)&&jqXHR.setRequestHeader("Content-Type",s.contentType),jqXHR.setRequestHeader("Accept",s.dataTypes[0]&&s.accepts[s.dataTypes[0]]?s.accepts[s.dataTypes[0]]+("*"!==s.dataTypes[0]?", "+allTypes+"; q=0.01":""):s.accepts["*"]),s.headers)jqXHR.setRequestHeader(i,s.headers[i]);if(s.beforeSend&&(!1===s.beforeSend.call(callbackContext,jqXHR,s)||completed))return jqXHR.abort();if(strAbort="abort",completeDeferred.add(s.complete),jqXHR.done(s.success),jqXHR.fail(s.error),transport=inspectPrefiltersOrTransports(transports,s,options,jqXHR)){if(jqXHR.readyState=1,fireGlobals&&globalEventContext.trigger("ajaxSend",[jqXHR,s]),completed)return jqXHR;s.async&&0<s.timeout&&(timeoutTimer=window.setTimeout(function(){jqXHR.abort("timeout")},s.timeout));try{completed=!1,transport.send(requestHeaders,done)}catch(e){if(completed)throw e;done(-1,e)}}else done(-1,"No Transport");function done(status,nativeStatusText,responses,headers){var isSuccess,success,error,response,modified,statusText=nativeStatusText;completed||(completed=!0,timeoutTimer&&window.clearTimeout(timeoutTimer),transport=void 0,responseHeadersString=headers||"",jqXHR.readyState=0<status?4:0,isSuccess=200<=status&&status<300||304===status,responses&&(response=function(s,jqXHR,responses){for(var ct,type,finalDataType,firstDataType,contents=s.contents,dataTypes=s.dataTypes;"*"===dataTypes[0];)dataTypes.shift(),void 0===ct&&(ct=s.mimeType||jqXHR.getResponseHeader("Content-Type"));if(ct)for(type in contents)if(contents[type]&&contents[type].test(ct)){dataTypes.unshift(type);break}if(dataTypes[0]in responses)finalDataType=dataTypes[0];else{for(type in responses){if(!dataTypes[0]||s.converters[type+" "+dataTypes[0]]){finalDataType=type;break}firstDataType||(firstDataType=type)}finalDataType=finalDataType||firstDataType}if(finalDataType)return finalDataType!==dataTypes[0]&&dataTypes.unshift(finalDataType),responses[finalDataType]}(s,jqXHR,responses)),response=function(s,response,jqXHR,isSuccess){var conv2,current,conv,tmp,prev,converters={},dataTypes=s.dataTypes.slice();if(dataTypes[1])for(conv in s.converters)converters[conv.toLowerCase()]=s.converters[conv];for(current=dataTypes.shift();current;)if(s.responseFields[current]&&(jqXHR[s.responseFields[current]]=response),!prev&&isSuccess&&s.dataFilter&&(response=s.dataFilter(response,s.dataType)),prev=current,current=dataTypes.shift())if("*"===current)current=prev;else if("*"!==prev&&prev!==current){if(!(conv=converters[prev+" "+current]||converters["* "+current]))for(conv2 in converters)if((tmp=conv2.split(" "))[1]===current&&(conv=converters[prev+" "+tmp[0]]||converters["* "+tmp[0]])){!0===conv?conv=converters[conv2]:!0!==converters[conv2]&&(current=tmp[0],dataTypes.unshift(tmp[1]));break}if(!0!==conv)if(conv&&s.throws)response=conv(response);else try{response=conv(response)}catch(e){return{state:"parsererror",error:conv?e:"No conversion from "+prev+" to "+current}}}return{state:"success",data:response}}(s,response,jqXHR,isSuccess),isSuccess?(s.ifModified&&((modified=jqXHR.getResponseHeader("Last-Modified"))&&(jQuery.lastModified[cacheURL]=modified),(modified=jqXHR.getResponseHeader("etag"))&&(jQuery.etag[cacheURL]=modified)),204===status||"HEAD"===s.type?statusText="nocontent":304===status?statusText="notmodified":(statusText=response.state,success=response.data,isSuccess=!(error=response.error))):(error=statusText,!status&&statusText||(statusText="error",status<0&&(status=0))),jqXHR.status=status,jqXHR.statusText=(nativeStatusText||statusText)+"",isSuccess?deferred.resolveWith(callbackContext,[success,statusText,jqXHR]):deferred.rejectWith(callbackContext,[jqXHR,statusText,error]),jqXHR.statusCode(statusCode),statusCode=void 0,fireGlobals&&globalEventContext.trigger(isSuccess?"ajaxSuccess":"ajaxError",[jqXHR,s,isSuccess?success:error]),completeDeferred.fireWith(callbackContext,[jqXHR,statusText]),fireGlobals&&(globalEventContext.trigger("ajaxComplete",[jqXHR,s]),--jQuery.active||jQuery.event.trigger("ajaxStop")))}return jqXHR},getJSON:function(url,data,callback){return jQuery.get(url,data,callback,"json")},getScript:function(url,callback){return jQuery.get(url,void 0,callback,"script")}}),jQuery.each(["get","post"],function(i,method){jQuery[method]=function(url,data,callback,type){return isFunction(data)&&(type=type||callback,callback=data,data=void 0),jQuery.ajax(jQuery.extend({url:url,type:method,dataType:type,data:data,success:callback},jQuery.isPlainObject(url)&&url))}}),jQuery._evalUrl=function(url){return jQuery.ajax({url:url,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},jQuery.fn.extend({wrapAll:function(html){var wrap;return this[0]&&(isFunction(html)&&(html=html.call(this[0])),wrap=jQuery(html,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&wrap.insertBefore(this[0]),wrap.map(function(){for(var elem=this;elem.firstElementChild;)elem=elem.firstElementChild;return elem}).append(this)),this},wrapInner:function(html){return isFunction(html)?this.each(function(i){jQuery(this).wrapInner(html.call(this,i))}):this.each(function(){var self=jQuery(this),contents=self.contents();contents.length?contents.wrapAll(html):self.append(html)})},wrap:function(html){var htmlIsFunction=isFunction(html);return this.each(function(i){jQuery(this).wrapAll(htmlIsFunction?html.call(this,i):html)})},unwrap:function(selector){return this.parent(selector).not("body").each(function(){jQuery(this).replaceWith(this.childNodes)}),this}}),jQuery.expr.pseudos.hidden=function(elem){return!jQuery.expr.pseudos.visible(elem)},jQuery.expr.pseudos.visible=function(elem){return!!(elem.offsetWidth||elem.offsetHeight||elem.getClientRects().length)},jQuery.ajaxSettings.xhr=function(){try{return new window.XMLHttpRequest}catch(e){}};var xhrSuccessStatus={0:200,1223:204},xhrSupported=jQuery.ajaxSettings.xhr();support.cors=!!xhrSupported&&"withCredentials"in xhrSupported,support.ajax=xhrSupported=!!xhrSupported,jQuery.ajaxTransport(function(options){var callback,errorCallback;if(support.cors||xhrSupported&&!options.crossDomain)return{send:function(headers,complete){var i,xhr=options.xhr();if(xhr.open(options.type,options.url,options.async,options.username,options.password),options.xhrFields)for(i in options.xhrFields)xhr[i]=options.xhrFields[i];for(i in options.mimeType&&xhr.overrideMimeType&&xhr.overrideMimeType(options.mimeType),options.crossDomain||headers["X-Requested-With"]||(headers["X-Requested-With"]="XMLHttpRequest"),headers)xhr.setRequestHeader(i,headers[i]);callback=function(type){return function(){callback&&(callback=errorCallback=xhr.onload=xhr.onerror=xhr.onabort=xhr.ontimeout=xhr.onreadystatechange=null,"abort"===type?xhr.abort():"error"===type?"number"!=typeof xhr.status?complete(0,"error"):complete(xhr.status,xhr.statusText):complete(xhrSuccessStatus[xhr.status]||xhr.status,xhr.statusText,"text"!==(xhr.responseType||"text")||"string"!=typeof xhr.responseText?{binary:xhr.response}:{text:xhr.responseText},xhr.getAllResponseHeaders()))}},xhr.onload=callback(),errorCallback=xhr.onerror=xhr.ontimeout=callback("error"),void 0!==xhr.onabort?xhr.onabort=errorCallback:xhr.onreadystatechange=function(){4===xhr.readyState&&window.setTimeout(function(){callback&&errorCallback()})},callback=callback("abort");try{xhr.send(options.hasContent&&options.data||null)}catch(e){if(callback)throw e}},abort:function(){callback&&callback()}}}),jQuery.ajaxPrefilter(function(s){s.crossDomain&&(s.contents.script=!1)}),jQuery.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(text){return jQuery.globalEval(text),text}}}),jQuery.ajaxPrefilter("script",function(s){void 0===s.cache&&(s.cache=!1),s.crossDomain&&(s.type="GET")}),jQuery.ajaxTransport("script",function(s){var script,callback;if(s.crossDomain)return{send:function(_,complete){script=jQuery("<script>").prop({charset:s.scriptCharset,src:s.url}).on("load error",callback=function(evt){script.remove(),callback=null,evt&&complete("error"===evt.type?404:200,evt.type)}),document.head.appendChild(script[0])},abort:function(){callback&&callback()}}});var body,oldCallbacks=[],rjsonp=/(=)\?(?=&|$)|\?\?/;jQuery.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var callback=oldCallbacks.pop()||jQuery.expando+"_"+nonce++;return this[callback]=!0,callback}}),jQuery.ajaxPrefilter("json jsonp",function(s,originalSettings,jqXHR){var callbackName,overwritten,responseContainer,jsonProp=!1!==s.jsonp&&(rjsonp.test(s.url)?"url":"string"==typeof s.data&&0===(s.contentType||"").indexOf("application/x-www-form-urlencoded")&&rjsonp.test(s.data)&&"data");if(jsonProp||"jsonp"===s.dataTypes[0])return callbackName=s.jsonpCallback=isFunction(s.jsonpCallback)?s.jsonpCallback():s.jsonpCallback,jsonProp?s[jsonProp]=s[jsonProp].replace(rjsonp,"$1"+callbackName):!1!==s.jsonp&&(s.url+=(rquery.test(s.url)?"&":"?")+s.jsonp+"="+callbackName),s.converters["script json"]=function(){return responseContainer||jQuery.error(callbackName+" was not called"),responseContainer[0]},s.dataTypes[0]="json",overwritten=window[callbackName],window[callbackName]=function(){responseContainer=arguments},jqXHR.always(function(){void 0===overwritten?jQuery(window).removeProp(callbackName):window[callbackName]=overwritten,s[callbackName]&&(s.jsonpCallback=originalSettings.jsonpCallback,oldCallbacks.push(callbackName)),responseContainer&&isFunction(overwritten)&&overwritten(responseContainer[0]),responseContainer=overwritten=void 0}),"script"}),support.createHTMLDocument=((body=document.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===body.childNodes.length),jQuery.parseHTML=function(data,context,keepScripts){return"string"!=typeof data?[]:("boolean"==typeof context&&(keepScripts=context,context=!1),context||(support.createHTMLDocument?((base=(context=document.implementation.createHTMLDocument("")).createElement("base")).href=document.location.href,context.head.appendChild(base)):context=document),scripts=!keepScripts&&[],(parsed=rsingleTag.exec(data))?[context.createElement(parsed[1])]:(parsed=buildFragment([data],context,scripts),scripts&&scripts.length&&jQuery(scripts).remove(),jQuery.merge([],parsed.childNodes)));var base,parsed,scripts},jQuery.fn.load=function(url,params,callback){var selector,type,response,self=this,off=url.indexOf(" ");return-1<off&&(selector=stripAndCollapse(url.slice(off)),url=url.slice(0,off)),isFunction(params)?(callback=params,params=void 0):params&&"object"==typeof params&&(type="POST"),0<self.length&&jQuery.ajax({url:url,type:type||"GET",dataType:"html",data:params}).done(function(responseText){response=arguments,self.html(selector?jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector):responseText)}).always(callback&&function(jqXHR,status){self.each(function(){callback.apply(this,response||[jqXHR.responseText,status,jqXHR])})}),this},jQuery.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(i,type){jQuery.fn[type]=function(fn){return this.on(type,fn)}}),jQuery.expr.pseudos.animated=function(elem){return jQuery.grep(jQuery.timers,function(fn){return elem===fn.elem}).length},jQuery.offset={setOffset:function(elem,options,i){var curPosition,curLeft,curCSSTop,curTop,curOffset,curCSSLeft,position=jQuery.css(elem,"position"),curElem=jQuery(elem),props={};"static"===position&&(elem.style.position="relative"),curOffset=curElem.offset(),curCSSTop=jQuery.css(elem,"top"),curCSSLeft=jQuery.css(elem,"left"),curLeft=("absolute"===position||"fixed"===position)&&-1<(curCSSTop+curCSSLeft).indexOf("auto")?(curTop=(curPosition=curElem.position()).top,curPosition.left):(curTop=parseFloat(curCSSTop)||0,parseFloat(curCSSLeft)||0),isFunction(options)&&(options=options.call(elem,i,jQuery.extend({},curOffset))),null!=options.top&&(props.top=options.top-curOffset.top+curTop),null!=options.left&&(props.left=options.left-curOffset.left+curLeft),"using"in options?options.using.call(elem,props):curElem.css(props)}},jQuery.fn.extend({offset:function(options){if(arguments.length)return void 0===options?this:this.each(function(i){jQuery.offset.setOffset(this,options,i)});var rect,win,elem=this[0];return elem?elem.getClientRects().length?(rect=elem.getBoundingClientRect(),win=elem.ownerDocument.defaultView,{top:rect.top+win.pageYOffset,left:rect.left+win.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var offsetParent,offset,doc,elem=this[0],parentOffset={top:0,left:0};if("fixed"===jQuery.css(elem,"position"))offset=elem.getBoundingClientRect();else{for(offset=this.offset(),doc=elem.ownerDocument,offsetParent=elem.offsetParent||doc.documentElement;offsetParent&&(offsetParent===doc.body||offsetParent===doc.documentElement)&&"static"===jQuery.css(offsetParent,"position");)offsetParent=offsetParent.parentNode;offsetParent&&offsetParent!==elem&&1===offsetParent.nodeType&&((parentOffset=jQuery(offsetParent).offset()).top+=jQuery.css(offsetParent,"borderTopWidth",!0),parentOffset.left+=jQuery.css(offsetParent,"borderLeftWidth",!0))}return{top:offset.top-parentOffset.top-jQuery.css(elem,"marginTop",!0),left:offset.left-parentOffset.left-jQuery.css(elem,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var offsetParent=this.offsetParent;offsetParent&&"static"===jQuery.css(offsetParent,"position");)offsetParent=offsetParent.offsetParent;return offsetParent||documentElement})}}),jQuery.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(method,prop){var top="pageYOffset"===prop;jQuery.fn[method]=function(val){return access(this,function(elem,method,val){var win;if(isWindow(elem)?win=elem:9===elem.nodeType&&(win=elem.defaultView),void 0===val)return win?win[prop]:elem[method];win?win.scrollTo(top?win.pageXOffset:val,top?val:win.pageYOffset):elem[method]=val},method,val,arguments.length)}}),jQuery.each(["top","left"],function(i,prop){jQuery.cssHooks[prop]=addGetHookIf(support.pixelPosition,function(elem,computed){if(computed)return computed=curCSS(elem,prop),rnumnonpx.test(computed)?jQuery(elem).position()[prop]+"px":computed})}),jQuery.each({Height:"height",Width:"width"},function(name,type){jQuery.each({padding:"inner"+name,content:type,"":"outer"+name},function(defaultExtra,funcName){jQuery.fn[funcName]=function(margin,value){var chainable=arguments.length&&(defaultExtra||"boolean"!=typeof margin),extra=defaultExtra||(!0===margin||!0===value?"margin":"border");return access(this,function(elem,type,value){var doc;return isWindow(elem)?0===funcName.indexOf("outer")?elem["inner"+name]:elem.document.documentElement["client"+name]:9===elem.nodeType?(doc=elem.documentElement,Math.max(elem.body["scroll"+name],doc["scroll"+name],elem.body["offset"+name],doc["offset"+name],doc["client"+name])):void 0===value?jQuery.css(elem,type,extra):jQuery.style(elem,type,value,extra)},type,chainable?margin:void 0,chainable)}})}),jQuery.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(i,name){jQuery.fn[name]=function(data,fn){return 0<arguments.length?this.on(name,null,data,fn):this.trigger(name)}}),jQuery.fn.extend({hover:function(fnOver,fnOut){return this.mouseenter(fnOver).mouseleave(fnOut||fnOver)}}),jQuery.fn.extend({bind:function(types,data,fn){return this.on(types,null,data,fn)},unbind:function(types,fn){return this.off(types,null,fn)},delegate:function(selector,types,data,fn){return this.on(types,selector,data,fn)},undelegate:function(selector,types,fn){return 1===arguments.length?this.off(selector,"**"):this.off(types,selector||"**",fn)}}),jQuery.proxy=function(fn,context){var tmp,args,proxy;if("string"==typeof context&&(tmp=fn[context],context=fn,fn=tmp),isFunction(fn))return args=slice.call(arguments,2),(proxy=function(){return fn.apply(context||this,args.concat(slice.call(arguments)))}).guid=fn.guid=fn.guid||jQuery.guid++,proxy},jQuery.holdReady=function(hold){hold?jQuery.readyWait++:jQuery.ready(!0)},jQuery.isArray=Array.isArray,jQuery.parseJSON=JSON.parse,jQuery.nodeName=nodeName,jQuery.isFunction=isFunction,jQuery.isWindow=isWindow,jQuery.camelCase=camelCase,jQuery.type=toType,jQuery.now=Date.now,jQuery.isNumeric=function(obj){var type=jQuery.type(obj);return("number"===type||"string"===type)&&!isNaN(obj-parseFloat(obj))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return jQuery});var _jQuery=window.jQuery,_$=window.$;return jQuery.noConflict=function(deep){return window.$===jQuery&&(window.$=_$),deep&&window.jQuery===jQuery&&(window.jQuery=_jQuery),jQuery},noGlobal||(window.jQuery=window.$=jQuery),jQuery})},{}],44:[function(require,module,exports){module.exports=[{head:"Pain & profit",imagename:"painprofit",blurb:"Design and front-end development for multi-part investigation into the failings of Texas to protect vulnerable citizens from managed care companies.",url:"https://interactives.dallasnews.com/2018/pain-and-profit",tags:["html","css","javascript"]},{head:"Standoff",imagename:"standoff",blurb:"Design direction and project management for an in-depth look into the confrontation between Dallas SWAT officers and the Dallas Police Shooting gunman within the halls of El Centro College.",url:"https://interactives.dallasnews.com/2017/dallas-police-ambush-anniversary-photos/",tags:[]},{head:"It’s history now",imagename:"historynow",blurb:"Art direction, design and development for a series of short videos and stories on those affected by the Dallas Police Shooting, one year later.",url:"https://interactives.dallasnews.com/2017/dallas-police-ambush-anniversary-photos/",tags:["html","css","javascript"]},{head:"Overlooked",imagename:"overlooked",blurb:"Presentation design and front-end development, including creation of a custom photo gallery, for investigative story on what happens to the children of women who go to jail.",url:"https://interactives.dallasnews.com/2017/overlooked/",tags:["html","css","javascript"]},{head:"The weight of a wall",imagename:"wall",blurb:"Custom presentation and front-end development of geographically-based storytelling centered on what a border wall would mean for the citizens and law enforcement officers that live and work along the border.",url:"https://interactives.dallasnews.com/2017/borderland-project/",tags:["html","css","javascript","mapbox"]},{head:"Rolling up on Dixon Circle",imagename:"dixon",blurb:"Custom presentation design and front-end development of an alternative storyform for a series of vignettes on what life is like for the residents of a South Dallas neighborhood that was nearly ripped apart following a police shooting in 2012.",url:"http://interactives.dallasnews.com/2016/dixon-circle/",tags:["html","css","javascript","mapbox"]}]},{}],45:[function(require,module,exports){"use strict";var _jquery2=_interopRequireDefault(require("jquery")),_handlebars2=_interopRequireDefault(require("handlebars")),_design2=_interopRequireDefault(require("./modules/design.json"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}document.addEventListener("DOMContentLoaded",function(e){var source=document.getElementById("work-template").innerHTML,workTemplate=_handlebars2.default.compile(source);document.getElementById("work__grid");_design2.default.forEach(function(project){var projectBlock=workTemplate(project);(0,_jquery2.default)("#work__grid").append(projectBlock)})})},{"./modules/design.json":44,handlebars:31,jquery:43}]},{},[45]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzLnJ1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9iYXNlLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvYXN0LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvYmFzZS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2NvZGUtZ2VuLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvY29tcGlsZXIuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9oZWxwZXJzLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvamF2YXNjcmlwdC1jb21waWxlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL3BhcnNlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL3ByaW50ZXIuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci92aXNpdG9yLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvd2hpdGVzcGFjZS1jb250cm9sLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMvaW5saW5lLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvZXhjZXB0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2VhY2guanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2hlbHBlci1taXNzaW5nLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy9pZi5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9nLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy9sb29rdXAuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL3dpdGguanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9sb2dnZXIuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvcnVudGltZS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYXJyYXktc2V0LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL2Jhc2U2NC12bHEuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmFzZTY0LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL2JpbmFyeS1zZWFyY2guanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvbWFwcGluZy1saXN0LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3F1aWNrLXNvcnQuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1jb25zdW1lci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwLWdlbmVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2Utbm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi91dGlsLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvc291cmNlLW1hcC5qcyIsIm5vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJzcmMvanMvbW9kdWxlcy9kZXNpZ24uanNvbiIsInNyYy9qcy9zY3JpcHRzLmpzIl0sIm5hbWVzIjpbInIiLCJlIiwibiIsInQiLCJvIiwiaSIsImYiLCJjIiwicmVxdWlyZSIsInUiLCJhIiwiRXJyb3IiLCJjb2RlIiwicCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsIl9jcmVhdGUiLCJfaGFuZGxlYmFyc1J1bnRpbWUyIiwiY3JlYXRlIiwiaGIiLCJjb21waWxlIiwiaW5wdXQiLCJvcHRpb25zIiwiX2hhbmRsZWJhcnNDb21waWxlckNvbXBpbGVyIiwicHJlY29tcGlsZSIsIkFTVCIsIl9oYW5kbGViYXJzQ29tcGlsZXJBc3QyIiwiQ29tcGlsZXIiLCJKYXZhU2NyaXB0Q29tcGlsZXIiLCJfaGFuZGxlYmFyc0NvbXBpbGVySmF2YXNjcmlwdENvbXBpbGVyMiIsIlBhcnNlciIsIl9oYW5kbGViYXJzQ29tcGlsZXJCYXNlIiwicGFyc2VyIiwicGFyc2UiLCJpbnN0IiwiX2hhbmRsZWJhcnNOb0NvbmZsaWN0MiIsIlZpc2l0b3IiLCJfaGFuZGxlYmFyc0NvbXBpbGVyVmlzaXRvcjIiLCJiYXNlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJVdGlscyIsInJ1bnRpbWUiLCJIYW5kbGViYXJzRW52aXJvbm1lbnQiLCJleHRlbmQiLCJTYWZlU3RyaW5nIiwiX2hhbmRsZWJhcnNTYWZlU3RyaW5nMiIsIkV4Y2VwdGlvbiIsIl9oYW5kbGViYXJzRXhjZXB0aW9uMiIsImVzY2FwZUV4cHJlc3Npb24iLCJWTSIsInRlbXBsYXRlIiwic3BlYyIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsImhlbHBlcnMiLCJwYXJ0aWFscyIsImRlY29yYXRvcnMiLCJ0aGlzIiwiX2hlbHBlcnMiLCJyZWdpc3RlckRlZmF1bHRIZWxwZXJzIiwiX2RlY29yYXRvcnMiLCJyZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJsb2dnZXIiLCJfbG9nZ2VyMiIsImxvZyIsInJlZ2lzdGVySGVscGVyIiwibmFtZSIsImZuIiwiX3V0aWxzIiwidG9TdHJpbmciLCJfZXhjZXB0aW9uMiIsInVucmVnaXN0ZXJIZWxwZXIiLCJyZWdpc3RlclBhcnRpYWwiLCJwYXJ0aWFsIiwidW5yZWdpc3RlclBhcnRpYWwiLCJyZWdpc3RlckRlY29yYXRvciIsInVucmVnaXN0ZXJEZWNvcmF0b3IiLCJjcmVhdGVGcmFtZSIsImhlbHBlckV4cHJlc3Npb24iLCJub2RlIiwidHlwZSIsInBhcmFtcyIsImhhc2giLCJzY29wZWRJZCIsInBhdGgiLCJ0ZXN0Iiwib3JpZ2luYWwiLCJzaW1wbGVJZCIsInBhcnRzIiwiZGVwdGgiLCJfcGFyc2VyMiIsInl5IiwibG9jSW5mbyIsIlNvdXJjZUxvY2F0aW9uIiwic3JjTmFtZSIsIl93aGl0ZXNwYWNlQ29udHJvbDIiLCJhY2NlcHQiLCJIZWxwZXJzIiwiU291cmNlTm9kZSIsInVuZGVmaW5lZCIsImRlZmluZSIsImFtZCIsIlNvdXJjZU1hcCIsImVyciIsImNhc3RDaHVuayIsImNodW5rIiwiY29kZUdlbiIsImxvYyIsImlzQXJyYXkiLCJyZXQiLCJsZW4iLCJwdXNoIiwid3JhcCIsIkNvZGVHZW4iLCJzcmNGaWxlIiwic291cmNlIiwibGluZSIsImNvbHVtbiIsImNodW5rcyIsInNyYyIsImFkZCIsImpvaW4iLCJwcmVwZW5kIiwidG9TdHJpbmdXaXRoU291cmNlTWFwIiwiaXNFbXB0eSIsInVuc2hpZnQiLCJtZXJnZSIsImVtcHR5IiwiZWFjaCIsIml0ZXIiLCJjdXJyZW50TG9jYXRpb24iLCJzdGFydCIsImFyZ3VtZW50cyIsImZ1bmN0aW9uQ2FsbCIsImdlbmVyYXRlTGlzdCIsInF1b3RlZFN0cmluZyIsInN0ciIsInJlcGxhY2UiLCJvYmplY3RMaXRlcmFsIiwib2JqIiwicGFpcnMiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsInZhbHVlIiwiZW50cmllcyIsImdlbmVyYXRlQXJyYXkiLCJlbnYiLCJkYXRhIiwiY29tcGF0IiwidXNlRGVwdGhzIiwiYXN0IiwiZW52aXJvbm1lbnQiLCJjb21waWxlZCIsImNvbXBpbGVJbnB1dCIsInRlbXBsYXRlU3BlYyIsImNvbnRleHQiLCJleGVjT3B0aW9ucyIsIl9zZXR1cCIsInNldHVwT3B0aW9ucyIsIl9jaGlsZCIsImJsb2NrUGFyYW1zIiwiZGVwdGhzIiwic2xpY2UiLCJhcmdFcXVhbHMiLCJiIiwidHJhbnNmb3JtTGl0ZXJhbFRvUGF0aCIsInNleHByIiwibGl0ZXJhbCIsImNvbXBpbGVyIiwiZXF1YWxzIiwib3RoZXIiLCJvcGNvZGVzIiwib3Bjb2RlIiwib3RoZXJPcGNvZGUiLCJhcmdzIiwiY2hpbGRyZW4iLCJndWlkIiwicHJvZ3JhbSIsInNvdXJjZU5vZGUiLCJzdHJpbmdQYXJhbXMiLCJ0cmFja0lkcyIsImtub3duSGVscGVycyIsImhlbHBlck1pc3NpbmciLCJibG9ja0hlbHBlck1pc3NpbmciLCJpZiIsInVubGVzcyIsIndpdGgiLCJsb29rdXAiLCJfbmFtZSIsImNvbXBpbGVQcm9ncmFtIiwicmVzdWx0IiwidXNlUGFydGlhbCIsInNoaWZ0IiwiUHJvZ3JhbSIsImJvZHkiLCJib2R5TGVuZ3RoIiwiaXNTaW1wbGUiLCJCbG9ja1N0YXRlbWVudCIsImJsb2NrIiwiaW52ZXJzZSIsImNsYXNzaWZ5U2V4cHIiLCJoZWxwZXJTZXhwciIsInNpbXBsZVNleHByIiwiYW1iaWd1b3VzU2V4cHIiLCJEZWNvcmF0b3JCbG9jayIsImRlY29yYXRvciIsInNldHVwRnVsbE11c3RhY2hlUGFyYW1zIiwidXNlRGVjb3JhdG9ycyIsIlBhcnRpYWxTdGF0ZW1lbnQiLCJleHBsaWNpdFBhcnRpYWxDb250ZXh0IiwicGFydGlhbE5hbWUiLCJpc0R5bmFtaWMiLCJpbmRlbnQiLCJwcmV2ZW50SW5kZW50IiwiUGFydGlhbEJsb2NrU3RhdGVtZW50IiwicGFydGlhbEJsb2NrIiwiTXVzdGFjaGVTdGF0ZW1lbnQiLCJtdXN0YWNoZSIsIlN1YkV4cHJlc3Npb24iLCJlc2NhcGVkIiwibm9Fc2NhcGUiLCJEZWNvcmF0b3IiLCJDb250ZW50U3RhdGVtZW50IiwiY29udGVudCIsIkNvbW1lbnRTdGF0ZW1lbnQiLCJpc0Jsb2NrIiwic3RyaWN0Iiwia25vd25IZWxwZXJzT25seSIsImZhbHN5IiwiX2FzdDIiLCJQYXRoRXhwcmVzc2lvbiIsImFkZERlcHRoIiwic2NvcGVkIiwiYmxvY2tQYXJhbUlkIiwiYmxvY2tQYXJhbUluZGV4IiwiU3RyaW5nTGl0ZXJhbCIsInN0cmluZyIsIk51bWJlckxpdGVyYWwiLCJudW1iZXIiLCJCb29sZWFuTGl0ZXJhbCIsImJvb2wiLCJVbmRlZmluZWRMaXRlcmFsIiwiTnVsbExpdGVyYWwiLCJIYXNoIiwibCIsInB1c2hQYXJhbSIsImlzQmxvY2tQYXJhbSIsImlzSGVscGVyIiwiaXNFbGlnaWJsZSIsIl9uYW1lMiIsInB1c2hQYXJhbXMiLCJ2YWwiLCJibG9ja1BhcmFtQ2hpbGQiLCJvbWl0RW1wdHkiLCJwYXJhbSIsImluZGV4T2YiLCJmaXJzdF9saW5lIiwiZmlyc3RfY29sdW1uIiwiZW5kIiwibGFzdF9saW5lIiwibGFzdF9jb2x1bW4iLCJ0b2tlbiIsInN1YnN0ciIsIm9wZW4iLCJjbG9zZSIsImNoYXJBdCIsImNvbW1lbnQiLCJkaWciLCJwYXJ0IiwiaXNMaXRlcmFsIiwic2VwYXJhdG9yIiwic3RyaXAiLCJlc2NhcGVGbGFnIiwib3BlblJhd0Jsb2NrIiwiY29udGVudHMiLCJ2YWxpZGF0ZUNsb3NlIiwib3BlblN0cmlwIiwiaW52ZXJzZVN0cmlwIiwiY2xvc2VTdHJpcCIsIm9wZW5CbG9jayIsImludmVyc2VBbmRQcm9ncmFtIiwiaW52ZXJ0ZWQiLCJjaGFpbiIsInN0YXRlbWVudHMiLCJmaXJzdExvYyIsImxhc3RMb2MiLCJlcnJvck5vZGUiLCJMaXRlcmFsIiwibmFtZUxvb2t1cCIsInBhcmVudCIsImlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlcHRoZWRMb29rdXAiLCJhbGlhc2FibGUiLCJjb21waWxlckluZm8iLCJyZXZpc2lvbiIsIl9iYXNlIiwiQ09NUElMRVJfUkVWSVNJT04iLCJSRVZJU0lPTl9DSEFOR0VTIiwiYXBwZW5kVG9CdWZmZXIiLCJsb2NhdGlvbiIsImV4cGxpY2l0IiwiaW5pdGlhbGl6ZUJ1ZmZlciIsImFzT2JqZWN0IiwiaXNDaGlsZCIsInByb2dyYW1zIiwiZW52aXJvbm1lbnRzIiwicHJlYW1ibGUiLCJzdGFja1Nsb3QiLCJzdGFja1ZhcnMiLCJhbGlhc2VzIiwicmVnaXN0ZXJzIiwibGlzdCIsImhhc2hlcyIsImNvbXBpbGVTdGFjayIsImlubGluZVN0YWNrIiwiY29tcGlsZUNoaWxkcmVuIiwidXNlQmxvY2tQYXJhbXMiLCJhcHBseSIsInB1c2hTb3VyY2UiLCJGdW5jdGlvbiIsImNyZWF0ZUZ1bmN0aW9uQ29udGV4dCIsIm1haW4iLCJtYWluX2QiLCJfY29udGV4dCIsInVzZURhdGEiLCJjb21waWxlck9wdGlvbnMiLCJmaWxlIiwiZGVzdE5hbWUiLCJtYXAiLCJsYXN0Q29udGV4dCIsIl9jb2RlR2VuMiIsInZhckRlY2xhcmF0aW9ucyIsImxvY2FscyIsImNvbmNhdCIsImFsaWFzQ291bnQiLCJhbGlhcyIsInJlZmVyZW5jZUNvdW50IiwibWVyZ2VTb3VyY2UiLCJhcHBlbmRPbmx5IiwiZm9yY2VCdWZmZXIiLCJhcHBlbmRGaXJzdCIsInNvdXJjZVNlZW4iLCJidWZmZXJTdGFydCIsImJ1ZmZlckVuZCIsInN1YnN0cmluZyIsImJsb2NrVmFsdWUiLCJjb250ZXh0TmFtZSIsInNldHVwSGVscGVyQXJncyIsImJsb2NrTmFtZSIsInBvcFN0YWNrIiwic3BsaWNlIiwiYW1iaWd1b3VzQmxvY2tWYWx1ZSIsImZsdXNoSW5saW5lIiwiY3VycmVudCIsInRvcFN0YWNrIiwibGFzdEhlbHBlciIsImFwcGVuZENvbnRlbnQiLCJwZW5kaW5nQ29udGVudCIsInBlbmRpbmdMb2NhdGlvbiIsImFwcGVuZCIsImlzSW5saW5lIiwicmVwbGFjZVN0YWNrIiwibG9jYWwiLCJhcHBlbmRFc2NhcGVkIiwiZ2V0Q29udGV4dCIsInB1c2hDb250ZXh0IiwicHVzaFN0YWNrTGl0ZXJhbCIsImxvb2t1cE9uQ29udGV4dCIsInJlc29sdmVQYXRoIiwibG9va3VwQmxvY2tQYXJhbSIsImxvb2t1cERhdGEiLCJhc3N1bWVPYmplY3RzIiwicmVxdWlyZVRlcm1pbmFsIiwic3RhY2siLCJzdHJpY3RMb29rdXAiLCJfdGhpcyIsInJlc29sdmVQb3NzaWJsZUxhbWJkYSIsInB1c2hTdHJpbmdQYXJhbSIsInB1c2hTdHJpbmciLCJlbXB0eUhhc2giLCJwdXNoSGFzaCIsInZhbHVlcyIsInR5cGVzIiwiY29udGV4dHMiLCJpZHMiLCJwb3BIYXNoIiwicG9wIiwicHVzaExpdGVyYWwiLCJwdXNoUHJvZ3JhbSIsInByb2dyYW1FeHByZXNzaW9uIiwicGFyYW1TaXplIiwiZm91bmREZWNvcmF0b3IiLCJpbnZva2VIZWxwZXIiLCJub25IZWxwZXIiLCJoZWxwZXIiLCJzZXR1cEhlbHBlciIsInNpbXBsZSIsImNhbGxQYXJhbXMiLCJpbnZva2VLbm93bkhlbHBlciIsImludm9rZUFtYmlndW91cyIsImhlbHBlckNhbGwiLCJ1c2VSZWdpc3RlciIsInBhcmFtc0luaXQiLCJpbnZva2VQYXJ0aWFsIiwic2V0dXBQYXJhbXMiLCJhc3NpZ25Ub0hhc2giLCJpZCIsInB1c2hJZCIsImNoaWxkIiwiZXhpc3RpbmciLCJtYXRjaEV4aXN0aW5nUHJvZ3JhbSIsImluZGV4IiwicHJvZ3JhbVBhcmFtcyIsImV4cHIiLCJpdGVtIiwiY2FsbGJhY2siLCJwcmVmaXgiLCJjcmVhdGVkU3RhY2siLCJ1c2VkTGl0ZXJhbCIsInRvcCIsImluY3JTdGFjayIsInRvcFN0YWNrTmFtZSIsImVudHJ5Iiwid3JhcHBlZCIsImlubGluZSIsImJsb2NrSGVscGVyIiwib2JqZWN0QXJncyIsImhhc2hJZHMiLCJoYXNoVHlwZXMiLCJoYXNoQ29udGV4dHMiLCJyZXNlcnZlZFdvcmRzIiwic3BsaXQiLCJjb21waWxlcldvcmRzIiwiUkVTRVJWRURfV09SRFMiLCJoYW5kbGViYXJzIiwidHJhY2UiLCJzeW1ib2xzXyIsImVycm9yIiwicm9vdCIsIkVPRiIsInByb2dyYW1fcmVwZXRpdGlvbjAiLCJzdGF0ZW1lbnQiLCJyYXdCbG9jayIsIkNPTU1FTlQiLCJDT05URU5UIiwicmF3QmxvY2tfcmVwZXRpdGlvbl9wbHVzMCIsIkVORF9SQVdfQkxPQ0siLCJPUEVOX1JBV19CTE9DSyIsImhlbHBlck5hbWUiLCJvcGVuUmF3QmxvY2tfcmVwZXRpdGlvbjAiLCJvcGVuUmF3QmxvY2tfb3B0aW9uMCIsIkNMT1NFX1JBV19CTE9DSyIsImJsb2NrX29wdGlvbjAiLCJjbG9zZUJsb2NrIiwib3BlbkludmVyc2UiLCJibG9ja19vcHRpb24xIiwiT1BFTl9CTE9DSyIsIm9wZW5CbG9ja19yZXBldGl0aW9uMCIsIm9wZW5CbG9ja19vcHRpb24wIiwib3BlbkJsb2NrX29wdGlvbjEiLCJDTE9TRSIsIk9QRU5fSU5WRVJTRSIsIm9wZW5JbnZlcnNlX3JlcGV0aXRpb24wIiwib3BlbkludmVyc2Vfb3B0aW9uMCIsIm9wZW5JbnZlcnNlX29wdGlvbjEiLCJvcGVuSW52ZXJzZUNoYWluIiwiT1BFTl9JTlZFUlNFX0NIQUlOIiwib3BlbkludmVyc2VDaGFpbl9yZXBldGl0aW9uMCIsIm9wZW5JbnZlcnNlQ2hhaW5fb3B0aW9uMCIsIm9wZW5JbnZlcnNlQ2hhaW5fb3B0aW9uMSIsIklOVkVSU0UiLCJpbnZlcnNlQ2hhaW4iLCJpbnZlcnNlQ2hhaW5fb3B0aW9uMCIsIk9QRU5fRU5EQkxPQ0siLCJPUEVOIiwibXVzdGFjaGVfcmVwZXRpdGlvbjAiLCJtdXN0YWNoZV9vcHRpb24wIiwiT1BFTl9VTkVTQ0FQRUQiLCJtdXN0YWNoZV9yZXBldGl0aW9uMSIsIm11c3RhY2hlX29wdGlvbjEiLCJDTE9TRV9VTkVTQ0FQRUQiLCJPUEVOX1BBUlRJQUwiLCJwYXJ0aWFsX3JlcGV0aXRpb24wIiwicGFydGlhbF9vcHRpb24wIiwib3BlblBhcnRpYWxCbG9jayIsIk9QRU5fUEFSVElBTF9CTE9DSyIsIm9wZW5QYXJ0aWFsQmxvY2tfcmVwZXRpdGlvbjAiLCJvcGVuUGFydGlhbEJsb2NrX29wdGlvbjAiLCJPUEVOX1NFWFBSIiwic2V4cHJfcmVwZXRpdGlvbjAiLCJzZXhwcl9vcHRpb24wIiwiQ0xPU0VfU0VYUFIiLCJoYXNoX3JlcGV0aXRpb25fcGx1czAiLCJoYXNoU2VnbWVudCIsIklEIiwiRVFVQUxTIiwiT1BFTl9CTE9DS19QQVJBTVMiLCJibG9ja1BhcmFtc19yZXBldGl0aW9uX3BsdXMwIiwiQ0xPU0VfQkxPQ0tfUEFSQU1TIiwiZGF0YU5hbWUiLCJTVFJJTkciLCJOVU1CRVIiLCJCT09MRUFOIiwiVU5ERUZJTkVEIiwiTlVMTCIsIkRBVEEiLCJwYXRoU2VnbWVudHMiLCJTRVAiLCIkYWNjZXB0IiwiJGVuZCIsInRlcm1pbmFsc18iLCIxNCIsIjE1IiwiMTgiLCIxOSIsIjIzIiwiMjkiLCIzMyIsIjM0IiwiMzkiLCI0NCIsIjQ3IiwiNDgiLCI1MSIsIjU0IiwiNTUiLCI2MCIsIjY1IiwiNjgiLCI3MiIsIjczIiwiNzUiLCI3NyIsIjgwIiwiODEiLCI4MiIsIjgzIiwiODQiLCI4NSIsIjg3IiwicHJvZHVjdGlvbnNfIiwicGVyZm9ybUFjdGlvbiIsInl5dGV4dCIsInl5bGVuZyIsInl5bGluZW5vIiwieXlzdGF0ZSIsIiQkIiwiXyQiLCIkMCIsIiQiLCJwcmVwYXJlUHJvZ3JhbSIsInN0cmlwQ29tbWVudCIsInN0cmlwRmxhZ3MiLCJwcmVwYXJlUmF3QmxvY2siLCJwcmVwYXJlQmxvY2siLCJjaGFpbmVkIiwicHJlcGFyZU11c3RhY2hlIiwicHJlcGFyZVBhcnRpYWxCbG9jayIsIk51bWJlciIsInByZXBhcmVQYXRoIiwidGFibGUiLCI4IiwiOSIsIjEwIiwiMTEiLCIxMiIsIjEzIiwiMTYiLCIyNCIsIjI3IiwiNTkiLCIyMCIsIjc4IiwiNzkiLCI4NiIsIjE3IiwiNTYiLCI2NCIsIjQ5IiwiNTIiLCIyNSIsIjM4IiwiNDMiLCI0NSIsIjI4IiwiNTciLCIyNiIsIjMwIiwiMzUiLCIyMSIsIjYxIiwiNTAiLCI2MyIsIjY5IiwiNzAiLCI3MSIsIjUzIiwiNTgiLCI2NiIsIjMxIiwiMzYiLCIyMiIsIjYyIiwiNDYiLCI0MCIsIjY3IiwiMzIiLCI3NCIsIjM3IiwiNDEiLCI3NiIsIjQyIiwiZGVmYXVsdEFjdGlvbnMiLCI5MSIsIjEwMiIsIjEwNSIsIjExMSIsIjExMiIsIjExNyIsIjEyMCIsIjEyMyIsIjEyNCIsIjEzNiIsIjEzNyIsInBhcnNlRXJyb3IiLCJzZWxmIiwidnN0YWNrIiwibHN0YWNrIiwicmVjb3ZlcmluZyIsImxleGVyIiwic2V0SW5wdXQiLCJ5eWxsb2MiLCJ5eWxvYyIsInJhbmdlcyIsInN5bWJvbCIsInByZUVycm9yU3ltYm9sIiwic3RhdGUiLCJhY3Rpb24iLCJuZXdTdGF0ZSIsImV4cGVjdGVkIiwieXl2YWwiLCJsZXgiLCJlcnJTdHIiLCJzaG93UG9zaXRpb24iLCJ0ZXh0IiwibWF0Y2giLCJBcnJheSIsInJhbmdlIiwiX2lucHV0IiwiX21vcmUiLCJfbGVzcyIsImRvbmUiLCJtYXRjaGVkIiwiY29uZGl0aW9uU3RhY2siLCJvZmZzZXQiLCJjaCIsInVucHV0IiwibGluZXMiLCJvbGRMaW5lcyIsIm1vcmUiLCJsZXNzIiwicGFzdElucHV0IiwicGFzdCIsInVwY29taW5nSW5wdXQiLCJuZXh0IiwicHJlIiwidGVtcE1hdGNoIiwicnVsZXMiLCJfY3VycmVudFJ1bGVzIiwiZmxleCIsIm1hdGNoZXMiLCJiZWdpbiIsImNvbmRpdGlvbiIsInBvcFN0YXRlIiwiY29uZGl0aW9ucyIsInRvcFN0YXRlIiwicHVzaFN0YXRlIiwieXlfIiwiJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucyIsIllZX1NUQVJUIiwibXUiLCJpbmNsdXNpdmUiLCJlbXUiLCJjb20iLCJyYXciLCJJTklUSUFMIiwiUHJpbnRWaXNpdG9yIiwicGFkZGluZyIsIl92aXNpdG9yMiIsInBhZCIsIm91dCIsInBhcmFtU3RyaW5ncyIsImpvaW5lZFBhaXJzIiwiSGFzaFBhaXIiLCJwYWlyIiwicGFyZW50cyIsInZpc2l0U3ViRXhwcmVzc2lvbiIsImFjY2VwdFJlcXVpcmVkIiwiYWNjZXB0QXJyYXkiLCJhY2NlcHRLZXkiLCJ2aXNpdEJsb2NrIiwidmlzaXRQYXJ0aWFsIiwibXV0YXRpbmciLCJhcnJheSIsIm9iamVjdCIsIldoaXRlc3BhY2VDb250cm9sIiwiaXNQcmV2V2hpdGVzcGFjZSIsImlzUm9vdCIsInByZXYiLCJzaWJsaW5nIiwiaXNOZXh0V2hpdGVzcGFjZSIsIm9taXRSaWdodCIsIm11bHRpcGxlIiwicmlnaHRTdHJpcHBlZCIsIm9taXRMZWZ0IiwibGVmdFN0cmlwcGVkIiwiZG9TdGFuZGFsb25lIiwiaWdub3JlU3RhbmRhbG9uZSIsImlzUm9vdFNlZW4iLCJfaXNQcmV2V2hpdGVzcGFjZSIsIl9pc05leHRXaGl0ZXNwYWNlIiwib3BlblN0YW5kYWxvbmUiLCJjbG9zZVN0YW5kYWxvbmUiLCJpbmxpbmVTdGFuZGFsb25lIiwiZXhlYyIsImZpcnN0SW52ZXJzZSIsImxhc3RJbnZlcnNlIiwiaW5zdGFuY2UiLCJfZGVjb3JhdG9yc0lubGluZTIiLCJwcm9wcyIsImNvbnRhaW5lciIsImVycm9yUHJvcHMiLCJtZXNzYWdlIiwidG1wIiwiaWR4IiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJsaW5lTnVtYmVyIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwibm9wIiwiX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcyIiwiX2hlbHBlcnNFYWNoMiIsIl9oZWxwZXJzSGVscGVyTWlzc2luZzIiLCJfaGVscGVyc0lmMiIsIl9oZWxwZXJzTG9nMiIsIl9oZWxwZXJzTG9va3VwMiIsIl9oZWxwZXJzV2l0aDIiLCJjb250ZXh0UGF0aCIsImFwcGVuZENvbnRleHRQYXRoIiwiZXhlY0l0ZXJhdGlvbiIsImZpZWxkIiwibGFzdCIsImZpcnN0IiwiaXNGdW5jdGlvbiIsImoiLCJwcmlvcktleSIsImNvbmRpdGlvbmFsIiwiaW5jbHVkZVplcm8iLCJsZXZlbCIsIm1ldGhvZE1hcCIsImxvb2t1cExldmVsIiwibGV2ZWxNYXAiLCJ0b0xvd2VyQ2FzZSIsInBhcnNlSW50IiwiY29uc29sZSIsIm1ldGhvZCIsIl9sZW4iLCJfa2V5IiwiSGFuZGxlYmFycyIsImdsb2JhbCIsIndpbmRvdyIsIiRIYW5kbGViYXJzIiwibm9Db25mbGljdCIsImNvbXBpbGVyUmV2aXNpb24iLCJjdXJyZW50UmV2aXNpb24iLCJydW50aW1lVmVyc2lvbnMiLCJjb21waWxlclZlcnNpb25zIiwiY2hlY2tSZXZpc2lvbiIsImxhbWJkYSIsInJlc29sdmVQYXJ0aWFsIiwiZGVjbGFyZWRCbG9ja1BhcmFtcyIsInByb2dyYW1XcmFwcGVyIiwid3JhcFByb2dyYW0iLCJfcGFyZW50IiwiY29tbW9uIiwibnVsbENvbnRleHQiLCJzZWFsIiwibm9vcCIsImluaXREYXRhIiwiZXhlY3V0ZURlY29yYXRvcnMiLCJpc1RvcCIsImN1cnJlbnRQYXJ0aWFsQmxvY2siLCJwcm9nIiwiY3VycmVudERlcHRocyIsInRvSFRNTCIsInBvc3NpYmxlIiwiYmFkQ2hhcnMiLCJlc2NhcGVDaGFyIiwiZnJhbWUiLCJlc2NhcGUiLCImIiwiPCIsIj4iLCJcIiIsIiciLCJgIiwiPSIsImNociIsInByaW50ZXIiLCJleHRlbnNpb24iLCJmaWxlbmFtZSIsInRlbXBsYXRlU3RyaW5nIiwicmVhZEZpbGVTeW5jIiwicHJpbnQiLCJleHRlbnNpb25zIiwidXRpbCIsImhhcyIsImhhc05hdGl2ZU1hcCIsIk1hcCIsIkFycmF5U2V0IiwiX2FycmF5IiwiX3NldCIsImZyb21BcnJheSIsImFBcnJheSIsImFBbGxvd0R1cGxpY2F0ZXMiLCJzZXQiLCJzaXplIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImFTdHIiLCJzU3RyIiwidG9TZXRTdHJpbmciLCJpc0R1cGxpY2F0ZSIsImdldCIsImF0IiwiYUlkeCIsInRvQXJyYXkiLCJiYXNlNjQiLCJlbmNvZGUiLCJhVmFsdWUiLCJkaWdpdCIsImVuY29kZWQiLCJ2bHEiLCJ0b1ZMUVNpZ25lZCIsIlZMUV9CQVNFIiwiZGVjb2RlIiwiYUluZGV4IiwiYU91dFBhcmFtIiwiY29udGludWF0aW9uIiwic2hpZnRlZCIsInN0ckxlbiIsImNoYXJDb2RlQXQiLCJyZXN0IiwiaW50VG9DaGFyTWFwIiwiVHlwZUVycm9yIiwiY2hhckNvZGUiLCJHUkVBVEVTVF9MT1dFUl9CT1VORCIsIkxFQVNUX1VQUEVSX0JPVU5EIiwic2VhcmNoIiwiYU5lZWRsZSIsImFIYXlzdGFjayIsImFDb21wYXJlIiwiYUJpYXMiLCJyZWN1cnNpdmVTZWFyY2giLCJhTG93IiwiYUhpZ2giLCJtaWQiLCJNYXRoIiwiZmxvb3IiLCJjbXAiLCJNYXBwaW5nTGlzdCIsIl9zb3J0ZWQiLCJfbGFzdCIsImdlbmVyYXRlZExpbmUiLCJnZW5lcmF0ZWRDb2x1bW4iLCJ1bnNvcnRlZEZvckVhY2giLCJhQ2FsbGJhY2siLCJhVGhpc0FyZyIsImZvckVhY2giLCJhTWFwcGluZyIsIm1hcHBpbmdBIiwibWFwcGluZ0IiLCJsaW5lQSIsImxpbmVCIiwiY29sdW1uQSIsImNvbHVtbkIiLCJjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCIsInNvcnQiLCJzd2FwIiwiYXJ5IiwieCIsInkiLCJ0ZW1wIiwiZG9RdWlja1NvcnQiLCJjb21wYXJhdG9yIiwibG93IiwiaGlnaCIsInJvdW5kIiwicmFuZG9tIiwicGl2b3QiLCJxIiwicXVpY2tTb3J0IiwiYmluYXJ5U2VhcmNoIiwiYmFzZTY0VkxRIiwiU291cmNlTWFwQ29uc3VtZXIiLCJhU291cmNlTWFwIiwiYVNvdXJjZU1hcFVSTCIsInNvdXJjZU1hcCIsInBhcnNlU291cmNlTWFwSW5wdXQiLCJzZWN0aW9ucyIsIkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciIsIkJhc2ljU291cmNlTWFwQ29uc3VtZXIiLCJ2ZXJzaW9uIiwiZ2V0QXJnIiwic291cmNlcyIsIm5hbWVzIiwic291cmNlUm9vdCIsInNvdXJjZXNDb250ZW50IiwibWFwcGluZ3MiLCJfdmVyc2lvbiIsIm5vcm1hbGl6ZSIsIlN0cmluZyIsImlzQWJzb2x1dGUiLCJyZWxhdGl2ZSIsIl9uYW1lcyIsIl9zb3VyY2VzIiwiX2Fic29sdXRlU291cmNlcyIsInMiLCJjb21wdXRlU291cmNlVVJMIiwiX21hcHBpbmdzIiwiX3NvdXJjZU1hcFVSTCIsIk1hcHBpbmciLCJvcmlnaW5hbExpbmUiLCJvcmlnaW5hbENvbHVtbiIsImxhc3RPZmZzZXQiLCJfc2VjdGlvbnMiLCJ1cmwiLCJvZmZzZXRMaW5lIiwib2Zmc2V0Q29sdW1uIiwiZ2VuZXJhdGVkT2Zmc2V0IiwiY29uc3VtZXIiLCJmcm9tU291cmNlTWFwIiwiX19nZW5lcmF0ZWRNYXBwaW5ncyIsImNvbmZpZ3VyYWJsZSIsIl9wYXJzZU1hcHBpbmdzIiwiX19vcmlnaW5hbE1hcHBpbmdzIiwiX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IiLCJhU291cmNlUm9vdCIsIkdFTkVSQVRFRF9PUkRFUiIsIk9SSUdJTkFMX09SREVSIiwiZWFjaE1hcHBpbmciLCJhQ29udGV4dCIsImFPcmRlciIsIl9nZW5lcmF0ZWRNYXBwaW5ncyIsIl9vcmlnaW5hbE1hcHBpbmdzIiwibWFwcGluZyIsImFsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvciIsImFBcmdzIiwibmVlZGxlIiwiX2ZpbmRTb3VyY2VJbmRleCIsIl9maW5kTWFwcGluZyIsImNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zIiwibGFzdENvbHVtbiIsImFTb3VyY2UiLCJyZWxhdGl2ZVNvdXJjZSIsInNtYyIsIl9zb3VyY2VSb290IiwiX2dlbmVyYXRlU291cmNlc0NvbnRlbnQiLCJfZmlsZSIsImdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdEdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdE9yaWdpbmFsTWFwcGluZ3MiLCJzcmNNYXBwaW5nIiwiZGVzdE1hcHBpbmciLCJzZWdtZW50IiwicHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4iLCJwcmV2aW91c09yaWdpbmFsTGluZSIsInByZXZpb3VzT3JpZ2luYWxDb2x1bW4iLCJwcmV2aW91c1NvdXJjZSIsInByZXZpb3VzTmFtZSIsImNhY2hlZFNlZ21lbnRzIiwib3JpZ2luYWxNYXBwaW5ncyIsImNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkIiwiYU1hcHBpbmdzIiwiYUxpbmVOYW1lIiwiYUNvbHVtbk5hbWUiLCJhQ29tcGFyYXRvciIsImNvbXB1dGVDb2x1bW5TcGFucyIsIm5leHRNYXBwaW5nIiwibGFzdEdlbmVyYXRlZENvbHVtbiIsIkluZmluaXR5Iiwib3JpZ2luYWxQb3NpdGlvbkZvciIsImhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzIiwic29tZSIsInNjIiwic291cmNlQ29udGVudEZvciIsIm51bGxPbk1pc3NpbmciLCJ1cmxQYXJzZSIsImZpbGVVcmlBYnNQYXRoIiwic2NoZW1lIiwiZ2VuZXJhdGVkUG9zaXRpb25Gb3IiLCJzZWN0aW9uSW5kZXgiLCJzZWN0aW9uIiwiYmlhcyIsImV2ZXJ5IiwiZ2VuZXJhdGVkUG9zaXRpb24iLCJzZWN0aW9uTWFwcGluZ3MiLCJhZGp1c3RlZE1hcHBpbmciLCJTb3VyY2VNYXBHZW5lcmF0b3IiLCJfc2tpcFZhbGlkYXRpb24iLCJfc291cmNlc0NvbnRlbnRzIiwiYVNvdXJjZU1hcENvbnN1bWVyIiwiZ2VuZXJhdG9yIiwibmV3TWFwcGluZyIsImdlbmVyYXRlZCIsImFkZE1hcHBpbmciLCJzb3VyY2VGaWxlIiwic291cmNlUmVsYXRpdmUiLCJzZXRTb3VyY2VDb250ZW50IiwiX3ZhbGlkYXRlTWFwcGluZyIsImFTb3VyY2VGaWxlIiwiYVNvdXJjZUNvbnRlbnQiLCJrZXlzIiwiYXBwbHlTb3VyY2VNYXAiLCJhU291cmNlTWFwUGF0aCIsIm5ld1NvdXJjZXMiLCJuZXdOYW1lcyIsImFHZW5lcmF0ZWQiLCJhT3JpZ2luYWwiLCJhTmFtZSIsIl9zZXJpYWxpemVNYXBwaW5ncyIsIm5hbWVJZHgiLCJzb3VyY2VJZHgiLCJwcmV2aW91c0dlbmVyYXRlZExpbmUiLCJhU291cmNlcyIsInRvSlNPTiIsIlJFR0VYX05FV0xJTkUiLCJpc1NvdXJjZU5vZGUiLCJhTGluZSIsImFDb2x1bW4iLCJhQ2h1bmtzIiwic291cmNlQ29udGVudHMiLCJmcm9tU3RyaW5nV2l0aFNvdXJjZU1hcCIsImFHZW5lcmF0ZWRDb2RlIiwiYVJlbGF0aXZlUGF0aCIsInJlbWFpbmluZ0xpbmVzIiwicmVtYWluaW5nTGluZXNJbmRleCIsInNoaWZ0TmV4dExpbmUiLCJnZXROZXh0TGluZSIsImxhc3RHZW5lcmF0ZWRMaW5lIiwibGFzdE1hcHBpbmciLCJuZXh0TGluZSIsImFkZE1hcHBpbmdXaXRoQ29kZSIsImFDaHVuayIsIndhbGsiLCJhRm4iLCJhU2VwIiwibmV3Q2hpbGRyZW4iLCJyZXBsYWNlUmlnaHQiLCJhUGF0dGVybiIsImFSZXBsYWNlbWVudCIsImxhc3RDaGlsZCIsIndhbGtTb3VyY2VDb250ZW50cyIsImZyb21TZXRTdHJpbmciLCJzb3VyY2VNYXBwaW5nQWN0aXZlIiwibGFzdE9yaWdpbmFsU291cmNlIiwibGFzdE9yaWdpbmFsTGluZSIsImxhc3RPcmlnaW5hbENvbHVtbiIsImxhc3RPcmlnaW5hbE5hbWUiLCJzb3VyY2VDb250ZW50IiwiYURlZmF1bHRWYWx1ZSIsInVybFJlZ2V4cCIsImRhdGFVcmxSZWdleHAiLCJhVXJsIiwiYXV0aCIsImhvc3QiLCJwb3J0IiwidXJsR2VuZXJhdGUiLCJhUGFyc2VkVXJsIiwiYVBhdGgiLCJ1cCIsImFSb290IiwiYVBhdGhVcmwiLCJhUm9vdFVybCIsImpvaW5lZCIsImxhc3RJbmRleE9mIiwic3VwcG9ydHNOdWxsUHJvdG8iLCJpZGVudGl0eSIsImlzUHJvdG9TdHJpbmciLCJzdHJjbXAiLCJhU3RyMSIsImFTdHIyIiwib25seUNvbXBhcmVPcmlnaW5hbCIsIm9ubHlDb21wYXJlR2VuZXJhdGVkIiwic291cmNlVVJMIiwic291cmNlTWFwVVJMIiwicGFyc2VkIiwiZmFjdG9yeSIsImRvY3VtZW50IiwidyIsIm5vR2xvYmFsIiwiYXJyIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNsYXNzMnR5cGUiLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0Iiwibm9kZVR5cGUiLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJkb2MiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9UeXBlIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJpbml0IiwicnRyaW0iLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicHJldk9iamVjdCIsImVsZW0iLCJlcSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwiaXNSZWFkeSIsIm1zZyIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwidHJpbSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5Iiwic2Vjb25kIiwiZ3JlcCIsImludmVydCIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsIl8iLCJlc2NhcGVkV2hpdGVzcGFjZSIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiYXNDb2RlUG9pbnQiLCJ1bmxvYWRIYW5kbGVyIiwiZGlzYWJsZWRBbmNlc3RvciIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsImNoaWxkTm9kZXMiLCJlbHMiLCJzZWVkIiwibSIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsIm5vZGVOYW1lIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsInRlc3RDb250ZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwiY2FjaGUiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJpbm5lckhUTUwiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsImVsZW1lbnRzIiwiYXR0ciIsInNwZWNpZmllZCIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsIndoYXQiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4IiwidXNlQ2FjaGUiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiZm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsInJvb3RqUXVlcnkiLCJyZWFkeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwiZmxhZyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsImFsd2F5cyIsImRlZmVycmVkIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsIndhcm4iLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJidWxrIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJzaG93SGlkZSIsInNob3ciLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImFkZFByb3AiLCJob29rIiwiRXZlbnQiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInBhcnNlRmxvYXQiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwiYm9yZGVyIiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImJpbmQiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImZvciIsImNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsImlzVHJpZ2dlciIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJhbmltYXRlZCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJpc05hTiIsIl9qUXVlcnkiLCJpbWFnZW5hbWUiLCJibHVyYiIsInRhZ3MiLCJ3b3JrVGVtcGxhdGUiLCJfaGFuZGxlYmFyczIiLCJkZWZhdWx0IiwiX2Rlc2lnbjIiLCJwcm9qZWN0IiwicHJvamVjdEJsb2NrIiwiX2pxdWVyeTIiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxJQUFBSixFQUFBRyxHQUFBLENBQUEsSUFBQUosRUFBQUksR0FBQSxDQUFBLElBQUFFLEVBQUEsbUJBQUFDLFNBQUFBLFFBQUEsSUFBQUYsR0FBQUMsRUFBQSxPQUFBQSxFQUFBRixHQUFBLEdBQUEsR0FBQUksRUFBQSxPQUFBQSxFQUFBSixHQUFBLEdBQUEsSUFBQUssRUFBQSxJQUFBQyxNQUFBLHVCQUFBTixFQUFBLEtBQUEsTUFBQUssRUFBQUUsS0FBQSxtQkFBQUYsRUFBQSxJ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QUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdB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QUcsR0FBR3JELEdBQUcsQ0FBQyxFQUFFLElBQUlzRCxHQUFHLEdBQUdDLEdBQUcsR0FBR3JELEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUk2QyxHQUFHLEdBQUc1QyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUN4Z0IsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDeUMsRUFBRSxDQUFDLEVBQUUsSUFBSWdkLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQy9kLEVBQUUsQ0FBQyxFQUFFLEdBQUdnZCxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMvZCxFQUFFLENBQUMsRUFBRSxHQUFHZ2QsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0UsR0FBRyxDQUFDLEVBQUUsR0FBR0UsR0FBRyxDQUFDLEVBQUUsR0FBR0UsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0UsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDL2QsRUFBRSxDQUFDLEVBQUUsR0FBR2dkLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdFLEdBQUcsQ0FBQyxFQUFFLEdBQUdFLEdBQUcsQ0FBQyxFQUFFLEdBQUdFLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdFLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQy9kLEVBQUUsQ0FBQyxFQUFFLEdBQUdnZCxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMvZCxFQUFFLENBQUMsRUFBRSxHQUFHZ2QsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0UsR0FBRyxDQUFDLEVBQUUsR0FBR0UsR0FBRyxDQUFDLEVBQUUsR0FBR0UsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsR0FBR0UsR0FBRyxDQUFDLEVBQUUsR0FBR0MsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDL2QsRUFBRSxDQUFDLEVBQUUsR0FBR2dkLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdFLEdBQUcsQ0FBQyxFQUFFLEdBQUdFLEdBQUcsQ0FBQyxFQUFFLEdBQUdFLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLEdBQUdFLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQy9kLEVBQUUsQ0FBQyxFQUFFLEdBQUdnZCxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxHQUFHRSxHQUFHLENBQUMsRUFBRSxHQUFHQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUM2QyxHQUFHLEdBQUcxQyxHQUFHLENBQUMsRUFBRSxJQUFJMkMsR0FBRyxHQUFHQyxHQUFHLEdBQUd4QyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJb0MsR0FBRyxJQUFJLENBQUNILEdBQUcsR0FBRzFDLEdBQUcsQ0FBQyxFQUFFLElBQUkyQyxHQUFHLEdBQUdDLEdBQUcsR0FBR3hDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlvQyxHQUFHLElBQUksQ0FBQ2hoQixFQUFFLEdBQUdFLEVBQUUsRUFBRStjLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ2hlLEVBQUUsR0FBR0UsRUFBRSxFQUFFK2MsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDd0MsR0FBRyxHQUFHdEQsR0FBRyxDQUFDLEVBQUUsSUFBSStELEdBQUcsSUFBSSxDQUFDSixHQUFHLEdBQUdLLEdBQUcsR0FBR0MsR0FBRyxHQUFHbEQsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSTJDLEdBQUcsR0FBR0MsR0FBRyxHQUFHeEMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSW9DLEdBQUcsSUFBSSxDQUFDaGhCLEVBQUUsR0FBR0UsRUFBRSxFQUFFK2MsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDL2QsRUFBRSxDQUFDLEVBQUUsSUFBSWdkLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQzZDLEdBQUcsR0FBRzFDLEdBQUcsQ0FBQyxFQUFFLElBQUkyQyxHQUFHLEdBQUdDLEdBQUcsR0FBR3hDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlvQyxHQUFHLElBQUksQ0FBQ0gsR0FBRyxHQUFHMUMsR0FBRyxDQUFDLEVBQUUsSUFBSTJDLEdBQUcsR0FBR0MsR0FBRyxHQUFHeEMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSW9DLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEdBQUcxQyxHQUFHLENBQUMsRUFBRSxJQUFJMkMsR0FBRyxHQUFHQyxHQUFHLEdBQUd4QyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJb0MsR0FBRyxJQUFJLENBQUNILEdBQUcsR0FBR0ssR0FBRyxHQUFHQyxHQUFHLEdBQUdsRCxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJMkMsR0FBRyxHQUFHQyxHQUFHLEdBQUd4QyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJb0MsR0FBRyxJQUFJLENBQUN6RCxHQUFHLENBQUMsRUFBRSxJQUFJNkQsR0FBRyxHQUFHbkQsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUksR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDdkIsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSU8sR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDdkIsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSU8sR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDdkIsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSU8sR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDdkIsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSU8sR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDdkIsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSU8sR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDdkIsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSU8sR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDdkIsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSU8sR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDdkIsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSU8sR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDVixHQUFHLENBQUMsRUFBRSxJQUFJNkMsR0FBRyxJQUFJLENBQUMzRCxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJTyxHQUFHLENBQUMsRUFBRSxJQUFJRyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUN3QyxHQUFHLEdBQUd2RCxHQUFHLENBQUMsRUFBRSxJQUFJRyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJSSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMwQyxHQUFHLEdBQUdDLEdBQUcsR0FBRzlELEdBQUcsQ0FBQyxFQUFFLElBQUkrRCxHQUFHLEdBQUc5RCxHQUFHLENBQUMsRUFBRSxJQUFJK0QsR0FBRyxHQUFHOUQsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDK0QsR0FBRyxHQUFHRixHQUFHLEdBQUc5RCxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUM2QyxHQUFHLEdBQUd0RCxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNELEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ0ksR0FBRyxDQUFDLEVBQUUsSUFBSW9FLEdBQUcsR0FBRzFELEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlJLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ3JCLEdBQUcsQ0FBQyxFQUFFLElBQUlVLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlJLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ3JCLEdBQUcsQ0FBQyxFQUFFLElBQUlVLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlJLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ2lDLEdBQUcsR0FBRzFDLEdBQUcsQ0FBQyxFQUFFLElBQUkyQyxHQUFHLEdBQUdDLEdBQUcsR0FBR3hDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlvQyxHQUFHLElBQUksQ0FBQ1ksR0FBRyxHQUFHakUsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDa0UsR0FBRyxHQUFHdEUsR0FBRyxDQUFDLEVBQUUsSUFBSVUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDckIsR0FBRyxDQUFDLEVBQUUsSUFBSXVFLEdBQUcsR0FBRzdELEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ21ELEdBQUcsR0FBRzFFLEdBQUcsQ0FBQyxFQUFFLElBQUlZLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlJLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ3JCLEdBQUcsQ0FBQyxFQUFFLElBQUl5RSxHQUFHLEdBQUcvRCxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJSSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNpQyxHQUFHLEdBQUd0RCxHQUFHLENBQUMsRUFBRSxJQUFJMEUsR0FBRyxHQUFHQyxHQUFHLEdBQUdmLEdBQUcsR0FBR2xELEdBQUcsQ0FBQyxFQUFFLElBQUlrRSxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxHQUFHbEUsR0FBRyxDQUFDLEVBQUUsSUFBSTJDLEdBQUcsR0FBR0MsR0FBRyxHQUFHeEMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSW9DLEdBQUcsSUFBSSxDQUFDN0MsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDZCxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJTyxHQUFHLENBQUMsRUFBRSxJQUFJRyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNnQyxHQUFHLEdBQUd5QixHQUFHLEdBQUd4RSxHQUFHLENBQUMsRUFBRSxJQUFJb0UsR0FBRyxHQUFHZixHQUFHLEdBQUdsRCxHQUFHLENBQUMsRUFBRSxJQUFJa0UsR0FBRyxHQUFHQyxHQUFHLEdBQUdDLEdBQUcsR0FBR2xFLEdBQUcsQ0FBQyxFQUFFLElBQUkyQyxHQUFHLEdBQUdDLEdBQUcsR0FBR3hDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlvQyxHQUFHLElBQUksQ0FBQ1ksR0FBRyxHQUFHakUsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDQSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMzZCxFQUFFLEdBQUdFLEVBQUUsRUFBRStjLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ0wsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDa0QsR0FBRyxHQUFHMUMsR0FBRyxDQUFDLEVBQUUsSUFBSTJDLEdBQUcsR0FBR0MsR0FBRyxHQUFHeEMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSW9DLEdBQUcsSUFBSSxDQUFDaGhCLEVBQUUsR0FBR0UsRUFBRSxFQUFFK2MsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDNEQsR0FBRyxHQUFHakUsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDQSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMxZCxFQUFFLENBQUMsRUFBRSxJQUFJZ2QsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDZCxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMwRCxHQUFHLEdBQUd0RCxHQUFHLENBQUMsRUFBRSxJQUFJZ0YsR0FBRyxHQUFHTCxHQUFHLEdBQUdmLEdBQUcsR0FBR2xELEdBQUcsQ0FBQyxFQUFFLElBQUlrRSxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxHQUFHbEUsR0FBRyxDQUFDLEVBQUUsSUFBSTJDLEdBQUcsR0FBR0MsR0FBRyxHQUFHeEMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSW9DLEdBQUcsSUFBSSxDQUFDL0MsR0FBRyxDQUFDLEVBQUUsSUFBSXVFLEdBQUcsR0FBR3RFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlJLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQzNlLEVBQUUsQ0FBQyxFQUFFLElBQUlnZCxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUM2QyxHQUFHLEdBQUcxQyxHQUFHLENBQUMsRUFBRSxJQUFJMkMsR0FBRyxHQUFHQyxHQUFHLEdBQUd4QyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJb0MsR0FBRyxJQUFJLENBQUNILEdBQUcsR0FBRzRCLEdBQUcsR0FBR2xGLEdBQUcsQ0FBQyxFQUFFLElBQUkyRSxHQUFHLEdBQUdmLEdBQUcsR0FBR2xELEdBQUcsQ0FBQyxFQUFFLElBQUlrRSxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxHQUFHbEUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSXlDLEdBQUcsR0FBR0MsR0FBRyxHQUFHeEMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSW9DLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEdBQUd0RCxHQUFHLENBQUMsRUFBRSxJQUFJbUYsR0FBRyxHQUFHUixHQUFHLEdBQUdmLEdBQUcsR0FBR2xELEdBQUcsQ0FBQyxFQUFFLElBQUlrRSxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxHQUFHbEUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSXlDLEdBQUcsR0FBR0MsR0FBRyxHQUFHeEMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSW9DLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEdBQUc4QixHQUFHLElBQUl0RixHQUFHLENBQUMsRUFBRSxJQUFJNkUsR0FBRyxJQUFJZixHQUFHLEdBQUdsRCxHQUFHLENBQUMsRUFBRSxJQUFJa0UsR0FBRyxJQUFJQyxHQUFHLEdBQUdDLEdBQUcsR0FBR2xFLEdBQUcsQ0FBQyxFQUFFLElBQUkyQyxHQUFHLEdBQUdDLEdBQUcsR0FBR3hDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlvQyxHQUFHLElBQUksQ0FBQ0gsR0FBRyxHQUFHdEQsR0FBRyxDQUFDLEVBQUUsSUFBSXFGLEdBQUcsSUFBSVYsR0FBRyxJQUFJZixHQUFHLEdBQUdsRCxHQUFHLENBQUMsRUFBRSxJQUFJa0UsR0FBRyxJQUFJQyxHQUFHLEdBQUdDLEdBQUcsR0FBR2xFLEdBQUcsQ0FBQyxFQUFFLElBQUkyQyxHQUFHLEdBQUdDLEdBQUcsR0FBR3hDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlvQyxHQUFHLElBQUksQ0FBQ3pELEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQ0EsR0FBRyxDQUFDLEVBQUUsSUFBSVUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUksR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDckIsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDRixHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJTyxHQUFHLENBQUMsRUFBRSxJQUFJRyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUN2QixHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJTyxHQUFHLENBQUMsRUFBRSxJQUFJRyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUN2QixHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJTyxHQUFHLENBQUMsRUFBRSxJQUFJSSxHQUFHLENBQUMsRUFBRSxJQUFJbUUsR0FBRyxJQUFJbEUsR0FBRyxDQUFDLEVBQUUsS0FBS0UsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDaEIsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSU8sR0FBRyxDQUFDLEVBQUUsSUFBSUksR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDaEIsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSU8sR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBS0MsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDeEIsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSU8sR0FBRyxDQUFDLEVBQUUsSUFBSUcsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDZixHQUFHLENBQUMsRUFBRSxNQUFNLENBQUNBLEdBQUcsQ0FBQyxFQUFFLElBQUlHLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlJLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ2QsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDN2QsRUFBRSxDQUFDLEVBQUUsSUFBSWdkLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ3VELEdBQUcsR0FBRzlELEdBQUcsQ0FBQyxFQUFFLElBQUkrRCxHQUFHLEdBQUc5RCxHQUFHLENBQUMsRUFBRSxJQUFJK0QsR0FBRyxJQUFJb0IsR0FBRyxJQUFJbEYsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDSixHQUFHLENBQUMsRUFBRSxJQUFJdUYsR0FBRyxJQUFJN0UsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDakIsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDMWQsRUFBRSxDQUFDLEVBQUUsSUFBSWdkLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ1QsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDQSxHQUFHLENBQUMsRUFBRSxJQUFJVSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJSSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNyQixHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNzRCxHQUFHLEdBQUdxQixHQUFHLElBQUlmLEdBQUcsR0FBR2xELEdBQUcsQ0FBQyxFQUFFLElBQUk4RSxHQUFHLElBQUk3RSxHQUFHLENBQUMsRUFBRSxJQUFJaUUsR0FBRyxJQUFJQyxHQUFHLEdBQUdDLEdBQUcsR0FBR2xFLEdBQUcsQ0FBQyxFQUFFLElBQUkyQyxHQUFHLEdBQUdDLEdBQUcsR0FBR3hDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlvQyxHQUFHLElBQUksQ0FBQ3pELEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQ3lGLEdBQUcsSUFBSXpGLEdBQUcsQ0FBQyxFQUFFLElBQUkwRixHQUFHLElBQUk1RSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUNkLEdBQUcsQ0FBQyxFQUFFLElBQUlVLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ3JCLEdBQUcsQ0FBQyxFQUFFLElBQUljLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ2QsR0FBRyxDQUFDLEVBQUUsSUFBSTJGLEdBQUcsSUFBSUQsR0FBRyxJQUFJNUUsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDZCxHQUFHLENBQUMsRUFBRSxJQUFJVSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNyQixHQUFHLENBQUMsRUFBRSxJQUFJYyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNoQixHQUFHLENBQUMsRUFBRSxNQUFNLENBQUNBLEdBQUcsQ0FBQyxFQUFFLElBQUlZLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlJLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ3ZCLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ0UsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDQSxHQUFHLENBQUMsRUFBRSxJQUFJVSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJSSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNyQixHQUFHLENBQUMsRUFBRSxLQUFLLENBQUN0ZCxFQUFFLENBQUMsRUFBRSxJQUFJZ2QsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDWCxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJTyxHQUFHLENBQUMsRUFBRSxJQUFJSSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNELEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQ3lDLEdBQUcsR0FBR3FCLEdBQUcsSUFBSWYsR0FBRyxHQUFHbEQsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSTJDLEdBQUcsR0FBR0MsR0FBRyxHQUFHeEMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSW9DLEdBQUcsSUFBSSxDQUFDL2dCLEVBQUUsQ0FBQyxFQUFFLElBQUlnZCxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNMLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ0EsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDa0QsR0FBRyxHQUFHdEQsR0FBRyxDQUFDLEVBQUUsSUFBSTRGLEdBQUcsSUFBSWpCLEdBQUcsSUFBSWYsR0FBRyxHQUFHbEQsR0FBRyxDQUFDLEVBQUUsSUFBSWtFLEdBQUcsSUFBSUMsR0FBRyxHQUFHQyxHQUFHLEdBQUdsRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJeUMsR0FBRyxHQUFHQyxHQUFHLEdBQUd4QyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJb0MsR0FBRyxJQUFJLENBQUMvZ0IsRUFBRSxDQUFDLEVBQUUsSUFBSWdkLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ0UsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDRCxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJSSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNWLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ2plLEVBQUUsQ0FBQyxFQUFFLElBQUlnZCxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNULEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQ0EsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDWSxHQUFHLENBQUMsRUFBRSxLQUFLaUYsR0FBRyxLQUFLLENBQUM3RixHQUFHLENBQUMsRUFBRSxNQUFNLENBQUNBLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ0wsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDRCxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNYLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLElBQUlPLEdBQUcsQ0FBQyxFQUFFLElBQUlJLEdBQUcsQ0FBQyxFQUFFLElBQUlDLEdBQUcsQ0FBQyxFQUFFLElBQUlFLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ2QsR0FBRyxDQUFDLEVBQUUsSUFBSThGLEdBQUcsSUFBSUosR0FBRyxJQUFJNUUsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDZCxHQUFHLENBQUMsRUFBRSxJQUFJVSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNyQixHQUFHLENBQUMsRUFBRSxJQUFJYyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNoQixHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJTyxHQUFHLENBQUMsRUFBRSxJQUFJRyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMzQixHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNHLEdBQUcsQ0FBQyxFQUFFLEtBQUtHLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQ0gsR0FBRyxDQUFDLEVBQUUsS0FBS0csR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDckIsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsSUFBSUUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDVCxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUNBLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQ0EsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDWSxHQUFHLENBQUMsRUFBRSxLQUFLRyxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUNyQixHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxJQUFJRSxHQUFHLENBQUMsRUFBRSxJQUFJQyxHQUFHLENBQUMsRUFBRSxNQUNuZ1dzRixlQUFnQixDQUFDdGpCLEVBQUUsQ0FBQyxFQUFFLEdBQUcrZCxHQUFHLENBQUMsRUFBRSxJQUFJNEQsR0FBRyxDQUFDLEVBQUUsSUFBSUssR0FBRyxDQUFDLEVBQUUsSUFBSWlCLEdBQUcsQ0FBQyxFQUFFLElBQUl2RSxHQUFHLENBQUMsRUFBRSxJQUFJRyxHQUFHLENBQUMsRUFBRSxJQUFJMEUsR0FBRyxDQUFDLEVBQUUsSUFBSUMsSUFBSSxDQUFDLEVBQUUsSUFBSUMsSUFBSSxDQUFDLEVBQUUsSUFBSUMsSUFBSSxDQUFDLEVBQUUsSUFBSUMsSUFBSSxDQUFDLEVBQUUsSUFBSUMsSUFBSSxDQUFDLEVBQUUsSUFBSUMsSUFBSSxDQUFDLEVBQUUsSUFBSUMsSUFBSSxDQUFDLEVBQUUsSUFBSUMsSUFBSSxDQUFDLEVBQUUsSUFBSUMsSUFBSSxDQUFDLEVBQUUsSUFBSUMsSUFBSSxDQUFDLEVBQUUsS0FDek1DLFdBQVksU0FBb0IxZSxJQUFLdEQsTUFDakMsTUFBTSxJQUFJaEYsTUFBTXNJLE1BRXBCN0csTUFBTyxTQUFlWixPQUNsQixJQUFJb21CLEtBQU81akIsS0FBTWdVLE1BQVEsQ0FBQyxHQUFJNlAsT0FBUyxDQUFDLE1BQU9DLE9BQVMsR0FBSW5FLE1BQVEzZixLQUFLMmYsTUFBT2xCLE9BQVMsR0FBSUUsU0FBVyxFQUFHRCxPQUFTLEVBQUdxRixXQUFhLEVBQ3BJL2pCLEtBQUtna0IsTUFBTUMsU0FBU3ptQixPQUNwQndDLEtBQUtna0IsTUFBTTVoQixHQUFLcEMsS0FBS29DLEdBQ3JCcEMsS0FBS29DLEdBQUc0aEIsTUFBUWhrQixLQUFLZ2tCLFdBRVcsS0FEaENoa0IsS0FBS29DLEdBQUdqRSxPQUFTNkIsTUFDRGdrQixNQUFNRSxTQUNsQmxrQixLQUFLZ2tCLE1BQU1FLE9BQVMsSUFDeEIsSUFBSUMsTUFBUW5rQixLQUFLZ2tCLE1BQU1FLE9BQ3ZCSixPQUFPdGdCLEtBQUsyZ0IsT0FDWixJQUFJQyxPQUFTcGtCLEtBQUtna0IsTUFBTXZtQixTQUFXdUMsS0FBS2drQixNQUFNdm1CLFFBQVEybUIsT0FDcEIsbUJBQXZCcGtCLEtBQUtvQyxHQUFHdWhCLGFBQ2YzakIsS0FBSzJqQixXQUFhM2pCLEtBQUtvQyxHQUFHdWhCLFlBZTlCLElBREEsSUFBSVUsT0FBUUMsZUFBZ0JDLE1BQU9DLE9BQVd4b0IsRUFBZWEsRUFBRzBHLElBQUtraEIsU0FBVUMsU0FQdkU1WCxNQU95QzZYLE1BQVEsS0FDNUMsQ0FVVCxHQVRBSixNQUFRdlEsTUFBTUEsTUFBTWhYLE9BQVMsUUFTUCxLQVBsQnduQixPQURBeGtCLEtBQUsraUIsZUFBZXdCLE9BQ1h2a0IsS0FBSytpQixlQUFld0IsUUFFekJGLE1BQUFBLFNBYkp2WCxXQUFBQSxFQUVpQixpQkFEckJBLE1BQVE4VyxLQUFLSSxNQUFNWSxPQUFTLEtBRXhCOVgsTUFBUThXLEtBQUs3TCxTQUFTakwsUUFBVUEsT0FXNUJ1WCxPQVREdlgsT0FXTTZTLE1BQU00RSxRQUFVNUUsTUFBTTRFLE9BQU9GLFlBRUpHLE9BQU94bkIsU0FBV3duQixPQUFPLEdBQUksQ0FDL0QsSUFBSUssT0FBUyxHQUNiLElBQUtkLFdBQVksQ0FFYixJQUFLbG5CLEtBREw2bkIsU0FBVyxHQUNEL0UsTUFBTTRFLE9BQ1J2a0IsS0FBS3ljLFdBQVc1ZixJQUFVLEVBQUpBLEdBQ3RCNm5CLFNBQVNsaEIsS0FBSyxJQUFNeEQsS0FBS3ljLFdBQVc1ZixHQUFLLEtBRzdDZ29CLE9BREE3a0IsS0FBS2drQixNQUFNYyxhQUNGLHdCQUEwQm5HLFNBQVcsR0FBSyxNQUFRM2UsS0FBS2drQixNQUFNYyxlQUFpQixlQUFpQkosU0FBU3hnQixLQUFLLE1BQVEsV0FBYWxFLEtBQUt5YyxXQUFXNEgsU0FBV0EsUUFBVSxJQUV2Syx3QkFBMEIxRixTQUFXLEdBQUssaUJBQTZCLEdBQVYwRixPQUFZLGVBQWUsS0FBT3JrQixLQUFLeWMsV0FBVzRILFNBQVdBLFFBQVUsS0FFakpya0IsS0FBSzJqQixXQUFXa0IsT0FBUSxDQUFDRSxLQUFNL2tCLEtBQUtna0IsTUFBTWdCLE1BQU9sWSxNQUFPOU0sS0FBS3ljLFdBQVc0SCxTQUFXQSxPQUFReGdCLEtBQU03RCxLQUFLZ2tCLE1BQU1yRixTQUFVdmIsSUFBSytnQixNQUFPTyxTQUFVQSxZQUdwSixHQUFJRixPQUFPLGFBQWNTLE9BQXlCLEVBQWhCVCxPQUFPeG5CLE9BQ3JDLE1BQU0sSUFBSUwsTUFBTSxvREFBc0Q0bkIsTUFBUSxZQUFjRixRQUVoRyxPQUFRRyxPQUFPLElBQ2YsS0FBSyxFQUNEeFEsTUFBTXhRLEtBQUs2Z0IsUUFDWFIsT0FBT3JnQixLQUFLeEQsS0FBS2drQixNQUFNdkYsUUFDdkJxRixPQUFPdGdCLEtBQUt4RCxLQUFLZ2tCLE1BQU1FLFFBQ3ZCbFEsTUFBTXhRLEtBQUtnaEIsT0FBTyxJQUNsQkgsT0FBUyxLQUNKQyxnQkFRREQsT0FBU0MsZUFDVEEsZUFBaUIsT0FSakI1RixPQUFTMWUsS0FBS2drQixNQUFNdEYsT0FDcEJELE9BQVN6ZSxLQUFLZ2tCLE1BQU12RixPQUNwQkUsU0FBVzNlLEtBQUtna0IsTUFBTXJGLFNBQ3RCd0YsTUFBUW5rQixLQUFLZ2tCLE1BQU1FLE9BQ0YsRUFBYkgsWUFDQUEsY0FLUixNQUFNLEtBQ0wsRUFRRCxHQVBBeGdCLElBQU12RCxLQUFLdWUsYUFBYWlHLE9BQU8sSUFBSSxHQUNuQ0csTUFBTTNGLEVBQUk2RSxPQUFPQSxPQUFPN21CLE9BQVN1RyxLQUNqQ29oQixNQUFNN0YsR0FBSyxDQUFDclMsV0FBWXFYLE9BQU9BLE9BQU85bUIsUUFBVXVHLEtBQU8sSUFBSWtKLFdBQVlHLFVBQVdrWCxPQUFPQSxPQUFPOW1CLE9BQVMsR0FBRzRQLFVBQVdGLGFBQWNvWCxPQUFPQSxPQUFPOW1CLFFBQVV1RyxLQUFPLElBQUltSixhQUFjRyxZQUFhaVgsT0FBT0EsT0FBTzltQixPQUFTLEdBQUc2UCxhQUN6TnVYLFNBQ0FPLE1BQU03RixHQUFHb0csTUFBUSxDQUFDcEIsT0FBT0EsT0FBTzltQixRQUFVdUcsS0FBTyxJQUFJMmhCLE1BQU0sR0FBSXBCLE9BQU9BLE9BQU85bUIsT0FBUyxHQUFHa29CLE1BQU0sVUFHbEYsS0FEakJscEIsRUFBSWdFLEtBQUt3ZSxjQUFjemhCLEtBQUs0bkIsTUFBT2xHLE9BQVFDLE9BQVFDLFNBQVUzZSxLQUFLb0MsR0FBSW9pQixPQUFPLEdBQUlYLE9BQVFDLFNBRXJGLE9BQU85bkIsRUFFUHVILE1BQ0F5USxNQUFRQSxNQUFNck4sTUFBTSxHQUFJLEVBQUlwRCxJQUFNLEdBQ2xDc2dCLE9BQVNBLE9BQU9sZCxNQUFNLEdBQUksRUFBSXBELEtBQzlCdWdCLE9BQVNBLE9BQU9uZCxNQUFNLEdBQUksRUFBSXBELE1BRWxDeVEsTUFBTXhRLEtBQUt4RCxLQUFLdWUsYUFBYWlHLE9BQU8sSUFBSSxJQUN4Q1gsT0FBT3JnQixLQUFLbWhCLE1BQU0zRixHQUNsQjhFLE9BQU90Z0IsS0FBS21oQixNQUFNN0YsSUFDbEIyRixTQUFXOUUsTUFBTTNMLE1BQU1BLE1BQU1oWCxPQUFTLElBQUlnWCxNQUFNQSxNQUFNaFgsT0FBUyxJQUMvRGdYLE1BQU14USxLQUFLaWhCLFVBQ1gsTUFBTSxLQUNMLEVBQ0QsT0FBTyxHQUdmLE9BQU8sSUFJUFQsTUFBUSxXQUNaLElBQUlBLE1BQVMsQ0FBQzlMLElBQUksRUFDbEJ5TCxXQUFXLFNBQW9CMWUsSUFBS3RELE1BQzVCLElBQUkzQixLQUFLb0MsR0FBR2pFLE9BR1IsTUFBTSxJQUFJeEIsTUFBTXNJLEtBRmhCakYsS0FBS29DLEdBQUdqRSxPQUFPd2xCLFdBQVcxZSxJQUFLdEQsT0FLM0NzaUIsU0FBUyxTQUFVem1CLE9BU1gsT0FSQXdDLEtBQUttbEIsT0FBUzNuQixNQUNkd0MsS0FBS29sQixNQUFRcGxCLEtBQUtxbEIsTUFBUXJsQixLQUFLc2xCLE1BQU8sRUFDdEN0bEIsS0FBSzJlLFNBQVczZSxLQUFLMGUsT0FBUyxFQUM5QjFlLEtBQUt5ZSxPQUFTemUsS0FBS3VsQixRQUFVdmxCLEtBQUtnbEIsTUFBUSxHQUMxQ2hsQixLQUFLd2xCLGVBQWlCLENBQUMsV0FDdkJ4bEIsS0FBS2trQixPQUFTLENBQUN6WCxXQUFXLEVBQUVDLGFBQWEsRUFBRUUsVUFBVSxFQUFFQyxZQUFZLEdBQy9EN00sS0FBS3ZDLFFBQVEybUIsU0FBUXBrQixLQUFLa2tCLE9BQU9nQixNQUFRLENBQUMsRUFBRSxJQUNoRGxsQixLQUFLeWxCLE9BQVMsRUFDUHpsQixNQUVmeEMsTUFBTSxXQUNFLElBQUlrb0IsR0FBSzFsQixLQUFLbWxCLE9BQU8sR0FnQnJCLE9BZkFubEIsS0FBS3llLFFBQVVpSCxHQUNmMWxCLEtBQUswZSxTQUNMMWUsS0FBS3lsQixTQUNMemxCLEtBQUtnbEIsT0FBU1UsR0FDZDFsQixLQUFLdWxCLFNBQVdHLEdBQ0pBLEdBQUdWLE1BQU0sb0JBRWpCaGxCLEtBQUsyZSxXQUNMM2UsS0FBS2trQixPQUFPdFgsYUFFWjVNLEtBQUtra0IsT0FBT3JYLGNBRVo3TSxLQUFLdkMsUUFBUTJtQixRQUFRcGtCLEtBQUtra0IsT0FBT2dCLE1BQU0sS0FFM0NsbEIsS0FBS21sQixPQUFTbmxCLEtBQUttbEIsT0FBT3hlLE1BQU0sR0FDekIrZSxJQUVmQyxNQUFNLFNBQVVELElBQ1IsSUFBSW5pQixJQUFNbWlCLEdBQUcxb0IsT0FDVDRvQixNQUFRRixHQUFHaE8sTUFBTSxpQkFFckIxWCxLQUFLbWxCLE9BQVNPLEdBQUsxbEIsS0FBS21sQixPQUN4Qm5sQixLQUFLeWUsT0FBU3plLEtBQUt5ZSxPQUFPMVIsT0FBTyxFQUFHL00sS0FBS3llLE9BQU96aEIsT0FBT3VHLElBQUksR0FFM0R2RCxLQUFLeWxCLFFBQVVsaUIsSUFDZixJQUFJc2lCLFNBQVc3bEIsS0FBS2dsQixNQUFNdE4sTUFBTSxpQkFDaEMxWCxLQUFLZ2xCLE1BQVFobEIsS0FBS2dsQixNQUFNalksT0FBTyxFQUFHL00sS0FBS2dsQixNQUFNaG9CLE9BQU8sR0FDcERnRCxLQUFLdWxCLFFBQVV2bEIsS0FBS3VsQixRQUFReFksT0FBTyxFQUFHL00sS0FBS3VsQixRQUFRdm9CLE9BQU8sR0FFdEQ0b0IsTUFBTTVvQixPQUFPLElBQUdnRCxLQUFLMmUsVUFBWWlILE1BQU01b0IsT0FBTyxHQUNsRCxJQUFJaEIsRUFBSWdFLEtBQUtra0IsT0FBT2dCLE1BYXBCLE9BWEFsbEIsS0FBS2trQixPQUFTLENBQUN6WCxXQUFZek0sS0FBS2trQixPQUFPelgsV0FDckNHLFVBQVc1TSxLQUFLMmUsU0FBUyxFQUN6QmpTLGFBQWMxTSxLQUFLa2tCLE9BQU94WCxhQUMxQkcsWUFBYStZLE9BQ1JBLE1BQU01b0IsU0FBVzZvQixTQUFTN29CLE9BQVNnRCxLQUFLa2tCLE9BQU94WCxhQUFlLEdBQUttWixTQUFTQSxTQUFTN29CLE9BQVM0b0IsTUFBTTVvQixRQUFRQSxPQUFTNG9CLE1BQU0sR0FBRzVvQixPQUMvSGdELEtBQUtra0IsT0FBT3hYLGFBQWVuSixLQUc3QnZELEtBQUt2QyxRQUFRMm1CLFNBQ2Jwa0IsS0FBS2trQixPQUFPZ0IsTUFBUSxDQUFDbHBCLEVBQUUsR0FBSUEsRUFBRSxHQUFLZ0UsS0FBSzBlLE9BQVNuYixNQUU3Q3ZELE1BRWY4bEIsS0FBSyxXQUVHLE9BREE5bEIsS0FBS29sQixPQUFRLEVBQ05wbEIsTUFFZitsQixLQUFLLFNBQVU3cEIsR0FDUDhELEtBQUsybEIsTUFBTTNsQixLQUFLZ2xCLE1BQU1yZSxNQUFNekssS0FFcEM4cEIsVUFBVSxXQUNGLElBQUlDLEtBQU9qbUIsS0FBS3VsQixRQUFReFksT0FBTyxFQUFHL00sS0FBS3VsQixRQUFRdm9CLE9BQVNnRCxLQUFLZ2xCLE1BQU1ob0IsUUFDbkUsT0FBc0IsR0FBZGlwQixLQUFLanBCLE9BQWMsTUFBTSxJQUFNaXBCLEtBQUtsWixRQUFRLElBQUk3SCxRQUFRLE1BQU8sS0FFL0VnaEIsY0FBYyxXQUNOLElBQUlDLEtBQU9ubUIsS0FBS2dsQixNQUloQixPQUhJbUIsS0FBS25wQixPQUFTLEtBQ2RtcEIsTUFBUW5tQixLQUFLbWxCLE9BQU9wWSxPQUFPLEVBQUcsR0FBR29aLEtBQUtucEIsVUFFbENtcEIsS0FBS3BaLE9BQU8sRUFBRSxLQUFtQixHQUFkb1osS0FBS25wQixPQUFjLE1BQU0sS0FBS2tJLFFBQVEsTUFBTyxLQUVoRjRmLGFBQWEsV0FDTCxJQUFJc0IsSUFBTXBtQixLQUFLZ21CLFlBQ1h6cEIsRUFBSSxJQUFJMG9CLE1BQU1tQixJQUFJcHBCLE9BQVMsR0FBR2tILEtBQUssS0FDdkMsT0FBT2tpQixJQUFNcG1CLEtBQUtrbUIsZ0JBQWtCLEtBQU8zcEIsRUFBRSxLQUVyRDRwQixLQUFLLFdBQ0csR0FBSW5tQixLQUFLc2xCLEtBQ0wsT0FBT3RsQixLQUFLa1ksSUFJaEIsSUFBSXBMLE1BQ0FrWSxNQUNBcUIsVUFDQS9QLE1BRUFzUCxNQVBDNWxCLEtBQUttbEIsU0FBUW5sQixLQUFLc2xCLE1BQU8sR0FRekJ0bEIsS0FBS29sQixRQUNOcGxCLEtBQUt5ZSxPQUFTLEdBQ2R6ZSxLQUFLZ2xCLE1BQVEsSUFHakIsSUFEQSxJQUFJc0IsTUFBUXRtQixLQUFLdW1CLGdCQUNSbHFCLEVBQUUsRUFBRUEsRUFBSWlxQixNQUFNdHBCLFdBQ25CcXBCLFVBQVlybUIsS0FBS21sQixPQUFPSCxNQUFNaGxCLEtBQUtzbUIsTUFBTUEsTUFBTWpxQixPQUM1QjJvQixTQUFTcUIsVUFBVSxHQUFHcnBCLE9BQVNnb0IsTUFBTSxHQUFHaG9CLFVBQ3ZEZ29CLE1BQVFxQixVQUNSL1AsTUFBUWphLEVBQ0gyRCxLQUFLdkMsUUFBUStvQixPQUxLbnFCLEtBUS9CLE9BQUkyb0IsUUFDQVksTUFBUVosTUFBTSxHQUFHQSxNQUFNLHNCQUNaaGxCLEtBQUsyZSxVQUFZaUgsTUFBTTVvQixRQUNsQ2dELEtBQUtra0IsT0FBUyxDQUFDelgsV0FBWXpNLEtBQUtra0IsT0FBT3RYLFVBQ3hCQSxVQUFXNU0sS0FBSzJlLFNBQVMsRUFDekJqUyxhQUFjMU0sS0FBS2trQixPQUFPclgsWUFDMUJBLFlBQWErWSxNQUFRQSxNQUFNQSxNQUFNNW9CLE9BQU8sR0FBR0EsT0FBTzRvQixNQUFNQSxNQUFNNW9CLE9BQU8sR0FBR2dvQixNQUFNLFVBQVUsR0FBR2hvQixPQUFTZ0QsS0FBS2trQixPQUFPclgsWUFBY21ZLE1BQU0sR0FBR2hvQixRQUN0SmdELEtBQUt5ZSxRQUFVdUcsTUFBTSxHQUNyQmhsQixLQUFLZ2xCLE9BQVNBLE1BQU0sR0FDcEJobEIsS0FBS3ltQixRQUFVekIsTUFDZmhsQixLQUFLMGUsT0FBUzFlLEtBQUt5ZSxPQUFPemhCLE9BQ3RCZ0QsS0FBS3ZDLFFBQVEybUIsU0FDYnBrQixLQUFLa2tCLE9BQU9nQixNQUFRLENBQUNsbEIsS0FBS3lsQixPQUFRemxCLEtBQUt5bEIsUUFBVXpsQixLQUFLMGUsU0FFMUQxZSxLQUFLb2xCLE9BQVEsRUFDYnBsQixLQUFLbWxCLE9BQVNubEIsS0FBS21sQixPQUFPeGUsTUFBTXFlLE1BQU0sR0FBR2hvQixRQUN6Q2dELEtBQUt1bEIsU0FBV1AsTUFBTSxHQUN0QmxZLE1BQVE5TSxLQUFLd2UsY0FBY3poQixLQUFLaUQsS0FBTUEsS0FBS29DLEdBQUlwQyxLQUFNc21CLE1BQU1oUSxPQUFPdFcsS0FBS3dsQixlQUFleGxCLEtBQUt3bEIsZUFBZXhvQixPQUFPLElBQzdHZ0QsS0FBS3NsQixNQUFRdGxCLEtBQUttbEIsU0FBUW5sQixLQUFLc2xCLE1BQU8sR0FDdEN4WSxZQUNDLEdBRVcsS0FBaEI5TSxLQUFLbWxCLE9BQ0VubEIsS0FBS2tZLElBRUxsWSxLQUFLMmpCLFdBQVcsMEJBQTBCM2pCLEtBQUsyZSxTQUFTLEdBQUcseUJBQXlCM2UsS0FBSzhrQixlQUN4RixDQUFDQyxLQUFNLEdBQUlqWSxNQUFPLEtBQU1qSixLQUFNN0QsS0FBSzJlLFlBR3ZEaUcsSUFBSSxXQUNJLElBQUk1b0IsRUFBSWdFLEtBQUttbUIsT0FDYixZQUFpQixJQUFObnFCLEVBQ0FBLEVBRUFnRSxLQUFLNGtCLE9BR3hCOEIsTUFBTSxTQUFlQyxXQUNiM21CLEtBQUt3bEIsZUFBZWhpQixLQUFLbWpCLFlBRWpDQyxTQUFTLFdBQ0QsT0FBTzVtQixLQUFLd2xCLGVBQWUzUSxPQUVuQzBSLGNBQWMsV0FDTixPQUFPdm1CLEtBQUs2bUIsV0FBVzdtQixLQUFLd2xCLGVBQWV4bEIsS0FBS3dsQixlQUFleG9CLE9BQU8sSUFBSXNwQixPQUVsRlEsU0FBUyxXQUNELE9BQU85bUIsS0FBS3dsQixlQUFleGxCLEtBQUt3bEIsZUFBZXhvQixPQUFPLElBRTlEK3BCLFVBQVUsU0FBZUosV0FDakIzbUIsS0FBSzBtQixNQUFNQyxZQUVuQmxwQixRQUFnQixHQUNoQitnQixjQUFzQixTQUFtQnBjLEdBQUc0a0IsSUFBSUMsMEJBQTBCQyxVQUkxRSxTQUFTMVosTUFBTTVJLE1BQU8rSCxLQUNwQixPQUFPcWEsSUFBSXZJLE9BQVN1SSxJQUFJdkksT0FBTzFSLE9BQU9uSSxNQUFPb2lCLElBQUl0SSxPQUFPL1IsS0FLMUQsT0FBT3NhLDJCQUNQLEtBQUssRUFVOEIsR0FUNEIsU0FBekJELElBQUl2SSxPQUFPOVgsT0FBTyxJQUNuQjZHLE1BQU0sRUFBRSxHQUNSeE4sS0FBSzBtQixNQUFNLE9BQ3NCLE9BQXpCTSxJQUFJdkksT0FBTzlYLE9BQU8sSUFDMUI2RyxNQUFNLEVBQUUsR0FDUnhOLEtBQUswbUIsTUFBTSxRQUVYMW1CLEtBQUswbUIsTUFBTSxNQUVWTSxJQUFJdkksT0FBUSxPQUFPLEdBRXpELE1BQU0sS0FDRCxFQUFFLE9BQU8sR0FDUixLQUNELEVBRThCLE9BREF6ZSxLQUFLNG1CLFdBQ0UsR0FFcEMsS0FDRCxFQUFvQixPQUFsQjVtQixLQUFLMG1CLE1BQU0sT0FBZSxHQUMzQixLQUNELEVBSzZCLE9BSkExbUIsS0FBSzRtQixXQUlxRCxRQUF0RDVtQixLQUFLd2xCLGVBQWV4bEIsS0FBS3dsQixlQUFleG9CLE9BQU8sR0FDMUMsSUFFUGdxQixJQUFJdkksT0FBU3VJLElBQUl2SSxPQUFPMVIsT0FBTyxFQUFHaWEsSUFBSXRJLE9BQU8sR0FDdEMsaUJBR3JDLEtBQ0QsRUFBRyxPQUFPLEdBQ1QsS0FDRCxFQUVILE9BREExZSxLQUFLNG1CLFdBQ0UsR0FFSCxLQUNELEVBQUUsT0FBTyxHQUNSLEtBQ0QsRUFBRSxPQUFPLEdBQ1IsS0FDRCxFQUFHLE9BQU8sR0FDVCxLQUNELEdBRzZCLE9BRkE1bUIsS0FBSzRtQixXQUNMNW1CLEtBQUswbUIsTUFBTSxPQUNKLEdBRW5DLEtBQ0QsR0FBRyxPQUFPLEdBQ1QsS0FDRCxHQUFHLE9BQU8sR0FDVCxLQUNELEdBQUcsT0FBTyxHQUNULEtBQ0QsR0FBRyxPQUFPLEdBQ1QsS0FDRCxHQUNDLEtBQ0QsR0FBbUIsT0FBaEIxbUIsS0FBSzRtQixXQUFtQixHQUMxQixLQUNELEdBQUcsT0FBTyxHQUNULEtBQ0QsR0FBRyxPQUFPLEdBQ1QsS0FDRCxHQUFHLE9BQU8sR0FDVCxLQUNELEdBQUcsT0FBTyxHQUNULEtBQ0QsR0FDSDVtQixLQUFLMmxCLE1BQU1xQixJQUFJdkksUUFDZnplLEtBQUs0bUIsV0FDTDVtQixLQUFLMG1CLE1BQU0sT0FFYixNQUFNLEtBQ0QsR0FFSCxPQURBMW1CLEtBQUs0bUIsV0FDRSxHQUVILEtBQ0QsR0FBRyxPQUFPLEdBQ1QsS0FDRCxHQUFHLE9BQU8sR0FDVCxLQUNELEdBQ0MsS0FDRCxHQUFHLE9BQU8sR0FDVCxLQUNELEdBQUcsT0FBTyxHQUNULEtBQ0QsR0FDTCxNQUFNLEtBQ0QsR0FBbUIsT0FBaEI1bUIsS0FBSzRtQixXQUFtQixHQUMxQixLQUNELEdBQW1CLE9BQWhCNW1CLEtBQUs0bUIsV0FBbUIsR0FDMUIsS0FDRCxHQUErQyxPQUE1Q0ksSUFBSXZJLE9BQVNqUixNQUFNLEVBQUUsR0FBR3RJLFFBQVEsT0FBTyxLQUFhLEdBQ3RELEtBQ0QsR0FBK0MsT0FBNUM4aEIsSUFBSXZJLE9BQVNqUixNQUFNLEVBQUUsR0FBR3RJLFFBQVEsT0FBTyxLQUFhLEdBQ3RELEtBQ0QsR0FBRyxPQUFPLEdBQ1QsS0FDRCxHQUNDLEtBQ0QsR0FBRyxPQUFPLEdBQ1QsS0FDRCxHQUFHLE9BQU8sR0FDVCxLQUNELEdBQUcsT0FBTyxHQUNULEtBQ0QsR0FBRyxPQUFPLEdBQ1QsS0FDRCxHQUFHLE9BQU8sR0FDVCxLQUNELEdBQUcsT0FBTyxHQUNULEtBQ0QsR0FBRyxPQUFPLEdBQ1QsS0FDRCxHQUF1RCxPQUFwRDhoQixJQUFJdkksT0FBU3VJLElBQUl2SSxPQUFPdlosUUFBUSxjQUFjLE1BQWMsR0FDOUQsS0FDRCxHQUFHLE1BQU8sVUFDVCxLQUNELEdBQUcsT0FBTyxJQUlmb2hCLE1BQWMsQ0FBQywyQkFBMkIsZ0JBQWdCLGdEQUFnRCx5QkFBeUIscUVBQXFFLCtCQUErQiwwQkFBMEIsVUFBVSxVQUFVLGdCQUFnQixnQkFBZ0IsaUJBQWlCLGtCQUFrQixvQkFBb0Isa0JBQWtCLDZCQUE2QixrQ0FBa0Msa0JBQWtCLHlCQUF5QixrQkFBa0IsaUJBQWlCLG1CQUFtQiw2QkFBNkIsbUJBQW1CLFNBQVMsWUFBWSw0QkFBNEIsYUFBYSxXQUFXLGtCQUFrQixnQkFBZ0IsdUJBQXVCLHVCQUF1QixTQUFTLHlCQUF5QiwwQkFBMEIsOEJBQThCLHlCQUF5QiwwQ0FBMEMsZUFBZSxVQUFVLDBEQUEwRCx5QkFBeUIsU0FBUyxVQUN6L0JPLFdBQW1CLENBQUNNLEdBQUssQ0FBQ2IsTUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSWMsV0FBWSxHQUFPQyxJQUFNLENBQUNmLE1BQVEsQ0FBQyxHQUFHYyxXQUFZLEdBQU9FLElBQU0sQ0FBQ2hCLE1BQVEsQ0FBQyxHQUFHYyxXQUFZLEdBQU9HLElBQU0sQ0FBQ2pCLE1BQVEsQ0FBQyxFQUFFLEVBQUUsR0FBR2MsV0FBWSxHQUFPSSxRQUFVLENBQUNsQixNQUFRLENBQUMsRUFBRSxFQUFFLElBQUljLFdBQVksS0FDcFUsT0FBT3BELE1BeFRLLEdBMFRaLFNBQVMvbEIsU0FBWStCLEtBQUtvQyxHQUFLLEdBQy9CLE9BRkFqRSxPQUFPNmxCLE1BQVFBLE1BRVIsS0FENkIvbEIsT0FBT29DLFVBQVlsQyxRQUFjRixPQUFTQSxRQXptQjdELEdBMm1CWm5CLFFBQUEsUUFBZSthLHFJQzFtQmIsU0FBZTlSLEtBQ3BCLE9BQU8sSUFBSTBoQixjQUFlaGxCLE9BQU9zRCxpRUFIZix3RUFNYixTQUFTMGhCLGVBQ2R6bkIsS0FBSzBuQixRQUFVLEdBR2pCRCxhQUFhcG5CLFVBQVksSUFBQXNuQixVQUFBLFNBRUZDLElBQU0sU0FBU3ZjLFFBR3BDLElBRkEsSUFBSXdjLElBQU0sR0FFRHhyQixFQUFJLEVBQUd3UCxFQUFJN0wsS0FBSzBuQixRQUFTcnJCLEVBQUl3UCxFQUFHeFAsSUFDdkN3ckIsS0FBTyxLQUlULE9BREFBLEtBQU94YyxPQUFTLE1BSWxCb2MsYUFBYXBuQixVQUFVcUksUUFBVSxTQUFTaEIsU0FDeEMsSUFBSW1nQixJQUFNLEdBQ05sZixLQUFPakIsUUFBUWlCLEtBQ2Z0TSxPQUFDdUcsRUFBRWlKLE9BQUNqSixFQUVSLEdBQUk4RSxRQUFRakIsWUFBYSxDQUN2QixJQUFJQSxZQUFjLGtCQUNsQixJQUFLcEssRUFBSSxFQUFHd1AsRUFBSW5FLFFBQVFqQixZQUFZekosT0FBUVgsRUFBSXdQLEVBQUd4UCxJQUNoRG9LLGFBQWUsSUFBTWlCLFFBQVFqQixZQUFZcEssR0FFNUNvSyxhQUFlLEtBQ2ZvaEIsS0FBTzduQixLQUFLNG5CLElBQUluaEIsYUFHbEIsSUFBS3BLLEVBQUksRUFBR3dQLEVBQUlsRCxLQUFLM0wsT0FBUVgsRUFBSXdQLEVBQUd4UCxJQUNsQ3dyQixLQUFPN25CLEtBQUt5QyxPQUFPa0csS0FBS3RNLElBSzFCLE9BRkEyRCxLQUFLMG5CLFVBRUVHLEtBR1RKLGFBQWFwbkIsVUFBVTRKLGtCQUFvQixTQUFTQyxVQUNsRCxPQUFPbEssS0FBSzRuQixJQUFJLE1BQVE1bkIsS0FBS21LLGNBQWNELFVBQVksUUFFekR1ZCxhQUFhcG5CLFVBQVVpSyxVQUFZLFNBQVNKLFVBQzFDLE9BQU9sSyxLQUFLNG5CLElBQUksZ0JBQWtCNW5CLEtBQUttSyxjQUFjRCxVQUFZLFFBR25FdWQsYUFBYXBuQixVQUFVeUksZUFDdkIyZSxhQUFhcG5CLFVBQVVnSixlQUFpQixTQUFTTixPQUMvQyxJQUFJOGUsSUFBTSxHQXFCVixPQW5CQUEsS0FBTzduQixLQUFLNG5CLEtBQW9CLG1CQUFmN2UsTUFBTXRILEtBQTRCLGFBQWUsSUFBTSxVQUN4RXpCLEtBQUswbkIsVUFDTEcsS0FBTzduQixLQUFLNG5CLElBQUk1bkIsS0FBS21LLGNBQWNwQixRQUMvQkEsTUFBTXJCLFVBQ1JtZ0IsS0FBTzduQixLQUFLNG5CLElBQUksWUFDaEI1bkIsS0FBSzBuQixVQUNMRyxLQUFPN25CLEtBQUt5QyxPQUFPc0csTUFBTXJCLFNBQ3pCMUgsS0FBSzBuQixXQUVIM2UsTUFBTUMsVUFDSkQsTUFBTXJCLFNBQVcxSCxLQUFLMG5CLFVBQzFCRyxLQUFPN25CLEtBQUs0bkIsSUFBSSxTQUNoQjVuQixLQUFLMG5CLFVBQ0xHLEtBQU83bkIsS0FBS3lDLE9BQU9zRyxNQUFNQyxTQUN6QmhKLEtBQUswbkIsVUFDRDNlLE1BQU1yQixTQUFXMUgsS0FBSzBuQixXQUU1QjFuQixLQUFLMG5CLFVBRUVHLEtBR1RKLGFBQWFwbkIsVUFBVW9KLGlCQUFtQixTQUFTdkksU0FDakQsSUFBSXNKLFFBQVUsV0FBYXRKLFFBQVFQLEtBQUtvQixTQU94QyxPQU5JYixRQUFRUSxPQUFPLEtBQ2pCOEksU0FBVyxJQUFNeEssS0FBS3lDLE9BQU92QixRQUFRUSxPQUFPLEtBRTFDUixRQUFRUyxPQUNWNkksU0FBVyxJQUFNeEssS0FBS3lDLE9BQU92QixRQUFRUyxPQUVoQzNCLEtBQUs0bkIsSUFBSSxPQUFTcGQsUUFBVSxRQUVyQ2lkLGFBQWFwbkIsVUFBVTBKLHNCQUF3QixTQUFTN0ksU0FDdEQsSUFBSXNKLFFBQVUsaUJBQW1CdEosUUFBUVAsS0FBS29CLFNBYTlDLE9BWkliLFFBQVFRLE9BQU8sS0FDakI4SSxTQUFXLElBQU14SyxLQUFLeUMsT0FBT3ZCLFFBQVFRLE9BQU8sS0FFMUNSLFFBQVFTLE9BQ1Y2SSxTQUFXLElBQU14SyxLQUFLeUMsT0FBT3ZCLFFBQVFTLE9BR3ZDNkksU0FBVyxJQUFNeEssS0FBSzRuQixJQUFJLFlBQzFCNW5CLEtBQUswbkIsVUFDTGxkLFNBQVd4SyxLQUFLeUMsT0FBT3ZCLFFBQVF3RyxTQUMvQjFILEtBQUswbkIsVUFFRTFuQixLQUFLNG5CLElBQUksT0FBU3BkLFFBQVUsUUFHckNpZCxhQUFhcG5CLFVBQVVrSyxpQkFBbUIsU0FBU0MsU0FDakQsT0FBT3hLLEtBQUs0bkIsSUFBSSxhQUFlcGQsUUFBUWhGLE1BQVEsUUFHakRpaUIsYUFBYXBuQixVQUFVb0ssaUJBQW1CLFNBQVMwQyxTQUNqRCxPQUFPbk4sS0FBSzRuQixJQUFJLFFBQVV6YSxRQUFRM0gsTUFBUSxTQUc1Q2lpQixhQUFhcG5CLFVBQVU4SixjQUFnQixTQUFTcEQsT0FLOUMsSUFKQSxJQUVJcEYsS0FGQUQsT0FBU3FGLE1BQU1yRixPQUNmb21CLGFBQWUsR0FHVnpyQixFQUFJLEVBQUd3UCxFQUFJbkssT0FBTzFFLE9BQVFYLEVBQUl3UCxFQUFHeFAsSUFDeEN5ckIsYUFBYXRrQixLQUFLeEQsS0FBS3lDLE9BQU9mLE9BQU9yRixLQU92QyxPQUpBcUYsT0FBUyxJQUFNb21CLGFBQWE1akIsS0FBSyxNQUFRLElBRXpDdkMsS0FBT29GLE1BQU1wRixLQUFPLElBQU0zQixLQUFLeUMsT0FBT3NFLE1BQU1wRixNQUFRLEdBRTdDM0IsS0FBS3lDLE9BQU9zRSxNQUFNbEYsTUFBUSxJQUFNSCxPQUFTQyxNQUdsRDhsQixhQUFhcG5CLFVBQVUwSyxlQUFpQixTQUFTa0wsSUFDL0MsSUFBSXBVLEtBQU9vVSxHQUFHaFUsTUFBTWlDLEtBQUssS0FDekIsT0FBUStSLEdBQUdyUSxLQUFPLElBQU0sSUFBTSxRQUFVL0QsTUFJMUM0bEIsYUFBYXBuQixVQUFVK0ssY0FBZ0IsU0FBU0MsUUFDOUMsTUFBTyxJQUFNQSxPQUFPN0YsTUFBUSxLQUc5QmlpQixhQUFhcG5CLFVBQVVpTCxjQUFnQixTQUFTQyxRQUM5QyxNQUFPLFVBQVlBLE9BQU8vRixNQUFRLEtBR3BDaWlCLGFBQWFwbkIsVUFBVW1MLGVBQWlCLFNBQVNDLE1BQy9DLE1BQU8sV0FBYUEsS0FBS2pHLE1BQVEsS0FHbkNpaUIsYUFBYXBuQixVQUFVcUwsaUJBQW1CLFdBQ3hDLE1BQU8sYUFHVCtiLGFBQWFwbkIsVUFBVXNMLFlBQWMsV0FDbkMsTUFBTyxRQUdUOGIsYUFBYXBuQixVQUFVdUwsS0FBTyxTQUFTakssTUFJckMsSUFIQSxJQUFJMEQsTUFBUTFELEtBQUswRCxNQUNiMGlCLFlBQWMsR0FFVDFyQixFQUFJLEVBQUd3UCxFQUFJeEcsTUFBTXJJLE9BQVFYLEVBQUl3UCxFQUFHeFAsSUFDdkMwckIsWUFBWXZrQixLQUFLeEQsS0FBS3lDLE9BQU80QyxNQUFNaEosS0FHckMsTUFBTyxRQUFVMHJCLFlBQVk3akIsS0FBSyxNQUFRLEtBRTVDdWpCLGFBQWFwbkIsVUFBVTJuQixTQUFXLFNBQVNDLE1BQ3pDLE9BQU9BLEtBQUszaUIsSUFBTSxJQUFNdEYsS0FBS3lDLE9BQU93bEIsS0FBS3ppQiw4SEN4S3JCLCtFQUV0QixTQUFTakgsVUFDUHlCLEtBQUtrb0IsUUFBVSxHQTRHakIsU0FBU0MsbUJBQW1CamUsVUFDMUJsSyxLQUFLb29CLGVBQWVsZSxTQUFVLFFBQzlCbEssS0FBS3FvQixZQUFZbmUsU0FBU3hJLFFBQzFCMUIsS0FBS3NvQixVQUFVcGUsU0FBVSxRQUUzQixTQUFTcWUsV0FBV3hmLE9BQ2xCb2YsbUJBQW1CcHJCLEtBQUtpRCxLQUFNK0ksT0FFOUIvSSxLQUFLc29CLFVBQVV2ZixNQUFPLFdBQ3RCL0ksS0FBS3NvQixVQUFVdmYsTUFBTyxXQUV4QixTQUFTeWYsYUFBYXRuQixTQUNwQmxCLEtBQUtvb0IsZUFBZWxuQixRQUFTLFFBQzdCbEIsS0FBS3FvQixZQUFZbm5CLFFBQVFRLFFBQ3pCMUIsS0FBS3NvQixVQUFVcG5CLFFBQVMsUUF2SDFCM0MsUUFBUThCLFVBQVksQ0FDbEJDLFlBQWEvQixRQUNia3FCLFVBQVUsRUFHVkgsVUFBVyxTQUFTOW1CLEtBQU1iLE1BQ3hCLElBQUk2RSxNQUFReEYsS0FBS3lDLE9BQU9qQixLQUFLYixPQUM3QixHQUFJWCxLQUFLeW9CLFNBQVUsQ0FHakIsR0FBSWpqQixRQUFVakgsUUFBUThCLFVBQVVtRixNQUFNL0QsTUFDcEMsTUFBTSxJQUFBVixZQUFBLFFBQWMseUJBQTJCeUUsTUFBTS9ELEtBQU8sMEJBQTRCZCxLQUFPLE9BQVNhLEtBQUtDLE1BRS9HRCxLQUFLYixNQUFRNkUsUUFNakI0aUIsZUFBZ0IsU0FBUzVtQixLQUFNYixNQUc3QixHQUZBWCxLQUFLc29CLFVBQVU5bUIsS0FBTWIsT0FFaEJhLEtBQUtiLE1BQ1IsTUFBTSxJQUFBSSxZQUFBLFFBQWNTLEtBQUtDLEtBQU8sYUFBZWQsT0FNbkQwbkIsWUFBYSxTQUFTSyxPQUNwQixJQUFLLElBQUlyc0IsRUFBSSxFQUFHd1AsRUFBSTZjLE1BQU0xckIsT0FBUVgsRUFBSXdQLEVBQUd4UCxJQUN2QzJELEtBQUtzb0IsVUFBVUksTUFBT3JzQixHQUVqQnFzQixNQUFNcnNCLEtBQ1Rxc0IsTUFBTWpXLE9BQU9wVyxFQUFHLEdBQ2hCQSxJQUNBd1AsTUFLTnBKLE9BQVEsU0FBU2ttQixRQUNmLEdBQUtBLE9BQUwsQ0FLQSxJQUFLM29CLEtBQUsyb0IsT0FBT2xuQixNQUNmLE1BQU0sSUFBQVYsWUFBQSxRQUFjLGlCQUFtQjRuQixPQUFPbG5CLEtBQU1rbkIsUUFHbEQzb0IsS0FBSzRTLFNBQ1A1UyxLQUFLa29CLFFBQVE1akIsUUFBUXRFLEtBQUs0UyxTQUU1QjVTLEtBQUs0UyxRQUFVK1YsT0FFZixJQUFJcmxCLElBQU10RCxLQUFLMm9CLE9BQU9sbkIsTUFBTWtuQixRQUk1QixPQUZBM29CLEtBQUs0UyxRQUFVNVMsS0FBS2tvQixRQUFRemYsU0FFdkJ6SSxLQUFLeW9CLFVBQVlubEIsSUFDYkEsS0FDVSxJQUFSQSxJQUNGcWxCLFlBREYsSUFLVGpnQixRQUFTLFNBQVNoQixTQUNoQjFILEtBQUtxb0IsWUFBWTNnQixRQUFRaUIsT0FHM0JzQixrQkFBbUJrZSxtQkFDbkI3ZCxVQUFXNmQsbUJBRVhyZixlQUFnQnlmLFdBQ2hCbGYsZUFBZ0JrZixXQUVoQjllLGlCQUFrQitlLGFBQ2xCemUsc0JBQXVCLFNBQVM3SSxTQUM5QnNuQixhQUFhenJCLEtBQUtpRCxLQUFNa0IsU0FFeEJsQixLQUFLc29CLFVBQVVwbkIsUUFBUyxZQUcxQnFKLGlCQUFrQixhQUNsQkUsaUJBQWtCLGFBRWxCTixjQUFlZ2UsbUJBRWZwZCxlQUFnQixhQUVoQkssY0FBZSxhQUNmRSxjQUFlLGFBQ2ZFLGVBQWdCLGFBQ2hCRSxpQkFBa0IsYUFDbEJDLFlBQWEsYUFFYkMsS0FBTSxTQUFTakssTUFDYjNCLEtBQUtxb0IsWUFBWTFtQixLQUFLMEQsUUFFeEIyaUIsU0FBVSxTQUFTQyxNQUNqQmpvQixLQUFLb29CLGVBQWVILEtBQU0sMkJBcUJmMXBCLDhKQ2hJSyx3RUFFcEIsU0FBU3FxQix3QkFBa0JuckIsUUFBT29ILFVBQUE3SCxRQUFBLFFBQUE0RixJQUFBaUMsVUFBQSxHQUFHLEdBQUVBLFVBQUEsR0FDckM3RSxLQUFLdkMsUUFBVUEsUUE2SWpCLFNBQVNvckIsaUJBQWlCbGdCLEtBQU10TSxFQUFHeXNCLGFBQ3ZCbG1CLElBQU52RyxJQUNGQSxFQUFJc00sS0FBSzNMLFFBS1gsSUFBSStyQixLQUFPcGdCLEtBQUt0TSxFQUFJLEdBQ2hCMnNCLFFBQVVyZ0IsS0FBS3RNLEVBQUksR0FDdkIsT0FBSzBzQixLQUlhLHFCQUFkQSxLQUFLdG5CLE1BQ0N1bkIsVUFBWUYsT0FBVSxhQUFpQixrQkFBbUJobkIsS0FBS2luQixLQUFLaG5CLGVBRDlFLEVBSFMrbUIsT0FPWCxTQUFTRyxpQkFBaUJ0Z0IsS0FBTXRNLEVBQUd5c0IsYUFDdkJsbUIsSUFBTnZHLElBQ0ZBLEdBQUssR0FHUCxJQUFJOHBCLEtBQU94ZCxLQUFLdE0sRUFBSSxHQUNoQjJzQixRQUFVcmdCLEtBQUt0TSxFQUFJLEdBQ3ZCLE9BQUs4cEIsS0FJYSxxQkFBZEEsS0FBSzFrQixNQUNDdW5CLFVBQVlGLE9BQVUsYUFBaUIsa0JBQW1CaG5CLEtBQUtxa0IsS0FBS3BrQixlQUQ5RSxFQUhTK21CLE9BZVgsU0FBU0ksVUFBVXZnQixLQUFNdE0sRUFBRzhzQixVQUMxQixJQUFJdlcsUUFBVWpLLEtBQVUsTUFBTHRNLEVBQVksRUFBSUEsRUFBSSxHQUN2QyxHQUFLdVcsU0FBNEIscUJBQWpCQSxRQUFRblIsT0FBaUMwbkIsV0FBWXZXLFFBQVF3VyxlQUE3RSxDQUlBLElBQUlybkIsU0FBVzZRLFFBQVFwTixNQUN2Qm9OLFFBQVFwTixNQUFRb04sUUFBUXBOLE1BQU1OLFFBQVFpa0IsU0FBWSxPQUFXLGdCQUFrQixJQUMvRXZXLFFBQVF3VyxjQUFnQnhXLFFBQVFwTixRQUFVekQsVUFVNUMsU0FBU3NuQixTQUFTMWdCLEtBQU10TSxFQUFHOHNCLFVBQ3pCLElBQUl2VyxRQUFVakssS0FBVSxNQUFMdE0sRUFBWXNNLEtBQUszTCxPQUFTLEVBQUlYLEVBQUksR0FDckQsR0FBS3VXLFNBQTRCLHFCQUFqQkEsUUFBUW5SLE9BQWlDMG5CLFdBQVl2VyxRQUFRMFcsY0FBN0UsQ0FLQSxJQUFJdm5CLFNBQVc2USxRQUFRcE4sTUFHdkIsT0FGQW9OLFFBQVFwTixNQUFRb04sUUFBUXBOLE1BQU1OLFFBQVFpa0IsU0FBWSxPQUFXLFVBQVksSUFDekV2VyxRQUFRMFcsYUFBZTFXLFFBQVFwTixRQUFVekQsU0FDbEM2USxRQUFRMFcsZUEvTWpCVixrQkFBa0J2b0IsVUFBWSxJQUFBc25CLFVBQUEsU0FFRmpmLFFBQVUsU0FBU2hCLFNBQzdDLElBQU02aEIsY0FBZ0J2cEIsS0FBS3ZDLFFBQVErckIsaUJBRS9CVixRQUFVOW9CLEtBQUt5cEIsV0FDbkJ6cEIsS0FBS3lwQixZQUFhLEVBR2xCLElBREEsSUFBSTlnQixLQUFPakIsUUFBUWlCLEtBQ1Z0TSxFQUFJLEVBQUd3UCxFQUFJbEQsS0FBSzNMLE9BQVFYLEVBQUl3UCxFQUFHeFAsSUFBSyxDQUMzQyxJQUFJdVcsUUFBVWpLLEtBQUt0TSxHQUNmbVIsTUFBUXhOLEtBQUt5QyxPQUFPbVEsU0FFeEIsR0FBS3BGLE1BQUwsQ0FJQSxJQUFJa2Msa0JBQW9CYixpQkFBaUJsZ0IsS0FBTXRNLEVBQUd5c0IsUUFDOUNhLGtCQUFvQlYsaUJBQWlCdGdCLEtBQU10TSxFQUFHeXNCLFFBRTlDYyxlQUFpQnBjLE1BQU1vYyxnQkFBa0JGLGtCQUN6Q0csZ0JBQWtCcmMsTUFBTXFjLGlCQUFtQkYsa0JBQzNDRyxpQkFBbUJ0YyxNQUFNc2Msa0JBQW9CSixtQkFBcUJDLGtCQUVsRW5jLE1BQU1QLE9BQ1JpYyxVQUFVdmdCLEtBQU10TSxHQUFHLEdBRWpCbVIsTUFBTVIsTUFDUnFjLFNBQVMxZ0IsS0FBTXRNLEdBQUcsR0FHaEJrdEIsY0FBZ0JPLG1CQUNsQlosVUFBVXZnQixLQUFNdE0sR0FFWmd0QixTQUFTMWdCLEtBQU10TSxJQUVJLHFCQUFqQnVXLFFBQVFuUixPQUVWbVIsUUFBUS9JLE9BQVMsWUFBY2tnQixLQUFLcGhCLEtBQUt0TSxFQUFJLEdBQUcwRixVQUFVLEtBSTVEd25CLGNBQWdCSyxpQkFDbEJWLFdBQVd0VyxRQUFRbEwsU0FBV2tMLFFBQVE1SixTQUFTTCxNQUcvQzBnQixTQUFTMWdCLEtBQU10TSxJQUVia3RCLGNBQWdCTSxrQkFFbEJYLFVBQVV2Z0IsS0FBTXRNLEdBRWhCZ3RCLFVBQVV6VyxRQUFRNUosU0FBVzRKLFFBQVFsTCxTQUFTaUIsUUFJbEQsT0FBT2pCLFNBR1RraEIsa0JBQWtCdm9CLFVBQVV5SSxlQUM1QjhmLGtCQUFrQnZvQixVQUFVZ0osZUFDNUJ1ZixrQkFBa0J2b0IsVUFBVTBKLHNCQUF3QixTQUFTaEIsT0FDM0QvSSxLQUFLeUMsT0FBT3NHLE1BQU1yQixTQUNsQjFILEtBQUt5QyxPQUFPc0csTUFBTUMsU0FHbEIsSUFBSXRCLFFBQVVxQixNQUFNckIsU0FBV3FCLE1BQU1DLFFBQ2pDQSxRQUFVRCxNQUFNckIsU0FBV3FCLE1BQU1DLFFBQ2pDZ2hCLGFBQWVoaEIsUUFDZmloQixZQUFjamhCLFFBRWxCLEdBQUlBLFNBQVdBLFFBQVFzVyxRQUlyQixJQUhBMEssYUFBZWhoQixRQUFRTCxLQUFLLEdBQUdqQixRQUd4QnVpQixZQUFZM0ssU0FDakIySyxZQUFjQSxZQUFZdGhCLEtBQUtzaEIsWUFBWXRoQixLQUFLM0wsT0FBUyxHQUFHMEssUUFJaEUsSUFBSThGLE1BQVEsQ0FDVlIsS0FBTWpFLE1BQU04RSxVQUFVYixLQUN0QkMsTUFBT2xFLE1BQU1nRixXQUFXZCxNQUl4QjJjLGVBQWdCWCxpQkFBaUJ2aEIsUUFBUWlCLE1BQ3pDa2hCLGdCQUFpQmhCLGtCQUFrQm1CLGNBQWdCdGlCLFNBQVNpQixPQU85RCxHQUpJSSxNQUFNOEUsVUFBVVosT0FDbEJpYyxVQUFVeGhCLFFBQVFpQixLQUFNLE1BQU0sR0FHNUJLLFFBQVMsQ0FDWCxJQUFJOEUsYUFBZS9FLE1BQU0rRSxhQUVyQkEsYUFBYWQsTUFDZnFjLFNBQVMzaEIsUUFBUWlCLEtBQU0sTUFBTSxHQUczQm1GLGFBQWFiLE9BQ2ZpYyxVQUFVYyxhQUFhcmhCLEtBQU0sTUFBTSxHQUVqQ0ksTUFBTWdGLFdBQVdmLE1BQ25CcWMsU0FBU1ksWUFBWXRoQixLQUFNLE1BQU0sSUFJOUIzSSxLQUFLdkMsUUFBUStyQixrQkFDWFgsaUJBQWlCbmhCLFFBQVFpQixPQUN6QnNnQixpQkFBaUJlLGFBQWFyaEIsUUFDbkMwZ0IsU0FBUzNoQixRQUFRaUIsTUFDakJ1Z0IsVUFBVWMsYUFBYXJoQixZQUVoQkksTUFBTWdGLFdBQVdmLE1BQzFCcWMsU0FBUzNoQixRQUFRaUIsS0FBTSxNQUFNLEdBRy9CLE9BQU82RSxPQUdUb2Isa0JBQWtCdm9CLFVBQVVpSyxVQUM1QnNlLGtCQUFrQnZvQixVQUFVNEosa0JBQW9CLFNBQVNDLFVBQ3ZELE9BQU9BLFNBQVNzRCxPQUdsQm9iLGtCQUFrQnZvQixVQUFVb0osaUJBQ3hCbWYsa0JBQWtCdm9CLFVBQVVvSyxpQkFBbUIsU0FBU2pKLE1BRTFELElBQUlnTSxNQUFRaE0sS0FBS2dNLE9BQVMsR0FDMUIsTUFBTyxDQUNMc2Msa0JBQWtCLEVBQ2xCOWMsS0FBTVEsTUFBTVIsS0FDWkMsTUFBT08sTUFBTVAsd0JBNEVGMmIsOEtDck5SLFNBQW1Dc0IsVUFDeENDLG1CQUFBLFFBQWVELDZDQUhVLDROQ0FOLDRCQUVOLFNBQVNBLFVBQ3RCQSxTQUFTOW9CLGtCQUFrQixTQUFVLFNBQVNSLEdBQUl3cEIsTUFBT0MsVUFBVzVzQixTQUNsRSxJQUFJNkYsSUFBTTFDLEdBZVYsT0FkS3dwQixNQUFNdHFCLFdBQ1RzcUIsTUFBTXRxQixTQUFXLEdBQ2pCd0QsSUFBTSxTQUFTOEMsUUFBUzNJLFNBRXRCLElBQUlzRSxTQUFXc29CLFVBQVV2cUIsU0FDekJ1cUIsVUFBVXZxQixTQUFXZSxPQUFBL0IsT0FBTyxHQUFJaUQsU0FBVXFvQixNQUFNdHFCLFVBQ2hELElBQUl3RCxJQUFNMUMsR0FBR3dGLFFBQVMzSSxTQUV0QixPQURBNHNCLFVBQVV2cUIsU0FBV2lDLFNBQ2R1QixNQUlYOG1CLE1BQU10cUIsU0FBU3JDLFFBQVE4SixLQUFLLElBQU05SixRQUFRbUQsR0FFbkMwQyxnSUNsQlgsSUFBTWduQixXQUFhLENBQUMsY0FBZSxXQUFZLGFBQWMsVUFBVyxPQUFRLFNBQVUsU0FFMUYsU0FBU3JyQixVQUFVc3JCLFFBQVMvb0IsTUFDMUIsSUFBSTRCLElBQU01QixNQUFRQSxLQUFLNEIsSUFDbkJTLFVBQUlqQixFQUNKa0IsWUFBTWxCLEVBQ05RLE1BSUZtbkIsU0FBVyxPQUhYMW1CLEtBQU9ULElBQUl3QixNQUFNZixNQUdTLEtBRjFCQyxPQUFTVixJQUFJd0IsTUFBTWQsU0FRckIsSUFIQSxJQUFJMG1CLElBQU03dEIsTUFBTTBELFVBQVVDLFlBQVl2RCxLQUFLaUQsS0FBTXVxQixTQUd4Q0UsSUFBTSxFQUFHQSxJQUFNSCxXQUFXdHRCLE9BQVF5dEIsTUFDekN6cUIsS0FBS3NxQixXQUFXRyxNQUFRRCxJQUFJRixXQUFXRyxNQUlyQzl0QixNQUFNK3RCLG1CQUNSL3RCLE1BQU0rdEIsa0JBQWtCMXFCLEtBQU1mLFdBR2hDLElBQ01tRSxNQUNGcEQsS0FBSzJxQixXQUFhOW1CLEtBSWQrbUIsT0FBT0MsZUFDVEQsT0FBT0MsZUFBZTdxQixLQUFNLFNBQVUsQ0FDcEN3RixNQUFPMUIsT0FDUGduQixZQUFZLElBR2Q5cUIsS0FBSzhELE9BQVNBLFFBR2xCLE1BQU9pbkIsT0FLWDlyQixVQUFVb0IsVUFBWSxJQUFJMUQsc0JBRVhzQyx1T0N4Q1IsU0FBZ0NpckIsVUFDckNjLDRCQUFBLFFBQTJCZCxVQUMzQmUsY0FBQSxRQUFhZixVQUNiZ0IsdUJBQUEsUUFBc0JoQixVQUN0QmlCLFlBQUEsUUFBV2pCLFVBQ1hrQixhQUFBLFFBQVlsQixVQUNabUIsZ0JBQUEsUUFBZW5CLFVBQ2ZvQixjQUFBLFFBQWFwQiwwRUFmd0IsZ0ZBQ2QseUVBQ1Msd0VBQ1gsNkRBQ0MsaUVBQ0csa0VBQ0YsdVJDTjZCLDRCQUV2QyxTQUFTQSxVQUN0QkEsU0FBU3hwQixlQUFlLHFCQUFzQixTQUFTMEYsUUFBUzNJLFNBQzlELElBQUl1TCxRQUFVdkwsUUFBUXVMLFFBQ2xCcEksR0FBS25ELFFBQVFtRCxHQUVqQixJQUFnQixJQUFad0YsUUFDRixPQUFPeEYsR0FBR1osTUFDTCxJQUFnQixJQUFab0csU0FBZ0MsTUFBWEEsUUFDOUIsT0FBTzRDLFFBQVFoSixNQUNWLEdBQUlhLE9BQUF3QyxRQUFRK0MsU0FDakIsT0FBcUIsRUFBakJBLFFBQVFwSixRQUNOUyxRQUFRa1gsTUFDVmxYLFFBQVFrWCxJQUFNLENBQUNsWCxRQUFRa0QsT0FHbEJ1cEIsU0FBU3JxQixRQUFRNEUsS0FBSzJCLFFBQVMzSSxVQUUvQnVMLFFBQVFoSixNQUdqQixHQUFJdkMsUUFBUW1JLE1BQVFuSSxRQUFRa1gsSUFBSyxDQUMvQixJQUFJL08sS0FBTy9FLE9BQUFTLFlBQVk3RCxRQUFRbUksTUFDL0JBLEtBQUsybEIsWUFBYzFxQixPQUFBMnFCLGtCQUFrQi90QixRQUFRbUksS0FBSzJsQixZQUFhOXRCLFFBQVFrRCxNQUN2RWxELFFBQVUsQ0FBQ21JLEtBQU1BLE1BR25CLE9BQU9oRixHQUFHd0YsUUFBUzNJLDRKQzVCc0QsK0JBQ3pELCtGQUVQLFNBQVN5c0IsVUFDdEJBLFNBQVN4cEIsZUFBZSxPQUFRLFNBQVMwRixRQUFTM0ksU0FDaEQsSUFBS0EsUUFDSCxNQUFNLElBQUFzRCxZQUFBLFFBQWMsK0JBR3RCLElBQUlILEdBQUtuRCxRQUFRbUQsR0FDYm9JLFFBQVV2TCxRQUFRdUwsUUFDbEIzTSxFQUFJLEVBQ0ppSCxJQUFNLEdBQ05zQyxVQUFJaEQsRUFDSjJvQixpQkFBVzNvQixFQVlmLFNBQVM2b0IsY0FBY0MsTUFBT3BWLE1BQU9xVixNQUMvQi9sQixPQUNGQSxLQUFLTixJQUFNb21CLE1BQ1g5bEIsS0FBSzBRLE1BQVFBLE1BQ2IxUSxLQUFLZ21CLE1BQWtCLElBQVZ0VixNQUNiMVEsS0FBSytsQixPQUFTQSxLQUVWSixjQUNGM2xCLEtBQUsybEIsWUFBY0EsWUFBY0csUUFJckNwb0IsS0FBWTFDLEdBQUd3RixRQUFRc2xCLE9BQVEsQ0FDN0I5bEIsS0FBTUEsS0FDTmEsWUFBYTVGLE9BQUE0RixZQUFZLENBQUNMLFFBQVFzbEIsT0FBUUEsT0FBUSxDQUFDSCxZQUFjRyxNQUFPLFNBSTVFLEdBNUJJanVCLFFBQVFtSSxNQUFRbkksUUFBUWtYLE1BQzFCNFcsWUFBYzFxQixPQUFBMnFCLGtCQUFrQi90QixRQUFRbUksS0FBSzJsQixZQUFhOXRCLFFBQVFrWCxJQUFJLElBQU0sS0FHMUU5VCxPQUFBZ3JCLFdBQVd6bEIsV0FBWUEsUUFBVUEsUUFBUXJKLEtBQUtpRCxPQUU5Q3ZDLFFBQVFtSSxPQUNWQSxLQUFPL0UsT0FBQVMsWUFBWTdELFFBQVFtSSxPQXFCekJRLFNBQThCLGlCQUFaQSxRQUNwQixHQUFJdkYsT0FBQXdDLFFBQVErQyxTQUNWLElBQUssSUFBSTBsQixFQUFJMWxCLFFBQVFwSixPQUFRWCxFQUFJeXZCLEVBQUd6dkIsSUFDOUJBLEtBQUsrSixTQUNQcWxCLGNBQWNwdkIsRUFBR0EsRUFBR0EsSUFBTStKLFFBQVFwSixPQUFTLE9BRzFDLENBQ0wsSUFBSSt1QixjQUFRbnBCLEVBRVosSUFBSyxJQUFJMEMsT0FBT2MsUUFDVkEsUUFBUWIsZUFBZUQsWUFJUjFDLElBQWJtcEIsVUFDRk4sY0FBY00sU0FBVTF2QixFQUFJLEdBRTlCMHZCLFNBQVd6bUIsSUFDWGpKLFVBR2F1RyxJQUFibXBCLFVBQ0ZOLGNBQWNNLFNBQVUxdkIsRUFBSSxHQUFHLEdBU3JDLE9BSlUsSUFBTkEsSUFDRmlILElBQU0wRixRQUFRaEosT0FHVHNELDZLQzVFVywrRkFFUCxTQUFTNG1CLFVBQ3RCQSxTQUFTeHBCLGVBQWUsZ0JBQWlCLFdBQ3ZDLEdBQXlCLElBQXJCbUUsVUFBVTdILE9BS1osTUFBTSxJQUFBK0QsWUFBQSxRQUFjLG9CQUFzQjhELFVBQVVBLFVBQVU3SCxPQUFTLEdBQUcyRCxLQUFPLHdKQ1RyRCw0QkFFbkIsU0FBU3VwQixVQUN0QkEsU0FBU3hwQixlQUFlLEtBQU0sU0FBU3NyQixZQUFhdnVCLFNBTWxELE9BTElvRCxPQUFBZ3JCLFdBQVdHLGVBQWdCQSxZQUFjQSxZQUFZanZCLEtBQUtpRCxRQUt4RHZDLFFBQVFrRSxLQUFLc3FCLGNBQWdCRCxhQUFnQm5yQixPQUFBd0QsUUFBUTJuQixhQUNsRHZ1QixRQUFRdUwsUUFBUWhKLE1BRWhCdkMsUUFBUW1ELEdBQUdaLFFBSXRCa3FCLFNBQVN4cEIsZUFBZSxTQUFVLFNBQVNzckIsWUFBYXZ1QixTQUN0RCxPQUFPeXNCLFNBQVNycUIsUUFBWSxHQUFFOUMsS0FBS2lELEtBQU1nc0IsWUFBYSxDQUFDcHJCLEdBQUluRCxRQUFRdUwsUUFBU0EsUUFBU3ZMLFFBQVFtRCxHQUFJZSxLQUFNbEUsUUFBUWtFLG1KQ2pCcEcsU0FBU3VvQixVQUN0QkEsU0FBU3hwQixlQUFlLE1BQU8sV0FHN0IsSUFGQSxJQUFJNkcsS0FBTyxNQUFDM0UsR0FDUm5GLFFBQVVvSCxVQUFVQSxVQUFVN0gsT0FBUyxHQUNsQ1gsRUFBSSxFQUFHQSxFQUFJd0ksVUFBVTdILE9BQVMsRUFBR1gsSUFDeENrTCxLQUFLL0QsS0FBS3FCLFVBQVV4SSxJQUd0QixJQUFJNnZCLE1BQVEsRUFDYyxNQUF0Qnp1QixRQUFRa0UsS0FBS3VxQixNQUNmQSxNQUFRenVCLFFBQVFrRSxLQUFLdXFCLE1BQ1p6dUIsUUFBUW1JLE1BQThCLE1BQXRCbkksUUFBUW1JLEtBQUtzbUIsUUFDdENBLE1BQVF6dUIsUUFBUW1JLEtBQUtzbUIsT0FFdkIza0IsS0FBSyxHQUFLMmtCLE1BRVZoQyxTQUFTenBCLElBQUcrUCxNQUFaMFosU0FBaUIzaUIscUlDaEJOLFNBQVMyaUIsVUFDdEJBLFNBQVN4cEIsZUFBZSxTQUFVLFNBQVMwRSxJQUFLc21CLE9BQzlDLE9BQU90bUIsS0FBT0EsSUFBSXNtQix5SUNGeUQsNEJBRWhFLFNBQVN4QixVQUN0QkEsU0FBU3hwQixlQUFlLE9BQVEsU0FBUzBGLFFBQVMzSSxTQUM1Q29ELE9BQUFnckIsV0FBV3psQixXQUFZQSxRQUFVQSxRQUFRckosS0FBS2lELE9BRWxELElBQUlZLEdBQUtuRCxRQUFRbUQsR0FFakIsR0FBS0MsT0FBQXdELFFBQVErQixTQVlYLE9BQU8zSSxRQUFRdUwsUUFBUWhKLE1BWHZCLElBQUk0RixLQUFPbkksUUFBUW1JLEtBTW5CLE9BTEluSSxRQUFRbUksTUFBUW5JLFFBQVFrWCxPQUMxQi9PLEtBQU8vRSxPQUFBUyxZQUFZN0QsUUFBUW1JLE9BQ3RCMmxCLFlBQWMxcUIsT0FBQTJxQixrQkFBa0IvdEIsUUFBUW1JLEtBQUsybEIsWUFBYTl0QixRQUFRa1gsSUFBSSxLQUd0RS9ULEdBQUd3RixRQUFTLENBQ2pCUixLQUFNQSxLQUNOYSxZQUFhNUYsT0FBQTRGLFlBQVksQ0FBQ0wsU0FBVSxDQUFDUixNQUFRQSxLQUFLMmxCLCtKQ2pCcEMsV0FFbEJockIsT0FBUyxDQUNYNHJCLFVBQVcsQ0FBQyxRQUFTLE9BQVEsT0FBUSxTQUNyQ0QsTUFBTyxPQUdQRSxZQUFhLFNBQVNGLE9BQ3BCLEdBQXFCLGlCQUFWQSxNQUFvQixDQUM3QixJQUFJRyxTQUFXeHJCLE9BQUEyTCxRQUFRak0sT0FBTzRyQixVQUFXRCxNQUFNSSxlQUU3Q0osTUFEYyxHQUFaRyxTQUNNQSxTQUVBRSxTQUFTTCxNQUFPLElBSTVCLE9BQU9BLE9BSVR6ckIsSUFBSyxTQUFTeXJCLE9BR1osR0FGQUEsTUFBUTNyQixPQUFPNnJCLFlBQVlGLE9BRUosb0JBQVpNLFNBQTJCanNCLE9BQU82ckIsWUFBWTdyQixPQUFPMnJCLFFBQVVBLE1BQU8sQ0FDL0UsSUFBSU8sT0FBU2xzQixPQUFPNHJCLFVBQVVELE9BQ3pCTSxRQUFRQyxVQUNYQSxPQUFTLHFDQU5TbEMsUUFBT3RGLE1BQUEsRUFBQXlILEtBQUFBLEtBQUEsRUFBQSxHQUFBQyxLQUFBLEVBQUFBLEtBQUFELEtBQUFDLE9BQVBwQyxRQUFPb0MsS0FBQSxHQUFBOW5CLFVBQUE4bkIsTUFRM0JILFFBQVFDLFFBQU1qYyxNQUFkZ2MsUUFBbUJqQyw0QkFLVmhxQixpS0NqQ0EsU0FBU3FzQixZQUV0QixJQUFJM1UsVUFBeUIsSUFBWDRVLE9BQXlCQSxPQUFTQyxPQUNoREMsWUFBYzlVLEtBQUsyVSxXQUV2QkEsV0FBV0ksV0FBYSxXQUl0QixPQUhJL1UsS0FBSzJVLGFBQWVBLGFBQ3RCM1UsS0FBSzJVLFdBQWFHLGFBRWJILGlRQ05KLFNBQXVCNWQsY0FDNUIsSUFBTWllLGlCQUFtQmplLGNBQWdCQSxhQUFhLElBQU0sRUFDdERrZSxnQkFBZWhlLE1BQUFDLGtCQUVyQixHQUFJOGQsbUJBQXFCQyxnQkFBaUIsQ0FDeEMsR0FBSUQsaUJBQW1CQyxnQkFBaUIsQ0FDdEMsSUFBTUMsZ0JBQWtCamUsTUFBQUUsaUJBQWlCOGQsaUJBQ25DRSxpQkFBbUJsZSxNQUFBRSxpQkFBaUI2ZCxrQkFDMUMsTUFBTSxJQUFBbHNCLFlBQUEsUUFBYyw2SUFDMENvc0IsZ0JBQWtCLG9EQUFzREMsaUJBQW1CLE1BR3pKLE1BQU0sSUFBQXJzQixZQUFBLFFBQWMsd0lBQ3NDaU8sYUFBYSxHQUFLLHlCQUszRSxTQUFrQjdJLGFBQWNSLEtBRXJDLElBQUtBLElBQ0gsTUFBTSxJQUFBNUUsWUFBQSxRQUFjLHFDQUV0QixJQUFLb0YsZUFBaUJBLGFBQWF5SyxLQUNqQyxNQUFNLElBQUE3UCxZQUFBLFFBQWMsbUNBQXFDb0YsY0FHM0RBLGFBQWF5SyxLQUFLdEgsVUFBWW5ELGFBQWEwSyxPQUkzQ2xMLElBQUl2RyxHQUFHaXVCLGNBQWNsbkIsYUFBYWMsVUFvQ2xDLElBQUlvakIsVUFBWSxDQUNkMWYsT0FBUSxTQUFTdkYsSUFBS3pFLE1BQ3BCLEtBQU1BLFFBQVF5RSxLQUNaLE1BQU0sSUFBQXJFLFlBQUEsUUFBYyxJQUFNSixLQUFPLG9CQUFzQnlFLEtBRXpELE9BQU9BLElBQUl6RSxPQUVieUgsT0FBUSxTQUFTMUIsT0FBUS9GLE1BRXZCLElBREEsSUFBTTRDLElBQU1tRCxPQUFPMUosT0FDVlgsRUFBSSxFQUFHQSxFQUFJa0gsSUFBS2xILElBQ3ZCLEdBQUlxSyxPQUFPckssSUFBeUIsTUFBbkJxSyxPQUFPckssR0FBR3NFLE1BQ3pCLE9BQU8rRixPQUFPckssR0FBR3NFLE9BSXZCMnNCLE9BQVEsU0FBUzFhLFFBQVN4TSxTQUN4QixNQUEwQixtQkFBWndNLFFBQXlCQSxRQUFRN1YsS0FBS3FKLFNBQVd3TSxTQUdqRXpULGlCQUFrQlIsTUFBTVEsaUJBQ3hCMlcsY0F0REYsU0FBOEI1VSxRQUFTa0YsUUFBUzNJLFNBQzFDQSxRQUFRa0UsT0FDVnlFLFFBQVV6SCxNQUFNRyxPQUFPLEdBQUlzSCxRQUFTM0ksUUFBUWtFLE1BQ3hDbEUsUUFBUWtYLE1BQ1ZsWCxRQUFRa1gsSUFBSSxJQUFLLElBSXJCelQsUUFBVXlFLElBQUl2RyxHQUFHbXVCLGVBQWV4d0IsS0FBS2lELEtBQU1rQixRQUFTa0YsUUFBUzNJLFNBQzdELElBQUk4SyxPQUFTNUMsSUFBSXZHLEdBQUcwVyxjQUFjL1ksS0FBS2lELEtBQU1rQixRQUFTa0YsUUFBUzNJLFNBRWpELE1BQVY4SyxRQUFrQjVDLElBQUlwSSxVQUN4QkUsUUFBUXFDLFNBQVNyQyxRQUFRa0QsTUFBUWdGLElBQUlwSSxRQUFRMkQsUUFBU2lGLGFBQWE2SyxnQkFBaUJyTCxLQUNwRjRDLE9BQVM5SyxRQUFRcUMsU0FBU3JDLFFBQVFrRCxNQUFNeUYsUUFBUzNJLFVBRW5ELENBQUEsR0FBYyxNQUFWOEssT0FjRixNQUFNLElBQUF4SCxZQUFBLFFBQWMsZUFBaUJ0RCxRQUFRa0QsS0FBTyw0REFicEQsR0FBSWxELFFBQVFvTSxPQUFRLENBRWxCLElBREEsSUFBSStiLE1BQVFyZCxPQUFPbVAsTUFBTSxNQUNoQnJiLEVBQUksRUFBR3dQLEVBQUkrWixNQUFNNW9CLE9BQVFYLEVBQUl3UCxJQUMvQitaLE1BQU12cEIsSUFBTUEsRUFBSSxJQUFNd1AsR0FEWXhQLElBS3ZDdXBCLE1BQU12cEIsR0FBS29CLFFBQVFvTSxPQUFTK2IsTUFBTXZwQixHQUVwQ2tNLE9BQVNxZCxNQUFNMWhCLEtBQUssTUFFdEIsT0FBT3FFLFNBNkJUM0gsR0FBSSxTQUFTdkUsR0FDWCxJQUFJaUgsSUFBTTZDLGFBQWE5SixHQUV2QixPQURBaUgsSUFBSWdHLFVBQVluRCxhQUFhOUosRUFBSSxNQUMxQmlILEtBR1RxTSxTQUFVLEdBQ1ZqSSxRQUFTLFNBQVNyTCxFQUFHdUosS0FBTTRuQixvQkFBcUIvbUIsWUFBYUMsUUFDM0QsSUFBSSttQixlQUFpQnp0QixLQUFLMlAsU0FBU3RULEdBQy9CdUUsR0FBS1osS0FBS1ksR0FBR3ZFLEdBTWpCLE9BTEl1SixNQUFRYyxRQUFVRCxhQUFlK21CLG9CQUNuQ0MsZUFBaUJDLFlBQVkxdEIsS0FBTTNELEVBQUd1RSxHQUFJZ0YsS0FBTTRuQixvQkFBcUIvbUIsWUFBYUMsUUFDeEUrbUIsaUJBQ1ZBLGVBQWlCenRCLEtBQUsyUCxTQUFTdFQsR0FBS3F4QixZQUFZMXRCLEtBQU0zRCxFQUFHdUUsS0FFcEQ2c0IsZ0JBR1Q3bkIsS0FBTSxTQUFTSixNQUFPdEQsT0FDcEIsS0FBT3NELE9BQVN0RCxTQUNkc0QsTUFBUUEsTUFBTW1vQixRQUVoQixPQUFPbm9CLE9BRVRqQixNQUFPLFNBQVNnSSxNQUFPcWhCLFFBQ3JCLElBQUl4b0IsSUFBTW1ILE9BQVNxaEIsT0FNbkIsT0FKSXJoQixPQUFTcWhCLFFBQVdyaEIsUUFBVXFoQixTQUNoQ3hvQixJQUFNekcsTUFBTUcsT0FBTyxHQUFJOHVCLE9BQVFyaEIsUUFHMUJuSCxLQUdUeW9CLFlBQWFqRCxPQUFPa0QsS0FBSyxJQUV6QkMsS0FBTXBvQixJQUFJdkcsR0FBRzJ1QixLQUNiL2UsYUFBYzdJLGFBQWFjLFVBRzdCLFNBQVMzRCxJQUFJOEMsYUFBUzNJLFFBQU9vSCxVQUFBN0gsUUFBQSxRQUFBNEYsSUFBQWlDLFVBQUEsR0FBRyxHQUFFQSxVQUFBLEdBQzVCZSxLQUFPbkksUUFBUW1JLEtBRW5CdEMsSUFBSWdELE9BQU83SSxVQUNOQSxRQUFReUQsU0FBV2lGLGFBQWE0SyxVQUNuQ25MLEtBK0hOLFNBQWtCUSxRQUFTUixNQUNwQkEsTUFBVSxTQUFVQSxRQUN2QkEsS0FBT0EsS0FBT3NKLE1BQUE1TixZQUFZc0UsTUFBUSxJQUM3QnFTLEtBQU83UixTQUVkLE9BQU9SLEtBcElJb29CLENBQVM1bkIsUUFBU1IsT0FFM0IsSUFBSWMsWUFBTTlELEVBQ042RCxZQUFjTixhQUFhb0ssZUFBaUIsUUFBSzNOLEVBU3JELFNBQVNnTyxLQUFLeEssU0FDWixNQUFPLEdBQUtELGFBQWF5SyxLQUFLeVosVUFBV2prQixRQUFTaWtCLFVBQVV4cUIsUUFBU3dxQixVQUFVdnFCLFNBQVU4RixLQUFNYSxZQUFhQyxRQUc5RyxPQVpJUCxhQUFhTCxZQUViWSxPQURFakosUUFBUWlKLE9BQ0ROLFNBQVczSSxRQUFRaUosT0FBTyxHQUFLLENBQUNOLFNBQVNvTCxPQUFPL1QsUUFBUWlKLFFBQVVqSixRQUFRaUosT0FFMUUsQ0FBQ04sV0FPZHdLLEtBQU9xZCxrQkFBa0I5bkIsYUFBYXlLLEtBQU1BLEtBQU15WixVQUFXNXNCLFFBQVFpSixRQUFVLEdBQUlkLEtBQU1hLGNBQzdFTCxRQUFTM0ksU0ErQnZCLE9BN0JBNkYsSUFBSTRxQixPQUFRLEVBRVo1cUIsSUFBSWdELE9BQVMsU0FBUzdJLFNBQ2ZBLFFBQVF5RCxTQVVYbXBCLFVBQVV4cUIsUUFBVXBDLFFBQVFvQyxRQUM1QndxQixVQUFVdnFCLFNBQVdyQyxRQUFRcUMsU0FDN0J1cUIsVUFBVXRxQixXQUFhdEMsUUFBUXNDLGFBWC9Cc3FCLFVBQVV4cUIsUUFBVXdxQixVQUFVOWxCLE1BQU05RyxRQUFRb0MsUUFBUzhGLElBQUk5RixTQUVyRHNHLGFBQWFxQyxhQUNmNmhCLFVBQVV2cUIsU0FBV3VxQixVQUFVOWxCLE1BQU05RyxRQUFRcUMsU0FBVTZGLElBQUk3RixZQUV6RHFHLGFBQWFxQyxZQUFjckMsYUFBYXFELGlCQUMxQzZnQixVQUFVdHFCLFdBQWFzcUIsVUFBVTlsQixNQUFNOUcsUUFBUXNDLFdBQVk0RixJQUFJNUYsZUFTckV1RCxJQUFJa0QsT0FBUyxTQUFTbkssRUFBR3VKLEtBQU1hLFlBQWFDLFFBQzFDLEdBQUlQLGFBQWFvSyxpQkFBbUI5SixZQUNsQyxNQUFNLElBQUExRixZQUFBLFFBQWMsMEJBRXRCLEdBQUlvRixhQUFhTCxZQUFjWSxPQUM3QixNQUFNLElBQUEzRixZQUFBLFFBQWMsMkJBR3RCLE9BQU8yc0IsWUFBWXJELFVBQVdodUIsRUFBRzhKLGFBQWE5SixHQUFJdUosS0FBTSxFQUFHYSxZQUFhQyxTQUVuRXBELDREQTBCRixTQUF3QnBDLFFBQVNrRixRQUFTM0ksU0FDMUN5RCxRQU1PQSxRQUFRbkUsTUFBU1UsUUFBUWtELE9BRW5DbEQsUUFBUWtELEtBQU9PLFFBQ2ZBLFFBQVV6RCxRQUFRcUMsU0FBU29CLFVBUHpCQSxRQURtQixtQkFBakJ6RCxRQUFRa0QsS0FDQWxELFFBQVFtSSxLQUFLLGlCQUVibkksUUFBUXFDLFNBQVNyQyxRQUFRa0QsTUFPdkMsT0FBT08sK0JBR0YsU0FBdUJBLFFBQVNrRixRQUFTM0ksU0FFOUMsSUFBTTB3QixvQkFBc0Ixd0IsUUFBUW1JLE1BQVFuSSxRQUFRbUksS0FBSyxpQkFDekRuSSxRQUFReUQsU0FBVSxFQUNkekQsUUFBUWtYLE1BQ1ZsWCxRQUFRbUksS0FBSzJsQixZQUFjOXRCLFFBQVFrWCxJQUFJLElBQU1sWCxRQUFRbUksS0FBSzJsQixhQUc1RCxJQUFJdmhCLGtCQUFZcEgsRUFDWm5GLFFBQVFtRCxJQUFNbkQsUUFBUW1ELEtBQU9tdEIsaUJBQy9CdHdCLFFBQVFtSSxLQUFPc0osTUFBQTVOLFlBQVk3RCxRQUFRbUksTUFFbkMsSUFBSWhGLEdBQUtuRCxRQUFRbUQsR0FDakJvSixhQUFldk0sUUFBUW1JLEtBQUssaUJBQW1CLFNBQTZCUSxhQUFTM0ksUUFBT29ILFVBQUE3SCxRQUFBLFFBQUE0RixJQUFBaUMsVUFBQSxHQUFHLEdBQUVBLFVBQUEsR0FNL0YsT0FGQXBILFFBQVFtSSxLQUFPc0osTUFBQTVOLFlBQVk3RCxRQUFRbUksTUFDbkNuSSxRQUFRbUksS0FBSyxpQkFBbUJ1b0Isb0JBQ3pCdnRCLEdBQUd3RixRQUFTM0ksVUFFakJtRCxHQUFHZCxXQUNMckMsUUFBUXFDLFNBQVduQixNQUFNRyxPQUFPLEdBQUlyQixRQUFRcUMsU0FBVWMsR0FBR2QsbUJBSTdDOEMsSUFBWjFCLFNBQXlCOEksZUFDM0I5SSxRQUFVOEksY0FHWixDQUFBLFFBQWdCcEgsSUFBWjFCLFFBQ0YsTUFBTSxJQUFBSCxZQUFBLFFBQWMsZUFBaUJ0RCxRQUFRa0QsS0FBTyx1QkFDL0MsR0FBSU8sbUJBQW1Cd1AsU0FDNUIsT0FBT3hQLFFBQVFrRixRQUFTM0kscUNBblFoQmtCLDJNQUFLRCxTQUFNLCtCQUNELDRGQUMyQyxVQTBMMUQsU0FBU2d2QixZQUFZckQsVUFBV2h1QixFQUFHdUUsR0FBSWdGLEtBQU00bkIsb0JBQXFCL21CLFlBQWFDLFFBQ3BGLFNBQVMwbkIsS0FBS2hvQixhQUFTM0ksUUFBT29ILFVBQUE3SCxRQUFBLFFBQUE0RixJQUFBaUMsVUFBQSxHQUFHLEdBQUVBLFVBQUEsR0FDN0J3cEIsY0FBZ0IzbkIsT0FLcEIsT0FKSUEsUUFBVU4sU0FBV00sT0FBTyxJQUFRTixVQUFZaWtCLFVBQVV3RCxhQUE2QixPQUFkbm5CLE9BQU8sS0FDbEYybkIsY0FBZ0IsQ0FBQ2pvQixTQUFTb0wsT0FBTzlLLFNBRzVCOUYsR0FBR3lwQixVQUNOamtCLFFBQ0Fpa0IsVUFBVXhxQixRQUFTd3FCLFVBQVV2cUIsU0FDN0JyQyxRQUFRbUksTUFBUUEsS0FDaEJhLGFBQWUsQ0FBQ2hKLFFBQVFnSixhQUFhK0ssT0FBTy9LLGFBQzVDNG5CLGVBUU4sT0FMQUQsS0FBT0gsa0JBQWtCcnRCLEdBQUl3dEIsS0FBTS9ELFVBQVczakIsT0FBUWQsS0FBTWEsY0FFdkRpQixRQUFVckwsRUFDZit4QixLQUFLbHNCLE1BQVF3RSxPQUFTQSxPQUFPMUosT0FBUyxFQUN0Q294QixLQUFLM25CLFlBQWMrbUIscUJBQXVCLEVBQ25DWSxLQXVERixTQUFTTCxPQUFTLE1BQU8sR0FVaEMsU0FBU0Usa0JBQWtCcnRCLEdBQUl3dEIsS0FBTS9ELFVBQVczakIsT0FBUWQsS0FBTWEsYUFDNUQsR0FBSTdGLEdBQUcwSSxVQUFXLENBQ2hCLElBQUk4Z0IsTUFBUSxHQUNaZ0UsS0FBT3h0QixHQUFHMEksVUFBVThrQixLQUFNaEUsTUFBT0MsVUFBVzNqQixRQUFVQSxPQUFPLEdBQUlkLEtBQU1hLFlBQWFDLFFBQ3BGL0gsTUFBTUcsT0FBT3N2QixLQUFNaEUsT0FFckIsT0FBT2dFLHFHQ3RSVCxTQUFTcnZCLFdBQVdzTSxRQUNsQnJMLEtBQUtxTCxPQUFTQSw2QkFHaEJ0TSxXQUFXc0IsVUFBVVMsU0FBVy9CLFdBQVdzQixVQUFVaXVCLE9BQVMsV0FDNUQsTUFBTyxHQUFLdHVCLEtBQUtxTCx3QkFHSnRNLDZKQzRDUixTQUFpQjJwQixNQUFPbGpCLE9BQzdCLElBQUssSUFBSW5KLEVBQUksRUFBR2tILElBQU1tbEIsTUFBTTFyQixPQUFRWCxFQUFJa0gsSUFBS2xILElBQzNDLEdBQUlxc0IsTUFBTXJzQixLQUFPbUosTUFDZixPQUFPbkosRUFHWCxPQUFRLDRCQUlILFNBQTBCZ1AsUUFDL0IsR0FBc0IsaUJBQVhBLE9BQXFCLENBRTlCLEdBQUlBLFFBQVVBLE9BQU9pakIsT0FDbkIsT0FBT2pqQixPQUFPaWpCLFNBQ1QsR0FBYyxNQUFWampCLE9BQ1QsTUFBTyxHQUNGLElBQUtBLE9BQ1YsT0FBT0EsT0FBUyxHQU1sQkEsT0FBUyxHQUFLQSxPQUdoQixPQUFLa2pCLFNBQVN6c0IsS0FBS3VKLFFBQ1pBLE9BQU9uRyxRQUFRc3BCLFNBQVVDLFlBREtwakIsd0JBSWhDLFNBQWlCN0YsT0FDdEIsT0FBS0EsT0FBbUIsSUFBVkEsVUFFSG5DLFFBQVFtQyxRQUEyQixJQUFqQkEsTUFBTXhJLDZCQU85QixTQUFxQjJyQixRQUMxQixJQUFJK0YsTUFBUTV2QixPQUFPLEdBQUk2cEIsUUFFdkIsT0FEQStGLE1BQU1mLFFBQVVoRixPQUNUK0YsMkJBR0YsU0FBcUJodEIsT0FBUWlULEtBRWxDLE9BREFqVCxPQUFPRyxLQUFPOFMsSUFDUGpULGtDQUdGLFNBQTJCNnBCLFlBQWF0VixJQUM3QyxPQUFRc1YsWUFBY0EsWUFBYyxJQUFNLElBQU10VixJQTFHbEQsSUFBTTBZLE9BQVMsQ0FDYkMsSUFBSyxRQUNMQyxJQUFLLE9BQ0xDLElBQUssT0FDTEMsSUFBSyxTQUNMQyxJQUFLLFNBQ0xDLElBQUssU0FDTEMsSUFBSyxVQUdEVixTQUFXLGFBQ1hELFNBQVcsWUFFakIsU0FBU0UsV0FBV1UsS0FDbEIsT0FBT1IsT0FBT1EsS0FHVCxTQUFTcndCLE9BQU9zRyxLQUNyQixJQUFLLElBQUkvSSxFQUFJLEVBQUdBLEVBQUl3SSxVQUFVN0gsT0FBUVgsSUFDcEMsSUFBSyxJQUFJaUosT0FBT1QsVUFBVXhJLEdBQ3BCdXVCLE9BQU92cUIsVUFBVWtGLGVBQWV4SSxLQUFLOEgsVUFBVXhJLEdBQUlpSixPQUNyREYsSUFBSUUsS0FBT1QsVUFBVXhJLEdBQUdpSixNQUs5QixPQUFPRixJQUdGLElBQUl0RSxTQUFXOHBCLE9BQU92cUIsVUFBVVMsbUNBS3ZDLElBQUkrcUIsV0FBYSxTQUFTcm1CLE9BQ3hCLE1BQXdCLG1CQUFWQSxPQUlacW1CLFdBQVcsT0FDYi91QixRQUlNK3VCLFdBSk5BLFdBQWEsU0FBU3JtQixPQUNwQixNQUF3QixtQkFBVkEsT0FBaUQsc0JBQXpCMUUsU0FBUy9ELEtBQUt5SSxpQkFHaERxbUIsV0FBQUEsV0FJRCxJQUFNeG9CLFFBQVU0aEIsTUFBTTVoQixTQUFXLFNBQVNtQyxPQUMvQyxTQUFPQSxPQUEyQixpQkFBVkEsUUFBK0MsbUJBQXpCMUUsU0FBUy9ELEtBQUt5SSwwRUMzQzlELElBQUFxUyxXQUFBcmIsUUFBQSwwQkFBQSxRQUVBNHlCLFFBQUE1eUIsUUFBQSwyQ0FPQSxTQUFBNnlCLFVBQUFueUIsT0FBQW95QixVQUNBLElBQ0FDLGVBREEveUIsUUFBQSxNQUNBZ3pCLGFBQUFGLFNBQUEsUUFDQXB5QixPQUFBSixRQUFBK2EsV0FBQXRhLFFBQUFneUIsZ0JBVEExWCxXQUFBNFAsYUFBQTJILFFBQUEzSCxhQUNBNVAsV0FBQTRYLE1BQUFMLFFBQUFLLE1BRUF2eUIsT0FBQUosUUFBQSthLGdCQVNBLElBQUFyYixTQUFBQSxRQUFBa3pCLGFBQ0FsekIsUUFBQWt6QixXQUFBLGVBQUFMLFVBQ0E3eUIsUUFBQWt6QixXQUFBLFFBQUFMLGlJQ2hCQSxJQUFBTSxLQUFBbnpCLFFBQUEsVUFDQW96QixJQUFBaEYsT0FBQXZxQixVQUFBa0YsZUFDQXNxQixhQUFBLG9CQUFBQyxJQVFBLFNBQUFDLFdBQ0EvdkIsS0FBQWd3QixPQUFBLEdBQ0Fod0IsS0FBQWl3QixLQUFBSixhQUFBLElBQUFDLElBQUFsRixPQUFBdnRCLE9BQUEsTUFNQTB5QixTQUFBRyxVQUFBLFNBQUFDLE9BQUFDLGtCQUVBLElBREEsSUFBQUMsSUFBQSxJQUFBTixTQUNBMXpCLEVBQUEsRUFBQWtILElBQUE0c0IsT0FBQW56QixPQUFBWCxFQUFBa0gsSUFBQWxILElBQ0FnMEIsSUFBQXBzQixJQUFBa3NCLE9BQUE5ekIsR0FBQSt6QixrQkFFQSxPQUFBQyxLQVNBTixTQUFBMXZCLFVBQUFpd0IsS0FBQSxXQUNBLE9BQUFULGFBQUE3dkIsS0FBQWl3QixLQUFBSyxLQUFBMUYsT0FBQTJGLG9CQUFBdndCLEtBQUFpd0IsTUFBQWp6QixRQVFBK3lCLFNBQUExdkIsVUFBQTRELElBQUEsU0FBQXVzQixLQUFBSixrQkFDQSxJQUFBSyxLQUFBWixhQUFBVyxLQUFBYixLQUFBZSxZQUFBRixNQUNBRyxZQUFBZCxhQUFBN3ZCLEtBQUE0dkIsSUFBQVksTUFBQVosSUFBQTd5QixLQUFBaUQsS0FBQWl3QixLQUFBUSxNQUNBaEcsSUFBQXpxQixLQUFBZ3dCLE9BQUFoekIsT0FDQTJ6QixjQUFBUCxrQkFDQXB3QixLQUFBZ3dCLE9BQUF4c0IsS0FBQWd0QixNQUVBRyxjQUNBZCxhQUNBN3ZCLEtBQUFpd0IsS0FBQUksSUFBQUcsS0FBQS9GLEtBRUF6cUIsS0FBQWl3QixLQUFBUSxNQUFBaEcsTUFVQXNGLFNBQUExdkIsVUFBQXV2QixJQUFBLFNBQUFZLE1BQ0EsR0FBQVgsYUFDQSxPQUFBN3ZCLEtBQUFpd0IsS0FBQUwsSUFBQVksTUFFQSxJQUFBQyxLQUFBZCxLQUFBZSxZQUFBRixNQUNBLE9BQUFaLElBQUE3eUIsS0FBQWlELEtBQUFpd0IsS0FBQVEsT0FTQVYsU0FBQTF2QixVQUFBbU0sUUFBQSxTQUFBZ2tCLE1BQ0EsR0FBQVgsYUFBQSxDQUNBLElBQUFwRixJQUFBenFCLEtBQUFpd0IsS0FBQVcsSUFBQUosTUFDQSxHQUFBLEdBQUEvRixJQUNBLE9BQUFBLFFBRUEsQ0FDQSxJQUFBZ0csS0FBQWQsS0FBQWUsWUFBQUYsTUFDQSxHQUFBWixJQUFBN3lCLEtBQUFpRCxLQUFBaXdCLEtBQUFRLE1BQ0EsT0FBQXp3QixLQUFBaXdCLEtBQUFRLE1BSUEsTUFBQSxJQUFBOXpCLE1BQUEsSUFBQTZ6QixLQUFBLHlCQVFBVCxTQUFBMXZCLFVBQUF3d0IsR0FBQSxTQUFBQyxNQUNBLEdBQUEsR0FBQUEsTUFBQUEsS0FBQTl3QixLQUFBZ3dCLE9BQUFoekIsT0FDQSxPQUFBZ0QsS0FBQWd3QixPQUFBYyxNQUVBLE1BQUEsSUFBQW4wQixNQUFBLHlCQUFBbTBCLE9BUUFmLFNBQUExdkIsVUFBQTB3QixRQUFBLFdBQ0EsT0FBQS93QixLQUFBZ3dCLE9BQUFycEIsU0FHQTdKLFFBQUFpekIsU0FBQUEsOERDbkZBLElBQUFpQixPQUFBeDBCLFFBQUEsWUFzREFNLFFBQUFtMEIsT0FBQSxTQUFBQyxRQU1BLElBTEEsSUFDQUMsTUFEQUMsUUFBQSxHQUdBQyxJQTNCQSxTQUFBSCxRQUNBLE9BQUFBLE9BQUEsRUFDQSxJQUFBQSxRQUFBLEdBQ0EsR0FBQUEsUUFBQSxHQXdCQUksQ0FBQUosUUFHQUMsTUF6Q0FJLEdBeUNBRixJQUVBLEdBREFBLE9BaERBLEtBb0RBRixPQWpEQSxJQW1EQUMsU0FBQUosT0FBQUMsT0FBQUUsT0FDQSxFQUFBRSxNQUVBLE9BQUFELFNBT0F0MEIsUUFBQTAwQixPQUFBLFNBQUFoQixLQUFBaUIsT0FBQUMsV0FDQSxJQUdBQyxhQUFBUixNQXZDQUQsT0FFQVUsUUFrQ0FDLE9BQUFyQixLQUFBeHpCLE9BQ0F1TCxPQUFBLEVBQ0FFLE1BQUEsRUFHQSxFQUFBLENBQ0EsR0FBQW9wQixRQUFBSixPQUNBLE1BQUEsSUFBQTkwQixNQUFBLDhDQUlBLElBQUEsS0FEQXcwQixNQUFBSCxPQUFBUSxPQUFBaEIsS0FBQXNCLFdBQUFMLFlBRUEsTUFBQSxJQUFBOTBCLE1BQUEseUJBQUE2ekIsS0FBQXRqQixPQUFBdWtCLE9BQUEsSUFHQUUsZ0JBN0VBLEdBNkVBUixPQUVBNW9CLFNBREE0b0IsT0EzRUFJLEtBNEVBOW9CLE1BQ0FBLE9BbkZBLFFBb0ZBa3BCLGNBRUFELFVBQUFsc0IsT0F2REFvc0IsU0FGQVYsT0F5REEzb0IsU0F2REEsRUFEQSxJQUFBLEVBQUEyb0IsU0FHQVUsUUFDQUEsU0FxREFGLFVBQUFLLEtBQUFOLCtEQ25JQSxJQUFBTyxhQUFBLG1FQUFBdGEsTUFBQSxJQUtBNWEsUUFBQW0wQixPQUFBLFNBQUExbEIsUUFDQSxHQUFBLEdBQUFBLFFBQUFBLE9BQUF5bUIsYUFBQWgxQixPQUNBLE9BQUFnMUIsYUFBQXptQixRQUVBLE1BQUEsSUFBQTBtQixVQUFBLDZCQUFBMW1CLFNBT0F6TyxRQUFBMDBCLE9BQUEsU0FBQVUsVUFpQkEsT0FoQkEsSUFnQkFBLFVBQUFBLFVBZkEsR0FnQkFBLFNBakJBLEdBR0EsSUFrQkFBLFVBQUFBLFVBakJBLElBa0JBQSxTQW5CQSxHQVNBLEdBTkEsSUFvQkFBLFVBQUFBLFVBbkJBLEdBb0JBQSxTQXJCQSxHQU9BLEdBSkEsSUFzQkFBLFNBQ0EsR0F0QkEsSUEwQkFBLFNBQ0EsSUFJQSw2Q0MxREFwMUIsUUFBQXExQixxQkFBQSxFQUNBcjFCLFFBQUFzMUIsa0JBQUEsRUFnRkF0MUIsUUFBQXUxQixPQUFBLFNBQUFDLFFBQUFDLFVBQUFDLFNBQUFDLE9BQ0EsR0FBQSxJQUFBRixVQUFBdjFCLE9BQ0EsT0FBQSxFQUdBLElBQUFzWixNQXRFQSxTQUFBb2MsZ0JBQUFDLEtBQUFDLE1BQUFOLFFBQUFDLFVBQUFDLFNBQUFDLE9BVUEsSUFBQUksSUFBQUMsS0FBQUMsT0FBQUgsTUFBQUQsTUFBQSxHQUFBQSxLQUNBSyxJQUFBUixTQUFBRixRQUFBQyxVQUFBTSxNQUFBLEdBQ0EsT0FBQSxJQUFBRyxJQUVBSCxJQUVBLEVBQUFHLElBRUEsRUFBQUosTUFBQUMsSUFFQUgsZ0JBQUFHLElBQUFELE1BQUFOLFFBQUFDLFVBQUFDLFNBQUFDLE9BS0FBLE9BQUEzMUIsUUFBQXMxQixrQkFDQVEsTUFBQUwsVUFBQXYxQixPQUFBNDFCLE9BQUEsRUFFQUMsSUFLQSxFQUFBQSxJQUFBRixLQUVBRCxnQkFBQUMsS0FBQUUsSUFBQVAsUUFBQUMsVUFBQUMsU0FBQUMsT0FJQUEsT0FBQTMxQixRQUFBczFCLGtCQUNBUyxJQUVBRixLQUFBLEdBQUEsRUFBQUEsS0E0QkFELEVBQUEsRUFBQUgsVUFBQXYxQixPQUFBczFCLFFBQUFDLFVBQ0FDLFNBQUFDLE9BQUEzMUIsUUFBQXExQixzQkFDQSxHQUFBN2IsTUFBQSxFQUNBLE9BQUEsRUFNQSxLQUFBLEdBQUFBLE1BQUEsR0FDQSxJQUFBa2MsU0FBQUQsVUFBQWpjLE9BQUFpYyxVQUFBamMsTUFBQSxJQUFBLE1BR0FBLE1BR0EsT0FBQUEsaURDdEdBLElBQUFxWixLQUFBbnpCLFFBQUEsVUFxQkEsU0FBQXkyQixjQUNBanpCLEtBQUFnd0IsT0FBQSxHQUNBaHdCLEtBQUFrekIsU0FBQSxFQUVBbHpCLEtBQUFtekIsTUFBQSxDQUFBQyxlQUFBLEVBQUFDLGdCQUFBLEdBU0FKLFlBQUE1eUIsVUFBQWl6QixnQkFDQSxTQUFBQyxVQUFBQyxVQUNBeHpCLEtBQUFnd0IsT0FBQXlELFFBQUFGLFVBQUFDLFdBUUFQLFlBQUE1eUIsVUFBQTRELElBQUEsU0FBQXl2QixVQXRDQSxJQUFBQyxTQUFBQyxTQUVBQyxNQUNBQyxNQUNBQyxRQUNBQyxRQUxBTCxTQXVDQTN6QixLQUFBbXpCLE1BdkNBUyxTQXVDQUYsU0FyQ0FHLE1BQUFGLFNBQUFQLGNBQ0FVLE1BQUFGLFNBQUFSLGNBQ0FXLFFBQUFKLFNBQUFOLGdCQUNBVyxRQUFBSixTQUFBUCxnQkFDQVEsTUFBQUMsT0FBQUEsT0FBQUQsT0FBQUUsU0FBQUMsU0FDQXJFLEtBQUFzRSxvQ0FBQU4sU0FBQUMsV0FBQSxFQWlDQTV6QixLQUFBbXpCLE1BQUFPLFNBR0ExekIsS0FBQWt6QixTQUFBLEVBRkFsekIsS0FBQWd3QixPQUFBeHNCLEtBQUFrd0IsV0FnQkFULFlBQUE1eUIsVUFBQTB3QixRQUFBLFdBS0EsT0FKQS93QixLQUFBa3pCLFVBQ0FsekIsS0FBQWd3QixPQUFBa0UsS0FBQXZFLEtBQUFzRSxxQ0FDQWowQixLQUFBa3pCLFNBQUEsR0FFQWx6QixLQUFBZ3dCLFFBR0FsekIsUUFBQW0yQixZQUFBQSxpRUNuREEsU0FBQWtCLEtBQUFDLElBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsS0FBQUgsSUFBQUMsR0FDQUQsSUFBQUMsR0FBQUQsSUFBQUUsR0FDQUYsSUFBQUUsR0FBQUMsS0EyQkEsU0FBQUMsWUFBQUosSUFBQUssV0FBQTUzQixFQUFBYixHQUtBLEdBQUFhLEVBQUFiLEVBQUEsQ0FZQSxJQUNBSyxFQUFBUSxFQUFBLEVBRUFzM0IsS0FBQUMsS0FwQ0FNLElBaUNBNzNCLEVBakNBODNCLEtBaUNBMzRCLEVBaENBODJCLEtBQUE4QixNQUFBRixJQUFBNUIsS0FBQStCLFVBQUFGLEtBQUFELE9BbUNBMTRCLEdBU0EsSUFSQSxJQUFBODRCLE1BQUFWLElBQUFwNEIsR0FRQTh2QixFQUFBanZCLEVBQUFpdkIsRUFBQTl2QixFQUFBOHZCLElBQ0EySSxXQUFBTCxJQUFBdEksR0FBQWdKLFFBQUEsR0FFQVgsS0FBQUMsSUFEQS8zQixHQUFBLEVBQ0F5dkIsR0FJQXFJLEtBQUFDLElBQUEvM0IsRUFBQSxFQUFBeXZCLEdBQ0EsSUFBQWlKLEVBQUExNEIsRUFBQSxFQUlBbTRCLFlBQUFKLElBQUFLLFdBQUE1M0IsRUFBQWs0QixFQUFBLEdBQ0FQLFlBQUFKLElBQUFLLFdBQUFNLEVBQUEsRUFBQS80QixHQTFEQSxJQUFBMDRCLElBQUFDLEtBc0VBNzNCLFFBQUFrNEIsVUFBQSxTQUFBWixJQUFBSyxZQUNBRCxZQUFBSixJQUFBSyxXQUFBLEVBQUFMLElBQUFwM0IsT0FBQSw4Q0N6R0EsSUFBQTJ5QixLQUFBbnpCLFFBQUEsVUFDQXk0QixhQUFBejRCLFFBQUEsbUJBQ0F1ekIsU0FBQXZ6QixRQUFBLGVBQUF1ekIsU0FDQW1GLFVBQUExNEIsUUFBQSxnQkFDQXc0QixVQUFBeDRCLFFBQUEsZ0JBQUF3NEIsVUFFQSxTQUFBRyxrQkFBQUMsV0FBQUMsZUFDQSxJQUFBQyxVQUFBRixXQUtBLE1BSkEsaUJBQUFBLGFBQ0FFLFVBQUEzRixLQUFBNEYsb0JBQUFILGFBR0EsTUFBQUUsVUFBQUUsU0FDQSxJQUFBQyx5QkFBQUgsVUFBQUQsZUFDQSxJQUFBSyx1QkFBQUosVUFBQUQsZUEwUUEsU0FBQUssdUJBQUFOLFdBQUFDLGVBQ0EsSUFBQUMsVUFBQUYsV0FDQSxpQkFBQUEsYUFDQUUsVUFBQTNGLEtBQUE0RixvQkFBQUgsYUFHQSxJQUFBTyxRQUFBaEcsS0FBQWlHLE9BQUFOLFVBQUEsV0FDQU8sUUFBQWxHLEtBQUFpRyxPQUFBTixVQUFBLFdBR0FRLE1BQUFuRyxLQUFBaUcsT0FBQU4sVUFBQSxRQUFBLElBQ0FTLFdBQUFwRyxLQUFBaUcsT0FBQU4sVUFBQSxhQUFBLE1BQ0FVLGVBQUFyRyxLQUFBaUcsT0FBQU4sVUFBQSxpQkFBQSxNQUNBVyxTQUFBdEcsS0FBQWlHLE9BQUFOLFVBQUEsWUFDQXJrQixLQUFBMGUsS0FBQWlHLE9BQUFOLFVBQUEsT0FBQSxNQUlBLEdBQUFLLFNBQUEzMUIsS0FBQWsyQixTQUNBLE1BQUEsSUFBQXY1QixNQUFBLHdCQUFBZzVCLFNBR0FJLGFBQ0FBLFdBQUFwRyxLQUFBd0csVUFBQUosYUFHQUYsUUFBQUEsUUFDQTFrQixJQUFBaWxCLFFBSUFqbEIsSUFBQXdlLEtBQUF3RyxXQUtBaGxCLElBQUEsU0FBQXZOLFFBQ0EsT0FBQW15QixZQUFBcEcsS0FBQTBHLFdBQUFOLGFBQUFwRyxLQUFBMEcsV0FBQXp5QixRQUNBK3JCLEtBQUEyRyxTQUFBUCxXQUFBbnlCLFFBQ0FBLFNBT0E1RCxLQUFBdTJCLE9BQUF4RyxTQUFBRyxVQUFBNEYsTUFBQTNrQixJQUFBaWxCLFNBQUEsR0FDQXAyQixLQUFBdzJCLFNBQUF6RyxTQUFBRyxVQUFBMkYsU0FBQSxHQUVBNzFCLEtBQUF5MkIsaUJBQUF6MkIsS0FBQXcyQixTQUFBekYsVUFBQTVmLElBQUEsU0FBQXVsQixHQUNBLE9BQUEvRyxLQUFBZ0gsaUJBQUFaLFdBQUFXLEVBQUFyQixpQkFHQXIxQixLQUFBKzFCLFdBQUFBLFdBQ0EvMUIsS0FBQWcyQixlQUFBQSxlQUNBaDJCLEtBQUE0MkIsVUFBQVgsU0FDQWoyQixLQUFBNjJCLGNBQUF4QixjQUNBcjFCLEtBQUFpUixLQUFBQSxLQTRHQSxTQUFBNmxCLFVBQ0E5MkIsS0FBQW96QixjQUFBLEVBQ0FwekIsS0FBQXF6QixnQkFBQSxFQUNBcnpCLEtBQUE0RCxPQUFBLEtBQ0E1RCxLQUFBKzJCLGFBQUEsS0FDQS8yQixLQUFBZzNCLGVBQUEsS0FDQWgzQixLQUFBVyxLQUFBLEtBa2FBLFNBQUE4MEIseUJBQUFMLFdBQUFDLGVBQ0EsSUFBQUMsVUFBQUYsV0FDQSxpQkFBQUEsYUFDQUUsVUFBQTNGLEtBQUE0RixvQkFBQUgsYUFHQSxJQUFBTyxRQUFBaEcsS0FBQWlHLE9BQUFOLFVBQUEsV0FDQUUsU0FBQTdGLEtBQUFpRyxPQUFBTixVQUFBLFlBRUEsR0FBQUssU0FBQTMxQixLQUFBazJCLFNBQ0EsTUFBQSxJQUFBdjVCLE1BQUEsd0JBQUFnNUIsU0FHQTMxQixLQUFBdzJCLFNBQUEsSUFBQXpHLFNBQ0EvdkIsS0FBQXUyQixPQUFBLElBQUF4RyxTQUVBLElBQUFrSCxXQUFBLENBQ0FwekIsTUFBQSxFQUNBQyxPQUFBLEdBRUE5RCxLQUFBazNCLFVBQUExQixTQUFBcmtCLElBQUEsU0FBQXVsQixHQUNBLEdBQUFBLEVBQUFTLElBR0EsTUFBQSxJQUFBeDZCLE1BQUEsc0RBRUEsSUFBQThvQixPQUFBa0ssS0FBQWlHLE9BQUFjLEVBQUEsVUFDQVUsV0FBQXpILEtBQUFpRyxPQUFBblEsT0FBQSxRQUNBNFIsYUFBQTFILEtBQUFpRyxPQUFBblEsT0FBQSxVQUVBLEdBQUEyUixXQUFBSCxXQUFBcHpCLE1BQ0F1ekIsYUFBQUgsV0FBQXB6QixNQUFBd3pCLGFBQUFKLFdBQUFuekIsT0FDQSxNQUFBLElBQUFuSCxNQUFBLHdEQUlBLE9BRkFzNkIsV0FBQXhSLE9BRUEsQ0FDQTZSLGdCQUFBLENBR0FsRSxjQUFBZ0UsV0FBQSxFQUNBL0QsZ0JBQUFnRSxhQUFBLEdBRUFFLFNBQUEsSUFBQXBDLGtCQUFBeEYsS0FBQWlHLE9BQUFjLEVBQUEsT0FBQXJCLGtCQS8zQkFGLGtCQUFBcUMsY0FBQSxTQUFBcEMsV0FBQUMsZUFDQSxPQUFBSyx1QkFBQThCLGNBQUFwQyxXQUFBQyxnQkFNQUYsa0JBQUE5MEIsVUFBQTYxQixTQUFBLEVBZ0NBZixrQkFBQTkwQixVQUFBbzNCLG9CQUFBLEtBQ0E3TSxPQUFBQyxlQUFBc0ssa0JBQUE5MEIsVUFBQSxxQkFBQSxDQUNBcTNCLGNBQUEsRUFDQTVNLFlBQUEsRUFDQThGLElBQUEsV0FLQSxPQUpBNXdCLEtBQUF5M0IscUJBQ0F6M0IsS0FBQTIzQixlQUFBMzNCLEtBQUE0MkIsVUFBQTUyQixLQUFBKzFCLFlBR0EvMUIsS0FBQXkzQix1QkFJQXRDLGtCQUFBOTBCLFVBQUF1M0IsbUJBQUEsS0FDQWhOLE9BQUFDLGVBQUFzSyxrQkFBQTkwQixVQUFBLG9CQUFBLENBQ0FxM0IsY0FBQSxFQUNBNU0sWUFBQSxFQUNBOEYsSUFBQSxXQUtBLE9BSkE1d0IsS0FBQTQzQixvQkFDQTUzQixLQUFBMjNCLGVBQUEzM0IsS0FBQTQyQixVQUFBNTJCLEtBQUErMUIsWUFHQS8xQixLQUFBNDNCLHNCQUlBekMsa0JBQUE5MEIsVUFBQXczQix3QkFDQSxTQUFBckgsS0FBQWxhLE9BQ0EsSUFBQS9aLEVBQUFpMEIsS0FBQXRqQixPQUFBb0osT0FDQSxNQUFBLE1BQUEvWixHQUFBLE1BQUFBLEdBUUE0NEIsa0JBQUE5MEIsVUFBQXMzQixlQUNBLFNBQUFuSCxLQUFBc0gsYUFDQSxNQUFBLElBQUFuN0IsTUFBQSw2Q0FHQXc0QixrQkFBQTRDLGdCQUFBLEVBQ0E1QyxrQkFBQTZDLGVBQUEsRUFFQTdDLGtCQUFBaEQscUJBQUEsRUFDQWdELGtCQUFBL0Msa0JBQUEsRUFrQkErQyxrQkFBQTkwQixVQUFBNDNCLFlBQ0EsU0FBQTFFLFVBQUEyRSxTQUFBQyxRQUNBLElBR0FsQyxTQUhBN3ZCLFFBQUE4eEIsVUFBQSxLQUlBLE9BSEFDLFFBQUFoRCxrQkFBQTRDLGlCQUlBLEtBQUE1QyxrQkFBQTRDLGdCQUNBOUIsU0FBQWoyQixLQUFBbzRCLG1CQUNBLE1BQ0EsS0FBQWpELGtCQUFBNkMsZUFDQS9CLFNBQUFqMkIsS0FBQXE0QixrQkFDQSxNQUNBLFFBQ0EsTUFBQSxJQUFBMTdCLE1BQUEsK0JBR0EsSUFBQW81QixXQUFBLzFCLEtBQUErMUIsV0FDQUUsU0FBQTlrQixJQUFBLFNBQUFtbkIsU0FDQSxJQUFBMTBCLE9BQUEsT0FBQTAwQixRQUFBMTBCLE9BQUEsS0FBQTVELEtBQUF3MkIsU0FBQTNGLEdBQUF5SCxRQUFBMTBCLFFBRUEsTUFBQSxDQUNBQSxPQUZBQSxPQUFBK3JCLEtBQUFnSCxpQkFBQVosV0FBQW55QixPQUFBNUQsS0FBQTYyQixlQUdBekQsY0FBQWtGLFFBQUFsRixjQUNBQyxnQkFBQWlGLFFBQUFqRixnQkFDQTBELGFBQUF1QixRQUFBdkIsYUFDQUMsZUFBQXNCLFFBQUF0QixlQUNBcjJCLEtBQUEsT0FBQTIzQixRQUFBMzNCLEtBQUEsS0FBQVgsS0FBQXUyQixPQUFBMUYsR0FBQXlILFFBQUEzM0IsUUFFQVgsTUFBQXl6QixRQUFBRixVQUFBbnRCLFVBeUJBK3VCLGtCQUFBOTBCLFVBQUFrNEIseUJBQ0EsU0FBQUMsT0FDQSxJQUFBMzBCLEtBQUE4ckIsS0FBQWlHLE9BQUE0QyxNQUFBLFFBTUFDLE9BQUEsQ0FDQTcwQixPQUFBK3JCLEtBQUFpRyxPQUFBNEMsTUFBQSxVQUNBekIsYUFBQWx6QixLQUNBbXpCLGVBQUFySCxLQUFBaUcsT0FBQTRDLE1BQUEsU0FBQSxJQUlBLEdBREFDLE9BQUE3MEIsT0FBQTVELEtBQUEwNEIsaUJBQUFELE9BQUE3MEIsUUFDQTYwQixPQUFBNzBCLE9BQUEsRUFDQSxNQUFBLEdBR0EsSUFBQXF5QixTQUFBLEdBRUEzZixNQUFBdFcsS0FBQTI0QixhQUFBRixPQUNBejRCLEtBQUFxNEIsa0JBQ0EsZUFDQSxpQkFDQTFJLEtBQUFpSiwyQkFDQTNELGFBQUE3QyxtQkFDQSxHQUFBLEdBQUE5YixNQUFBLENBQ0EsSUFBQWdpQixRQUFBdDRCLEtBQUFxNEIsa0JBQUEvaEIsT0FFQSxRQUFBMVQsSUFBQTQxQixNQUFBMTBCLE9BT0EsSUFOQSxJQUFBaXpCLGFBQUF1QixRQUFBdkIsYUFNQXVCLFNBQUFBLFFBQUF2QixlQUFBQSxjQUNBZCxTQUFBenlCLEtBQUEsQ0FDQUssS0FBQThyQixLQUFBaUcsT0FBQTBDLFFBQUEsZ0JBQUEsTUFDQXgwQixPQUFBNnJCLEtBQUFpRyxPQUFBMEMsUUFBQSxrQkFBQSxNQUNBTyxXQUFBbEosS0FBQWlHLE9BQUEwQyxRQUFBLHNCQUFBLFFBR0FBLFFBQUF0NEIsS0FBQXE0QixvQkFBQS9oQixZQVNBLElBTkEsSUFBQTBnQixlQUFBc0IsUUFBQXRCLGVBTUFzQixTQUNBQSxRQUFBdkIsZUFBQWx6QixNQUNBeTBCLFFBQUF0QixnQkFBQUEsZ0JBQ0FmLFNBQUF6eUIsS0FBQSxDQUNBSyxLQUFBOHJCLEtBQUFpRyxPQUFBMEMsUUFBQSxnQkFBQSxNQUNBeDBCLE9BQUE2ckIsS0FBQWlHLE9BQUEwQyxRQUFBLGtCQUFBLE1BQ0FPLFdBQUFsSixLQUFBaUcsT0FBQTBDLFFBQUEsc0JBQUEsUUFHQUEsUUFBQXQ0QixLQUFBcTRCLG9CQUFBL2hCLE9BS0EsT0FBQTJmLFVBR0FuNUIsUUFBQXE0QixrQkFBQUEsbUJBZ0dBTyx1QkFBQXIxQixVQUFBdXFCLE9BQUF2dEIsT0FBQTgzQixrQkFBQTkwQixZQUNBazNCLFNBQUFwQyxrQkFNQU8sdUJBQUFyMUIsVUFBQXE0QixpQkFBQSxTQUFBSSxTQUNBLElBV0F6OEIsRUFYQTA4QixlQUFBRCxRQUtBLEdBSkEsTUFBQTk0QixLQUFBKzFCLGFBQ0FnRCxlQUFBcEosS0FBQTJHLFNBQUF0MkIsS0FBQSsxQixXQUFBZ0QsaUJBR0EvNEIsS0FBQXcyQixTQUFBNUcsSUFBQW1KLGdCQUNBLE9BQUEvNEIsS0FBQXcyQixTQUFBaHFCLFFBQUF1c0IsZ0JBTUEsSUFBQTE4QixFQUFBLEVBQUFBLEVBQUEyRCxLQUFBeTJCLGlCQUFBejVCLFNBQUFYLEVBQ0EsR0FBQTJELEtBQUF5MkIsaUJBQUFwNkIsSUFBQXk4QixRQUNBLE9BQUF6OEIsRUFJQSxPQUFBLEdBWUFxNUIsdUJBQUE4QixjQUNBLFNBQUFwQyxXQUFBQyxlQUNBLElBQUEyRCxJQUFBcE8sT0FBQXZ0QixPQUFBcTRCLHVCQUFBcjFCLFdBRUF5MUIsTUFBQWtELElBQUF6QyxPQUFBeEcsU0FBQUcsVUFBQWtGLFdBQUFtQixPQUFBeEYsV0FBQSxHQUNBOEUsUUFBQW1ELElBQUF4QyxTQUFBekcsU0FBQUcsVUFBQWtGLFdBQUFvQixTQUFBekYsV0FBQSxHQUNBaUksSUFBQWpELFdBQUFYLFdBQUE2RCxZQUNBRCxJQUFBaEQsZUFBQVosV0FBQThELHdCQUFBRixJQUFBeEMsU0FBQXpGLFVBQ0FpSSxJQUFBakQsWUFDQWlELElBQUEvbkIsS0FBQW1rQixXQUFBK0QsTUFDQUgsSUFBQW5DLGNBQUF4QixjQUNBMkQsSUFBQXZDLGlCQUFBdUMsSUFBQXhDLFNBQUF6RixVQUFBNWYsSUFBQSxTQUFBdWxCLEdBQ0EsT0FBQS9HLEtBQUFnSCxpQkFBQXFDLElBQUFqRCxXQUFBVyxFQUFBckIsaUJBWUEsSUFKQSxJQUFBK0Qsa0JBQUFoRSxXQUFBd0IsVUFBQTdGLFVBQUFwcUIsUUFDQTB5QixzQkFBQUwsSUFBQXZCLG9CQUFBLEdBQ0E2QixxQkFBQU4sSUFBQXBCLG1CQUFBLEdBRUF2N0IsRUFBQSxFQUFBVyxPQUFBbzhCLGtCQUFBcDhCLE9BQUFYLEVBQUFXLE9BQUFYLElBQUEsQ0FDQSxJQUFBazlCLFdBQUFILGtCQUFBLzhCLEdBQ0FtOUIsWUFBQSxJQUFBMUMsUUFDQTBDLFlBQUFwRyxjQUFBbUcsV0FBQW5HLGNBQ0FvRyxZQUFBbkcsZ0JBQUFrRyxXQUFBbEcsZ0JBRUFrRyxXQUFBMzFCLFNBQ0E0MUIsWUFBQTUxQixPQUFBaXlCLFFBQUFycEIsUUFBQStzQixXQUFBMzFCLFFBQ0E0MUIsWUFBQXpDLGFBQUF3QyxXQUFBeEMsYUFDQXlDLFlBQUF4QyxlQUFBdUMsV0FBQXZDLGVBRUF1QyxXQUFBNTRCLE9BQ0E2NEIsWUFBQTc0QixLQUFBbTFCLE1BQUF0cEIsUUFBQStzQixXQUFBNTRCLE9BR0EyNEIscUJBQUE5MUIsS0FBQWcyQixjQUdBSCxzQkFBQTcxQixLQUFBZzJCLGFBS0EsT0FGQXhFLFVBQUFnRSxJQUFBcEIsbUJBQUFqSSxLQUFBaUosNEJBRUFJLEtBTUF0RCx1QkFBQXIxQixVQUFBNjFCLFNBQUEsRUFLQXRMLE9BQUFDLGVBQUE2Syx1QkFBQXIxQixVQUFBLFVBQUEsQ0FDQXV3QixJQUFBLFdBQ0EsT0FBQTV3QixLQUFBeTJCLGlCQUFBOXZCLFdBcUJBK3VCLHVCQUFBcjFCLFVBQUFzM0IsZUFDQSxTQUFBbkgsS0FBQXNILGFBZUEsSUFkQSxJQVlBUSxRQUFBcnpCLElBQUF3MEIsUUFBQTlzQixJQUFBbkgsTUFaQTR0QixjQUFBLEVBQ0FzRyx3QkFBQSxFQUNBQyxxQkFBQSxFQUNBQyx1QkFBQSxFQUNBQyxlQUFBLEVBQ0FDLGFBQUEsRUFDQTk4QixPQUFBd3pCLEtBQUF4ekIsT0FDQXNaLE1BQUEsRUFDQXlqQixlQUFBLEdBQ0F4RixLQUFBLEdBQ0F5RixpQkFBQSxHQUNBWixrQkFBQSxHQUdBOWlCLE1BQUF0WixRQUNBLEdBQUEsTUFBQXd6QixLQUFBdGpCLE9BQUFvSixPQUNBOGMsZ0JBQ0E5YyxRQUNBb2pCLHdCQUFBLE9BRUEsR0FBQSxNQUFBbEosS0FBQXRqQixPQUFBb0osT0FDQUEsWUFFQSxDQVNBLEtBUkFnaUIsUUFBQSxJQUFBeEIsU0FDQTFELGNBQUFBLGNBT0F6bUIsSUFBQTJKLE1BQUEzSixJQUFBM1AsU0FDQWdELEtBQUE2M0Isd0JBQUFySCxLQUFBN2pCLEtBREFBLE9BUUEsR0FEQThzQixRQUFBTSxlQUZBOTBCLElBQUF1ckIsS0FBQTdwQixNQUFBMlAsTUFBQTNKLE1BSUEySixPQUFBclIsSUFBQWpJLFdBQ0EsQ0FFQSxJQURBeThCLFFBQUEsR0FDQW5qQixNQUFBM0osS0FDQXVvQixVQUFBMUQsT0FBQWhCLEtBQUFsYSxNQUFBaWUsTUFDQS91QixNQUFBK3VCLEtBQUEvdUIsTUFDQThRLE1BQUFpZSxLQUFBeEMsS0FDQTBILFFBQUFqMkIsS0FBQWdDLE9BR0EsR0FBQSxJQUFBaTBCLFFBQUF6OEIsT0FDQSxNQUFBLElBQUFMLE1BQUEsMENBR0EsR0FBQSxJQUFBODhCLFFBQUF6OEIsT0FDQSxNQUFBLElBQUFMLE1BQUEsMENBR0FvOUIsZUFBQTkwQixLQUFBdzBCLFFBSUFuQixRQUFBakYsZ0JBQUFxRyx3QkFBQUQsUUFBQSxHQUNBQyx3QkFBQXBCLFFBQUFqRixnQkFFQSxFQUFBb0csUUFBQXo4QixTQUVBczdCLFFBQUExMEIsT0FBQWkyQixlQUFBSixRQUFBLEdBQ0FJLGdCQUFBSixRQUFBLEdBR0FuQixRQUFBdkIsYUFBQTRDLHFCQUFBRixRQUFBLEdBQ0FFLHFCQUFBckIsUUFBQXZCLGFBRUF1QixRQUFBdkIsY0FBQSxFQUdBdUIsUUFBQXRCLGVBQUE0Qyx1QkFBQUgsUUFBQSxHQUNBRyx1QkFBQXRCLFFBQUF0QixlQUVBLEVBQUF5QyxRQUFBejhCLFNBRUFzN0IsUUFBQTMzQixLQUFBbTVCLGFBQUFMLFFBQUEsR0FDQUssY0FBQUwsUUFBQSxLQUlBTCxrQkFBQTUxQixLQUFBODBCLFNBQ0EsaUJBQUFBLFFBQUF2QixjQUNBaUQsaUJBQUF4MkIsS0FBQTgwQixTQUtBdEQsVUFBQW9FLGtCQUFBekosS0FBQXNLLHFDQUNBajZCLEtBQUF5M0Isb0JBQUEyQixrQkFFQXBFLFVBQUFnRixpQkFBQXJLLEtBQUFpSiw0QkFDQTU0QixLQUFBNDNCLG1CQUFBb0Msa0JBT0F0RSx1QkFBQXIxQixVQUFBczRCLGFBQ0EsU0FBQXJHLFFBQUE0SCxVQUFBQyxVQUNBQyxZQUFBQyxZQUFBNUgsT0FNQSxHQUFBSCxRQUFBNkgsWUFBQSxFQUNBLE1BQUEsSUFBQWxJLFVBQUEsZ0RBQ0FLLFFBQUE2SCxZQUVBLEdBQUE3SCxRQUFBOEgsYUFBQSxFQUNBLE1BQUEsSUFBQW5JLFVBQUEsa0RBQ0FLLFFBQUE4SCxjQUdBLE9BQUFuRixhQUFBNUMsT0FBQUMsUUFBQTRILFVBQUFHLFlBQUE1SCxRQU9BaUQsdUJBQUFyMUIsVUFBQWk2QixtQkFDQSxXQUNBLElBQUEsSUFBQWhrQixNQUFBLEVBQUFBLE1BQUF0VyxLQUFBbzRCLG1CQUFBcDdCLFNBQUFzWixNQUFBLENBQ0EsSUFBQWdpQixRQUFBdDRCLEtBQUFvNEIsbUJBQUE5aEIsT0FNQSxHQUFBQSxNQUFBLEVBQUF0VyxLQUFBbzRCLG1CQUFBcDdCLE9BQUEsQ0FDQSxJQUFBdTlCLFlBQUF2NkIsS0FBQW80QixtQkFBQTloQixNQUFBLEdBRUEsR0FBQWdpQixRQUFBbEYsZ0JBQUFtSCxZQUFBbkgsY0FBQSxDQUNBa0YsUUFBQWtDLG9CQUFBRCxZQUFBbEgsZ0JBQUEsRUFDQSxVQUtBaUYsUUFBQWtDLG9CQUFBQyxFQUFBQSxJQTRCQS9FLHVCQUFBcjFCLFVBQUFxNkIsb0JBQ0EsU0FBQWxDLE9BQ0EsSUFBQUMsT0FBQSxDQUNBckYsY0FBQXpELEtBQUFpRyxPQUFBNEMsTUFBQSxRQUNBbkYsZ0JBQUExRCxLQUFBaUcsT0FBQTRDLE1BQUEsV0FHQWxpQixNQUFBdFcsS0FBQTI0QixhQUNBRixPQUNBejRCLEtBQUFvNEIsbUJBQ0EsZ0JBQ0Esa0JBQ0F6SSxLQUFBc0ssb0NBQ0F0SyxLQUFBaUcsT0FBQTRDLE1BQUEsT0FBQXJELGtCQUFBaEQsdUJBR0EsR0FBQSxHQUFBN2IsTUFBQSxDQUNBLElBQUFnaUIsUUFBQXQ0QixLQUFBbzRCLG1CQUFBOWhCLE9BRUEsR0FBQWdpQixRQUFBbEYsZ0JBQUFxRixPQUFBckYsY0FBQSxDQUNBLElBQUF4dkIsT0FBQStyQixLQUFBaUcsT0FBQTBDLFFBQUEsU0FBQSxNQUNBLE9BQUExMEIsU0FDQUEsT0FBQTVELEtBQUF3MkIsU0FBQTNGLEdBQUFqdEIsUUFDQUEsT0FBQStyQixLQUFBZ0gsaUJBQUEzMkIsS0FBQSsxQixXQUFBbnlCLE9BQUE1RCxLQUFBNjJCLGdCQUVBLElBQUFsMkIsS0FBQWd2QixLQUFBaUcsT0FBQTBDLFFBQUEsT0FBQSxNQUlBLE9BSEEsT0FBQTMzQixPQUNBQSxLQUFBWCxLQUFBdTJCLE9BQUExRixHQUFBbHdCLE9BRUEsQ0FDQWlELE9BQUFBLE9BQ0FDLEtBQUE4ckIsS0FBQWlHLE9BQUEwQyxRQUFBLGVBQUEsTUFDQXgwQixPQUFBNnJCLEtBQUFpRyxPQUFBMEMsUUFBQSxpQkFBQSxNQUNBMzNCLEtBQUFBLE9BS0EsTUFBQSxDQUNBaUQsT0FBQSxLQUNBQyxLQUFBLEtBQ0FDLE9BQUEsS0FDQW5ELEtBQUEsT0FRQSswQix1QkFBQXIxQixVQUFBczZCLHdCQUNBLFdBQ0EsUUFBQTM2QixLQUFBZzJCLGlCQUdBaDJCLEtBQUFnMkIsZUFBQWg1QixRQUFBZ0QsS0FBQXcyQixTQUFBbEcsU0FDQXR3QixLQUFBZzJCLGVBQUE0RSxLQUFBLFNBQUFDLElBQUEsT0FBQSxNQUFBQSxPQVFBbkYsdUJBQUFyMUIsVUFBQXk2QixpQkFDQSxTQUFBaEMsUUFBQWlDLGVBQ0EsSUFBQS82QixLQUFBZzJCLGVBQ0EsT0FBQSxLQUdBLElBQUExZixNQUFBdFcsS0FBQTA0QixpQkFBQUksU0FDQSxHQUFBLEdBQUF4aUIsTUFDQSxPQUFBdFcsS0FBQWcyQixlQUFBMWYsT0FHQSxJQUtBNmdCLElBTEE0QixlQUFBRCxRQU1BLEdBTEEsTUFBQTk0QixLQUFBKzFCLGFBQ0FnRCxlQUFBcEosS0FBQTJHLFNBQUF0MkIsS0FBQSsxQixXQUFBZ0QsaUJBSUEsTUFBQS80QixLQUFBKzFCLGFBQ0FvQixJQUFBeEgsS0FBQXFMLFNBQUFoN0IsS0FBQSsxQixhQUFBLENBS0EsSUFBQWtGLGVBQUFsQyxlQUFBN3pCLFFBQUEsYUFBQSxJQUNBLEdBQUEsUUFBQWl5QixJQUFBK0QsUUFDQWw3QixLQUFBdzJCLFNBQUE1RyxJQUFBcUwsZ0JBQ0EsT0FBQWo3QixLQUFBZzJCLGVBQUFoMkIsS0FBQXcyQixTQUFBaHFCLFFBQUF5dUIsaUJBR0EsS0FBQTlELElBQUF0MUIsTUFBQSxLQUFBczFCLElBQUF0MUIsT0FDQTdCLEtBQUF3MkIsU0FBQTVHLElBQUEsSUFBQW1KLGdCQUNBLE9BQUEvNEIsS0FBQWcyQixlQUFBaDJCLEtBQUF3MkIsU0FBQWhxQixRQUFBLElBQUF1c0IsaUJBUUEsR0FBQWdDLGNBQ0EsT0FBQSxLQUdBLE1BQUEsSUFBQXArQixNQUFBLElBQUFvOEIsZUFBQSwrQkEyQkFyRCx1QkFBQXIxQixVQUFBODZCLHFCQUNBLFNBQUEzQyxPQUNBLElBQUE1MEIsT0FBQStyQixLQUFBaUcsT0FBQTRDLE1BQUEsVUFFQSxJQURBNTBCLE9BQUE1RCxLQUFBMDRCLGlCQUFBOTBCLFNBQ0EsRUFDQSxNQUFBLENBQ0FDLEtBQUEsS0FDQUMsT0FBQSxLQUNBKzBCLFdBQUEsTUFJQSxJQUFBSixPQUFBLENBQ0E3MEIsT0FBQUEsT0FDQW16QixhQUFBcEgsS0FBQWlHLE9BQUE0QyxNQUFBLFFBQ0F4QixlQUFBckgsS0FBQWlHLE9BQUE0QyxNQUFBLFdBR0FsaUIsTUFBQXRXLEtBQUEyNEIsYUFDQUYsT0FDQXo0QixLQUFBcTRCLGtCQUNBLGVBQ0EsaUJBQ0ExSSxLQUFBaUosMkJBQ0FqSixLQUFBaUcsT0FBQTRDLE1BQUEsT0FBQXJELGtCQUFBaEQsdUJBR0EsR0FBQSxHQUFBN2IsTUFBQSxDQUNBLElBQUFnaUIsUUFBQXQ0QixLQUFBcTRCLGtCQUFBL2hCLE9BRUEsR0FBQWdpQixRQUFBMTBCLFNBQUE2MEIsT0FBQTcwQixPQUNBLE1BQUEsQ0FDQUMsS0FBQThyQixLQUFBaUcsT0FBQTBDLFFBQUEsZ0JBQUEsTUFDQXgwQixPQUFBNnJCLEtBQUFpRyxPQUFBMEMsUUFBQSxrQkFBQSxNQUNBTyxXQUFBbEosS0FBQWlHLE9BQUEwQyxRQUFBLHNCQUFBLE9BS0EsTUFBQSxDQUNBejBCLEtBQUEsS0FDQUMsT0FBQSxLQUNBKzBCLFdBQUEsT0FJQS83QixRQUFBNDRCLHVCQUFBQSx3QkFtR0FELHlCQUFBcDFCLFVBQUF1cUIsT0FBQXZ0QixPQUFBODNCLGtCQUFBOTBCLFlBQ0FDLFlBQUE2MEIsa0JBS0FNLHlCQUFBcDFCLFVBQUE2MUIsU0FBQSxFQUtBdEwsT0FBQUMsZUFBQTRLLHlCQUFBcDFCLFVBQUEsVUFBQSxDQUNBdXdCLElBQUEsV0FFQSxJQURBLElBQUFpRixRQUFBLEdBQ0F4NUIsRUFBQSxFQUFBQSxFQUFBMkQsS0FBQWszQixVQUFBbDZCLE9BQUFYLElBQ0EsSUFBQSxJQUFBeXZCLEVBQUEsRUFBQUEsRUFBQTlyQixLQUFBazNCLFVBQUE3NkIsR0FBQWs3QixTQUFBMUIsUUFBQTc0QixPQUFBOHVCLElBQ0ErSixRQUFBcnlCLEtBQUF4RCxLQUFBazNCLFVBQUE3NkIsR0FBQWs3QixTQUFBMUIsUUFBQS9KLElBR0EsT0FBQStKLFdBdUJBSix5QkFBQXAxQixVQUFBcTZCLG9CQUNBLFNBQUFsQyxPQUNBLElBQUFDLE9BQUEsQ0FDQXJGLGNBQUF6RCxLQUFBaUcsT0FBQTRDLE1BQUEsUUFDQW5GLGdCQUFBMUQsS0FBQWlHLE9BQUE0QyxNQUFBLFdBS0E0QyxhQUFBbkcsYUFBQTVDLE9BQUFvRyxPQUFBejRCLEtBQUFrM0IsVUFDQSxTQUFBdUIsT0FBQTRDLFNBQ0EsSUFBQXJJLElBQUF5RixPQUFBckYsY0FBQWlJLFFBQUEvRCxnQkFBQWxFLGNBQ0EsT0FBQUosS0FJQXlGLE9BQUFwRixnQkFDQWdJLFFBQUEvRCxnQkFBQWpFLGtCQUVBZ0ksUUFBQXI3QixLQUFBazNCLFVBQUFrRSxjQUVBLE9BQUFDLFFBU0FBLFFBQUE5RCxTQUFBbUQsb0JBQUEsQ0FDQTcyQixLQUFBNDBCLE9BQUFyRixlQUNBaUksUUFBQS9ELGdCQUFBbEUsY0FBQSxHQUNBdHZCLE9BQUEyMEIsT0FBQXBGLGlCQUNBZ0ksUUFBQS9ELGdCQUFBbEUsZ0JBQUFxRixPQUFBckYsY0FDQWlJLFFBQUEvRCxnQkFBQWpFLGdCQUFBLEVBQ0EsR0FDQWlJLEtBQUE5QyxNQUFBOEMsT0FmQSxDQUNBMTNCLE9BQUEsS0FDQUMsS0FBQSxLQUNBQyxPQUFBLEtBQ0FuRCxLQUFBLE9BbUJBODBCLHlCQUFBcDFCLFVBQUFzNkIsd0JBQ0EsV0FDQSxPQUFBMzZCLEtBQUFrM0IsVUFBQXFFLE1BQUEsU0FBQTdFLEdBQ0EsT0FBQUEsRUFBQWEsU0FBQW9ELDZCQVNBbEYseUJBQUFwMUIsVUFBQXk2QixpQkFDQSxTQUFBaEMsUUFBQWlDLGVBQ0EsSUFBQSxJQUFBMStCLEVBQUEsRUFBQUEsRUFBQTJELEtBQUFrM0IsVUFBQWw2QixPQUFBWCxJQUFBLENBQ0EsSUFFQW1PLFFBRkF4SyxLQUFBazNCLFVBQUE3NkIsR0FFQWs3QixTQUFBdUQsaUJBQUFoQyxTQUFBLEdBQ0EsR0FBQXR1QixRQUNBLE9BQUFBLFFBR0EsR0FBQXV3QixjQUNBLE9BQUEsS0FHQSxNQUFBLElBQUFwK0IsTUFBQSxJQUFBbThCLFFBQUEsK0JBc0JBckQseUJBQUFwMUIsVUFBQTg2QixxQkFDQSxTQUFBM0MsT0FDQSxJQUFBLElBQUFuOEIsRUFBQSxFQUFBQSxFQUFBMkQsS0FBQWszQixVQUFBbDZCLE9BQUFYLElBQUEsQ0FDQSxJQUFBZy9CLFFBQUFyN0IsS0FBQWszQixVQUFBNzZCLEdBSUEsSUFBQSxJQUFBZy9CLFFBQUE5RCxTQUFBbUIsaUJBQUEvSSxLQUFBaUcsT0FBQTRDLE1BQUEsV0FBQSxDQUdBLElBQUFnRCxrQkFBQUgsUUFBQTlELFNBQUE0RCxxQkFBQTNDLE9BQ0EsR0FBQWdELGtCQVNBLE1BUkEsQ0FDQTMzQixLQUFBMjNCLGtCQUFBMzNCLE1BQ0F3M0IsUUFBQS9ELGdCQUFBbEUsY0FBQSxHQUNBdHZCLE9BQUEwM0Isa0JBQUExM0IsUUFDQXUzQixRQUFBL0QsZ0JBQUFsRSxnQkFBQW9JLGtCQUFBMzNCLEtBQ0F3M0IsUUFBQS9ELGdCQUFBakUsZ0JBQUEsRUFDQSxLQU1BLE1BQUEsQ0FDQXh2QixLQUFBLEtBQ0FDLE9BQUEsT0FTQTJ4Qix5QkFBQXAxQixVQUFBczNCLGVBQ0EsU0FBQW5ILEtBQUFzSCxhQUNBOTNCLEtBQUF5M0Isb0JBQUEsR0FDQXozQixLQUFBNDNCLG1CQUFBLEdBQ0EsSUFBQSxJQUFBdjdCLEVBQUEsRUFBQUEsRUFBQTJELEtBQUFrM0IsVUFBQWw2QixPQUFBWCxJQUdBLElBRkEsSUFBQWcvQixRQUFBcjdCLEtBQUFrM0IsVUFBQTc2QixHQUNBby9CLGdCQUFBSixRQUFBOUQsU0FBQWEsbUJBQ0F0TSxFQUFBLEVBQUFBLEVBQUEyUCxnQkFBQXorQixPQUFBOHVCLElBQUEsQ0FDQSxJQUFBd00sUUFBQW1ELGdCQUFBM1AsR0FFQWxvQixPQUFBeTNCLFFBQUE5RCxTQUFBZixTQUFBM0YsR0FBQXlILFFBQUExMEIsUUFDQUEsT0FBQStyQixLQUFBZ0gsaUJBQUEwRSxRQUFBOUQsU0FBQXhCLFdBQUFueUIsT0FBQTVELEtBQUE2MkIsZUFDQTcyQixLQUFBdzJCLFNBQUF2eUIsSUFBQUwsUUFDQUEsT0FBQTVELEtBQUF3MkIsU0FBQWhxQixRQUFBNUksUUFFQSxJQUFBakQsS0FBQSxLQUNBMjNCLFFBQUEzM0IsT0FDQUEsS0FBQTA2QixRQUFBOUQsU0FBQWhCLE9BQUExRixHQUFBeUgsUUFBQTMzQixNQUNBWCxLQUFBdTJCLE9BQUF0eUIsSUFBQXRELE1BQ0FBLEtBQUFYLEtBQUF1MkIsT0FBQS9wQixRQUFBN0wsT0FPQSxJQUFBKzZCLGdCQUFBLENBQ0E5M0IsT0FBQUEsT0FDQXd2QixjQUFBa0YsUUFBQWxGLGVBQ0FpSSxRQUFBL0QsZ0JBQUFsRSxjQUFBLEdBQ0FDLGdCQUFBaUYsUUFBQWpGLGlCQUNBZ0ksUUFBQS9ELGdCQUFBbEUsZ0JBQUFrRixRQUFBbEYsY0FDQWlJLFFBQUEvRCxnQkFBQWpFLGdCQUFBLEVBQ0EsR0FDQTBELGFBQUF1QixRQUFBdkIsYUFDQUMsZUFBQXNCLFFBQUF0QixlQUNBcjJCLEtBQUFBLE1BR0FYLEtBQUF5M0Isb0JBQUFqMEIsS0FBQWs0QixpQkFDQSxpQkFBQUEsZ0JBQUEzRSxjQUNBLzJCLEtBQUE0M0IsbUJBQUFwMEIsS0FBQWs0QixpQkFLQTFHLFVBQUFoMUIsS0FBQXkzQixvQkFBQTlILEtBQUFzSyxxQ0FDQWpGLFVBQUFoMUIsS0FBQTQzQixtQkFBQWpJLEtBQUFpSiw2QkFHQTk3QixRQUFBMjRCLHlCQUFBQSx3SkNqbkNBLElBQUFQLFVBQUExNEIsUUFBQSxnQkFDQW16QixLQUFBbnpCLFFBQUEsVUFDQXV6QixTQUFBdnpCLFFBQUEsZUFBQXV6QixTQUNBa0QsWUFBQXoyQixRQUFBLGtCQUFBeTJCLFlBVUEsU0FBQTBJLG1CQUFBbkQsT0FDQUEsUUFDQUEsTUFBQSxJQUVBeDRCLEtBQUFtNUIsTUFBQXhKLEtBQUFpRyxPQUFBNEMsTUFBQSxPQUFBLE1BQ0F4NEIsS0FBQWk1QixZQUFBdEosS0FBQWlHLE9BQUE0QyxNQUFBLGFBQUEsTUFDQXg0QixLQUFBNDdCLGdCQUFBak0sS0FBQWlHLE9BQUE0QyxNQUFBLGtCQUFBLEdBQ0F4NEIsS0FBQXcyQixTQUFBLElBQUF6RyxTQUNBL3ZCLEtBQUF1MkIsT0FBQSxJQUFBeEcsU0FDQS92QixLQUFBNDJCLFVBQUEsSUFBQTNELFlBQ0FqekIsS0FBQTY3QixpQkFBQSxLQUdBRixtQkFBQXQ3QixVQUFBNjFCLFNBQUEsRUFPQXlGLG1CQUFBbkUsY0FDQSxTQUFBc0Usb0JBQ0EsSUFBQS9GLFdBQUErRixtQkFBQS9GLFdBQ0FnRyxVQUFBLElBQUFKLG1CQUFBLENBQ0ExcUIsS0FBQTZxQixtQkFBQTdxQixLQUNBOGtCLFdBQUFBLGFBMkNBLE9BekNBK0YsbUJBQUE3RCxZQUFBLFNBQUFLLFNBQ0EsSUFBQTBELFdBQUEsQ0FDQUMsVUFBQSxDQUNBcDRCLEtBQUF5MEIsUUFBQWxGLGNBQ0F0dkIsT0FBQXcwQixRQUFBakYsa0JBSUEsTUFBQWlGLFFBQUExMEIsU0FDQW80QixXQUFBcDRCLE9BQUEwMEIsUUFBQTEwQixPQUNBLE1BQUFteUIsYUFDQWlHLFdBQUFwNEIsT0FBQStyQixLQUFBMkcsU0FBQVAsV0FBQWlHLFdBQUFwNEIsU0FHQW80QixXQUFBajZCLFNBQUEsQ0FDQThCLEtBQUF5MEIsUUFBQXZCLGFBQ0FqekIsT0FBQXcwQixRQUFBdEIsZ0JBR0EsTUFBQXNCLFFBQUEzM0IsT0FDQXE3QixXQUFBcjdCLEtBQUEyM0IsUUFBQTMzQixPQUlBbzdCLFVBQUFHLFdBQUFGLGNBRUFGLG1CQUFBakcsUUFBQXBDLFFBQUEsU0FBQTBJLFlBQ0EsSUFBQUMsZUFBQUQsV0FDQSxPQUFBcEcsYUFDQXFHLGVBQUF6TSxLQUFBMkcsU0FBQVAsV0FBQW9HLGFBR0FKLFVBQUF2RixTQUFBNUcsSUFBQXdNLGlCQUNBTCxVQUFBdkYsU0FBQXZ5QixJQUFBbTRCLGdCQUdBLElBQUE1eEIsUUFBQXN4QixtQkFBQWhCLGlCQUFBcUIsWUFDQSxNQUFBM3hCLFNBQ0F1eEIsVUFBQU0saUJBQUFGLFdBQUEzeEIsV0FHQXV4QixXQWFBSixtQkFBQXQ3QixVQUFBNjdCLFdBQ0EsU0FBQTFELE9BQ0EsSUFBQXlELFVBQUF0TSxLQUFBaUcsT0FBQTRDLE1BQUEsYUFDQXoyQixTQUFBNHRCLEtBQUFpRyxPQUFBNEMsTUFBQSxXQUFBLE1BQ0E1MEIsT0FBQStyQixLQUFBaUcsT0FBQTRDLE1BQUEsU0FBQSxNQUNBNzNCLEtBQUFndkIsS0FBQWlHLE9BQUE0QyxNQUFBLE9BQUEsTUFFQXg0QixLQUFBNDdCLGlCQUNBNTdCLEtBQUFzOEIsaUJBQUFMLFVBQUFsNkIsU0FBQTZCLE9BQUFqRCxNQUdBLE1BQUFpRCxTQUNBQSxPQUFBd3lCLE9BQUF4eUIsUUFDQTVELEtBQUF3MkIsU0FBQTVHLElBQUFoc0IsU0FDQTVELEtBQUF3MkIsU0FBQXZ5QixJQUFBTCxTQUlBLE1BQUFqRCxPQUNBQSxLQUFBeTFCLE9BQUF6MUIsTUFDQVgsS0FBQXUyQixPQUFBM0csSUFBQWp2QixPQUNBWCxLQUFBdTJCLE9BQUF0eUIsSUFBQXRELE9BSUFYLEtBQUE0MkIsVUFBQTN5QixJQUFBLENBQ0FtdkIsY0FBQTZJLFVBQUFwNEIsS0FDQXd2QixnQkFBQTRJLFVBQUFuNEIsT0FDQWl6QixhQUFBLE1BQUFoMUIsVUFBQUEsU0FBQThCLEtBQ0FtekIsZUFBQSxNQUFBajFCLFVBQUFBLFNBQUErQixPQUNBRixPQUFBQSxPQUNBakQsS0FBQUEsUUFPQWc3QixtQkFBQXQ3QixVQUFBZzhCLGlCQUNBLFNBQUFFLFlBQUFDLGdCQUNBLElBQUE1NEIsT0FBQTI0QixZQUNBLE1BQUF2OEIsS0FBQWk1QixjQUNBcjFCLE9BQUErckIsS0FBQTJHLFNBQUF0MkIsS0FBQWk1QixZQUFBcjFCLFNBR0EsTUFBQTQ0QixnQkFHQXg4QixLQUFBNjdCLG1CQUNBNzdCLEtBQUE2N0IsaUJBQUFqUixPQUFBdnRCLE9BQUEsT0FFQTJDLEtBQUE2N0IsaUJBQUFsTSxLQUFBZSxZQUFBOXNCLFNBQUE0NEIsZ0JBQ0F4OEIsS0FBQTY3QiwwQkFHQTc3QixLQUFBNjdCLGlCQUFBbE0sS0FBQWUsWUFBQTlzQixTQUNBLElBQUFnbkIsT0FBQTZSLEtBQUF6OEIsS0FBQTY3QixrQkFBQTcrQixTQUNBZ0QsS0FBQTY3QixpQkFBQSxRQXFCQUYsbUJBQUF0N0IsVUFBQXE4QixlQUNBLFNBQUFaLG1CQUFBUyxZQUFBSSxnQkFDQSxJQUFBUixXQUFBSSxZQUVBLEdBQUEsTUFBQUEsWUFBQSxDQUNBLEdBQUEsTUFBQVQsbUJBQUE3cUIsS0FDQSxNQUFBLElBQUF0VSxNQUNBLGlKQUlBdy9CLFdBQUFMLG1CQUFBN3FCLEtBRUEsSUFBQThrQixXQUFBLzFCLEtBQUFpNUIsWUFFQSxNQUFBbEQsYUFDQW9HLFdBQUF4TSxLQUFBMkcsU0FBQVAsV0FBQW9HLGFBSUEsSUFBQVMsV0FBQSxJQUFBN00sU0FDQThNLFNBQUEsSUFBQTlNLFNBR0EvdkIsS0FBQTQyQixVQUFBdEQsZ0JBQUEsU0FBQWdGLFNBQ0EsR0FBQUEsUUFBQTEwQixTQUFBdTRCLFlBQUEsTUFBQTdELFFBQUF2QixhQUFBLENBRUEsSUFBQWgxQixTQUFBKzVCLG1CQUFBcEIsb0JBQUEsQ0FDQTcyQixLQUFBeTBCLFFBQUF2QixhQUNBanpCLE9BQUF3MEIsUUFBQXRCLGlCQUVBLE1BQUFqMUIsU0FBQTZCLFNBRUEwMEIsUUFBQTEwQixPQUFBN0IsU0FBQTZCLE9BQ0EsTUFBQSs0QixpQkFDQXJFLFFBQUExMEIsT0FBQStyQixLQUFBenJCLEtBQUF5NEIsZUFBQXJFLFFBQUExMEIsU0FFQSxNQUFBbXlCLGFBQ0F1QyxRQUFBMTBCLE9BQUErckIsS0FBQTJHLFNBQUFQLFdBQUF1QyxRQUFBMTBCLFNBRUEwMEIsUUFBQXZCLGFBQUFoMUIsU0FBQThCLEtBQ0F5MEIsUUFBQXRCLGVBQUFqMUIsU0FBQStCLE9BQ0EsTUFBQS9CLFNBQUFwQixPQUNBMjNCLFFBQUEzM0IsS0FBQW9CLFNBQUFwQixPQUtBLElBQUFpRCxPQUFBMDBCLFFBQUExMEIsT0FDQSxNQUFBQSxRQUFBZzVCLFdBQUFoTixJQUFBaHNCLFNBQ0FnNUIsV0FBQTM0QixJQUFBTCxRQUdBLElBQUFqRCxLQUFBMjNCLFFBQUEzM0IsS0FDQSxNQUFBQSxNQUFBazhCLFNBQUFqTixJQUFBanZCLE9BQ0FrOEIsU0FBQTU0QixJQUFBdEQsT0FHQVgsTUFDQUEsS0FBQXcyQixTQUFBb0csV0FDQTU4QixLQUFBdTJCLE9BQUFzRyxTQUdBZixtQkFBQWpHLFFBQUFwQyxRQUFBLFNBQUEwSSxZQUNBLElBQUEzeEIsUUFBQXN4QixtQkFBQWhCLGlCQUFBcUIsWUFDQSxNQUFBM3hCLFVBQ0EsTUFBQW15QixpQkFDQVIsV0FBQXhNLEtBQUF6ckIsS0FBQXk0QixlQUFBUixhQUVBLE1BQUFwRyxhQUNBb0csV0FBQXhNLEtBQUEyRyxTQUFBUCxXQUFBb0csYUFFQW44QixLQUFBcThCLGlCQUFBRixXQUFBM3hCLFdBRUF4SyxPQWNBMjdCLG1CQUFBdDdCLFVBQUFpOEIsaUJBQ0EsU0FBQVEsV0FBQUMsVUFBQWpFLFFBQ0FrRSxPQUtBLEdBQUFELFdBQUEsaUJBQUFBLFVBQUFsNUIsTUFBQSxpQkFBQWs1QixVQUFBajVCLE9BQ0EsTUFBQSxJQUFBbkgsTUFDQSxnUEFNQSxNQUFBbWdDLFlBQUEsU0FBQUEsWUFBQSxXQUFBQSxZQUNBLEVBQUFBLFdBQUFqNUIsTUFBQSxHQUFBaTVCLFdBQUFoNUIsU0FDQWk1QixXQUFBakUsU0FBQWtFLFVBSUFGLFlBQUEsU0FBQUEsWUFBQSxXQUFBQSxZQUNBQyxXQUFBLFNBQUFBLFdBQUEsV0FBQUEsV0FDQSxFQUFBRCxXQUFBajVCLE1BQUEsR0FBQWk1QixXQUFBaDVCLFFBQ0EsRUFBQWk1QixVQUFBbDVCLE1BQUEsR0FBQWs1QixVQUFBajVCLFFBQ0FnMUIsU0FLQSxNQUFBLElBQUFuOEIsTUFBQSxvQkFBQWlTLEtBQUFDLFVBQUEsQ0FDQW90QixVQUFBYSxXQUNBbDVCLE9BQUFrMUIsUUFDQS8yQixTQUFBZzdCLFVBQ0FwOEIsS0FBQXE4QixVQVNBckIsbUJBQUF0N0IsVUFBQTQ4QixtQkFDQSxXQWNBLElBYkEsSUFPQTlXLEtBQ0FtUyxRQUNBNEUsUUFDQUMsVUFWQXpELHdCQUFBLEVBQ0EwRCxzQkFBQSxFQUNBeEQsdUJBQUEsRUFDQUQscUJBQUEsRUFDQUcsYUFBQSxFQUNBRCxlQUFBLEVBQ0F0eEIsT0FBQSxHQU1BMHRCLFNBQUFqMkIsS0FBQTQyQixVQUFBN0YsVUFDQTEwQixFQUFBLEVBQUFrSCxJQUFBMHlCLFNBQUFqNUIsT0FBQVgsRUFBQWtILElBQUFsSCxJQUFBLENBSUEsR0FGQThwQixLQUFBLElBREFtUyxRQUFBckMsU0FBQTU1QixJQUdBKzJCLGdCQUFBZ0ssc0JBRUEsSUFEQTFELHdCQUFBLEVBQ0FwQixRQUFBbEYsZ0JBQUFnSyx1QkFDQWpYLE1BQUEsSUFDQWlYLDZCQUlBLEdBQUEsRUFBQS9nQyxFQUFBLENBQ0EsSUFBQXN6QixLQUFBc0Usb0NBQUFxRSxRQUFBckMsU0FBQTU1QixFQUFBLElBQ0EsU0FFQThwQixNQUFBLElBSUFBLE1BQUErTyxVQUFBakUsT0FBQXFILFFBQUFqRixnQkFDQXFHLHlCQUNBQSx3QkFBQXBCLFFBQUFqRixnQkFFQSxNQUFBaUYsUUFBQTEwQixTQUNBdTVCLFVBQUFuOUIsS0FBQXcyQixTQUFBaHFCLFFBQUE4ckIsUUFBQTEwQixRQUNBdWlCLE1BQUErTyxVQUFBakUsT0FBQWtNLFVBQUF0RCxnQkFDQUEsZUFBQXNELFVBR0FoWCxNQUFBK08sVUFBQWpFLE9BQUFxSCxRQUFBdkIsYUFBQSxFQUNBNEMsc0JBQ0FBLHFCQUFBckIsUUFBQXZCLGFBQUEsRUFFQTVRLE1BQUErTyxVQUFBakUsT0FBQXFILFFBQUF0QixlQUNBNEMsd0JBQ0FBLHVCQUFBdEIsUUFBQXRCLGVBRUEsTUFBQXNCLFFBQUEzM0IsT0FDQXU4QixRQUFBbDlCLEtBQUF1MkIsT0FBQS9wQixRQUFBOHJCLFFBQUEzM0IsTUFDQXdsQixNQUFBK08sVUFBQWpFLE9BQUFpTSxRQUFBcEQsY0FDQUEsYUFBQW9ELFVBSUEzMEIsUUFBQTRkLEtBR0EsT0FBQTVkLFFBR0FvekIsbUJBQUF0N0IsVUFBQTY0Qix3QkFDQSxTQUFBbUUsU0FBQXZGLGFBQ0EsT0FBQXVGLFNBQUFsc0IsSUFBQSxTQUFBdk4sUUFDQSxJQUFBNUQsS0FBQTY3QixpQkFDQSxPQUFBLEtBRUEsTUFBQS9ELGNBQ0FsMEIsT0FBQStyQixLQUFBMkcsU0FBQXdCLFlBQUFsMEIsU0FFQSxJQUFBMEIsSUFBQXFxQixLQUFBZSxZQUFBOXNCLFFBQ0EsT0FBQWduQixPQUFBdnFCLFVBQUFrRixlQUFBeEksS0FBQWlELEtBQUE2N0IsaUJBQUF2MkIsS0FDQXRGLEtBQUE2N0IsaUJBQUF2MkIsS0FDQSxNQUNBdEYsT0FNQTI3QixtQkFBQXQ3QixVQUFBaTlCLE9BQ0EsV0FDQSxJQUFBbnNCLElBQUEsQ0FDQXdrQixRQUFBMzFCLEtBQUFrMkIsU0FDQUwsUUFBQTcxQixLQUFBdzJCLFNBQUF6RixVQUNBK0UsTUFBQTkxQixLQUFBdTJCLE9BQUF4RixVQUNBa0YsU0FBQWoyQixLQUFBaTlCLHNCQVlBLE9BVkEsTUFBQWo5QixLQUFBbTVCLFFBQ0Fob0IsSUFBQUYsS0FBQWpSLEtBQUFtNUIsT0FFQSxNQUFBbjVCLEtBQUFpNUIsY0FDQTluQixJQUFBNGtCLFdBQUEvMUIsS0FBQWk1QixhQUVBajVCLEtBQUE2N0IsbUJBQ0ExcUIsSUFBQTZrQixlQUFBaDJCLEtBQUFrNUIsd0JBQUEvbkIsSUFBQTBrQixRQUFBMWtCLElBQUE0a0IsYUFHQTVrQixLQU1Bd3FCLG1CQUFBdDdCLFVBQUFTLFNBQ0EsV0FDQSxPQUFBOE4sS0FBQUMsVUFBQTdPLEtBQUFzOUIsV0FHQXhnQyxRQUFBNitCLG1CQUFBQSwrSENqYUEsSUFBQUEsbUJBQUFuL0IsUUFBQSwwQkFBQW0vQixtQkFDQWhNLEtBQUFuekIsUUFBQSxVQUlBK2dDLGNBQUEsVUFRQUMsYUFBQSxxQkFjQSxTQUFBNzZCLFdBQUE4NkIsTUFBQUMsUUFBQTVFLFFBQUE2RSxRQUFBWCxPQUNBaDlCLEtBQUF3SCxTQUFBLEdBQ0F4SCxLQUFBNDlCLGVBQUEsR0FDQTU5QixLQUFBNkQsS0FBQSxNQUFBNDVCLE1BQUEsS0FBQUEsTUFDQXo5QixLQUFBOEQsT0FBQSxNQUFBNDVCLFFBQUEsS0FBQUEsUUFDQTE5QixLQUFBNEQsT0FBQSxNQUFBazFCLFFBQUEsS0FBQUEsUUFDQTk0QixLQUFBVyxLQUFBLE1BQUFxOEIsTUFBQSxLQUFBQSxNQUNBaDlCLEtBQUF3OUIsZUFBQSxFQUNBLE1BQUFHLFNBQUEzOUIsS0FBQWlFLElBQUEwNUIsU0FXQWg3QixXQUFBazdCLHdCQUNBLFNBQUFDLGVBQUFoQyxtQkFBQWlDLGVBR0EsSUFBQXY4QixLQUFBLElBQUFtQixXQU1BcTdCLGVBQUFGLGVBQUFwbUIsTUFBQTZsQixlQUNBVSxvQkFBQSxFQUNBQyxjQUFBLFdBSUEsT0FIQUMsZUFFQUEsZUFBQSxJQUdBLFNBQUFBLGNBQ0EsT0FBQUYsb0JBQUFELGVBQUFoaEMsT0FDQWdoQyxlQUFBQyw0QkFBQXI3QixJQUtBdzdCLGtCQUFBLEVBQUE1RCxvQkFBQSxFQUtBNkQsWUFBQSxLQWdFQSxPQTlEQXZDLG1CQUFBN0QsWUFBQSxTQUFBSyxTQUNBLEdBQUEsT0FBQStGLFlBQUEsQ0FHQSxLQUFBRCxrQkFBQTlGLFFBQUFsRixlQU1BLENBSUEsSUFDQXgyQixNQURBMGhDLFNBQUFOLGVBQUFDLHNCQUFBLElBQ0FseEIsT0FBQSxFQUFBdXJCLFFBQUFqRixnQkFDQW1ILHFCQU9BLE9BTkF3RCxlQUFBQyxxQkFBQUssU0FBQXZ4QixPQUFBdXJCLFFBQUFqRixnQkFDQW1ILHFCQUNBQSxvQkFBQWxDLFFBQUFqRixnQkFDQWtMLG1CQUFBRixZQUFBemhDLFdBRUF5aEMsWUFBQS9GLFNBaEJBaUcsbUJBQUFGLFlBQUFILGlCQUNBRSxvQkFDQTVELG9CQUFBLEVBcUJBLEtBQUE0RCxrQkFBQTlGLFFBQUFsRixlQUNBNXhCLEtBQUF5QyxJQUFBaTZCLGlCQUNBRSxvQkFFQSxHQUFBNUQsb0JBQUFsQyxRQUFBakYsZ0JBQUEsQ0FDQSxJQUFBaUwsU0FBQU4sZUFBQUMsc0JBQUEsR0FDQXo4QixLQUFBeUMsSUFBQXE2QixTQUFBdnhCLE9BQUEsRUFBQXVyQixRQUFBakYsa0JBQ0EySyxlQUFBQyxxQkFBQUssU0FBQXZ4QixPQUFBdXJCLFFBQUFqRixpQkFDQW1ILG9CQUFBbEMsUUFBQWpGLGdCQUVBZ0wsWUFBQS9GLFNBQ0F0NEIsTUFFQWkrQixvQkFBQUQsZUFBQWhoQyxTQUNBcWhDLGFBRUFFLG1CQUFBRixZQUFBSCxpQkFHQTE4QixLQUFBeUMsSUFBQSs1QixlQUFBdnJCLE9BQUF3ckIscUJBQUEvNUIsS0FBQSxNQUlBNDNCLG1CQUFBakcsUUFBQXBDLFFBQUEsU0FBQTBJLFlBQ0EsSUFBQTN4QixRQUFBc3hCLG1CQUFBaEIsaUJBQUFxQixZQUNBLE1BQUEzeEIsVUFDQSxNQUFBdXpCLGdCQUNBNUIsV0FBQXhNLEtBQUF6ckIsS0FBQTY1QixjQUFBNUIsYUFFQTM2QixLQUFBNjZCLGlCQUFBRixXQUFBM3hCLFlBSUFoSixLQUVBLFNBQUErOEIsbUJBQUFqRyxRQUFBMTdCLE1BQ0EsR0FBQSxPQUFBMDdCLGNBQUExMUIsSUFBQTAxQixRQUFBMTBCLE9BQ0FwQyxLQUFBeUMsSUFBQXJILFVBQ0EsQ0FDQSxJQUFBZ0gsT0FBQW02QixjQUNBcE8sS0FBQXpyQixLQUFBNjVCLGNBQUF6RixRQUFBMTBCLFFBQ0EwMEIsUUFBQTEwQixPQUNBcEMsS0FBQXlDLElBQUEsSUFBQXRCLFdBQUEyMUIsUUFBQXZCLGFBQ0F1QixRQUFBdEIsZUFDQXB6QixPQUNBaEgsS0FDQTA3QixRQUFBMzNCLFVBV0FnQyxXQUFBdEMsVUFBQTRELElBQUEsU0FBQXU2QixRQUNBLEdBQUF2WixNQUFBNWhCLFFBQUFtN0IsUUFDQUEsT0FBQS9LLFFBQUEsU0FBQXZ3QixPQUNBbEQsS0FBQWlFLElBQUFmLFFBQ0FsRCxVQUVBLENBQUEsSUFBQXcrQixPQUFBaEIsZUFBQSxpQkFBQWdCLE9BTUEsTUFBQSxJQUFBdk0sVUFDQSw4RUFBQXVNLFFBTkFBLFFBQ0F4K0IsS0FBQXdILFNBQUFoRSxLQUFBZzdCLFFBUUEsT0FBQXgrQixNQVNBMkMsV0FBQXRDLFVBQUE4RCxRQUFBLFNBQUFxNkIsUUFDQSxHQUFBdlosTUFBQTVoQixRQUFBbTdCLFFBQ0EsSUFBQSxJQUFBbmlDLEVBQUFtaUMsT0FBQXhoQyxPQUFBLEVBQUEsR0FBQVgsRUFBQUEsSUFDQTJELEtBQUFtRSxRQUFBcTZCLE9BQUFuaUMsUUFHQSxDQUFBLElBQUFtaUMsT0FBQWhCLGVBQUEsaUJBQUFnQixPQUlBLE1BQUEsSUFBQXZNLFVBQ0EsOEVBQUF1TSxRQUpBeCtCLEtBQUF3SCxTQUFBbEQsUUFBQWs2QixRQU9BLE9BQUF4K0IsTUFVQTJDLFdBQUF0QyxVQUFBbytCLEtBQUEsU0FBQUMsS0FFQSxJQURBLElBQUF4N0IsTUFDQTdHLEVBQUEsRUFBQWtILElBQUF2RCxLQUFBd0gsU0FBQXhLLE9BQUFYLEVBQUFrSCxJQUFBbEgsS0FDQTZHLE1BQUFsRCxLQUFBd0gsU0FBQW5MLElBQ0FtaEMsY0FDQXQ2QixNQUFBdTdCLEtBQUFDLEtBR0EsS0FBQXg3QixPQUNBdzdCLElBQUF4N0IsTUFBQSxDQUFBVSxPQUFBNUQsS0FBQTRELE9BQ0FDLEtBQUE3RCxLQUFBNkQsS0FDQUMsT0FBQTlELEtBQUE4RCxPQUNBbkQsS0FBQVgsS0FBQVcsUUFZQWdDLFdBQUF0QyxVQUFBNkQsS0FBQSxTQUFBeTZCLE1BQ0EsSUFBQUMsWUFDQXZpQyxFQUNBa0gsSUFBQXZELEtBQUF3SCxTQUFBeEssT0FDQSxHQUFBLEVBQUF1RyxJQUFBLENBRUEsSUFEQXE3QixZQUFBLEdBQ0F2aUMsRUFBQSxFQUFBQSxFQUFBa0gsSUFBQSxFQUFBbEgsSUFDQXVpQyxZQUFBcDdCLEtBQUF4RCxLQUFBd0gsU0FBQW5MLElBQ0F1aUMsWUFBQXA3QixLQUFBbTdCLE1BRUFDLFlBQUFwN0IsS0FBQXhELEtBQUF3SCxTQUFBbkwsSUFDQTJELEtBQUF3SCxTQUFBbzNCLFlBRUEsT0FBQTUrQixNQVVBMkMsV0FBQXRDLFVBQUF3K0IsYUFBQSxTQUFBQyxTQUFBQyxjQUNBLElBQUFDLFVBQUFoL0IsS0FBQXdILFNBQUF4SCxLQUFBd0gsU0FBQXhLLE9BQUEsR0FVQSxPQVRBZ2lDLFVBQUF4QixjQUNBd0IsVUFBQUgsYUFBQUMsU0FBQUMsY0FFQSxpQkFBQUMsVUFDQWgvQixLQUFBd0gsU0FBQXhILEtBQUF3SCxTQUFBeEssT0FBQSxHQUFBZ2lDLFVBQUE5NUIsUUFBQTQ1QixTQUFBQyxjQUdBLytCLEtBQUF3SCxTQUFBaEUsS0FBQSxHQUFBMEIsUUFBQTQ1QixTQUFBQyxlQUVBLytCLE1BVUEyQyxXQUFBdEMsVUFBQWc4QixpQkFDQSxTQUFBRSxZQUFBQyxnQkFDQXg4QixLQUFBNDlCLGVBQUFqTyxLQUFBZSxZQUFBNkwsY0FBQUMsZ0JBU0E3NUIsV0FBQXRDLFVBQUE0K0IsbUJBQ0EsU0FBQVAsS0FDQSxJQUFBLElBQUFyaUMsRUFBQSxFQUFBa0gsSUFBQXZELEtBQUF3SCxTQUFBeEssT0FBQVgsRUFBQWtILElBQUFsSCxJQUNBMkQsS0FBQXdILFNBQUFuTCxHQUFBbWhDLGVBQ0F4OUIsS0FBQXdILFNBQUFuTCxHQUFBNGlDLG1CQUFBUCxLQUlBLElBQUE3SSxRQUFBakwsT0FBQTZSLEtBQUF6OEIsS0FBQTQ5QixnQkFDQSxJQUFBdmhDLEVBQUEsRUFBQWtILElBQUFzeUIsUUFBQTc0QixPQUFBWCxFQUFBa0gsSUFBQWxILElBQ0FxaUMsSUFBQS9PLEtBQUF1UCxjQUFBckosUUFBQXg1QixJQUFBMkQsS0FBQTQ5QixlQUFBL0gsUUFBQXg1QixNQVFBc0csV0FBQXRDLFVBQUFTLFNBQUEsV0FDQSxJQUFBbUUsSUFBQSxHQUlBLE9BSEFqRixLQUFBeStCLEtBQUEsU0FBQXY3QixPQUNBK0IsS0FBQS9CLFFBRUErQixLQU9BdEMsV0FBQXRDLFVBQUErRCxzQkFBQSxTQUFBbzBCLE9BQ0EsSUFBQXlELFVBQUEsQ0FDQXIvQixLQUFBLEdBQ0FpSCxLQUFBLEVBQ0FDLE9BQUEsR0FFQXFOLElBQUEsSUFBQXdxQixtQkFBQW5ELE9BQ0EyRyxxQkFBQSxFQUNBQyxtQkFBQSxLQUNBQyxpQkFBQSxLQUNBQyxtQkFBQSxLQUNBQyxpQkFBQSxLQXFFQSxPQXBFQXYvQixLQUFBeStCLEtBQUEsU0FBQXY3QixNQUFBbkIsVUFDQWs2QixVQUFBci9CLE1BQUFzRyxNQUNBLE9BQUFuQixTQUFBNkIsUUFDQSxPQUFBN0IsU0FBQThCLE1BQ0EsT0FBQTlCLFNBQUErQixRQUNBczdCLHFCQUFBcjlCLFNBQUE2QixRQUNBeTdCLG1CQUFBdDlCLFNBQUE4QixNQUNBeTdCLHFCQUFBdjlCLFNBQUErQixRQUNBeTdCLG1CQUFBeDlCLFNBQUFwQixNQUNBd1EsSUFBQStxQixXQUFBLENBQ0F0NEIsT0FBQTdCLFNBQUE2QixPQUNBN0IsU0FBQSxDQUNBOEIsS0FBQTlCLFNBQUE4QixLQUNBQyxPQUFBL0IsU0FBQStCLFFBRUFtNEIsVUFBQSxDQUNBcDRCLEtBQUFvNEIsVUFBQXA0QixLQUNBQyxPQUFBbTRCLFVBQUFuNEIsUUFFQW5ELEtBQUFvQixTQUFBcEIsT0FHQXkrQixtQkFBQXI5QixTQUFBNkIsT0FDQXk3QixpQkFBQXQ5QixTQUFBOEIsS0FDQXk3QixtQkFBQXY5QixTQUFBK0IsT0FDQXk3QixpQkFBQXg5QixTQUFBcEIsS0FDQXcrQixxQkFBQSxHQUNBQSxzQkFDQWh1QixJQUFBK3FCLFdBQUEsQ0FDQUQsVUFBQSxDQUNBcDRCLEtBQUFvNEIsVUFBQXA0QixLQUNBQyxPQUFBbTRCLFVBQUFuNEIsVUFHQXM3QixtQkFBQSxLQUNBRCxxQkFBQSxHQUVBLElBQUEsSUFBQTFVLElBQUEsRUFBQXp0QixPQUFBa0csTUFBQWxHLE9BQUF5dEIsSUFBQXp0QixPQUFBeXRCLE1BM1dBLEtBNFdBdm5CLE1BQUE0dUIsV0FBQXJILE1BQ0F3UixVQUFBcDRCLE9BQ0FvNEIsVUFBQW40QixPQUFBLEVBRUEybUIsSUFBQSxJQUFBenRCLFFBQ0FvaUMsbUJBQUEsS0FDQUQscUJBQUEsR0FDQUEscUJBQ0FodUIsSUFBQStxQixXQUFBLENBQ0F0NEIsT0FBQTdCLFNBQUE2QixPQUNBN0IsU0FBQSxDQUNBOEIsS0FBQTlCLFNBQUE4QixLQUNBQyxPQUFBL0IsU0FBQStCLFFBRUFtNEIsVUFBQSxDQUNBcDRCLEtBQUFvNEIsVUFBQXA0QixLQUNBQyxPQUFBbTRCLFVBQUFuNEIsUUFFQW5ELEtBQUFvQixTQUFBcEIsUUFJQXM3QixVQUFBbjRCLFdBSUE5RCxLQUFBaS9CLG1CQUFBLFNBQUE5QyxXQUFBcUQsZUFDQXJ1QixJQUFBa3JCLGlCQUFBRixXQUFBcUQsaUJBR0EsQ0FBQTVpQyxLQUFBcS9CLFVBQUFyL0IsS0FBQXVVLElBQUFBLE1BR0FyVSxRQUFBNkYsV0FBQUEsNEZDbFlBN0YsUUFBQTg0QixPQVRBLFNBQUE0QyxNQUFBd0UsTUFBQXlDLGVBQ0EsR0FBQXpDLFNBQUF4RSxNQUNBLE9BQUFBLE1BQUF3RSxPQUNBLEdBQUEsSUFBQW40QixVQUFBN0gsT0FDQSxPQUFBeWlDLGNBRUEsTUFBQSxJQUFBOWlDLE1BQUEsSUFBQXFnQyxNQUFBLDhCQUtBLElBQUEwQyxVQUFBLGlFQUNBQyxjQUFBLGdCQUVBLFNBQUEzRSxTQUFBNEUsTUFDQSxJQUFBNWEsTUFBQTRhLEtBQUE1YSxNQUFBMGEsV0FDQSxPQUFBMWEsTUFHQSxDQUNBa1csT0FBQWxXLE1BQUEsR0FDQTZhLEtBQUE3YSxNQUFBLEdBQ0E4YSxLQUFBOWEsTUFBQSxHQUNBK2EsS0FBQS9hLE1BQUEsR0FDQW5qQixLQUFBbWpCLE1BQUEsSUFQQSxLQVlBLFNBQUFnYixZQUFBQyxZQUNBLElBQUE5SSxJQUFBLEdBaUJBLE9BaEJBOEksV0FBQS9FLFNBQ0EvRCxLQUFBOEksV0FBQS9FLE9BQUEsS0FFQS9ELEtBQUEsS0FDQThJLFdBQUFKLE9BQ0ExSSxLQUFBOEksV0FBQUosS0FBQSxLQUVBSSxXQUFBSCxPQUNBM0ksS0FBQThJLFdBQUFILE1BRUFHLFdBQUFGLE9BQ0E1SSxLQUFBLElBQUE4SSxXQUFBRixNQUVBRSxXQUFBcCtCLE9BQ0FzMUIsS0FBQThJLFdBQUFwK0IsTUFFQXMxQixJQWVBLFNBQUFoQixVQUFBK0osT0FDQSxJQUFBcitCLEtBQUFxK0IsTUFDQS9JLElBQUE2RCxTQUFBa0YsT0FDQSxHQUFBL0ksSUFBQSxDQUNBLElBQUFBLElBQUF0MUIsS0FDQSxPQUFBcStCLE1BRUFyK0IsS0FBQXMxQixJQUFBdDFCLEtBS0EsSUFIQSxJQUdBd0wsS0FIQWdwQixXQUFBdjVCLFFBQUF1NUIsV0FBQXgwQixNQUVBSSxNQUFBSixLQUFBNlYsTUFBQSxPQUNBeW9CLEdBQUEsRUFBQTlqQyxFQUFBNEYsTUFBQWpGLE9BQUEsRUFBQSxHQUFBWCxFQUFBQSxJQUVBLE9BREFnUixLQUFBcEwsTUFBQTVGLElBRUE0RixNQUFBd1EsT0FBQXBXLEVBQUEsR0FDQSxPQUFBZ1IsS0FDQTh5QixLQUNBLEVBQUFBLEtBQ0EsS0FBQTl5QixNQUlBcEwsTUFBQXdRLE9BQUFwVyxFQUFBLEVBQUE4akMsSUFDQUEsR0FBQSxJQUVBbCtCLE1BQUF3USxPQUFBcFcsRUFBQSxHQUNBOGpDLE9BVUEsTUFKQSxNQUZBdCtCLEtBQUFJLE1BQUFpQyxLQUFBLFFBR0FyQyxLQUFBdzBCLFdBQUEsSUFBQSxLQUdBYyxLQUNBQSxJQUFBdDFCLEtBQUFBLEtBQ0FtK0IsWUFBQTdJLE1BRUF0MUIsS0FvQkEsU0FBQXFDLEtBQUFrOEIsTUFBQUYsT0FDQSxLQUFBRSxRQUNBQSxNQUFBLEtBRUEsS0FBQUYsUUFDQUEsTUFBQSxLQUVBLElBQUFHLFNBQUFyRixTQUFBa0YsT0FDQUksU0FBQXRGLFNBQUFvRixPQU1BLEdBTEFFLFdBQ0FGLE1BQUFFLFNBQUF6K0IsTUFBQSxLQUlBdytCLFdBQUFBLFNBQUFuRixPQUlBLE9BSEFvRixXQUNBRCxTQUFBbkYsT0FBQW9GLFNBQUFwRixRQUVBOEUsWUFBQUssVUFHQSxHQUFBQSxVQUFBSCxNQUFBbGIsTUFBQTJhLGVBQ0EsT0FBQU8sTUFJQSxHQUFBSSxXQUFBQSxTQUFBUixPQUFBUSxTQUFBeitCLEtBRUEsT0FEQXkrQixTQUFBUixLQUFBSSxNQUNBRixZQUFBTSxVQUdBLElBQUFDLE9BQUEsTUFBQUwsTUFBQWh6QixPQUFBLEdBQ0FnekIsTUFDQS9KLFVBQUFpSyxNQUFBbDdCLFFBQUEsT0FBQSxJQUFBLElBQUFnN0IsT0FFQSxPQUFBSSxVQUNBQSxTQUFBeitCLEtBQUEwK0IsT0FDQVAsWUFBQU0sV0FFQUMsT0F2SUF6akMsUUFBQWsrQixTQUFBQSxTQXNCQWwrQixRQUFBa2pDLFlBQUFBLFlBd0RBbGpDLFFBQUFxNUIsVUFBQUEsVUEyREFyNUIsUUFBQW9ILEtBQUFBLEtBRUFwSCxRQUFBdTVCLFdBQUEsU0FBQTZKLE9BQ0EsTUFBQSxNQUFBQSxNQUFBaHpCLE9BQUEsSUFBQXd5QixVQUFBNTlCLEtBQUFvK0IsUUF5Q0FwakMsUUFBQXc1QixTQWhDQSxTQUFBOEosTUFBQUYsT0FDQSxLQUFBRSxRQUNBQSxNQUFBLEtBR0FBLE1BQUFBLE1BQUFsN0IsUUFBQSxNQUFBLElBT0EsSUFEQSxJQUFBZ25CLE1BQUEsRUFDQSxJQUFBZ1UsTUFBQTF6QixRQUFBNHpCLE1BQUEsTUFBQSxDQUNBLElBQUE5cEIsTUFBQThwQixNQUFBSSxZQUFBLEtBQ0EsR0FBQWxxQixNQUFBLEVBQ0EsT0FBQTRwQixNQU9BLElBREFFLE1BQUFBLE1BQUF6NUIsTUFBQSxFQUFBMlAsUUFDQTBPLE1BQUEscUJBQ0EsT0FBQWtiLFFBR0FoVSxNQUlBLE9BQUFqSCxNQUFBaUgsTUFBQSxHQUFBaG9CLEtBQUEsT0FBQWc4QixNQUFBbnpCLE9BQUFxekIsTUFBQXBqQyxPQUFBLElBSUEsSUFBQXlqQyxvQkFFQSxjQURBN1YsT0FBQXZ0QixPQUFBLE9BSUEsU0FBQXFqQyxTQUFBaEssR0FDQSxPQUFBQSxFQThCQSxTQUFBaUssY0FBQWpLLEdBQ0EsSUFBQUEsRUFDQSxPQUFBLEVBR0EsSUFBQTE1QixPQUFBMDVCLEVBQUExNUIsT0FFQSxHQUFBQSxPQUFBLEVBQ0EsT0FBQSxFQUdBLEdBQUEsS0FBQTA1QixFQUFBNUUsV0FBQTkwQixPQUFBLElBQ0EsS0FBQTA1QixFQUFBNUUsV0FBQTkwQixPQUFBLElBQ0EsTUFBQTA1QixFQUFBNUUsV0FBQTkwQixPQUFBLElBQ0EsTUFBQTA1QixFQUFBNUUsV0FBQTkwQixPQUFBLElBQ0EsTUFBQTA1QixFQUFBNUUsV0FBQTkwQixPQUFBLElBQ0EsTUFBQTA1QixFQUFBNUUsV0FBQTkwQixPQUFBLElBQ0EsTUFBQTA1QixFQUFBNUUsV0FBQTkwQixPQUFBLElBQ0EsS0FBQTA1QixFQUFBNUUsV0FBQTkwQixPQUFBLElBQ0EsS0FBQTA1QixFQUFBNUUsV0FBQTkwQixPQUFBLEdBQ0EsT0FBQSxFQUdBLElBQUEsSUFBQVgsRUFBQVcsT0FBQSxHQUFBLEdBQUFYLEVBQUFBLElBQ0EsR0FBQSxLQUFBcTZCLEVBQUE1RSxXQUFBejFCLEdBQ0EsT0FBQSxFQUlBLE9BQUEsRUFnRkEsU0FBQXVrQyxPQUFBQyxNQUFBQyxPQUNBLE9BQUFELFFBQUFDLE1BQ0EsRUFHQSxPQUFBRCxNQUNBLEVBR0EsT0FBQUMsT0FDQSxFQUdBQSxNQUFBRCxNQUNBLEdBR0EsRUF6SUEvakMsUUFBQTR6QixZQUFBK1Asa0JBQUFDLFNBUEEsU0FBQWxRLE1BQ0EsT0FBQW1RLGNBQUFuUSxNQUNBLElBQUFBLEtBR0FBLE1BV0ExekIsUUFBQW9pQyxjQUFBdUIsa0JBQUFDLFNBUEEsU0FBQWxRLE1BQ0EsT0FBQW1RLGNBQUFuUSxNQUNBQSxLQUFBN3BCLE1BQUEsR0FHQTZwQixNQXdFQTF6QixRQUFBODdCLDJCQTVCQSxTQUFBakYsU0FBQUMsU0FBQW1OLHFCQUNBLElBQUEvTixJQUFBNE4sT0FBQWpOLFNBQUEvdkIsT0FBQWd3QixTQUFBaHdCLFFBQ0EsT0FBQSxJQUFBb3ZCLElBQ0FBLElBSUEsSUFEQUEsSUFBQVcsU0FBQW9ELGFBQUFuRCxTQUFBbUQsY0FFQS9ELElBSUEsSUFEQUEsSUFBQVcsU0FBQXFELGVBQUFwRCxTQUFBb0QsaUJBQ0ErSixvQkFDQS9OLElBSUEsSUFEQUEsSUFBQVcsU0FBQU4sZ0JBQUFPLFNBQUFQLGlCQUVBTCxJQUlBLElBREFBLElBQUFXLFNBQUFQLGNBQUFRLFNBQUFSLGVBRUFKLElBR0E0TixPQUFBak4sU0FBQWh6QixLQUFBaXpCLFNBQUFqekIsT0F5Q0E3RCxRQUFBbTlCLG9DQTVCQSxTQUFBdEcsU0FBQUMsU0FBQW9OLHNCQUNBLElBQUFoTyxJQUFBVyxTQUFBUCxjQUFBUSxTQUFBUixjQUNBLE9BQUEsSUFBQUosSUFDQUEsSUFJQSxJQURBQSxJQUFBVyxTQUFBTixnQkFBQU8sU0FBQVAsa0JBQ0EyTixxQkFDQWhPLElBSUEsS0FEQUEsSUFBQTROLE9BQUFqTixTQUFBL3ZCLE9BQUFnd0IsU0FBQWh3QixTQUVBb3ZCLElBSUEsSUFEQUEsSUFBQVcsU0FBQW9ELGFBQUFuRCxTQUFBbUQsY0FFQS9ELElBSUEsSUFEQUEsSUFBQVcsU0FBQXFELGVBQUFwRCxTQUFBb0QsZ0JBRUFoRSxJQUdBNE4sT0FBQWpOLFNBQUFoekIsS0FBQWl6QixTQUFBanpCLE9Bd0RBN0QsUUFBQW0zQixvQ0E1QkEsU0FBQU4sU0FBQUMsVUFDQSxJQUFBWixJQUFBVyxTQUFBUCxjQUFBUSxTQUFBUixjQUNBLE9BQUEsSUFBQUosSUFDQUEsSUFJQSxJQURBQSxJQUFBVyxTQUFBTixnQkFBQU8sU0FBQVAsaUJBRUFMLElBSUEsS0FEQUEsSUFBQTROLE9BQUFqTixTQUFBL3ZCLE9BQUFnd0IsU0FBQWh3QixTQUVBb3ZCLElBSUEsSUFEQUEsSUFBQVcsU0FBQW9ELGFBQUFuRCxTQUFBbUQsY0FFQS9ELElBSUEsSUFEQUEsSUFBQVcsU0FBQXFELGVBQUFwRCxTQUFBb0QsZ0JBRUFoRSxJQUdBNE4sT0FBQWpOLFNBQUFoekIsS0FBQWl6QixTQUFBanpCLE9BWUE3RCxRQUFBeTRCLG9CQUhBLFNBQUF0d0IsS0FDQSxPQUFBMkosS0FBQXhRLE1BQUE2RyxJQUFBQyxRQUFBLGlCQUFBLE1BdURBcEksUUFBQTY1QixpQkEvQ0EsU0FBQVosV0FBQWtMLFVBQUFDLGNBOEJBLEdBN0JBRCxVQUFBQSxXQUFBLEdBRUFsTCxhQUVBLE1BQUFBLFdBQUFBLFdBQUEvNEIsT0FBQSxJQUFBLE1BQUFpa0MsVUFBQSxLQUNBbEwsWUFBQSxLQU9Ba0wsVUFBQWxMLFdBQUFrTCxXQWlCQUMsYUFBQSxDQUNBLElBQUFDLE9BQUFuRyxTQUFBa0csY0FDQSxJQUFBQyxPQUNBLE1BQUEsSUFBQXhrQyxNQUFBLG9DQUVBLEdBQUF3a0MsT0FBQXQvQixLQUFBLENBRUEsSUFBQXlVLE1BQUE2cUIsT0FBQXQvQixLQUFBMitCLFlBQUEsS0FDQSxHQUFBbHFCLFFBQ0E2cUIsT0FBQXQvQixLQUFBcy9CLE9BQUF0L0IsS0FBQXNRLFVBQUEsRUFBQW1FLE1BQUEsSUFHQTJxQixVQUFBLzhCLEtBQUE4N0IsWUFBQW1CLFFBQUFGLFdBR0EsT0FBQTlLLFVBQUE4SyxzRENoZUFua0MsUUFBQTYrQixtQkFBQW4vQixRQUFBLDhCQUFBbS9CLG1CQUNBNytCLFFBQUFxNEIsa0JBQUEzNEIsUUFBQSw2QkFBQTI0QixrQkFDQXI0QixRQUFBNkYsV0FBQW5HLFFBQUEscUJBQUFtRywySUNNQSxTQUFBa3FCLE9BQUF1VSxTQUVBLGFBRUEsaUJBQUFsa0MsUUFBQSxpQkFBQUEsT0FBQUosUUFTQUksT0FBQUosUUFBQSt2QixPQUFBd1UsU0FDQUQsUUFBQXZVLFFBQUEsR0FDQSxTQUFBeVUsR0FDQSxJQUFBQSxFQUFBRCxTQUNBLE1BQUEsSUFBQTFrQyxNQUFBLDRDQUVBLE9BQUF5a0MsUUFBQUUsSUFHQUYsUUFBQXZVLFFBdEJBLENBMEJBLG9CQUFBQyxPQUFBQSxPQUFBOXNCLEtBQUEsU0FBQThzQixPQUFBeVUsVUFNQSxhQUVBLElBQUFDLElBQUEsR0FFQUgsU0FBQXZVLE9BQUF1VSxTQUVBSSxTQUFBN1csT0FBQThXLGVBRUEvNkIsTUFBQTY2QixJQUFBNzZCLE1BRUE2SyxPQUFBZ3dCLElBQUFod0IsT0FFQWhPLEtBQUFnK0IsSUFBQWgrQixLQUVBZ0osUUFBQWcxQixJQUFBaDFCLFFBRUFtMUIsV0FBQSxHQUVBN2dDLFNBQUE2Z0MsV0FBQTdnQyxTQUVBOGdDLE9BQUFELFdBQUFwOEIsZUFFQXM4QixXQUFBRCxPQUFBOWdDLFNBRUFnaEMscUJBQUFELFdBQUE5a0MsS0FBQTZ0QixRQUVBbVgsUUFBQSxHQUVBbFcsV0FBQSxTQUFBem1CLEtBTUEsTUFBQSxtQkFBQUEsS0FBQSxpQkFBQUEsSUFBQTQ4QixVQUlBQyxTQUFBLFNBQUE3OEIsS0FDQSxPQUFBLE1BQUFBLEtBQUFBLE1BQUFBLElBQUEwbkIsUUFNQW9WLDBCQUFBLENBQ0F6Z0MsTUFBQSxFQUNBdUMsS0FBQSxFQUNBbStCLFVBQUEsR0FHQSxTQUFBQyxRQUFBeGxDLEtBQUF5bEMsSUFBQTdnQyxNQUdBLElBQUFuRixFQUNBaW1DLFFBSEFELElBQUFBLEtBQUFoQixVQUdBa0IsY0FBQSxVQUdBLEdBREFELE9BQUF2ZCxLQUFBbm9CLEtBQ0E0RSxLQUNBLElBQUFuRixLQUFBNmxDLDBCQUNBMWdDLEtBQUFuRixLQUNBaW1DLE9BQUFqbUMsR0FBQW1GLEtBQUFuRixJQUlBZ21DLElBQUFHLEtBQUFDLFlBQUFILFFBQUFJLFdBQUFDLFlBQUFMLFFBSUEsU0FBQU0sT0FBQXg5QixLQUNBLE9BQUEsTUFBQUEsSUFDQUEsSUFBQSxHQUlBLGlCQUFBQSxLQUFBLG1CQUFBQSxJQUNBdThCLFdBQUE3Z0MsU0FBQS9ELEtBQUFxSSxPQUFBLGdCQUNBQSxJQVFBLElBSUF5OUIsT0FBQSxTQUFBQyxTQUFBMThCLFNBSUEsT0FBQSxJQUFBeThCLE9BQUFqaUMsR0FBQW1pQyxLQUFBRCxTQUFBMThCLFVBS0E0OEIsTUFBQSxxQ0FtVkEsU0FBQUMsWUFBQTc5QixLQU1BLElBQUFwSSxTQUFBb0ksS0FBQSxXQUFBQSxLQUFBQSxJQUFBcEksT0FDQXlFLEtBQUFtaEMsT0FBQXg5QixLQUVBLE9BQUF5bUIsV0FBQXptQixPQUFBNjhCLFNBQUE3OEIsT0FJQSxVQUFBM0QsTUFBQSxJQUFBekUsUUFDQSxpQkFBQUEsUUFBQSxFQUFBQSxRQUFBQSxPQUFBLEtBQUFvSSxLQS9WQXk5QixPQUFBamlDLEdBQUFpaUMsT0FBQXhpQyxVQUFBLENBR0E2aUMsT0FqQkEsUUFtQkE1aUMsWUFBQXVpQyxPQUdBN2xDLE9BQUEsRUFFQSt6QixRQUFBLFdBQ0EsT0FBQXBxQixNQUFBNUosS0FBQWlELE9BS0E0d0IsSUFBQSxTQUFBdVMsS0FHQSxPQUFBLE1BQUFBLElBQ0F4OEIsTUFBQTVKLEtBQUFpRCxNQUlBbWpDLElBQUEsRUFBQW5qQyxLQUFBbWpDLElBQUFuakMsS0FBQWhELFFBQUFnRCxLQUFBbWpDLE1BS0FDLFVBQUEsU0FBQUMsT0FHQSxJQUFBLy9CLElBQUF1L0IsT0FBQXQrQixNQUFBdkUsS0FBQU0sY0FBQStpQyxPQU1BLE9BSEEvL0IsSUFBQWdnQyxXQUFBdGpDLEtBR0FzRCxLQUlBbUIsS0FBQSxTQUFBaVMsVUFDQSxPQUFBbXNCLE9BQUFwK0IsS0FBQXpFLEtBQUEwVyxXQUdBdkYsSUFBQSxTQUFBdUYsVUFDQSxPQUFBMVcsS0FBQW9qQyxVQUFBUCxPQUFBMXhCLElBQUFuUixLQUFBLFNBQUF1akMsS0FBQWxuQyxHQUNBLE9BQUFxYSxTQUFBM1osS0FBQXdtQyxLQUFBbG5DLEVBQUFrbkMsVUFJQTU4QixNQUFBLFdBQ0EsT0FBQTNHLEtBQUFvakMsVUFBQXo4QixNQUFBNkosTUFBQXhRLEtBQUE2RSxhQUdBK21CLE1BQUEsV0FDQSxPQUFBNXJCLEtBQUF3akMsR0FBQSxJQUdBN1gsS0FBQSxXQUNBLE9BQUEzckIsS0FBQXdqQyxJQUFBLElBR0FBLEdBQUEsU0FBQW5uQyxHQUNBLElBQUFrSCxJQUFBdkQsS0FBQWhELE9BQ0E4dUIsR0FBQXp2QixHQUFBQSxFQUFBLEVBQUFrSCxJQUFBLEdBQ0EsT0FBQXZELEtBQUFvakMsVUFBQSxHQUFBdFgsR0FBQUEsRUFBQXZvQixJQUFBLENBQUF2RCxLQUFBOHJCLElBQUEsS0FHQW5mLElBQUEsV0FDQSxPQUFBM00sS0FBQXNqQyxZQUFBdGpDLEtBQUFNLGVBS0FrRCxLQUFBQSxLQUNBMHdCLEtBQUFzTixJQUFBdE4sS0FDQXpoQixPQUFBK3VCLElBQUEvdUIsUUFHQW93QixPQUFBL2pDLE9BQUErakMsT0FBQWppQyxHQUFBOUIsT0FBQSxXQUNBLElBQUFyQixRQUFBa0QsS0FBQXFELElBQUF5L0IsS0FBQUMsWUFBQUMsTUFDQUMsT0FBQS8rQixVQUFBLElBQUEsR0FDQXhJLEVBQUEsRUFDQVcsT0FBQTZILFVBQUE3SCxPQUNBNm1DLE1BQUEsRUFzQkEsSUFuQkEsa0JBQUFELFNBQ0FDLEtBQUFELE9BR0FBLE9BQUEvK0IsVUFBQXhJLElBQUEsR0FDQUEsS0FJQSxpQkFBQXVuQyxRQUFBL1gsV0FBQStYLFVBQ0FBLE9BQUEsSUFJQXZuQyxJQUFBVyxTQUNBNG1DLE9BQUE1akMsS0FDQTNELEtBR0FBLEVBQUFXLE9BQUFYLElBR0EsR0FBQSxPQUFBb0IsUUFBQW9ILFVBQUF4SSxJQUdBLElBQUFzRSxRQUFBbEQsUUFDQXVHLElBQUE0L0IsT0FBQWpqQyxNQUlBaWpDLFVBSEFILEtBQUFobUMsUUFBQWtELFNBUUFrakMsTUFBQUosT0FBQVosT0FBQWlCLGNBQUFMLFFBQ0FDLFlBQUF6ZSxNQUFBNWhCLFFBQUFvZ0MsU0FJQUUsTUFGQUQsYUFDQUEsYUFBQSxFQUNBMS9CLEtBQUFpaEIsTUFBQTVoQixRQUFBVyxLQUFBQSxJQUFBLElBR0FBLEtBQUE2K0IsT0FBQWlCLGNBQUE5L0IsS0FBQUEsSUFBQSxHQUlBNC9CLE9BQUFqakMsTUFBQWtpQyxPQUFBL2pDLE9BQUEra0MsS0FBQUYsTUFBQUYsWUFHQTdnQyxJQUFBNmdDLE9BQ0FHLE9BQUFqakMsTUFBQThpQyxPQU9BLE9BQUFHLFFBR0FmLE9BQUEvakMsT0FBQSxDQUdBaWxDLFFBQUEsVUF2S0EsUUF1S0FqUixLQUFBK0IsVUFBQTN2QixRQUFBLE1BQUEsSUFHQTgrQixTQUFBLEVBRUFoc0IsTUFBQSxTQUFBaXNCLEtBQ0EsTUFBQSxJQUFBdG5DLE1BQUFzbkMsTUFHQWxXLEtBQUEsYUFFQStWLGNBQUEsU0FBQTErQixLQUNBLElBQUE4K0IsTUFBQUMsS0FJQSxTQUFBLytCLEtBQUEsb0JBQUF0RSxTQUFBL0QsS0FBQXFJLFVBSUE4K0IsTUFBQXpDLFNBQUFyOEIsT0FTQSxtQkFEQSsrQixLQUFBdkMsT0FBQTdrQyxLQUFBbW5DLE1BQUEsZ0JBQUFBLE1BQUE1akMsY0FDQXVoQyxXQUFBOWtDLEtBQUFvbkMsUUFBQXJDLHVCQUdBc0MsY0FBQSxTQUFBaC9CLEtBSUEsSUFBQXpFLEtBRUEsSUFBQUEsUUFBQXlFLElBQ0EsT0FBQSxFQUVBLE9BQUEsR0FJQWkvQixXQUFBLFNBQUF6bkMsTUFDQXdsQyxRQUFBeGxDLE9BR0E2SCxLQUFBLFNBQUFXLElBQUFzUixVQUNBLElBQUExWixPQUFBWCxFQUFBLEVBRUEsR0FBQTRtQyxZQUFBNzlCLEtBRUEsSUFEQXBJLE9BQUFvSSxJQUFBcEksT0FDQVgsRUFBQVcsU0FDQSxJQUFBMFosU0FBQTNaLEtBQUFxSSxJQUFBL0ksR0FBQUEsRUFBQStJLElBQUEvSSxJQURBQSxVQU1BLElBQUFBLEtBQUErSSxJQUNBLElBQUEsSUFBQXNSLFNBQUEzWixLQUFBcUksSUFBQS9JLEdBQUFBLEVBQUErSSxJQUFBL0ksSUFDQSxNQUtBLE9BQUErSSxLQUlBay9CLEtBQUEsU0FBQXZmLE1BQ0EsT0FBQSxNQUFBQSxLQUNBLElBQ0FBLEtBQUEsSUFBQTdmLFFBQUE4OUIsTUFBQSxLQUlBdUIsVUFBQSxTQUFBL0MsSUFBQWdELFNBQ0EsSUFBQWxoQyxJQUFBa2hDLFNBQUEsR0FhQSxPQVhBLE1BQUFoRCxNQUNBeUIsWUFBQXJZLE9BQUE0VyxNQUNBcUIsT0FBQXQrQixNQUFBakIsSUFDQSxpQkFBQWsrQixJQUNBLENBQUFBLEtBQUFBLEtBR0FoK0IsS0FBQXpHLEtBQUF1RyxJQUFBaytCLE1BSUFsK0IsS0FHQW1oQyxRQUFBLFNBQUFsQixLQUFBL0IsSUFBQW5sQyxHQUNBLE9BQUEsTUFBQW1sQyxLQUFBLEVBQUFoMUIsUUFBQXpQLEtBQUF5a0MsSUFBQStCLEtBQUFsbkMsSUFLQWtJLE1BQUEsU0FBQXFuQixNQUFBOFksUUFLQSxJQUpBLElBQUFuaEMsS0FBQW1oQyxPQUFBMW5DLE9BQ0E4dUIsRUFBQSxFQUNBenZCLEVBQUF1dkIsTUFBQTV1QixPQUVBOHVCLEVBQUF2b0IsSUFBQXVvQixJQUNBRixNQUFBdnZCLEtBQUFxb0MsT0FBQTVZLEdBS0EsT0FGQUYsTUFBQTV1QixPQUFBWCxFQUVBdXZCLE9BR0ErWSxLQUFBLFNBQUF0QixNQUFBM3NCLFNBQUFrdUIsUUFTQSxJQVJBLElBQ0FuZSxRQUFBLEdBQ0FwcUIsRUFBQSxFQUNBVyxPQUFBcW1DLE1BQUFybUMsT0FDQTZuQyxnQkFBQUQsT0FJQXZvQyxFQUFBVyxPQUFBWCxLQUNBcWEsU0FBQTJzQixNQUFBaG5DLEdBQUFBLEtBQ0F3b0MsZ0JBQ0FwZSxRQUFBampCLEtBQUE2L0IsTUFBQWhuQyxJQUlBLE9BQUFvcUIsU0FJQXRWLElBQUEsU0FBQWt5QixNQUFBM3NCLFNBQUFvdUIsS0FDQSxJQUFBOW5DLE9BQUF3SSxNQUNBbkosRUFBQSxFQUNBaUgsSUFBQSxHQUdBLEdBQUEyL0IsWUFBQUksT0FFQSxJQURBcm1DLE9BQUFxbUMsTUFBQXJtQyxPQUNBWCxFQUFBVyxPQUFBWCxJQUdBLE9BRkFtSixNQUFBa1IsU0FBQTJzQixNQUFBaG5DLEdBQUFBLEVBQUF5b0MsT0FHQXhoQyxJQUFBRSxLQUFBZ0MsWUFNQSxJQUFBbkosS0FBQWduQyxNQUdBLE9BRkE3OUIsTUFBQWtSLFNBQUEyc0IsTUFBQWhuQyxHQUFBQSxFQUFBeW9DLE9BR0F4aEMsSUFBQUUsS0FBQWdDLE9BTUEsT0FBQWdNLE9BQUFoQixNQUFBLEdBQUFsTixNQUlBbUUsS0FBQSxFQUlBczZCLFFBQUFBLFVBR0EsbUJBQUFnRCxTQUNBbEMsT0FBQWppQyxHQUFBbWtDLE9BQUFDLFVBQUF4RCxJQUFBdUQsT0FBQUMsV0FJQW5DLE9BQUFwK0IsS0FBQSx1RUFBQWlULE1BQUEsS0FDQSxTQUFBcmIsRUFBQXNFLE1BQ0FnaEMsV0FBQSxXQUFBaGhDLEtBQUEsS0FBQUEsS0FBQTJyQixnQkFtQkEsSUFBQTJZLE9BV0EsU0FBQW5ZLFFBRUEsSUFBQXp3QixFQUNBMGxDLFFBQ0FtRCxLQUNBQyxRQUNBQyxNQUNBQyxTQUNBOW5DLFFBQ0ErbkMsT0FDQUMsaUJBQ0FDLFVBQ0FDLGFBR0FDLFlBQ0FyRSxTQUNBc0UsUUFDQUMsZUFDQUMsVUFDQUMsY0FDQXJmLFFBQ0FzZixTQUdBaEMsUUFBQSxTQUFBLEVBQUEsSUFBQWlDLEtBQ0FDLGFBQUFuWixPQUFBdVUsU0FDQTZFLFFBQUEsRUFDQTVnQixLQUFBLEVBQ0E2Z0IsV0FBQUMsY0FDQUMsV0FBQUQsY0FDQUUsY0FBQUYsY0FDQUcsVUFBQSxTQUFBN3BDLEVBQUFtSyxHQUlBLE9BSEFuSyxJQUFBbUssSUFDQTQrQixjQUFBLEdBRUEsR0FJQTdELE9BQUEsR0FBQXI4QixlQUNBaThCLElBQUEsR0FDQTNzQixJQUFBMnNCLElBQUEzc0IsSUFDQTJ4QixZQUFBaEYsSUFBQWgrQixLQUNBQSxLQUFBZytCLElBQUFoK0IsS0FDQW1ELE1BQUE2NkIsSUFBQTc2QixNQUdBNkYsUUFBQSxTQUFBMEQsS0FBQXF6QixNQUdBLElBRkEsSUFBQWxuQyxFQUFBLEVBQ0FrSCxJQUFBMk0sS0FBQWxULE9BQ0FYLEVBQUFrSCxJQUFBbEgsSUFDQSxHQUFBNlQsS0FBQTdULEtBQUFrbkMsS0FDQSxPQUFBbG5DLEVBR0EsT0FBQSxHQUdBb3FDLFNBQUEsNkhBS0FDLFdBQUEsc0JBR0FDLFdBQUEsZ0NBR0FDLFdBQUEsTUFBQUYsV0FBQSxLQUFBQyxXQUFBLE9BQUFELFdBRUEsZ0JBQUFBLFdBRUEsMkRBQUFDLFdBQUEsT0FBQUQsV0FDQSxPQUVBRyxRQUFBLEtBQUFGLFdBQUEsd0ZBS0FDLFdBQUEsZUFNQUUsWUFBQSxJQUFBQyxPQUFBTCxXQUFBLElBQUEsS0FDQTFELE1BQUEsSUFBQStELE9BQUEsSUFBQUwsV0FBQSw4QkFBQUEsV0FBQSxLQUFBLEtBRUFNLE9BQUEsSUFBQUQsT0FBQSxJQUFBTCxXQUFBLEtBQUFBLFdBQUEsS0FDQU8sYUFBQSxJQUFBRixPQUFBLElBQUFMLFdBQUEsV0FBQUEsV0FBQSxJQUFBQSxXQUFBLEtBRUFRLGlCQUFBLElBQUFILE9BQUEsSUFBQUwsV0FBQSxpQkFBQUEsV0FBQSxPQUFBLEtBRUFTLFFBQUEsSUFBQUosT0FBQUYsU0FDQU8sWUFBQSxJQUFBTCxPQUFBLElBQUFKLFdBQUEsS0FFQVUsVUFBQSxDQUNBNXJCLEdBQUEsSUFBQXNyQixPQUFBLE1BQUFKLFdBQUEsS0FDQVcsTUFBQSxJQUFBUCxPQUFBLFFBQUFKLFdBQUEsS0FDQVksSUFBQSxJQUFBUixPQUFBLEtBQUFKLFdBQUEsU0FDQWEsS0FBQSxJQUFBVCxPQUFBLElBQUFILFlBQ0FhLE9BQUEsSUFBQVYsT0FBQSxJQUFBRixTQUNBYSxNQUFBLElBQUFYLE9BQUEseURBQUFMLFdBQ0EsK0JBQUFBLFdBQUEsY0FBQUEsV0FDQSxhQUFBQSxXQUFBLFNBQUEsS0FDQWo3QixLQUFBLElBQUFzN0IsT0FBQSxPQUFBTixTQUFBLEtBQUEsS0FHQWtCLGFBQUEsSUFBQVosT0FBQSxJQUFBTCxXQUFBLG1EQUNBQSxXQUFBLG1CQUFBQSxXQUFBLG1CQUFBLE1BR0FrQixRQUFBLHNDQUNBQyxRQUFBLFNBRUFDLFFBQUEseUJBR0FDLFdBQUEsbUNBRUFDLFNBQUEsT0FJQUMsVUFBQSxJQUFBbEIsT0FBQSxxQkFBQUwsV0FBQSxNQUFBQSxXQUFBLE9BQUEsTUFDQXdCLFVBQUEsU0FBQUMsRUFBQS85QixRQUFBZytCLG1CQUNBLElBQUF6VCxLQUFBLEtBQUF2cUIsUUFBQSxNQUlBLE9BQUF1cUIsTUFBQUEsTUFBQXlULGtCQUNBaCtCLFFBQ0F1cUIsS0FBQSxFQUVBeUIsT0FBQWlTLGFBQUExVCxLQUFBLE9BRUF5QixPQUFBaVMsYUFBQTFULE1BQUEsR0FBQSxNQUFBLEtBQUFBLEtBQUEsUUFLQTJULFdBQUEsc0RBQ0FDLFdBQUEsU0FBQTdpQixHQUFBOGlCLGFBQ0EsT0FBQUEsWUFHQSxPQUFBOWlCLEdBQ0EsSUFJQUEsR0FBQS9lLE1BQUEsR0FBQSxHQUFBLEtBQUErZSxHQUFBb00sV0FBQXBNLEdBQUExb0IsT0FBQSxHQUFBOEQsU0FBQSxJQUFBLElBSUEsS0FBQTRrQixJQU9BK2lCLGNBQUEsV0FDQS9DLGVBR0FnRCxpQkFBQUMsY0FDQSxTQUFBcEYsTUFDQSxPQUFBLElBQUFBLEtBQUFxRixXQUFBLFNBQUFyRixNQUFBLFVBQUFBLE9BRUEsQ0FBQXNGLElBQUEsYUFBQTFpQixLQUFBLFdBSUEsSUFDQTNpQixLQUFBZ04sTUFDQWd4QixJQUFBNzZCLE1BQUE1SixLQUFBa3BDLGFBQUE2QyxZQUNBN0MsYUFBQTZDLFlBSUF0SCxJQUFBeUUsYUFBQTZDLFdBQUE5ckMsUUFBQWdsQyxTQUNBLE1BQUEvbEMsR0FDQXVILEtBQUEsQ0FBQWdOLE1BQUFneEIsSUFBQXhrQyxPQUdBLFNBQUE0bUMsT0FBQW1GLEtBQ0F2QyxZQUFBaDJCLE1BQUFvekIsT0FBQWo5QixNQUFBNUosS0FBQWdzQyxPQUtBLFNBQUFuRixPQUFBbUYsS0FJQSxJQUhBLElBQUFqZCxFQUFBOFgsT0FBQTVtQyxPQUNBWCxFQUFBLEVBRUF1bkMsT0FBQTlYLEtBQUFpZCxJQUFBMXNDLE9BQ0F1bkMsT0FBQTVtQyxPQUFBOHVCLEVBQUEsSUFLQSxTQUFBbVosT0FBQW5DLFNBQUExOEIsUUFBQW8rQixRQUFBd0UsTUFDQSxJQUFBQyxFQUFBNXNDLEVBQUFrbkMsS0FBQTJGLElBQUFsa0IsTUFBQW1rQixPQUFBQyxZQUNBQyxXQUFBampDLFNBQUFBLFFBQUFrakMsY0FHQXRILFNBQUE1N0IsUUFBQUEsUUFBQTQ3QixTQUFBLEVBS0EsR0FIQXdDLFFBQUFBLFNBQUEsR0FHQSxpQkFBQTFCLFdBQUFBLFVBQ0EsSUFBQWQsVUFBQSxJQUFBQSxVQUFBLEtBQUFBLFNBRUEsT0FBQXdDLFFBSUEsSUFBQXdFLFFBRUE1aUMsUUFBQUEsUUFBQWtqQyxlQUFBbGpDLFFBQUE2L0IsZ0JBQUE1RSxVQUNBcUUsWUFBQXQvQixTQUVBQSxRQUFBQSxTQUFBaTdCLFNBRUF1RSxnQkFBQSxDQUlBLEdBQUEsS0FBQTVELFdBQUFoZCxNQUFBK2lCLFdBQUFoZSxLQUFBK1ksV0FHQSxHQUFBbUcsRUFBQWprQixNQUFBLElBR0EsR0FBQSxJQUFBZ2QsU0FBQSxDQUNBLEtBQUF1QixLQUFBbjlCLFFBQUFtakMsZUFBQU4sSUFVQSxPQUFBekUsUUFMQSxHQUFBakIsS0FBQXR0QixLQUFBZ3pCLEVBRUEsT0FEQXpFLFFBQUFoaEMsS0FBQSsvQixNQUNBaUIsYUFZQSxHQUFBNkUsYUFBQTlGLEtBQUE4RixXQUFBRSxlQUFBTixLQUNBbEQsU0FBQTMvQixRQUFBbTlCLE9BQ0FBLEtBQUF0dEIsS0FBQWd6QixFQUdBLE9BREF6RSxRQUFBaGhDLEtBQUErL0IsTUFDQWlCLFlBS0EsQ0FBQSxHQUFBeGYsTUFBQSxHQUVBLE9BREF4aEIsS0FBQWdOLE1BQUFnMEIsUUFBQXArQixRQUFBb2pDLHFCQUFBMUcsV0FDQTBCLFFBR0EsSUFBQXlFLEVBQUFqa0IsTUFBQSxLQUFBK2MsUUFBQTBILHdCQUNBcmpDLFFBQUFxakMsdUJBR0EsT0FEQWptQyxLQUFBZ04sTUFBQWcwQixRQUFBcCtCLFFBQUFxakMsdUJBQUFSLElBQ0F6RSxRQUtBLEdBQUF6QyxRQUFBMkgsTUFDQXBELGNBQUF4RCxTQUFBLFFBQ0ErQyxZQUFBQSxVQUFBL2pDLEtBQUFnaEMsV0FBQSxDQUVBLEdBQUEsSUFBQWQsU0FDQXFILFdBQUFqakMsUUFDQWdqQyxZQUFBdEcsY0FNQSxHQUFBLFdBQUExOEIsUUFBQXVqQyxTQUFBcmQsY0FBQSxDQVlBLEtBVEE0YyxJQUFBOWlDLFFBQUF3akMsYUFBQSxPQUNBVixJQUFBQSxJQUFBaGtDLFFBQUFvakMsV0FBQUMsWUFFQW5pQyxRQUFBeWpDLGFBQUEsS0FBQVgsSUFBQW5GLFNBS0ExbkMsR0FEQThzQyxPQUFBOUQsU0FBQXZDLFdBQ0E5bEMsT0FDQVgsS0FDQThzQyxPQUFBOXNDLEdBQUEsSUFBQTZzQyxJQUFBLElBQUFZLFdBQUFYLE9BQUE5c0MsSUFFQStzQyxZQUFBRCxPQUFBamxDLEtBQUEsS0FHQW1sQyxXQUFBckIsU0FBQWxtQyxLQUFBZ2hDLFdBQUFpSCxZQUFBM2pDLFFBQUFzOEIsYUFDQXQ4QixRQUdBLEdBQUFnakMsWUFDQSxJQUlBLE9BSEE1bEMsS0FBQWdOLE1BQUFnMEIsUUFDQTZFLFdBQUFXLGlCQUFBWixjQUVBNUUsUUFDQSxNQUFBeUYsV0FDQSxRQUNBZixNQUFBbkYsU0FDQTM5QixRQUFBOGpDLGdCQUFBLFFBU0EsT0FBQTVFLE9BQUF4QyxTQUFBNTlCLFFBQUE4OUIsTUFBQSxNQUFBNThCLFFBQUFvK0IsUUFBQXdFLE1BU0EsU0FBQTVDLGNBQ0EsSUFBQTNKLEtBQUEsR0FVQSxPQVJBLFNBQUEwTixNQUFBN2tDLElBQUFFLE9BTUEsT0FKQWkzQixLQUFBajVCLEtBQUE4QixJQUFBLEtBQUE0L0IsS0FBQWtGLG9CQUVBRCxNQUFBMU4sS0FBQWgwQixTQUVBMGhDLE1BQUE3a0MsSUFBQSxLQUFBRSxPQVNBLFNBQUE2a0MsYUFBQXpwQyxJQUVBLE9BREFBLEdBQUFtakMsVUFBQSxFQUNBbmpDLEdBT0EsU0FBQTBwQyxPQUFBMXBDLElBQ0EsSUFBQTJwQyxHQUFBbEosU0FBQWtCLGNBQUEsWUFFQSxJQUNBLFFBQUEzaEMsR0FBQTJwQyxJQUNBLE1BQUF0dUMsR0FDQSxPQUFBLEVBQ0EsUUFFQXN1QyxHQUFBN0gsWUFDQTZILEdBQUE3SCxXQUFBQyxZQUFBNEgsSUFHQUEsR0FBQSxNQVNBLFNBQUFDLFVBQUFDLE1BQUFDLFNBSUEsSUFIQSxJQUFBbEosSUFBQWlKLE1BQUEveUIsTUFBQSxLQUNBcmIsRUFBQW1sQyxJQUFBeGtDLE9BRUFYLEtBQ0E2b0MsS0FBQXlGLFdBQUFuSixJQUFBbmxDLElBQUFxdUMsUUFVQSxTQUFBRSxhQUFBbHVDLEVBQUFtSyxHQUNBLElBQUFna0MsSUFBQWhrQyxHQUFBbkssRUFDQW91QyxLQUFBRCxLQUFBLElBQUFudUMsRUFBQXNsQyxVQUFBLElBQUFuN0IsRUFBQW03QixVQUNBdGxDLEVBQUFxdUMsWUFBQWxrQyxFQUFBa2tDLFlBR0EsR0FBQUQsS0FDQSxPQUFBQSxLQUlBLEdBQUFELElBQ0EsS0FBQUEsSUFBQUEsSUFBQUcsYUFDQSxHQUFBSCxNQUFBaGtDLEVBQ0EsT0FBQSxFQUtBLE9BQUFuSyxFQUFBLEdBQUEsRUFPQSxTQUFBdXVDLGtCQUFBeHBDLE1BQ0EsT0FBQSxTQUFBOGhDLE1BRUEsTUFBQSxVQURBQSxLQUFBb0csU0FBQXJkLGVBQ0FpWCxLQUFBOWhDLE9BQUFBLE1BUUEsU0FBQXlwQyxtQkFBQXpwQyxNQUNBLE9BQUEsU0FBQThoQyxNQUNBLElBQUE1aUMsS0FBQTRpQyxLQUFBb0csU0FBQXJkLGNBQ0EsT0FBQSxVQUFBM3JCLE1BQUEsV0FBQUEsT0FBQTRpQyxLQUFBOWhDLE9BQUFBLE1BUUEsU0FBQTBwQyxxQkFBQXZDLFVBR0EsT0FBQSxTQUFBckYsTUFLQSxNQUFBLFNBQUFBLEtBU0FBLEtBQUFiLGFBQUEsSUFBQWEsS0FBQXFGLFNBR0EsVUFBQXJGLEtBQ0EsVUFBQUEsS0FBQWIsV0FDQWEsS0FBQWIsV0FBQWtHLFdBQUFBLFNBRUFyRixLQUFBcUYsV0FBQUEsU0FNQXJGLEtBQUE2SCxhQUFBeEMsVUFJQXJGLEtBQUE2SCxjQUFBeEMsVUFDQUYsaUJBQUFuRixRQUFBcUYsU0FHQXJGLEtBQUFxRixXQUFBQSxTQUtBLFVBQUFyRixNQUNBQSxLQUFBcUYsV0FBQUEsVUFZQSxTQUFBeUMsdUJBQUF6cUMsSUFDQSxPQUFBeXBDLGFBQUEsU0FBQWlCLFVBRUEsT0FEQUEsVUFBQUEsU0FDQWpCLGFBQUEsU0FBQXJCLEtBQUF2aUIsU0FNQSxJQUxBLElBQUFxRixFQUNBeWYsYUFBQTNxQyxHQUFBLEdBQUFvb0MsS0FBQWhzQyxPQUFBc3VDLFVBQ0FqdkMsRUFBQWt2QyxhQUFBdnVDLE9BR0FYLEtBQ0Eyc0MsS0FBQWxkLEVBQUF5ZixhQUFBbHZDLE1BQ0Eyc0MsS0FBQWxkLEtBQUFyRixRQUFBcUYsR0FBQWtkLEtBQUFsZCxTQVlBLFNBQUFpZSxZQUFBM2pDLFNBQ0EsT0FBQUEsY0FBQSxJQUFBQSxRQUFBb2pDLHNCQUFBcGpDLFFBaWpDQSxJQUFBL0osS0E3aUNBMGxDLFFBQUFrRCxPQUFBbEQsUUFBQSxHQU9BcUQsTUFBQUgsT0FBQUcsTUFBQSxTQUFBN0IsTUFHQSxJQUFBaUksZ0JBQUFqSSxPQUFBQSxLQUFBK0YsZUFBQS9GLE1BQUFpSSxnQkFDQSxRQUFBQSxpQkFBQSxTQUFBQSxnQkFBQTdCLFVBUUFqRSxZQUFBVCxPQUFBUyxZQUFBLFNBQUFsa0MsTUFDQSxJQUFBaXFDLFdBQUFDLFVBQ0FySixJQUFBN2dDLEtBQUFBLEtBQUE4bkMsZUFBQTluQyxLQUFBeWtDLGFBR0EsT0FBQTVELE1BQUFoQixVQUFBLElBQUFnQixJQUFBTCxVQUFBSyxJQUFBbUosa0JBTUE3RixTQURBdEUsU0FBQWdCLEtBQ0FtSixnQkFDQTVGLGdCQUFBUixNQUFBL0QsVUFJQTRFLGVBQUE1RSxXQUNBcUssVUFBQXJLLFNBQUFzSyxjQUFBRCxVQUFBNTBCLE1BQUE0MEIsWUFHQUEsVUFBQUUsaUJBQ0FGLFVBQUFFLGlCQUFBLFNBQUFuRCxlQUFBLEdBR0FpRCxVQUFBRyxhQUNBSCxVQUFBRyxZQUFBLFdBQUFwRCxnQkFVQTFHLFFBQUE2RSxXQUFBMEQsT0FBQSxTQUFBQyxJQUVBLE9BREFBLEdBQUF1QixVQUFBLEtBQ0F2QixHQUFBWCxhQUFBLGVBT0E3SCxRQUFBeUgscUJBQUFjLE9BQUEsU0FBQUMsSUFFQSxPQURBQSxHQUFBOUgsWUFBQXBCLFNBQUEwSyxjQUFBLE1BQ0F4QixHQUFBZixxQkFBQSxLQUFBeHNDLFNBSUEra0MsUUFBQTBILHVCQUFBM0IsUUFBQWhtQyxLQUFBdS9CLFNBQUFvSSx3QkFNQTFILFFBQUFpSyxRQUFBMUIsT0FBQSxTQUFBQyxJQUVBLE9BREE1RSxRQUFBbEQsWUFBQThILElBQUF0MEIsR0FBQTh0QixTQUNBMUMsU0FBQTRLLG9CQUFBNUssU0FBQTRLLGtCQUFBbEksU0FBQS9tQyxTQUlBK2tDLFFBQUFpSyxTQUNBOUcsS0FBQWdILE9BQUEsR0FBQSxTQUFBajJCLElBQ0EsSUFBQWsyQixPQUFBbDJCLEdBQUEvUSxRQUFBK2lDLFVBQUFDLFdBQ0EsT0FBQSxTQUFBM0UsTUFDQSxPQUFBQSxLQUFBcUcsYUFBQSxRQUFBdUMsU0FHQWpILEtBQUFrSCxLQUFBLEdBQUEsU0FBQW4yQixHQUFBN1AsU0FDQSxRQUFBLElBQUFBLFFBQUFtakMsZ0JBQUEzRCxlQUFBLENBQ0EsSUFBQXJDLEtBQUFuOUIsUUFBQW1qQyxlQUFBdHpCLElBQ0EsT0FBQXN0QixLQUFBLENBQUFBLE1BQUEsT0FJQTJCLEtBQUFnSCxPQUFBLEdBQUEsU0FBQWoyQixJQUNBLElBQUFrMkIsT0FBQWwyQixHQUFBL1EsUUFBQStpQyxVQUFBQyxXQUNBLE9BQUEsU0FBQTNFLE1BQ0EsSUFBQS9oQyxVQUFBLElBQUEraEMsS0FBQThJLGtCQUNBOUksS0FBQThJLGlCQUFBLE1BQ0EsT0FBQTdxQyxNQUFBQSxLQUFBZ0UsUUFBQTJtQyxTQU1BakgsS0FBQWtILEtBQUEsR0FBQSxTQUFBbjJCLEdBQUE3UCxTQUNBLFFBQUEsSUFBQUEsUUFBQW1qQyxnQkFBQTNELGVBQUEsQ0FDQSxJQUFBcGtDLEtBQUFuRixFQUFBZ25DLE1BQ0FFLEtBQUFuOUIsUUFBQW1qQyxlQUFBdHpCLElBRUEsR0FBQXN0QixLQUFBLENBSUEsSUFEQS9oQyxLQUFBK2hDLEtBQUE4SSxpQkFBQSxRQUNBN3FDLEtBQUFnRSxRQUFBeVEsR0FDQSxNQUFBLENBQUFzdEIsTUFNQSxJQUZBRixNQUFBajlCLFFBQUE2bEMsa0JBQUFoMkIsSUFDQTVaLEVBQUEsRUFDQWtuQyxLQUFBRixNQUFBaG5DLE1BRUEsSUFEQW1GLEtBQUEraEMsS0FBQThJLGlCQUFBLFFBQ0E3cUMsS0FBQWdFLFFBQUF5USxHQUNBLE1BQUEsQ0FBQXN0QixNQUtBLE1BQUEsTUFNQTJCLEtBQUFrSCxLQUFBLElBQUFySyxRQUFBeUgscUJBQ0EsU0FBQThDLElBQUFsbUMsU0FDQSxZQUFBLElBQUFBLFFBQUFvakMscUJBQ0FwakMsUUFBQW9qQyxxQkFBQThDLEtBR0F2SyxRQUFBMkgsSUFDQXRqQyxRQUFBNGpDLGlCQUFBc0MsVUFEQSxHQUtBLFNBQUFBLElBQUFsbUMsU0FDQSxJQUFBbTlCLEtBQ0EvWSxJQUFBLEdBQ0FudUIsRUFBQSxFQUVBbW9DLFFBQUFwK0IsUUFBQW9qQyxxQkFBQThDLEtBR0EsR0FBQSxNQUFBQSxJQVNBLE9BQUE5SCxRQVJBLEtBQUFqQixLQUFBaUIsUUFBQW5vQyxNQUNBLElBQUFrbkMsS0FBQXZCLFVBQ0F4WCxJQUFBaG5CLEtBQUErL0IsTUFJQSxPQUFBL1ksS0FNQTBhLEtBQUFrSCxLQUFBLE1BQUFySyxRQUFBMEgsd0JBQUEsU0FBQXFDLFVBQUExbEMsU0FDQSxRQUFBLElBQUFBLFFBQUFxakMsd0JBQUE3RCxlQUNBLE9BQUF4L0IsUUFBQXFqQyx1QkFBQXFDLFlBVUFoRyxjQUFBLEdBT0FELFVBQUEsSUFFQTlELFFBQUEySCxJQUFBNUIsUUFBQWhtQyxLQUFBdS9CLFNBQUEySSxxQkFHQU0sT0FBQSxTQUFBQyxJQU1BNUUsUUFBQWxELFlBQUE4SCxJQUFBZ0MsVUFBQSxVQUFBeEksUUFBQSxxQkFDQUEsUUFBQSxrRUFPQXdHLEdBQUFQLGlCQUFBLHdCQUFBaHRDLFFBQ0E2b0MsVUFBQXJpQyxLQUFBLFNBQUFrakMsV0FBQSxnQkFLQTZELEdBQUFQLGlCQUFBLGNBQUFodEMsUUFDQTZvQyxVQUFBcmlDLEtBQUEsTUFBQWtqQyxXQUFBLGFBQUFELFNBQUEsS0FJQThELEdBQUFQLGlCQUFBLFFBQUFqRyxRQUFBLE1BQUEvbUMsUUFDQTZvQyxVQUFBcmlDLEtBQUEsTUFNQSttQyxHQUFBUCxpQkFBQSxZQUFBaHRDLFFBQ0E2b0MsVUFBQXJpQyxLQUFBLFlBTUErbUMsR0FBQVAsaUJBQUEsS0FBQWpHLFFBQUEsTUFBQS9tQyxRQUNBNm9DLFVBQUFyaUMsS0FBQSxjQUlBOG1DLE9BQUEsU0FBQUMsSUFDQUEsR0FBQWdDLFVBQUEsb0ZBS0EsSUFBQS91QyxNQUFBNmpDLFNBQUFrQixjQUFBLFNBQ0Eva0MsTUFBQXFzQyxhQUFBLE9BQUEsVUFDQVUsR0FBQTlILFlBQUFqbEMsT0FBQXFzQyxhQUFBLE9BQUEsS0FJQVUsR0FBQVAsaUJBQUEsWUFBQWh0QyxRQUNBNm9DLFVBQUFyaUMsS0FBQSxPQUFBa2pDLFdBQUEsZUFLQSxJQUFBNkQsR0FBQVAsaUJBQUEsWUFBQWh0QyxRQUNBNm9DLFVBQUFyaUMsS0FBQSxXQUFBLGFBS0FtaUMsUUFBQWxELFlBQUE4SCxJQUFBM0IsVUFBQSxFQUNBLElBQUEyQixHQUFBUCxpQkFBQSxhQUFBaHRDLFFBQ0E2b0MsVUFBQXJpQyxLQUFBLFdBQUEsYUFJQSttQyxHQUFBUCxpQkFBQSxRQUNBbkUsVUFBQXJpQyxLQUFBLFlBSUF1K0IsUUFBQXlLLGdCQUFBMUUsUUFBQWhtQyxLQUFBMmtCLFFBQUFrZixRQUFBbGYsU0FDQWtmLFFBQUE4Ryx1QkFDQTlHLFFBQUErRyxvQkFDQS9HLFFBQUFnSCxrQkFDQWhILFFBQUFpSCxxQkFFQXRDLE9BQUEsU0FBQUMsSUFHQXhJLFFBQUE4SyxrQkFBQXBtQixRQUFBMXBCLEtBQUF3dEMsR0FBQSxLQUlBOWpCLFFBQUExcEIsS0FBQXd0QyxHQUFBLGFBQ0F6RSxjQUFBdGlDLEtBQUEsS0FBQXFqQyxXQUlBaEIsVUFBQUEsVUFBQTdvQyxRQUFBLElBQUErcEMsT0FBQWxCLFVBQUEzaEMsS0FBQSxNQUNBNGhDLGNBQUFBLGNBQUE5b0MsUUFBQSxJQUFBK3BDLE9BQUFqQixjQUFBNWhDLEtBQUEsTUFJQXVuQyxXQUFBM0QsUUFBQWhtQyxLQUFBNmpDLFFBQUFtSCx5QkFLQS9HLFNBQUEwRixZQUFBM0QsUUFBQWhtQyxLQUFBNmpDLFFBQUFJLFVBQ0EsU0FBQXJwQyxFQUFBbUssR0FDQSxJQUFBa21DLE1BQUEsSUFBQXJ3QyxFQUFBc2xDLFNBQUF0bEMsRUFBQTh1QyxnQkFBQTl1QyxFQUNBc3dDLElBQUFubUMsR0FBQUEsRUFBQTY3QixXQUNBLE9BQUFobUMsSUFBQXN3QyxRQUFBQSxLQUFBLElBQUFBLElBQUFoTCxZQUNBK0ssTUFBQWhILFNBQ0FnSCxNQUFBaEgsU0FBQWlILEtBQ0F0d0MsRUFBQW93Qyx5QkFBQSxHQUFBcHdDLEVBQUFvd0Msd0JBQUFFLFFBR0EsU0FBQXR3QyxFQUFBbUssR0FDQSxHQUFBQSxFQUNBLEtBQUFBLEVBQUFBLEVBQUE2N0IsWUFDQSxHQUFBNzdCLElBQUFuSyxFQUNBLE9BQUEsRUFJQSxPQUFBLEdBT0E2cEMsVUFBQWtGLFdBQ0EsU0FBQS91QyxFQUFBbUssR0FHQSxHQUFBbkssSUFBQW1LLEVBRUEsT0FEQTQrQixjQUFBLEVBQ0EsRUFJQSxJQUFBd0gsU0FBQXZ3QyxFQUFBb3dDLHlCQUFBam1DLEVBQUFpbUMsd0JBQ0EsT0FBQUcsVUFZQSxHQVBBQSxTQUFBdndDLEVBQUE0c0MsZUFBQTVzQyxNQUFBbUssRUFBQXlpQyxlQUFBemlDLEdBQ0FuSyxFQUFBb3dDLHdCQUFBam1DLEdBR0EsS0FJQWs3QixRQUFBbUwsY0FBQXJtQyxFQUFBaW1DLHdCQUFBcHdDLEtBQUF1d0MsUUFHQXZ3QyxJQUFBMmtDLFVBQUEza0MsRUFBQTRzQyxnQkFBQXJELGNBQUFGLFNBQUFFLGFBQUF2cEMsSUFDQSxFQUVBbUssSUFBQXc2QixVQUFBeDZCLEVBQUF5aUMsZ0JBQUFyRCxjQUFBRixTQUFBRSxhQUFBcC9CLEdBQ0EsRUFJQTIrQixVQUNBaDVCLFFBQUFnNUIsVUFBQTlvQyxHQUFBOFAsUUFBQWc1QixVQUFBMytCLEdBQ0EsRUFHQSxFQUFBb21DLFNBQUEsRUFBQSxJQUVBLFNBQUF2d0MsRUFBQW1LLEdBRUEsR0FBQW5LLElBQUFtSyxFQUVBLE9BREE0K0IsY0FBQSxFQUNBLEVBR0EsSUFBQW9GLElBQ0F4dUMsRUFBQSxFQUNBOHdDLElBQUF6d0MsRUFBQWdtQyxXQUNBc0ssSUFBQW5tQyxFQUFBNjdCLFdBQ0EwSyxHQUFBLENBQUExd0MsR0FDQTJ3QyxHQUFBLENBQUF4bUMsR0FHQSxJQUFBc21DLE1BQUFILElBQ0EsT0FBQXR3QyxJQUFBMmtDLFVBQUEsRUFDQXg2QixJQUFBdzZCLFNBQUEsRUFDQThMLEtBQUEsRUFDQUgsSUFBQSxFQUNBeEgsVUFDQWg1QixRQUFBZzVCLFVBQUE5b0MsR0FBQThQLFFBQUFnNUIsVUFBQTMrQixHQUNBLEVBR0EsR0FBQXNtQyxNQUFBSCxJQUNBLE9BQUFwQyxhQUFBbHVDLEVBQUFtSyxHQUtBLElBREFna0MsSUFBQW51QyxFQUNBbXVDLElBQUFBLElBQUFuSSxZQUNBMEssR0FBQTlvQyxRQUFBdW1DLEtBR0EsSUFEQUEsSUFBQWhrQyxFQUNBZ2tDLElBQUFBLElBQUFuSSxZQUNBMkssR0FBQS9vQyxRQUFBdW1DLEtBSUEsS0FBQXVDLEdBQUEvd0MsS0FBQWd4QyxHQUFBaHhDLElBQ0FBLElBR0EsT0FBQUEsRUFFQXV1QyxhQUFBd0MsR0FBQS93QyxHQUFBZ3hDLEdBQUFoeEMsSUFHQSt3QyxHQUFBL3dDLEtBQUE0cEMsY0FBQSxFQUNBb0gsR0FBQWh4QyxLQUFBNHBDLGFBQUEsRUFDQSxJQUdBNUUsVUFHQTRELE9BQUF4ZSxRQUFBLFNBQUFqUSxLQUFBODJCLFVBQ0EsT0FBQXJJLE9BQUF6dUIsS0FBQSxLQUFBLEtBQUE4MkIsV0FHQXJJLE9BQUF1SCxnQkFBQSxTQUFBakosS0FBQS9zQixNQVNBLElBUEErc0IsS0FBQStGLGVBQUEvRixRQUFBbEMsVUFDQXFFLFlBQUFuQyxNQUlBL3NCLEtBQUFBLEtBQUF0UixRQUFBZ2lDLGlCQUFBLFVBRUFuRixRQUFBeUssaUJBQUE1RyxpQkFDQVUsY0FBQTl2QixLQUFBLFFBQ0FzdkIsZ0JBQUFBLGNBQUFoa0MsS0FBQTBVLFVBQ0FxdkIsWUFBQUEsVUFBQS9qQyxLQUFBMFUsT0FFQSxJQUNBLElBQUFsVCxJQUFBbWpCLFFBQUExcEIsS0FBQXdtQyxLQUFBL3NCLE1BR0EsR0FBQWxULEtBQUF5K0IsUUFBQThLLG1CQUdBdEosS0FBQWxDLFVBQUEsS0FBQWtDLEtBQUFsQyxTQUFBVyxTQUNBLE9BQUExK0IsSUFFQSxNQUFBckgsSUFHQSxPQUFBLEVBQUFncEMsT0FBQXp1QixLQUFBNnFCLFNBQUEsS0FBQSxDQUFBa0MsT0FBQXZtQyxRQUdBaW9DLE9BQUFjLFNBQUEsU0FBQTMvQixRQUFBbTlCLE1BS0EsT0FIQW45QixRQUFBa2pDLGVBQUFsakMsV0FBQWk3QixVQUNBcUUsWUFBQXQvQixTQUVBMi9CLFNBQUEzL0IsUUFBQW05QixPQUdBMEIsT0FBQXNJLEtBQUEsU0FBQWhLLEtBQUE1aUMsT0FFQTRpQyxLQUFBK0YsZUFBQS9GLFFBQUFsQyxVQUNBcUUsWUFBQW5DLE1BR0EsSUFBQTNpQyxHQUFBc2tDLEtBQUF5RixXQUFBaHFDLEtBQUEyckIsZUFFQWxnQixJQUFBeEwsSUFBQWdoQyxPQUFBN2tDLEtBQUFtb0MsS0FBQXlGLFdBQUFocUMsS0FBQTJyQixlQUNBMXJCLEdBQUEyaUMsS0FBQTVpQyxNQUFBaWxDLHFCQUNBaGpDLEVBRUEsWUFBQUEsSUFBQXdKLElBQ0FBLElBQ0EyMUIsUUFBQTZFLGFBQUFoQixlQUNBckMsS0FBQXFHLGFBQUFqcEMsT0FDQXlMLElBQUFtM0IsS0FBQThJLGlCQUFBMXJDLFFBQUF5TCxJQUFBb2hDLFVBQ0FwaEMsSUFBQTVHLE1BQ0EsTUFHQXkvQixPQUFBdFcsT0FBQSxTQUFBOGUsS0FDQSxPQUFBQSxJQUFBLElBQUF2b0MsUUFBQW9qQyxXQUFBQyxhQUdBdEQsT0FBQWp0QixNQUFBLFNBQUFpc0IsS0FDQSxNQUFBLElBQUF0bkMsTUFBQSwwQ0FBQXNuQyxNQU9BZ0IsT0FBQXlJLFdBQUEsU0FBQWxKLFNBQ0EsSUFBQWpCLEtBQ0FvSyxXQUFBLEdBQ0E3aEIsRUFBQSxFQUNBenZCLEVBQUEsRUFPQSxHQUpBb3BDLGNBQUExRCxRQUFBNkwsaUJBQ0FwSSxXQUFBekQsUUFBQThMLFlBQUFySixRQUFBNzlCLE1BQUEsR0FDQTY5QixRQUFBdFEsS0FBQXFTLFdBRUFkLGFBQUEsQ0FDQSxLQUFBbEMsS0FBQWlCLFFBQUFub0MsTUFDQWtuQyxPQUFBaUIsUUFBQW5vQyxLQUNBeXZCLEVBQUE2aEIsV0FBQW5xQyxLQUFBbkgsSUFHQSxLQUFBeXZCLEtBQ0EwWSxRQUFBL3hCLE9BQUFrN0IsV0FBQTdoQixHQUFBLEdBUUEsT0FGQTBaLFVBQUEsS0FFQWhCLFNBT0FXLFFBQUFGLE9BQUFFLFFBQUEsU0FBQTVCLE1BQ0EsSUFBQS9oQyxLQUNBOEIsSUFBQSxHQUNBakgsRUFBQSxFQUNBMmxDLFNBQUF1QixLQUFBdkIsU0FFQSxHQUFBQSxVQU1BLEdBQUEsSUFBQUEsVUFBQSxJQUFBQSxVQUFBLEtBQUFBLFNBQUEsQ0FHQSxHQUFBLGlCQUFBdUIsS0FBQXVLLFlBQ0EsT0FBQXZLLEtBQUF1SyxZQUdBLElBQUF2SyxLQUFBQSxLQUFBd0ssV0FBQXhLLEtBQUFBLEtBQUFBLEtBQUF5SCxZQUNBMW5DLEtBQUE2aEMsUUFBQTVCLFdBR0EsR0FBQSxJQUFBdkIsVUFBQSxJQUFBQSxTQUNBLE9BQUF1QixLQUFBeUssZUFoQkEsS0FBQXhzQyxLQUFBK2hDLEtBQUFsbkMsTUFFQWlILEtBQUE2aEMsUUFBQTNqQyxNQWtCQSxPQUFBOEIsTUFHQTRoQyxLQUFBRCxPQUFBZ0osVUFBQSxDQUdBN0QsWUFBQSxHQUVBOEQsYUFBQTdELGFBRUFybEIsTUFBQXFpQixVQUVBc0QsV0FBQSxHQUVBeUIsS0FBQSxHQUVBOVYsU0FBQSxDQUNBeEgsSUFBQSxDQUFBK1osSUFBQSxhQUFBamQsT0FBQSxHQUNBdWlCLElBQUEsQ0FBQXRGLElBQUEsY0FDQXVGLElBQUEsQ0FBQXZGLElBQUEsa0JBQUFqZCxPQUFBLEdBQ0F5aUIsSUFBQSxDQUFBeEYsSUFBQSxvQkFHQXlGLFVBQUEsQ0FDQTlHLEtBQUEsU0FBQXhpQixPQVVBLE9BVEFBLE1BQUEsR0FBQUEsTUFBQSxHQUFBOWYsUUFBQStpQyxVQUFBQyxXQUdBbGpCLE1BQUEsSUFBQUEsTUFBQSxJQUFBQSxNQUFBLElBQUFBLE1BQUEsSUFBQSxJQUFBOWYsUUFBQStpQyxVQUFBQyxXQUVBLE9BQUFsakIsTUFBQSxLQUNBQSxNQUFBLEdBQUEsSUFBQUEsTUFBQSxHQUFBLEtBR0FBLE1BQUFyZSxNQUFBLEVBQUEsSUFHQStnQyxNQUFBLFNBQUExaUIsT0E2QkEsT0FsQkFBLE1BQUEsR0FBQUEsTUFBQSxHQUFBc0gsY0FFQSxRQUFBdEgsTUFBQSxHQUFBcmUsTUFBQSxFQUFBLElBRUFxZSxNQUFBLElBQ0FpZ0IsT0FBQWp0QixNQUFBZ04sTUFBQSxJQUtBQSxNQUFBLEtBQUFBLE1BQUEsR0FBQUEsTUFBQSxJQUFBQSxNQUFBLElBQUEsR0FBQSxHQUFBLFNBQUFBLE1BQUEsSUFBQSxRQUFBQSxNQUFBLEtBQ0FBLE1BQUEsS0FBQUEsTUFBQSxHQUFBQSxNQUFBLElBQUEsUUFBQUEsTUFBQSxLQUdBQSxNQUFBLElBQ0FpZ0IsT0FBQWp0QixNQUFBZ04sTUFBQSxJQUdBQSxPQUdBeWlCLE9BQUEsU0FBQXppQixPQUNBLElBQUF1cEIsT0FDQUMsVUFBQXhwQixNQUFBLElBQUFBLE1BQUEsR0FFQSxPQUFBcWlCLFVBQUEsTUFBQXZsQyxLQUFBa2pCLE1BQUEsSUFDQSxNQUlBQSxNQUFBLEdBQ0FBLE1BQUEsR0FBQUEsTUFBQSxJQUFBQSxNQUFBLElBQUEsR0FHQXdwQixVQUFBckgsUUFBQXJsQyxLQUFBMHNDLFlBRUFELE9BQUFsSixTQUFBbUosVUFBQSxNQUVBRCxPQUFBQyxTQUFBaGlDLFFBQUEsSUFBQWdpQyxTQUFBeHhDLE9BQUF1eEMsUUFBQUMsU0FBQXh4QyxVQUdBZ29CLE1BQUEsR0FBQUEsTUFBQSxHQUFBcmUsTUFBQSxFQUFBNG5DLFFBQ0F2cEIsTUFBQSxHQUFBd3BCLFNBQUE3bkMsTUFBQSxFQUFBNG5DLFNBSUF2cEIsTUFBQXJlLE1BQUEsRUFBQSxNQUlBdWxDLE9BQUEsQ0FFQTNFLElBQUEsU0FBQWtILGtCQUNBLElBQUE5RSxTQUFBOEUsaUJBQUF2cEMsUUFBQStpQyxVQUFBQyxXQUFBNWIsY0FDQSxNQUFBLE1BQUFtaUIsaUJBQ0EsV0FBQSxPQUFBLEdBQ0EsU0FBQWxMLE1BQ0EsT0FBQUEsS0FBQW9HLFVBQUFwRyxLQUFBb0csU0FBQXJkLGdCQUFBcWQsV0FJQXJDLE1BQUEsU0FBQXdFLFdBQ0EsSUFBQTRDLFFBQUF2SSxXQUFBMkYsVUFBQSxLQUVBLE9BQUE0QyxVQUNBQSxRQUFBLElBQUEzSCxPQUFBLE1BQUFMLFdBQUEsSUFBQW9GLFVBQUEsSUFBQXBGLFdBQUEsU0FDQVAsV0FBQTJGLFVBQUEsU0FBQXZJLE1BQ0EsT0FBQW1MLFFBQUE1c0MsS0FBQSxpQkFBQXloQyxLQUFBdUksV0FBQXZJLEtBQUF1SSxnQkFBQSxJQUFBdkksS0FBQXFHLGNBQUFyRyxLQUFBcUcsYUFBQSxVQUFBLE9BSUFwQyxLQUFBLFNBQUE3bUMsS0FBQWd1QyxTQUFBQyxPQUNBLE9BQUEsU0FBQXJMLE1BQ0EsSUFBQWg3QixPQUFBMDhCLE9BQUFzSSxLQUFBaEssS0FBQTVpQyxNQUVBLE9BQUEsTUFBQTRILE9BQ0EsT0FBQW9tQyxVQUVBQSxXQUlBcG1DLFFBQUEsR0FFQSxNQUFBb21DLFNBQUFwbUMsU0FBQXFtQyxNQUNBLE9BQUFELFNBQUFwbUMsU0FBQXFtQyxNQUNBLE9BQUFELFNBQUFDLE9BQUEsSUFBQXJtQyxPQUFBaUUsUUFBQW9pQyxPQUNBLE9BQUFELFNBQUFDLFFBQUEsRUFBQXJtQyxPQUFBaUUsUUFBQW9pQyxPQUNBLE9BQUFELFNBQUFDLE9BQUFybUMsT0FBQTVCLE9BQUFpb0MsTUFBQTV4QyxVQUFBNHhDLE1BQ0EsT0FBQUQsVUFBQSxHQUFBLElBQUFwbUMsT0FBQXJELFFBQUE0aEMsWUFBQSxLQUFBLEtBQUF0NkIsUUFBQW9pQyxPQUNBLE9BQUFELFdBQUFwbUMsU0FBQXFtQyxPQUFBcm1DLE9BQUE1QixNQUFBLEVBQUFpb0MsTUFBQTV4QyxPQUFBLEtBQUE0eEMsTUFBQSxRQUtBbEgsTUFBQSxTQUFBam1DLEtBQUFvdEMsS0FBQXZELFNBQUExZixNQUFBRCxNQUNBLElBQUFwVyxPQUFBLFFBQUE5VCxLQUFBa0YsTUFBQSxFQUFBLEdBQ0Ftb0MsUUFBQSxTQUFBcnRDLEtBQUFrRixPQUFBLEdBQ0Fvb0MsT0FBQSxZQUFBRixLQUVBLE9BQUEsSUFBQWpqQixPQUFBLElBQUFELEtBR0EsU0FBQTRYLE1BQ0EsUUFBQUEsS0FBQWIsWUFHQSxTQUFBYSxLQUFBbjlCLFFBQUE0b0MsS0FDQSxJQUFBN0UsTUFBQThFLFlBQUFDLFdBQUExdEMsS0FBQTJ0QyxVQUFBdnFDLE1BQ0Fpa0MsSUFBQXR6QixTQUFBdTVCLFFBQUEsY0FBQSxrQkFDQXBnQyxPQUFBNjBCLEtBQUFiLFdBQ0EvaEMsS0FBQW91QyxRQUFBeEwsS0FBQW9HLFNBQUFyZCxjQUNBOGlCLFVBQUFKLE1BQUFELE9BQ0FqRSxNQUFBLEVBRUEsR0FBQXA4QixPQUFBLENBR0EsR0FBQTZHLE9BQUEsQ0FDQSxLQUFBc3pCLEtBQUEsQ0FFQSxJQURBcm5DLEtBQUEraEMsS0FDQS9oQyxLQUFBQSxLQUFBcW5DLE1BQ0EsR0FBQWtHLE9BQ0F2dEMsS0FBQW1vQyxTQUFBcmQsZ0JBQUEzckIsS0FDQSxJQUFBYSxLQUFBd2dDLFNBRUEsT0FBQSxFQUlBcDlCLE1BQUFpa0MsSUFBQSxTQUFBcG5DLE9BQUFtRCxPQUFBLGNBRUEsT0FBQSxFQU1BLEdBSEFBLE1BQUEsQ0FBQWtxQyxRQUFBcGdDLE9BQUFxL0IsV0FBQXIvQixPQUFBc3dCLFdBR0E4UCxTQUFBTSxVQWtCQSxJQUhBdEUsTUFEQXFFLFdBREFoRixPQUhBOEUsYUFKQUMsWUFEQTF0QyxLQUFBa04sUUFDQXExQixXQUFBdmlDLEtBQUF1aUMsU0FBQSxLQUlBdmlDLEtBQUE2dEMsWUFDQUgsV0FBQTF0QyxLQUFBNnRDLFVBQUEsS0FFQTV0QyxPQUFBLElBQ0EsS0FBQXlrQyxTQUFBaUUsTUFBQSxLQUNBQSxNQUFBLEdBQ0Ezb0MsS0FBQTJ0QyxXQUFBemdDLE9BQUFvNkIsV0FBQXFHLFdBRUEzdEMsT0FBQTJ0QyxXQUFBM3RDLE1BQUFBLEtBQUFxbkMsT0FHQWlDLEtBQUFxRSxVQUFBLElBQUF2cUMsTUFBQWlRLE9BR0EsR0FBQSxJQUFBclQsS0FBQXdnQyxZQUFBOEksTUFBQXRwQyxPQUFBK2hDLEtBQUEsQ0FDQTBMLFlBQUF4dEMsTUFBQSxDQUFBeWtDLFFBQUFpSixVQUFBckUsTUFDQSxZQXVCQSxHQWpCQXNFLFdBWUF0RSxLQURBcUUsV0FEQWhGLE9BSEE4RSxhQUpBQyxZQURBMXRDLEtBQUEraEMsTUFDQVEsV0FBQXZpQyxLQUFBdWlDLFNBQUEsS0FJQXZpQyxLQUFBNnRDLFlBQ0FILFdBQUExdEMsS0FBQTZ0QyxVQUFBLEtBRUE1dEMsT0FBQSxJQUNBLEtBQUF5a0MsU0FBQWlFLE1BQUEsS0FNQSxJQUFBVyxLQUVBLE1BQUF0cEMsT0FBQTJ0QyxXQUFBM3RDLE1BQUFBLEtBQUFxbkMsT0FDQWlDLEtBQUFxRSxVQUFBLElBQUF2cUMsTUFBQWlRLFVBRUFrNkIsT0FDQXZ0QyxLQUFBbW9DLFNBQUFyZCxnQkFBQTNyQixLQUNBLElBQUFhLEtBQUF3Z0MsY0FDQThJLE9BR0FzRSxZQUtBSCxhQUpBQyxXQUFBMXRDLEtBQUF1aUMsV0FBQXZpQyxLQUFBdWlDLFNBQUEsS0FJQXZpQyxLQUFBNnRDLFlBQ0FILFdBQUExdEMsS0FBQTZ0QyxVQUFBLEtBRUE1dEMsTUFBQSxDQUFBeWtDLFFBQUE0RSxPQUdBdHBDLE9BQUEraEMsU0FVQSxPQURBdUgsTUFBQW5mLFFBQ0FDLE9BQUFrZixLQUFBbGYsT0FBQSxHQUFBLEdBQUFrZixLQUFBbGYsU0FLQTZiLE9BQUEsU0FBQTZILE9BQUFoRSxVQUtBLElBQUEvakMsS0FDQTNHLEdBQUFza0MsS0FBQTJCLFFBQUF5SSxTQUFBcEssS0FBQXFLLFdBQUFELE9BQUFoakIsZ0JBQ0EyWSxPQUFBanRCLE1BQUEsdUJBQUFzM0IsUUFLQSxPQUFBMXVDLEdBQUFtakMsU0FDQW5qQyxHQUFBMHFDLFVBSUEsRUFBQTFxQyxHQUFBNUQsUUFDQXVLLEtBQUEsQ0FBQStuQyxPQUFBQSxPQUFBLEdBQUFoRSxVQUNBcEcsS0FBQXFLLFdBQUFocUMsZUFBQStwQyxPQUFBaGpCLGVBQ0ErZCxhQUFBLFNBQUFyQixLQUFBdmlCLFNBSUEsSUFIQSxJQUFBZ0UsSUFDQWxGLFFBQUEza0IsR0FBQW9vQyxLQUFBc0MsVUFDQWp2QyxFQUFBa3BCLFFBQUF2b0IsT0FDQVgsS0FFQTJzQyxLQURBdmUsSUFBQWplLFFBQUF3OEIsS0FBQXpqQixRQUFBbHBCLE9BQ0FvcUIsUUFBQWdFLEtBQUFsRixRQUFBbHBCLE1BR0EsU0FBQWtuQyxNQUNBLE9BQUEzaUMsR0FBQTJpQyxLQUFBLEVBQUFoOEIsUUFJQTNHLEtBSUFpbUMsUUFBQSxDQUVBMkksSUFBQW5GLGFBQUEsU0FBQXZILFVBSUEsSUFBQXRsQyxNQUFBLEdBQ0FnbkMsUUFBQSxHQUNBaUwsUUFBQWx5QyxRQUFBdWxDLFNBQUE1OUIsUUFBQTg5QixNQUFBLE9BRUEsT0FBQXlNLFFBQUExTCxTQUNBc0csYUFBQSxTQUFBckIsS0FBQXZpQixRQUFBcmdCLFFBQUE0b0MsS0FNQSxJQUxBLElBQUF6TCxLQUNBbU0sVUFBQUQsUUFBQXpHLEtBQUEsS0FBQWdHLElBQUEsSUFDQTN5QyxFQUFBMnNDLEtBQUFoc0MsT0FHQVgsTUFDQWtuQyxLQUFBbU0sVUFBQXJ6QyxNQUNBMnNDLEtBQUEzc0MsS0FBQW9xQixRQUFBcHFCLEdBQUFrbkMsU0FJQSxTQUFBQSxLQUFBbjlCLFFBQUE0b0MsS0FLQSxPQUpBeHhDLE1BQUEsR0FBQStsQyxLQUNBa00sUUFBQWp5QyxNQUFBLEtBQUF3eEMsSUFBQXhLLFNBRUFobkMsTUFBQSxHQUFBLE1BQ0FnbkMsUUFBQTN2QixTQUlBK2EsSUFBQXlhLGFBQUEsU0FBQXZILFVBQ0EsT0FBQSxTQUFBUyxNQUNBLE9BQUEsRUFBQTBCLE9BQUFuQyxTQUFBUyxNQUFBdm1DLFVBSUErb0MsU0FBQXNFLGFBQUEsU0FBQXRsQixNQUVBLE9BREFBLEtBQUFBLEtBQUE3ZixRQUFBK2lDLFVBQUFDLFdBQ0EsU0FBQTNFLE1BQ0EsT0FBQSxHQUFBQSxLQUFBdUssYUFBQXZLLEtBQUFvTSxXQUFBeEssUUFBQTVCLE9BQUEvMkIsUUFBQXVZLFNBV0E2cUIsS0FBQXZGLGFBQUEsU0FBQXVGLE1BTUEsT0FKQXhJLFlBQUF0bEMsS0FBQTh0QyxNQUFBLEtBQ0EzSyxPQUFBanRCLE1BQUEscUJBQUE0M0IsTUFFQUEsS0FBQUEsS0FBQTFxQyxRQUFBK2lDLFVBQUFDLFdBQUE1YixjQUNBLFNBQUFpWCxNQUNBLElBQUFzTSxTQUNBLEdBQ0EsR0FBQUEsU0FBQWpLLGVBQ0FyQyxLQUFBcU0sS0FDQXJNLEtBQUFxRyxhQUFBLGFBQUFyRyxLQUFBcUcsYUFBQSxRQUdBLE9BREFpRyxTQUFBQSxTQUFBdmpCLGlCQUNBc2pCLE1BQUEsSUFBQUMsU0FBQXJqQyxRQUFBb2pDLEtBQUEsWUFFQXJNLEtBQUFBLEtBQUFiLGFBQUEsSUFBQWEsS0FBQXZCLFVBQ0EsT0FBQSxLQUtBNEIsT0FBQSxTQUFBTCxNQUNBLElBQUE1aEMsS0FBQW1yQixPQUFBeGQsVUFBQXdkLE9BQUF4ZCxTQUFBM04sS0FDQSxPQUFBQSxNQUFBQSxLQUFBZ0YsTUFBQSxLQUFBNDhCLEtBQUF0dEIsSUFHQWdDLEtBQUEsU0FBQXNyQixNQUNBLE9BQUFBLE9BQUFvQyxTQUdBbUssTUFBQSxTQUFBdk0sTUFDQSxPQUFBQSxPQUFBbEMsU0FBQTBPLGlCQUFBMU8sU0FBQTJPLFVBQUEzTyxTQUFBMk8sZ0JBQUF6TSxLQUFBOWhDLE1BQUE4aEMsS0FBQTBNLE9BQUExTSxLQUFBMk0sV0FJQUMsUUFBQWhGLHNCQUFBLEdBQ0F2QyxTQUFBdUMsc0JBQUEsR0FFQWlGLFFBQUEsU0FBQTdNLE1BR0EsSUFBQW9HLFNBQUFwRyxLQUFBb0csU0FBQXJkLGNBQ0EsTUFBQSxVQUFBcWQsWUFBQXBHLEtBQUE2TSxTQUFBLFdBQUF6RyxZQUFBcEcsS0FBQThNLFVBR0FBLFNBQUEsU0FBQTlNLE1BT0EsT0FKQUEsS0FBQWIsWUFDQWEsS0FBQWIsV0FBQTROLGVBR0EsSUFBQS9NLEtBQUE4TSxVQUlBN3JDLE1BQUEsU0FBQSsrQixNQUtBLElBQUFBLEtBQUFBLEtBQUF3SyxXQUFBeEssS0FBQUEsS0FBQUEsS0FBQXlILFlBQ0EsR0FBQXpILEtBQUF2QixTQUFBLEVBQ0EsT0FBQSxFQUdBLE9BQUEsR0FHQXR6QixPQUFBLFNBQUE2MEIsTUFDQSxPQUFBMkIsS0FBQTJCLFFBQUEsTUFBQXRELE9BSUFnTixPQUFBLFNBQUFoTixNQUNBLE9BQUFzRSxRQUFBL2xDLEtBQUF5aEMsS0FBQW9HLFdBR0Fuc0MsTUFBQSxTQUFBK2xDLE1BQ0EsT0FBQXFFLFFBQUE5bEMsS0FBQXloQyxLQUFBb0csV0FHQTZHLE9BQUEsU0FBQWpOLE1BQ0EsSUFBQTVpQyxLQUFBNGlDLEtBQUFvRyxTQUFBcmQsY0FDQSxNQUFBLFVBQUEzckIsTUFBQSxXQUFBNGlDLEtBQUE5aEMsTUFBQSxXQUFBZCxNQUdBb2tCLEtBQUEsU0FBQXdlLE1BQ0EsSUFBQWdLLEtBQ0EsTUFBQSxVQUFBaEssS0FBQW9HLFNBQUFyZCxlQUNBLFNBQUFpWCxLQUFBOWhDLE9BSUEsT0FBQThyQyxLQUFBaEssS0FBQXFHLGFBQUEsVUFBQSxTQUFBMkQsS0FBQWpoQixnQkFJQVYsTUFBQXlmLHVCQUFBLFdBQ0EsTUFBQSxDQUFBLEtBR0ExZixLQUFBMGYsdUJBQUEsU0FBQUUsYUFBQXZ1QyxRQUNBLE1BQUEsQ0FBQUEsT0FBQSxLQUdBd21DLEdBQUE2SCx1QkFBQSxTQUFBRSxhQUFBdnVDLE9BQUFzdUMsVUFDQSxNQUFBLENBQUFBLFNBQUEsRUFBQUEsU0FBQXR1QyxPQUFBc3VDLFlBR0FtRixLQUFBcEYsdUJBQUEsU0FBQUUsYUFBQXZ1QyxRQUVBLElBREEsSUFBQVgsRUFBQSxFQUNBQSxFQUFBVyxPQUFBWCxHQUFBLEVBQ0FrdkMsYUFBQS9uQyxLQUFBbkgsR0FFQSxPQUFBa3ZDLGVBR0FtRixJQUFBckYsdUJBQUEsU0FBQUUsYUFBQXZ1QyxRQUVBLElBREEsSUFBQVgsRUFBQSxFQUNBQSxFQUFBVyxPQUFBWCxHQUFBLEVBQ0FrdkMsYUFBQS9uQyxLQUFBbkgsR0FFQSxPQUFBa3ZDLGVBR0FvRixHQUFBdEYsdUJBQUEsU0FBQUUsYUFBQXZ1QyxPQUFBc3VDLFVBRUEsSUFEQSxJQUFBanZDLEVBQUFpdkMsU0FBQSxFQUFBQSxTQUFBdHVDLE9BQUFzdUMsU0FDQSxLQUFBanZDLEdBQ0FrdkMsYUFBQS9uQyxLQUFBbkgsR0FFQSxPQUFBa3ZDLGVBR0FxRixHQUFBdkYsdUJBQUEsU0FBQUUsYUFBQXZ1QyxPQUFBc3VDLFVBRUEsSUFEQSxJQUFBanZDLEVBQUFpdkMsU0FBQSxFQUFBQSxTQUFBdHVDLE9BQUFzdUMsV0FDQWp2QyxFQUFBVyxRQUNBdXVDLGFBQUEvbkMsS0FBQW5ILEdBRUEsT0FBQWt2QyxrQkFLQTFFLFFBQUEsSUFBQTNCLEtBQUEyQixRQUFBLEdBR0EsQ0FBQWdLLE9BQUEsRUFBQUMsVUFBQSxFQUFBNy9CLE1BQUEsRUFBQTgvQixVQUFBLEVBQUFDLE9BQUEsR0FDQTlMLEtBQUEyQixRQUFBeHFDLEdBQUE0dUMsa0JBQUE1dUMsR0FFQSxJQUFBQSxJQUFBLENBQUE0MEMsUUFBQSxFQUFBQyxPQUFBLEdBQ0FoTSxLQUFBMkIsUUFBQXhxQyxHQUFBNnVDLG1CQUFBN3VDLEdBSUEsU0FBQWt6QyxjQXVFQSxTQUFBekYsV0FBQXFILFFBSUEsSUFIQSxJQUFBOTBDLEVBQUEsRUFDQWtILElBQUE0dEMsT0FBQW4wQyxPQUNBOGxDLFNBQUEsR0FDQXptQyxFQUFBa0gsSUFBQWxILElBQ0F5bUMsVUFBQXFPLE9BQUE5MEMsR0FBQW1KLE1BRUEsT0FBQXM5QixTQUdBLFNBQUE2RixjQUFBOEcsUUFBQTJCLFdBQUEzeUMsTUFDQSxJQUFBb3FDLElBQUF1SSxXQUFBdkksSUFDQXdJLEtBQUFELFdBQUFqckIsS0FDQTdnQixJQUFBK3JDLE1BQUF4SSxJQUNBeUksaUJBQUE3eUMsTUFBQSxlQUFBNkcsSUFDQWlzQyxTQUFBanNCLE9BRUEsT0FBQThyQixXQUFBeGxCLE1BRUEsU0FBQTJYLEtBQUFuOUIsUUFBQTRvQyxLQUNBLEtBQUF6TCxLQUFBQSxLQUFBc0YsTUFDQSxHQUFBLElBQUF0RixLQUFBdkIsVUFBQXNQLGlCQUNBLE9BQUE3QixRQUFBbE0sS0FBQW45QixRQUFBNG9DLEtBR0EsT0FBQSxHQUlBLFNBQUF6TCxLQUFBbjlCLFFBQUE0b0MsS0FDQSxJQUFBd0MsU0FBQXZDLFlBQUFDLFdBQ0F1QyxTQUFBLENBQUF2TCxRQUFBcUwsVUFHQSxHQUFBdkMsS0FDQSxLQUFBekwsS0FBQUEsS0FBQXNGLE1BQ0EsSUFBQSxJQUFBdEYsS0FBQXZCLFVBQUFzUCxtQkFDQTdCLFFBQUFsTSxLQUFBbjlCLFFBQUE0b0MsS0FDQSxPQUFBLE9BS0EsS0FBQXpMLEtBQUFBLEtBQUFzRixNQUNBLEdBQUEsSUFBQXRGLEtBQUF2QixVQUFBc1AsaUJBT0EsR0FGQXJDLGFBSkFDLFdBQUEzTCxLQUFBUSxXQUFBUixLQUFBUSxTQUFBLEtBSUFSLEtBQUE4TCxZQUFBSCxXQUFBM0wsS0FBQThMLFVBQUEsSUFFQWdDLE1BQUFBLE9BQUE5TixLQUFBb0csU0FBQXJkLGNBQ0FpWCxLQUFBQSxLQUFBc0YsTUFBQXRGLFNBQ0EsQ0FBQSxJQUFBaU8sU0FBQXZDLFlBQUEzcEMsT0FDQWtzQyxTQUFBLEtBQUF0TCxTQUFBc0wsU0FBQSxLQUFBRCxTQUdBLE9BQUFFLFNBQUEsR0FBQUQsU0FBQSxHQU1BLElBSEF2QyxZQUFBM3BDLEtBQUFtc0MsVUFHQSxHQUFBaEMsUUFBQWxNLEtBQUFuOUIsUUFBQTRvQyxLQUNBLE9BQUEsRUFNQSxPQUFBLEdBSUEsU0FBQTBDLGVBQUFDLFVBQ0EsT0FBQSxFQUFBQSxTQUFBMzBDLE9BQ0EsU0FBQXVtQyxLQUFBbjlCLFFBQUE0b0MsS0FFQSxJQURBLElBQUEzeUMsRUFBQXMxQyxTQUFBMzBDLE9BQ0FYLEtBQ0EsSUFBQXMxQyxTQUFBdDFDLEdBQUFrbkMsS0FBQW45QixRQUFBNG9DLEtBQ0EsT0FBQSxFQUdBLE9BQUEsR0FFQTJDLFNBQUEsR0FZQSxTQUFBQyxTQUFBbEMsVUFBQXYrQixJQUFBKzZCLE9BQUE5bEMsUUFBQTRvQyxLQU9BLElBTkEsSUFBQXpMLEtBQ0FzTyxhQUFBLEdBQ0F4MUMsRUFBQSxFQUNBa0gsSUFBQW1zQyxVQUFBMXlDLE9BQ0E4MEMsT0FBQSxNQUFBM2dDLElBRUE5VSxFQUFBa0gsSUFBQWxILEtBQ0FrbkMsS0FBQW1NLFVBQUFyekMsTUFDQTZ2QyxTQUFBQSxPQUFBM0ksS0FBQW45QixRQUFBNG9DLE9BQ0E2QyxhQUFBcnVDLEtBQUErL0IsTUFDQXVPLFFBQ0EzZ0MsSUFBQTNOLEtBQUFuSCxLQU1BLE9BQUF3MUMsYUFHQSxTQUFBRSxXQUFBekQsVUFBQXhMLFNBQUEyTSxRQUFBdUMsV0FBQUMsV0FBQUMsY0FPQSxPQU5BRixhQUFBQSxXQUFBak8sV0FDQWlPLFdBQUFELFdBQUFDLGFBRUFDLGFBQUFBLFdBQUFsTyxXQUNBa08sV0FBQUYsV0FBQUUsV0FBQUMsZUFFQTdILGFBQUEsU0FBQXJCLEtBQUF4RSxRQUFBcCtCLFFBQUE0b0MsS0FDQSxJQUFBemEsS0FBQWw0QixFQUFBa25DLEtBQ0E0TyxPQUFBLEdBQ0FDLFFBQUEsR0FDQUMsWUFBQTdOLFFBQUF4bkMsT0FHQXFtQyxNQUFBMkYsTUE1Q0EsU0FBQWxHLFNBQUFwdUIsU0FBQTh2QixTQUdBLElBRkEsSUFBQW5vQyxFQUFBLEVBQ0FrSCxJQUFBbVIsU0FBQTFYLE9BQ0FYLEVBQUFrSCxJQUFBbEgsSUFDQTRvQyxPQUFBbkMsU0FBQXB1QixTQUFBclksR0FBQW1vQyxTQUVBLE9BQUFBLFFBc0NBOE4sQ0FBQXhQLFVBQUEsSUFBQTE4QixRQUFBNDdCLFNBQUEsQ0FBQTU3QixTQUFBQSxRQUFBLElBR0Ftc0MsV0FBQWpFLFlBQUF0RixNQUFBbEcsU0FFQU8sTUFEQXVPLFNBQUF2TyxNQUFBOE8sT0FBQTdELFVBQUFsb0MsUUFBQTRvQyxLQUdBd0QsV0FBQS9DLFFBRUF3QyxhQUFBakosS0FBQXNGLFVBQUErRCxhQUFBTCxZQUdBLEdBR0F4TixRQUNBK04sVUFRQSxHQUxBOUMsU0FDQUEsUUFBQThDLFVBQUFDLFdBQUFwc0MsUUFBQTRvQyxLQUlBZ0QsV0FNQSxJQUxBemQsS0FBQXFkLFNBQUFZLFdBQUFKLFNBQ0FKLFdBQUF6ZCxLQUFBLEdBQUFudUIsUUFBQTRvQyxLQUdBM3lDLEVBQUFrNEIsS0FBQXYzQixPQUNBWCxNQUNBa25DLEtBQUFoUCxLQUFBbDRCLE1BQ0FtMkMsV0FBQUosUUFBQS8xQyxNQUFBazJDLFVBQUFILFFBQUEvMUMsSUFBQWtuQyxPQUtBLEdBQUF5RixNQUNBLEdBQUFpSixZQUFBM0QsVUFBQSxDQUNBLEdBQUEyRCxXQUFBLENBSUEsSUFGQTFkLEtBQUEsR0FDQWw0QixFQUFBbTJDLFdBQUF4MUMsT0FDQVgsTUFDQWtuQyxLQUFBaVAsV0FBQW4yQyxLQUVBazRCLEtBQUEvd0IsS0FBQSt1QyxVQUFBbDJDLEdBQUFrbkMsTUFHQTBPLFdBQUEsS0FBQU8sV0FBQSxHQUFBamUsS0FBQXlhLEtBS0EsSUFEQTN5QyxFQUFBbTJDLFdBQUF4MUMsT0FDQVgsTUFDQWtuQyxLQUFBaVAsV0FBQW4yQyxNQUNBLEdBQUFrNEIsS0FBQTBkLFdBQUF6bEMsUUFBQXc4QixLQUFBekYsTUFBQTRPLE9BQUE5MUMsTUFFQTJzQyxLQUFBelUsUUFBQWlRLFFBQUFqUSxNQUFBZ1AsYUFPQWlQLFdBQUFaLFNBQ0FZLGFBQUFoTyxRQUNBZ08sV0FBQS8vQixPQUFBNC9CLFlBQUFHLFdBQUF4MUMsUUFDQXcxQyxZQUVBUCxXQUNBQSxXQUFBLEtBQUF6TixRQUFBZ08sV0FBQXhELEtBRUF4ckMsS0FBQWdOLE1BQUFnMEIsUUFBQWdPLGNBTUEsU0FBQUMsa0JBQUF0QixRQXdCQSxJQXZCQSxJQUFBdUIsYUFBQWpELFFBQUEzakIsRUFDQXZvQixJQUFBNHRDLE9BQUFuMEMsT0FDQTIxQyxnQkFBQXpOLEtBQUE1TyxTQUFBNmEsT0FBQSxHQUFBMXZDLE1BQ0FteEMsaUJBQUFELGlCQUFBek4sS0FBQTVPLFNBQUEsS0FDQWo2QixFQUFBczJDLGdCQUFBLEVBQUEsRUFHQUUsYUFBQWxLLGNBQUEsU0FBQXBGLE1BQ0EsT0FBQUEsT0FBQW1QLGNBQ0FFLGtCQUFBLEdBQ0FFLGdCQUFBbkssY0FBQSxTQUFBcEYsTUFDQSxPQUFBLEVBQUEvMkIsUUFBQWttQyxhQUFBblAsT0FDQXFQLGtCQUFBLEdBQ0FqQixTQUFBLENBQUEsU0FBQXBPLEtBQUFuOUIsUUFBQTRvQyxLQUNBLElBQUExckMsS0FBQXF2QyxrQkFBQTNELEtBQUE1b0MsVUFBQW0vQixxQkFDQW1OLGFBQUF0c0MsU0FBQTQ3QixTQUNBNlEsYUFBQXRQLEtBQUFuOUIsUUFBQTRvQyxLQUNBOEQsZ0JBQUF2UCxLQUFBbjlCLFFBQUE0b0MsTUFHQSxPQURBMEQsYUFBQSxLQUNBcHZDLE1BR0FqSCxFQUFBa0gsSUFBQWxILElBQ0EsR0FBQW96QyxRQUFBdkssS0FBQTVPLFNBQUE2YSxPQUFBOTBDLEdBQUFvRixNQUNBa3dDLFNBQUEsQ0FBQWhKLGNBQUErSSxlQUFBQyxVQUFBbEMsY0FDQSxDQUlBLElBSEFBLFFBQUF2SyxLQUFBZ0gsT0FBQWlGLE9BQUE5MEMsR0FBQW9GLE1BQUErTyxNQUFBLEtBQUEyZ0MsT0FBQTkwQyxHQUFBb3FCLFVBR0FzZCxTQUFBLENBR0EsSUFEQWpZLElBQUF6dkIsRUFDQXl2QixFQUFBdm9CLE1BQ0EyaEMsS0FBQTVPLFNBQUE2YSxPQUFBcmxCLEdBQUFycUIsTUFEQXFxQixLQUtBLE9BQUFpbUIsV0FDQSxFQUFBMTFDLEdBQUFxMUMsZUFBQUMsVUFDQSxFQUFBdDFDLEdBQUF5dEMsV0FFQXFILE9BQUF4cUMsTUFBQSxFQUFBdEssRUFBQSxHQUFBbVYsT0FBQSxDQUFBaE0sTUFBQSxNQUFBMnJDLE9BQUE5MEMsRUFBQSxHQUFBb0YsS0FBQSxJQUFBLE1BQ0F5RCxRQUFBODlCLE1BQUEsTUFDQXlNLFFBQ0FwekMsRUFBQXl2QixHQUFBMm1CLGtCQUFBdEIsT0FBQXhxQyxNQUFBdEssRUFBQXl2QixJQUNBQSxFQUFBdm9CLEtBQUFrdkMsa0JBQUF0QixPQUFBQSxPQUFBeHFDLE1BQUFtbEIsSUFDQUEsRUFBQXZvQixLQUFBdW1DLFdBQUFxSCxTQUdBUSxTQUFBbnVDLEtBQUFpc0MsU0FJQSxPQUFBaUMsZUFBQUMsVUE4UkEsT0E5bUJBcEMsV0FBQWx2QyxVQUFBNmtDLEtBQUE2TixRQUFBN04sS0FBQTJCLFFBQ0EzQixLQUFBcUssV0FBQSxJQUFBQSxXQUVBbEssU0FBQUosT0FBQUksU0FBQSxTQUFBdkMsU0FBQWtRLFdBQ0EsSUFBQXp0QixRQUFBUCxNQUFBbXNCLE9BQUExdkMsS0FDQXd4QyxNQUFBOUosT0FBQStKLFdBQ0FDLE9BQUE5TSxXQUFBdkQsU0FBQSxLQUVBLEdBQUFxUSxPQUNBLE9BQUFILFVBQUEsRUFBQUcsT0FBQXhzQyxNQUFBLEdBT0EsSUFKQXNzQyxNQUFBblEsU0FDQXFHLE9BQUEsR0FDQStKLFdBQUFoTyxLQUFBb0osVUFFQTJFLE9BQUEsQ0F5QkEsSUFBQXh4QyxRQXRCQThqQixXQUFBUCxNQUFBZ2lCLE9BQUFqZCxLQUFBa3BCLFVBQ0FqdUIsUUFFQWl1QixNQUFBQSxNQUFBdHNDLE1BQUFxZSxNQUFBLEdBQUFob0IsU0FBQWkyQyxPQUVBOUosT0FBQTNsQyxLQUFBMnRDLE9BQUEsS0FHQTVyQixTQUFBLEdBR0FQLE1BQUFpaUIsYUFBQWxkLEtBQUFrcEIsVUFDQTF0QixRQUFBUCxNQUFBdmMsUUFDQTBvQyxPQUFBM3RDLEtBQUEsQ0FDQWdDLE1BQUErZixRQUVBOWpCLEtBQUF1akIsTUFBQSxHQUFBOWYsUUFBQTg5QixNQUFBLE9BRUFpUSxNQUFBQSxNQUFBdHNDLE1BQUE0ZSxRQUFBdm9CLFNBSUFrb0MsS0FBQWdILFNBQ0FsbkIsTUFBQXFpQixVQUFBNWxDLE1BQUFzb0IsS0FBQWtwQixTQUFBQyxXQUFBenhDLFNBQ0F1akIsTUFBQWt1QixXQUFBenhDLE1BQUF1akIsVUFDQU8sUUFBQVAsTUFBQXZjLFFBQ0Ewb0MsT0FBQTN0QyxLQUFBLENBQ0FnQyxNQUFBK2YsUUFDQTlqQixLQUFBQSxLQUNBZ2xCLFFBQUF6QixRQUVBaXVCLE1BQUFBLE1BQUF0c0MsTUFBQTRlLFFBQUF2b0IsU0FJQSxJQUFBdW9CLFFBQ0EsTUFPQSxPQUFBeXRCLFVBQ0FDLE1BQUFqMkMsT0FDQWkyQyxNQUNBaE8sT0FBQWp0QixNQUFBOHFCLFVBRUF1RCxXQUFBdkQsU0FBQXFHLFFBQUF4aUMsTUFBQSxJQStYQXBKLFFBQUEwbkMsT0FBQTFuQyxRQUFBLFNBQUF1bEMsU0FBQTlkLE9BQ0EsSUFBQTNvQixFQUNBKzJDLFlBQUEsR0FDQUMsZ0JBQUEsR0FDQUYsT0FBQTdNLGNBQUF4RCxTQUFBLEtBRUEsSUFBQXFRLE9BQUEsQ0FNQSxJQUpBbnVCLFFBQ0FBLE1BQUFxZ0IsU0FBQXZDLFdBRUF6bUMsRUFBQTJvQixNQUFBaG9CLE9BQ0FYLE1BQ0E4MkMsT0FBQVYsa0JBQUF6dEIsTUFBQTNvQixLQUNBMG5DLFNBQ0FxUCxZQUFBNXZDLEtBQUEydkMsUUFFQUUsZ0JBQUE3dkMsS0FBQTJ2QyxTQUtBQSxPQUFBN00sY0FBQXhELFNBcklBLFNBQUF1USxnQkFBQUQsYUFDQSxJQUFBRSxNQUFBLEVBQUFGLFlBQUFwMkMsT0FDQXUyQyxVQUFBLEVBQUFGLGdCQUFBcjJDLE9BQ0F3MkMsYUFBQSxTQUFBeEssS0FBQTVpQyxRQUFBNG9DLElBQUF4SyxRQUFBaVAsV0FDQSxJQUFBbFEsS0FBQXpYLEVBQUEyakIsUUFDQWlFLGFBQUEsRUFDQXIzQyxFQUFBLElBQ0FxekMsVUFBQTFHLE1BQUEsR0FDQTJLLFdBQUEsR0FDQUMsY0FBQXJPLGlCQUVBbEMsTUFBQTJGLE1BQUF1SyxXQUFBck8sS0FBQWtILEtBQUEsSUFBQSxJQUFBcUgsV0FFQUksY0FBQTNOLFNBQUEsTUFBQTBOLGNBQUEsRUFBQTlnQixLQUFBK0IsVUFBQSxHQUNBdHhCLElBQUE4L0IsTUFBQXJtQyxPQVNBLElBUEF5MkMsWUFDQWxPLGlCQUFBbi9CLFVBQUFpN0IsVUFBQWo3QixTQUFBcXRDLFdBTUFwM0MsSUFBQWtILEtBQUEsT0FBQWdnQyxLQUFBRixNQUFBaG5DLElBQUFBLElBQUEsQ0FDQSxHQUFBazNDLFdBQUFoUSxLQUFBLENBTUEsSUFMQXpYLEVBQUEsRUFDQTFsQixTQUFBbTlCLEtBQUErRixnQkFBQWpJLFdBQ0FxRSxZQUFBbkMsTUFDQXlMLEtBQUFwSixnQkFFQTZKLFFBQUE0RCxnQkFBQXZuQixNQUNBLEdBQUEyakIsUUFBQWxNLEtBQUFuOUIsU0FBQWk3QixTQUFBMk4sS0FBQSxDQUNBeEssUUFBQWhoQyxLQUFBKy9CLE1BQ0EsTUFHQWtRLFlBQ0F2TixRQUFBMk4sZUFLQVAsU0FFQS9QLE1BQUFrTSxTQUFBbE0sT0FDQW1RLGVBSUExSyxNQUNBMEcsVUFBQWxzQyxLQUFBKy9CLE9BZ0JBLEdBVEFtUSxjQUFBcjNDLEVBU0FpM0MsT0FBQWozQyxJQUFBcTNDLGFBQUEsQ0FFQSxJQURBNW5CLEVBQUEsRUFDQTJqQixRQUFBMkQsWUFBQXRuQixNQUNBMmpCLFFBQUFDLFVBQUFpRSxXQUFBdnRDLFFBQUE0b0MsS0FHQSxHQUFBaEcsS0FBQSxDQUVBLEdBQUEsRUFBQTBLLGFBQ0EsS0FBQXIzQyxLQUNBcXpDLFVBQUFyekMsSUFBQXMzQyxXQUFBdDNDLEtBQ0FzM0MsV0FBQXQzQyxHQUFBd1ksSUFBQTlYLEtBQUF5bkMsVUFNQW1QLFdBQUEvQixTQUFBK0IsWUFJQW53QyxLQUFBZ04sTUFBQWcwQixRQUFBbVAsWUFHQUYsWUFBQXpLLE1BQUEsRUFBQTJLLFdBQUEzMkMsUUFDQSxFQUFBMDJDLGFBQUFOLFlBQUFwMkMsUUFFQWlvQyxPQUFBeUksV0FBQWxKLFNBVUEsT0FMQWlQLFlBQ0F2TixRQUFBMk4sY0FDQXRPLGlCQUFBcU8sZUFHQWxFLFdBR0EsT0FBQTRELE1BQ0FqSixhQUFBbUosY0FDQUEsYUF5QkFNLENBQUFULGdCQUFBRCxlQUdBdFEsU0FBQUEsU0FFQSxPQUFBcVEsUUFZQTdOLE9BQUFMLE9BQUFLLE9BQUEsU0FBQXhDLFNBQUExOEIsUUFBQW8rQixRQUFBd0UsTUFDQSxJQUFBM3NDLEVBQUE4MEMsT0FBQXJrQyxNQUFBckwsS0FBQTJxQyxLQUNBbm1DLFNBQUEsbUJBQUE2OEIsVUFBQUEsU0FDQTlkLE9BQUFna0IsTUFBQTNELFNBQUF2QyxTQUFBNzhCLFNBQUE2OEIsVUFBQUEsVUFNQSxHQUpBMEIsUUFBQUEsU0FBQSxHQUlBLElBQUF4ZixNQUFBaG9CLE9BQUEsQ0FJQSxHQUFBLEdBREFtMEMsT0FBQW5zQixNQUFBLEdBQUFBLE1BQUEsR0FBQXJlLE1BQUEsSUFDQTNKLFFBQUEsUUFBQThQLE1BQUFxa0MsT0FBQSxJQUFBMXZDLE1BQ0EsSUFBQTJFLFFBQUE0N0IsVUFBQTRELGdCQUFBVixLQUFBNU8sU0FBQTZhLE9BQUEsR0FBQTF2QyxNQUFBLENBR0EsS0FEQTJFLFNBQUE4K0IsS0FBQWtILEtBQUEsR0FBQXQvQixNQUFBMlosUUFBQSxHQUFBdmhCLFFBQUEraUMsVUFBQUMsV0FBQTloQyxVQUFBLElBQUEsSUFFQSxPQUFBbytCLFFBR0F2K0IsV0FDQUcsUUFBQUEsUUFBQXM4QixZQUdBSSxTQUFBQSxTQUFBbjhCLE1BQUF3cUMsT0FBQTFvQyxRQUFBakQsTUFBQXhJLFFBS0EsSUFEQVgsRUFBQWdyQyxVQUFBLGFBQUF2bEMsS0FBQWdoQyxVQUFBLEVBQUFxTyxPQUFBbjBDLE9BQ0FYLE1BQ0F5USxNQUFBcWtDLE9BQUE5MEMsSUFHQTZvQyxLQUFBNU8sU0FBQTcwQixLQUFBcUwsTUFBQXJMLFFBR0EsSUFBQTJxQyxLQUFBbEgsS0FBQWtILEtBQUEzcUMsU0FFQXVuQyxLQUFBb0QsS0FDQXQvQixNQUFBMlosUUFBQSxHQUFBdmhCLFFBQUEraUMsVUFBQUMsV0FDQUYsU0FBQWxtQyxLQUFBcXZDLE9BQUEsR0FBQTF2QyxPQUFBc29DLFlBQUEzakMsUUFBQXM4QixhQUFBdDhCLFVBQ0EsQ0FLQSxHQUZBK3FDLE9BQUExK0IsT0FBQXBXLEVBQUEsS0FDQXltQyxTQUFBa0csS0FBQWhzQyxRQUFBOHNDLFdBQUFxSCxTQUdBLE9BREEzdEMsS0FBQWdOLE1BQUFnMEIsUUFBQXdFLE1BQ0F4RSxRQUdBLE9BZUEsT0FQQXYrQixVQUFBMUksUUFBQXVsQyxTQUFBOWQsUUFDQWdrQixLQUNBNWlDLFNBQ0F3L0IsZUFDQXBCLFNBQ0FwK0IsU0FBQTRoQyxTQUFBbG1DLEtBQUFnaEMsV0FBQWlILFlBQUEzakMsUUFBQXM4QixhQUFBdDhCLFNBRUFvK0IsU0FNQXpDLFFBQUE4TCxXQUFBOUosUUFBQXJzQixNQUFBLElBQUF3YyxLQUFBcVMsV0FBQXJpQyxLQUFBLE1BQUE2L0IsUUFJQWhDLFFBQUE2TCxtQkFBQW5JLGFBR0FDLGNBSUEzRCxRQUFBbUwsYUFBQTVDLE9BQUEsU0FBQUMsSUFFQSxPQUFBLEVBQUFBLEdBQUF1Qyx3QkFBQXpMLFNBQUFrQixjQUFBLGVBTUErSCxPQUFBLFNBQUFDLElBRUEsT0FEQUEsR0FBQWdDLFVBQUEsbUJBQ0EsTUFBQWhDLEdBQUF3RCxXQUFBbkUsYUFBQSxXQUVBWSxVQUFBLHlCQUFBLFNBQUFqSCxLQUFBNWlDLEtBQUF5a0MsT0FDQSxJQUFBQSxNQUNBLE9BQUE3QixLQUFBcUcsYUFBQWpwQyxLQUFBLFNBQUFBLEtBQUEyckIsY0FBQSxFQUFBLEtBT0F5VixRQUFBNkUsWUFBQTBELE9BQUEsU0FBQUMsSUFHQSxPQUZBQSxHQUFBZ0MsVUFBQSxXQUNBaEMsR0FBQXdELFdBQUFsRSxhQUFBLFFBQUEsSUFDQSxLQUFBVSxHQUFBd0QsV0FBQW5FLGFBQUEsWUFFQVksVUFBQSxRQUFBLFNBQUFqSCxLQUFBNWlDLEtBQUF5a0MsT0FDQSxJQUFBQSxPQUFBLFVBQUE3QixLQUFBb0csU0FBQXJkLGNBQ0EsT0FBQWlYLEtBQUF3USxlQU9BekosT0FBQSxTQUFBQyxJQUNBLE9BQUEsTUFBQUEsR0FBQVgsYUFBQSxlQUVBWSxVQUFBL0QsU0FBQSxTQUFBbEQsS0FBQTVpQyxLQUFBeWtDLE9BQ0EsSUFBQWg1QixJQUNBLElBQUFnNUIsTUFDQSxPQUFBLElBQUE3QixLQUFBNWlDLE1BQUFBLEtBQUEyckIsZUFDQWxnQixJQUFBbTNCLEtBQUE4SSxpQkFBQTFyQyxRQUFBeUwsSUFBQW9oQyxVQUNBcGhDLElBQUE1RyxNQUNBLE9BS0F5L0IsT0Foc0VBLENBa3NFQW5ZLFFBSUErVixPQUFBdUosS0FBQW5ILE9BQ0FwQyxPQUFBcnNCLEtBQUF5dUIsT0FBQWdKLFVBR0FwTCxPQUFBcnNCLEtBQUEsS0FBQXFzQixPQUFBcnNCLEtBQUFxd0IsUUFDQWhFLE9BQUE2SyxXQUFBN0ssT0FBQW1SLE9BQUEvTyxPQUFBeUksV0FDQTdLLE9BQUE5ZCxLQUFBa2dCLE9BQUFFLFFBQ0F0QyxPQUFBb1IsU0FBQWhQLE9BQUFHLE1BQ0F2QyxPQUFBa0QsU0FBQWQsT0FBQWMsU0FDQWxELE9BQUFxUixlQUFBalAsT0FBQXRXLE9BS0EsSUFBQWthLElBQUEsU0FBQXRGLEtBQUFzRixJQUFBc0wsT0FJQSxJQUhBLElBQUE1dUIsUUFBQSxHQUNBNnVCLGNBQUF4eEMsSUFBQXV4QyxPQUVBNVEsS0FBQUEsS0FBQXNGLE9BQUEsSUFBQXRGLEtBQUF2QixVQUNBLEdBQUEsSUFBQXVCLEtBQUF2QixTQUFBLENBQ0EsR0FBQW9TLFVBQUF2UixPQUFBVSxNQUFBOFEsR0FBQUYsT0FDQSxNQUVBNXVCLFFBQUEvaEIsS0FBQSsvQixNQUdBLE9BQUFoZSxTQUlBK3VCLFNBQUEsU0FBQXA0QyxFQUFBcW5DLE1BR0EsSUFGQSxJQUFBaGUsUUFBQSxHQUVBcnBCLEVBQUFBLEVBQUFBLEVBQUE4dUMsWUFDQSxJQUFBOXVDLEVBQUE4bEMsVUFBQTlsQyxJQUFBcW5DLE1BQ0FoZSxRQUFBL2hCLEtBQUF0SCxHQUlBLE9BQUFxcEIsU0FJQWd2QixjQUFBMVIsT0FBQXJzQixLQUFBd08sTUFBQTJpQixhQUlBLFNBQUFnQyxTQUFBcEcsS0FBQTVpQyxNQUVBLE9BQUE0aUMsS0FBQW9HLFVBQUFwRyxLQUFBb0csU0FBQXJkLGdCQUFBM3JCLEtBQUEyckIsY0FHQSxJQUFBa29CLFdBQUEsa0VBS0EsU0FBQUMsT0FBQW5ILFNBQUFvSCxVQUFBbEYsS0FDQSxPQUFBM2pCLFdBQUE2b0IsV0FDQTdSLE9BQUE4QixLQUFBMkksU0FBQSxTQUFBL0osS0FBQWxuQyxHQUNBLFFBQUFxNEMsVUFBQTMzQyxLQUFBd21DLEtBQUFsbkMsRUFBQWtuQyxRQUFBaU0sTUFLQWtGLFVBQUExUyxTQUNBYSxPQUFBOEIsS0FBQTJJLFNBQUEsU0FBQS9KLE1BQ0EsT0FBQUEsT0FBQW1SLFlBQUFsRixNQUtBLGlCQUFBa0YsVUFDQTdSLE9BQUE4QixLQUFBMkksU0FBQSxTQUFBL0osTUFDQSxPQUFBLEVBQUEvMkIsUUFBQXpQLEtBQUEyM0MsVUFBQW5SLFFBQUFpTSxNQUtBM00sT0FBQXFKLE9BQUF3SSxVQUFBcEgsU0FBQWtDLEtBR0EzTSxPQUFBcUosT0FBQSxTQUFBMTFCLEtBQUE2c0IsTUFBQW1NLEtBQ0EsSUFBQWpNLEtBQUFGLE1BQUEsR0FNQSxPQUpBbU0sTUFDQWg1QixLQUFBLFFBQUFBLEtBQUEsS0FHQSxJQUFBNnNCLE1BQUFybUMsUUFBQSxJQUFBdW1DLEtBQUF2QixTQUNBYSxPQUFBdUosS0FBQUksZ0JBQUFqSixLQUFBL3NCLE1BQUEsQ0FBQStzQixNQUFBLEdBR0FWLE9BQUF1SixLQUFBM2xCLFFBQUFqUSxLQUFBcXNCLE9BQUE4QixLQUFBdEIsTUFBQSxTQUFBRSxNQUNBLE9BQUEsSUFBQUEsS0FBQXZCLGFBSUFhLE9BQUFqaUMsR0FBQTlCLE9BQUEsQ0FDQXN0QyxLQUFBLFNBQUF0SixVQUNBLElBQUF6bUMsRUFBQWlILElBQ0FDLElBQUF2RCxLQUFBaEQsT0FDQTRtQixLQUFBNWpCLEtBRUEsR0FBQSxpQkFBQThpQyxTQUNBLE9BQUE5aUMsS0FBQW9qQyxVQUFBUCxPQUFBQyxVQUFBb0osT0FBQSxXQUNBLElBQUE3dkMsRUFBQSxFQUFBQSxFQUFBa0gsSUFBQWxILElBQ0EsR0FBQXdtQyxPQUFBa0QsU0FBQW5pQixLQUFBdm5CLEdBQUEyRCxNQUNBLE9BQUEsS0FRQSxJQUZBc0QsSUFBQXRELEtBQUFvakMsVUFBQSxJQUVBL21DLEVBQUEsRUFBQUEsRUFBQWtILElBQUFsSCxJQUNBd21DLE9BQUF1SixLQUFBdEosU0FBQWxmLEtBQUF2bkIsR0FBQWlILEtBR0EsT0FBQSxFQUFBQyxJQUFBcy9CLE9BQUE2SyxXQUFBcHFDLEtBQUFBLEtBRUE0b0MsT0FBQSxTQUFBcEosVUFDQSxPQUFBOWlDLEtBQUFvakMsVUFBQXFSLE9BQUF6MEMsS0FBQThpQyxVQUFBLElBQUEsS0FFQTBNLElBQUEsU0FBQTFNLFVBQ0EsT0FBQTlpQyxLQUFBb2pDLFVBQUFxUixPQUFBejBDLEtBQUE4aUMsVUFBQSxJQUFBLEtBRUF1UixHQUFBLFNBQUF2UixVQUNBLFFBQUEyUixPQUNBejBDLEtBSUEsaUJBQUE4aUMsVUFBQXlSLGNBQUF6eUMsS0FBQWdoQyxVQUNBRCxPQUFBQyxVQUNBQSxVQUFBLElBQ0EsR0FDQTlsQyxVQVNBLElBQUEyM0MsV0FNQTVNLFdBQUEsdUNBRUFsRixPQUFBamlDLEdBQUFtaUMsS0FBQSxTQUFBRCxTQUFBMThCLFFBQUE2UixNQUNBLElBQUErTSxNQUFBdWUsS0FHQSxJQUFBVCxTQUNBLE9BQUE5aUMsS0FRQSxHQUhBaVksS0FBQUEsTUFBQTA4QixXQUdBLGlCQUFBN1IsU0FvRUEsT0FBQUEsU0FBQWQsVUFDQWhpQyxLQUFBLEdBQUE4aUMsU0FDQTlpQyxLQUFBaEQsT0FBQSxFQUNBZ0QsTUFJQTZyQixXQUFBaVgsZUFDQWxnQyxJQUFBcVYsS0FBQTI4QixNQUNBMzhCLEtBQUEyOEIsTUFBQTlSLFVBR0FBLFNBQUFELFFBR0FBLE9BQUEwQixVQUFBekIsU0FBQTlpQyxNQXRFQSxLQVBBZ2xCLE1BTEEsTUFBQThkLFNBQUEsSUFDQSxNQUFBQSxTQUFBQSxTQUFBOWxDLE9BQUEsSUFDQSxHQUFBOGxDLFNBQUE5bEMsT0FHQSxDQUFBLEtBQUE4bEMsU0FBQSxNQUdBaUYsV0FBQWhlLEtBQUErWSxhQUlBOWQsTUFBQSxJQUFBNWUsUUE2Q0EsT0FBQUEsU0FBQUEsUUFBQTg4QixRQUNBOThCLFNBQUE2UixNQUFBbTBCLEtBQUF0SixVQUtBOWlDLEtBQUFNLFlBQUE4RixTQUFBZ21DLEtBQUF0SixVQWhEQSxHQUFBOWQsTUFBQSxHQUFBLENBWUEsR0FYQTVlLFFBQUFBLG1CQUFBeThCLE9BQUF6OEIsUUFBQSxHQUFBQSxRQUlBeThCLE9BQUF0K0IsTUFBQXZFLEtBQUE2aUMsT0FBQWdTLFVBQ0E3dkIsTUFBQSxHQUNBNWUsU0FBQUEsUUFBQTQ3QixTQUFBNTdCLFFBQUFrakMsZUFBQWxqQyxRQUFBaTdCLFVBQ0EsSUFJQW1ULFdBQUExeUMsS0FBQWtqQixNQUFBLEtBQUE2ZCxPQUFBaUIsY0FBQTE5QixTQUNBLElBQUE0ZSxTQUFBNWUsUUFHQXlsQixXQUFBN3JCLEtBQUFnbEIsUUFDQWhsQixLQUFBZ2xCLE9BQUE1ZSxRQUFBNGUsUUFJQWhsQixLQUFBdXRDLEtBQUF2b0IsTUFBQTVlLFFBQUE0ZSxRQUtBLE9BQUFobEIsS0FZQSxPQVJBdWpDLEtBQUFsQyxTQUFBa0ksZUFBQXZrQixNQUFBLE9BS0FobEIsS0FBQSxHQUFBdWpDLEtBQ0F2akMsS0FBQWhELE9BQUEsR0FFQWdELE9BaUNBSyxVQUFBd2lDLE9BQUFqaUMsR0FHQSt6QyxXQUFBOVIsT0FBQXhCLFVBR0EsSUFBQXlULGFBQUEsaUNBR0FDLGlCQUFBLENBQ0F2dEMsVUFBQSxFQUNBbUcsVUFBQSxFQUNBd1ksTUFBQSxFQUNBNEMsTUFBQSxHQW9GQSxTQUFBQyxRQUFBNmhCLElBQUFoQyxLQUNBLE1BQUFnQyxJQUFBQSxJQUFBaEMsT0FBQSxJQUFBZ0MsSUFBQTdJLFdBQ0EsT0FBQTZJLElBbkZBaEksT0FBQWppQyxHQUFBOUIsT0FBQSxDQUNBOHdCLElBQUEsU0FBQWdVLFFBQ0EsSUFBQW9SLFFBQUFuUyxPQUFBZSxPQUFBNWpDLE1BQ0E2TCxFQUFBbXBDLFFBQUFoNEMsT0FFQSxPQUFBZ0QsS0FBQWtzQyxPQUFBLFdBRUEsSUFEQSxJQUFBN3ZDLEVBQUEsRUFDQUEsRUFBQXdQLEVBQUF4UCxJQUNBLEdBQUF3bUMsT0FBQWtELFNBQUEvbEMsS0FBQWcxQyxRQUFBMzRDLElBQ0EsT0FBQSxLQU1BNDRDLFFBQUEsU0FBQWhILFVBQUE3bkMsU0FDQSxJQUFBeWtDLElBQ0F4dUMsRUFBQSxFQUNBd1AsRUFBQTdMLEtBQUFoRCxPQUNBdW9CLFFBQUEsR0FDQXl2QixRQUFBLGlCQUFBL0csV0FBQXBMLE9BQUFvTCxXQUdBLElBQUFzRyxjQUFBenlDLEtBQUFtc0MsV0FDQSxLQUFBNXhDLEVBQUF3UCxFQUFBeFAsSUFDQSxJQUFBd3VDLElBQUE3cUMsS0FBQTNELEdBQUF3dUMsS0FBQUEsTUFBQXprQyxRQUFBeWtDLElBQUFBLElBQUFuSSxXQUdBLEdBQUFtSSxJQUFBN0ksU0FBQSxLQUFBZ1QsU0FDQSxFQUFBQSxRQUFBMStCLE1BQUF1MEIsS0FHQSxJQUFBQSxJQUFBN0ksVUFDQWEsT0FBQXVKLEtBQUFJLGdCQUFBM0IsSUFBQW9ELFlBQUEsQ0FFQTFvQixRQUFBL2hCLEtBQUFxbkMsS0FDQSxNQU1BLE9BQUE3cUMsS0FBQW9qQyxVQUFBLEVBQUE3ZCxRQUFBdm9CLE9BQUE2bEMsT0FBQTZLLFdBQUFub0IsU0FBQUEsVUFJQWpQLE1BQUEsU0FBQWl0QixNQUdBLE9BQUFBLEtBS0EsaUJBQUFBLEtBQ0EvMkIsUUFBQXpQLEtBQUE4bEMsT0FBQVUsTUFBQXZqQyxLQUFBLElBSUF3TSxRQUFBelAsS0FBQWlELEtBR0F1akMsS0FBQUwsT0FBQUssS0FBQSxHQUFBQSxNQVpBdmpDLEtBQUEsSUFBQUEsS0FBQSxHQUFBMGlDLFdBQUExaUMsS0FBQTRyQixRQUFBc3BCLFVBQUFsNEMsUUFBQSxHQWdCQWlILElBQUEsU0FBQTYrQixTQUFBMThCLFNBQ0EsT0FBQXBHLEtBQUFvakMsVUFDQVAsT0FBQTZLLFdBQ0E3SyxPQUFBdCtCLE1BQUF2RSxLQUFBNHdCLE1BQUFpUyxPQUFBQyxTQUFBMThCLGFBS0ErdUMsUUFBQSxTQUFBclMsVUFDQSxPQUFBOWlDLEtBQUFpRSxJQUFBLE1BQUE2K0IsU0FDQTlpQyxLQUFBc2pDLFdBQUF0akMsS0FBQXNqQyxXQUFBNEksT0FBQXBKLGNBVUFELE9BQUFwK0IsS0FBQSxDQUNBaUssT0FBQSxTQUFBNjBCLE1BQ0EsSUFBQTcwQixPQUFBNjBCLEtBQUFiLFdBQ0EsT0FBQWgwQixRQUFBLEtBQUFBLE9BQUFzekIsU0FBQXR6QixPQUFBLE1BRUF3WixRQUFBLFNBQUFxYixNQUNBLE9BQUFzRixJQUFBdEYsS0FBQSxlQUVBNlIsYUFBQSxTQUFBN1IsS0FBQWxuQyxFQUFBODNDLE9BQ0EsT0FBQXRMLElBQUF0RixLQUFBLGFBQUE0USxRQUVBaHVCLEtBQUEsU0FBQW9kLE1BQ0EsT0FBQXZhLFFBQUF1YSxLQUFBLGdCQUVBeGEsS0FBQSxTQUFBd2EsTUFDQSxPQUFBdmEsUUFBQXVhLEtBQUEsb0JBRUE4UixRQUFBLFNBQUE5UixNQUNBLE9BQUFzRixJQUFBdEYsS0FBQSxnQkFFQTJSLFFBQUEsU0FBQTNSLE1BQ0EsT0FBQXNGLElBQUF0RixLQUFBLG9CQUVBK1IsVUFBQSxTQUFBL1IsS0FBQWxuQyxFQUFBODNDLE9BQ0EsT0FBQXRMLElBQUF0RixLQUFBLGNBQUE0USxRQUVBb0IsVUFBQSxTQUFBaFMsS0FBQWxuQyxFQUFBODNDLE9BQ0EsT0FBQXRMLElBQUF0RixLQUFBLGtCQUFBNFEsUUFFQUcsU0FBQSxTQUFBL1EsTUFDQSxPQUFBK1EsVUFBQS9RLEtBQUFiLFlBQUEsSUFBQXFMLFdBQUF4SyxPQUVBLzdCLFNBQUEsU0FBQSs3QixNQUNBLE9BQUErUSxTQUFBL1EsS0FBQXdLLGFBRUFwZ0MsU0FBQSxTQUFBNDFCLE1BQ0EsT0FBQW9HLFNBQUFwRyxLQUFBLFVBQ0FBLEtBQUFpUyxpQkFNQTdMLFNBQUFwRyxLQUFBLGNBQ0FBLEtBQUFBLEtBQUEvNEIsU0FBQSs0QixNQUdBVixPQUFBdCtCLE1BQUEsR0FBQWcvQixLQUFBdUYsZUFFQSxTQUFBbm9DLEtBQUFDLElBQ0FpaUMsT0FBQWppQyxHQUFBRCxNQUFBLFNBQUF3ekMsTUFBQXJSLFVBQ0EsSUFBQXZkLFFBQUFzZCxPQUFBMXhCLElBQUFuUixLQUFBWSxHQUFBdXpDLE9BdUJBLE1BckJBLFVBQUF4ekMsS0FBQWdHLE9BQUEsS0FDQW04QixTQUFBcVIsT0FHQXJSLFVBQUEsaUJBQUFBLFdBQ0F2ZCxRQUFBc2QsT0FBQXFKLE9BQUFwSixTQUFBdmQsVUFHQSxFQUFBdmxCLEtBQUFoRCxTQUdBKzNDLGlCQUFBcDBDLE9BQ0FraUMsT0FBQTZLLFdBQUFub0IsU0FJQXV2QixhQUFBaHpDLEtBQUFuQixPQUNBNGtCLFFBQUFrd0IsV0FJQXoxQyxLQUFBb2pDLFVBQUE3ZCxZQUdBLElBQUFtd0IsY0FBQSxvQkFzT0EsU0FBQUMsU0FBQUMsR0FDQSxPQUFBQSxFQUVBLFNBQUFDLFFBQUFDLElBQ0EsTUFBQUEsR0FHQSxTQUFBQyxXQUFBdndDLE1BQUF3d0MsUUFBQUMsT0FBQUMsU0FDQSxJQUFBenBCLE9BRUEsSUFHQWpuQixPQUFBcW1CLFdBQUFZLE9BQUFqbkIsTUFBQTJ3QyxTQUNBMXBCLE9BQUExdkIsS0FBQXlJLE9BQUE4ZixLQUFBMHdCLFNBQUFJLEtBQUFILFFBR0F6d0MsT0FBQXFtQixXQUFBWSxPQUFBam5CLE1BQUE2d0MsTUFDQTVwQixPQUFBMXZCLEtBQUF5SSxNQUFBd3dDLFFBQUFDLFFBUUFELFFBQUF4bEMsV0FBQTVOLEVBQUEsQ0FBQTRDLE9BQUFtQixNQUFBdXZDLFVBTUEsTUFBQTF3QyxPQUlBeXdDLE9BQUF6bEMsV0FBQTVOLEVBQUEsQ0FBQTRDLFNBdk9BcTlCLE9BQUF5VCxVQUFBLFNBQUE3NEMsU0FJQUEsUUFBQSxpQkFBQUEsUUFsQ0EsU0FBQUEsU0FDQSxJQUFBa3JCLE9BQUEsR0FJQSxPQUhBa2EsT0FBQXArQixLQUFBaEgsUUFBQXVuQixNQUFBMHdCLGdCQUFBLEdBQUEsU0FBQXZOLEVBQUFvTyxNQUNBNXRCLE9BQUE0dEIsT0FBQSxJQUVBNXRCLE9BOEJBNnRCLENBQUEvNEMsU0FDQW9sQyxPQUFBL2pDLE9BQUEsR0FBQXJCLFNBRUEsSUFDQWc1QyxPQUdBQyxPQUdBQyxNQUdBQyxPQUdBMW1DLEtBQUEsR0FHQTJtQyxNQUFBLEdBR0FDLGFBQUEsRUFHQUMsS0FBQSxXQVFBLElBTEFILE9BQUFBLFFBQUFuNUMsUUFBQXU1QyxLQUlBTCxNQUFBRixRQUFBLEVBQ0FJLE1BQUE3NUMsT0FBQTg1QyxhQUFBLEVBRUEsSUFEQUosT0FBQUcsTUFBQXB1QyxVQUNBcXVDLFlBQUE1bUMsS0FBQWxULFNBR0EsSUFBQWtULEtBQUE0bUMsYUFBQXRtQyxNQUFBa21DLE9BQUEsR0FBQUEsT0FBQSxLQUNBajVDLFFBQUF3NUMsY0FHQUgsWUFBQTVtQyxLQUFBbFQsT0FDQTA1QyxRQUFBLEdBTUFqNUMsUUFBQWk1QyxTQUNBQSxRQUFBLEdBR0FELFFBQUEsRUFHQUcsU0FJQTFtQyxLQURBd21DLE9BQ0EsR0FJQSxLQU1BOXlCLEtBQUEsQ0FHQTNmLElBQUEsV0EyQkEsT0ExQkFpTSxPQUdBd21DLFNBQUFELFNBQ0FLLFlBQUE1bUMsS0FBQWxULE9BQUEsRUFDQTY1QyxNQUFBcnpDLEtBQUFrekMsU0FHQSxTQUFBenlDLElBQUFzRCxNQUNBczdCLE9BQUFwK0IsS0FBQThDLEtBQUEsU0FBQTRnQyxFQUFBckQsS0FDQWpaLFdBQUFpWixLQUNBcm5DLFFBQUF1MkMsUUFBQXB3QixLQUFBZ00sSUFBQWtWLE1BQ0E1MEIsS0FBQTFNLEtBQUFzaEMsS0FFQUEsS0FBQUEsSUFBQTluQyxRQUFBLFdBQUE0bEMsT0FBQWtDLE1BR0E3Z0MsSUFBQTZnQyxPQVRBLENBWUFqZ0MsV0FFQTZ4QyxTQUFBRCxRQUNBTSxRQUdBLzJDLE1BSUFrM0MsT0FBQSxXQVlBLE9BWEFyVSxPQUFBcCtCLEtBQUFJLFVBQUEsU0FBQXNqQyxFQUFBckQsS0FFQSxJQURBLElBQUF4dUIsT0FDQSxHQUFBQSxNQUFBdXNCLE9BQUE0QixRQUFBSyxJQUFBNTBCLEtBQUFvRyxTQUNBcEcsS0FBQXVDLE9BQUE2RCxNQUFBLEdBR0FBLE9BQUF3Z0MsYUFDQUEsZ0JBSUE5MkMsTUFLQTR2QixJQUFBLFNBQUFodkIsSUFDQSxPQUFBQSxJQUNBLEVBQUFpaUMsT0FBQTRCLFFBQUE3akMsR0FBQXNQLE1BQ0EsRUFBQUEsS0FBQWxULFFBSUF3SCxNQUFBLFdBSUEsT0FIQTBMLE9BQ0FBLEtBQUEsSUFFQWxRLE1BTUFtM0MsUUFBQSxXQUdBLE9BRkFQLE9BQUFDLE1BQUEsR0FDQTNtQyxLQUFBd21DLE9BQUEsR0FDQTEyQyxNQUVBNG9DLFNBQUEsV0FDQSxPQUFBMTRCLE1BTUFrbkMsS0FBQSxXQUtBLE9BSkFSLE9BQUFDLE1BQUEsR0FDQUgsUUFBQUQsU0FDQXZtQyxLQUFBd21DLE9BQUEsSUFFQTEyQyxNQUVBNDJDLE9BQUEsV0FDQSxRQUFBQSxRQUlBUyxTQUFBLFNBQUFqeEMsUUFBQW1CLE1BU0EsT0FSQXF2QyxTQUVBcnZDLEtBQUEsQ0FBQW5CLFNBREFtQixLQUFBQSxNQUFBLElBQ0FaLE1BQUFZLEtBQUFaLFFBQUFZLE1BQ0FzdkMsTUFBQXJ6QyxLQUFBK0QsTUFDQWt2QyxRQUNBTSxRQUdBLzJDLE1BSUErMkMsS0FBQSxXQUVBLE9BREFuekIsS0FBQXl6QixTQUFBcjNDLEtBQUE2RSxXQUNBN0UsTUFJQTIyQyxNQUFBLFdBQ0EsUUFBQUEsUUFJQSxPQUFBL3lCLE1BNENBaWYsT0FBQS9qQyxPQUFBLENBRUF3NEMsU0FBQSxTQUFBQyxNQUNBLElBQUFDLE9BQUEsQ0FJQSxDQUFBLFNBQUEsV0FBQTNVLE9BQUF5VCxVQUFBLFVBQ0F6VCxPQUFBeVQsVUFBQSxVQUFBLEdBQ0EsQ0FBQSxVQUFBLE9BQUF6VCxPQUFBeVQsVUFBQSxlQUNBelQsT0FBQXlULFVBQUEsZUFBQSxFQUFBLFlBQ0EsQ0FBQSxTQUFBLE9BQUF6VCxPQUFBeVQsVUFBQSxlQUNBelQsT0FBQXlULFVBQUEsZUFBQSxFQUFBLGFBRUEveEIsTUFBQSxVQUNBNHhCLFFBQUEsQ0FDQTV4QixNQUFBLFdBQ0EsT0FBQUEsT0FFQWt6QixPQUFBLFdBRUEsT0FEQUMsU0FBQXB5QixLQUFBemdCLFdBQUF1eEMsS0FBQXZ4QyxXQUNBN0UsTUFFQTIzQyxNQUFBLFNBQUEvMkMsSUFDQSxPQUFBdTFDLFFBQUFFLEtBQUEsS0FBQXoxQyxLQUlBZzNDLEtBQUEsV0FDQSxJQUFBQyxJQUFBaHpDLFVBRUEsT0FBQWcrQixPQUFBeVUsU0FBQSxTQUFBUSxVQUNBalYsT0FBQXArQixLQUFBK3lDLE9BQUEsU0FBQW43QyxFQUFBMDdDLE9BR0EsSUFBQW4zQyxHQUFBaXJCLFdBQUFnc0IsSUFBQUUsTUFBQSxNQUFBRixJQUFBRSxNQUFBLElBS0FMLFNBQUFLLE1BQUEsSUFBQSxXQUNBLElBQUFDLFNBQUFwM0MsSUFBQUEsR0FBQTRQLE1BQUF4USxLQUFBNkUsV0FDQW16QyxVQUFBbnNCLFdBQUFtc0IsU0FBQTdCLFNBQ0E2QixTQUFBN0IsVUFDQThCLFNBQUFILFNBQUFJLFFBQ0E1eUIsS0FBQXd5QixTQUFBOUIsU0FDQUksS0FBQTBCLFNBQUE3QixRQUVBNkIsU0FBQUMsTUFBQSxHQUFBLFFBQ0EvM0MsS0FDQVksR0FBQSxDQUFBbzNDLFVBQUFuekMsZUFLQWd6QyxJQUFBLE9BQ0ExQixXQUVBRSxLQUFBLFNBQUE4QixZQUFBQyxXQUFBQyxZQUNBLElBQUFDLFNBQUEsRUFDQSxTQUFBdEMsUUFBQTl6QyxNQUFBdzFDLFNBQUFoTixRQUFBNk4sU0FDQSxPQUFBLFdBQ0EsSUFBQUMsS0FBQXg0QyxLQUNBdUgsS0FBQTFDLFVBQ0E0ekMsV0FBQSxXQUNBLElBQUFULFNBQUEzQixLQUtBLEtBQUFuMEMsTUFBQW8yQyxVQUFBLENBUUEsSUFKQU4sU0FBQXROLFFBQUFsNkIsTUFBQWdvQyxLQUFBanhDLFNBSUFtd0MsU0FBQXZCLFVBQ0EsTUFBQSxJQUFBbGtCLFVBQUEsNEJBT0Fva0IsS0FBQTJCLFdBS0EsaUJBQUFBLFVBQ0EsbUJBQUFBLFdBQ0FBLFNBQUEzQixLQUdBeHFCLFdBQUF3cUIsTUFHQWtDLFFBQ0FsQyxLQUFBdDVDLEtBQ0FpN0MsU0FDQWhDLFFBQUFzQyxTQUFBWixTQUFBL0IsU0FBQTRDLFNBQ0F2QyxRQUFBc0MsU0FBQVosU0FBQTdCLFFBQUEwQyxXQU9BRCxXQUVBakMsS0FBQXQ1QyxLQUNBaTdDLFNBQ0FoQyxRQUFBc0MsU0FBQVosU0FBQS9CLFNBQUE0QyxTQUNBdkMsUUFBQXNDLFNBQUFaLFNBQUE3QixRQUFBMEMsU0FDQXZDLFFBQUFzQyxTQUFBWixTQUFBL0IsU0FDQStCLFNBQUFnQixlQVNBaE8sVUFBQWlMLFdBQ0E2QyxVQUFBNTFDLEVBQ0EyRSxLQUFBLENBQUF5d0MsWUFLQU8sU0FBQWIsU0FBQWlCLGFBQUFILEtBQUFqeEMsU0FLQXF4QyxRQUFBTCxRQUNBRSxXQUNBLFdBQ0EsSUFDQUEsYUFDQSxNQUFBeDhDLEdBRUE0bUMsT0FBQXlVLFNBQUF1QixlQUNBaFcsT0FBQXlVLFNBQUF1QixjQUFBNThDLEVBQ0EyOEMsUUFBQUUsWUFNQVIsVUFBQXAyQyxNQUFBLElBSUF3b0MsVUFBQW1MLFVBQ0EyQyxVQUFBNTFDLEVBQ0EyRSxLQUFBLENBQUF0TCxJQUdBeTdDLFNBQUFxQixXQUFBUCxLQUFBanhDLFNBU0FyRixNQUNBMDJDLFdBS0EvVixPQUFBeVUsU0FBQTBCLGVBQ0FKLFFBQUFFLFdBQUFqVyxPQUFBeVUsU0FBQTBCLGdCQUVBbHNCLE9BQUFtc0IsV0FBQUwsV0FLQSxPQUFBL1YsT0FBQXlVLFNBQUEsU0FBQVEsVUFHQU4sT0FBQSxHQUFBLEdBQUF2ekMsSUFDQSt4QyxRQUNBLEVBQ0E4QixTQUNBanNCLFdBQUF3c0IsWUFDQUEsV0FDQTFDLFNBQ0FtQyxTQUFBWSxhQUtBbEIsT0FBQSxHQUFBLEdBQUF2ekMsSUFDQSt4QyxRQUNBLEVBQ0E4QixTQUNBanNCLFdBQUFzc0IsYUFDQUEsWUFDQXhDLFdBS0E2QixPQUFBLEdBQUEsR0FBQXZ6QyxJQUNBK3hDLFFBQ0EsRUFDQThCLFNBQ0Fqc0IsV0FBQXVzQixZQUNBQSxXQUNBdkMsWUFHQU0sV0FLQUEsUUFBQSxTQUFBL3dDLEtBQ0EsT0FBQSxNQUFBQSxJQUFBeTlCLE9BQUEvakMsT0FBQXNHLElBQUErd0MsU0FBQUEsVUFHQXVCLFNBQUEsR0FrRUEsT0EvREE3VSxPQUFBcCtCLEtBQUEreUMsT0FBQSxTQUFBbjdDLEVBQUEwN0MsT0FDQSxJQUFBN25DLEtBQUE2bkMsTUFBQSxHQUNBbUIsWUFBQW5CLE1BQUEsR0FLQTVCLFFBQUE0QixNQUFBLElBQUE3bkMsS0FBQWpNLElBR0FpMUMsYUFDQWhwQyxLQUFBak0sSUFDQSxXQUlBc2dCLE1BQUEyMEIsYUFLQTFCLE9BQUEsRUFBQW43QyxHQUFBLEdBQUE4NkMsUUFJQUssT0FBQSxFQUFBbjdDLEdBQUEsR0FBQTg2QyxRQUdBSyxPQUFBLEdBQUEsR0FBQUosS0FHQUksT0FBQSxHQUFBLEdBQUFKLE1BT0FsbkMsS0FBQWpNLElBQUE4ekMsTUFBQSxHQUFBaEIsTUFLQVcsU0FBQUssTUFBQSxJQUFBLFdBRUEsT0FEQUwsU0FBQUssTUFBQSxHQUFBLFFBQUEvM0MsT0FBQTAzQyxjQUFBOTBDLEVBQUE1QyxLQUFBNkUsV0FDQTdFLE1BTUEwM0MsU0FBQUssTUFBQSxHQUFBLFFBQUE3bkMsS0FBQW1uQyxXQUlBbEIsUUFBQUEsUUFBQXVCLFVBR0FILE1BQ0FBLEtBQUF4NkMsS0FBQTI2QyxTQUFBQSxVQUlBQSxVQUlBeUIsS0FBQSxTQUFBQyxhQUNBLElBR0FDLFVBQUF4MEMsVUFBQTdILE9BR0FYLEVBQUFnOUMsVUFHQUMsZ0JBQUFyMEIsTUFBQTVvQixHQUNBazlDLGNBQUE1eUMsTUFBQTVKLEtBQUE4SCxXQUdBMjBDLE9BQUEzVyxPQUFBeVUsV0FHQW1DLFdBQUEsU0FBQXA5QyxHQUNBLE9BQUEsU0FBQW1KLE9BQ0E4ekMsZ0JBQUFqOUMsR0FBQTJELEtBQ0F1NUMsY0FBQWw5QyxHQUFBLEVBQUF3SSxVQUFBN0gsT0FBQTJKLE1BQUE1SixLQUFBOEgsV0FBQVcsUUFDQTZ6QyxXQUNBRyxPQUFBYixZQUFBVyxnQkFBQUMsaUJBTUEsR0FBQUYsV0FBQSxJQUNBdEQsV0FBQXFELFlBQUFJLE9BQUFsMEIsS0FBQW0wQixXQUFBcDlDLElBQUEyNUMsUUFBQXdELE9BQUF2RCxRQUNBb0QsV0FHQSxZQUFBRyxPQUFBajFCLFNBQ0FzSCxXQUFBMHRCLGNBQUFsOUMsSUFBQWs5QyxjQUFBbDlDLEdBQUFnNkMsT0FFQSxPQUFBbUQsT0FBQW5ELE9BS0EsS0FBQWg2QyxLQUNBMDVDLFdBQUF3RCxjQUFBbDlDLEdBQUFvOUMsV0FBQXA5QyxHQUFBbTlDLE9BQUF2RCxRQUdBLE9BQUF1RCxPQUFBckQsYUFPQSxJQUFBdUQsWUFBQSx5REFFQTdXLE9BQUF5VSxTQUFBdUIsY0FBQSxTQUFBN2dDLE1BQUFoRSxPQUlBOFksT0FBQU4sU0FBQU0sT0FBQU4sUUFBQW10QixNQUFBM2hDLE9BQUEwaEMsWUFBQTUzQyxLQUFBa1csTUFBQXJYLE9BQ0Ftc0IsT0FBQU4sUUFBQW10QixLQUFBLDhCQUFBM2hDLE1BQUF1UyxRQUFBdlMsTUFBQWhFLE1BQUFBLFFBT0E2dUIsT0FBQStXLGVBQUEsU0FBQTVoQyxPQUNBOFUsT0FBQW1zQixXQUFBLFdBQ0EsTUFBQWpoQyxTQVFBLElBQUE2aEMsVUFBQWhYLE9BQUF5VSxXQWtEQSxTQUFBd0MsWUFDQXpZLFNBQUEwWSxvQkFBQSxtQkFBQUQsV0FDQWh0QixPQUFBaXRCLG9CQUFBLE9BQUFELFdBQ0FqWCxPQUFBK1IsUUFuREEvUixPQUFBamlDLEdBQUFnMEMsTUFBQSxTQUFBaDBDLElBWUEsT0FWQWk1QyxVQUNBeEQsS0FBQXoxQyxJQUtBKzJDLE1BQUEsU0FBQTMvQixPQUNBNnFCLE9BQUErVyxlQUFBNWhDLFNBR0FoWSxNQUdBNmlDLE9BQUEvakMsT0FBQSxDQUdBa2xDLFNBQUEsRUFJQWdXLFVBQUEsRUFHQXBGLE1BQUEsU0FBQXFGLFFBR0EsSUFBQUEsT0FBQXBYLE9BQUFtWCxVQUFBblgsT0FBQW1CLFdBS0FuQixPQUFBbUIsU0FBQSxLQUdBaVcsTUFBQSxJQUFBcFgsT0FBQW1YLFdBS0FILFVBQUFsQixZQUFBdFgsU0FBQSxDQUFBd0IsWUFJQUEsT0FBQStSLE1BQUF5QixLQUFBd0QsVUFBQXhELEtBYUEsYUFBQWhWLFNBQUE2WSxZQUNBLFlBQUE3WSxTQUFBNlksYUFBQTdZLFNBQUFtSyxnQkFBQTJPLFNBR0FydEIsT0FBQW1zQixXQUFBcFcsT0FBQStSLFFBS0F2VCxTQUFBdUssaUJBQUEsbUJBQUFrTyxXQUdBaHRCLE9BQUE4ZSxpQkFBQSxPQUFBa08sWUFRQSxJQUFBTSxPQUFBLFNBQUEvVyxNQUFBemlDLEdBQUEwRSxJQUFBRSxNQUFBNjBDLFVBQUFDLFNBQUEveUIsS0FDQSxJQUFBbHJCLEVBQUEsRUFDQWtILElBQUE4L0IsTUFBQXJtQyxPQUNBdTlDLEtBQUEsTUFBQWoxQyxJQUdBLEdBQUEsV0FBQXM5QixPQUFBdDlCLEtBRUEsSUFBQWpKLEtBREFnK0MsV0FBQSxFQUNBLzBDLElBQ0E4MEMsT0FBQS9XLE1BQUF6aUMsR0FBQXZFLEVBQUFpSixJQUFBakosSUFBQSxFQUFBaStDLFNBQUEveUIsVUFJQSxRQUFBM2tCLElBQUE0QyxRQUNBNjBDLFdBQUEsRUFFQXh1QixXQUFBcm1CLFNBQ0EraEIsS0FBQSxHQUdBZ3pCLE9BS0EzNUMsR0FGQTJtQixLQUNBM21CLEdBQUE3RCxLQUFBc21DLE1BQUE3OUIsT0FDQSxPQUlBKzBDLEtBQUEzNUMsR0FDQSxTQUFBMmlDLEtBQUFqK0IsSUFBQUUsT0FDQSxPQUFBKzBDLEtBQUF4OUMsS0FBQThsQyxPQUFBVSxNQUFBLzlCLFVBS0E1RSxJQUNBLEtBQUF2RSxFQUFBa0gsSUFBQWxILElBQ0F1RSxHQUNBeWlDLE1BQUFobkMsR0FBQWlKLElBQUFpaUIsSUFDQS9oQixNQUNBQSxNQUFBekksS0FBQXNtQyxNQUFBaG5DLEdBQUFBLEVBQUF1RSxHQUFBeWlDLE1BQUFobkMsR0FBQWlKLE9BTUEsT0FBQSswQyxVQUNBaFgsTUFJQWtYLEtBQ0EzNUMsR0FBQTdELEtBQUFzbUMsT0FHQTkvQixJQUFBM0MsR0FBQXlpQyxNQUFBLEdBQUEvOUIsS0FBQWcxQyxVQUtBRSxVQUFBLFFBQ0FDLFdBQUEsWUFHQSxTQUFBQyxXQUFBQyxJQUFBQyxRQUNBLE9BQUFBLE9BQUFDLGNBTUEsU0FBQUMsVUFBQXp2QyxRQUNBLE9BQUFBLE9BQUFuRyxRQUFBczFDLFVBQUEsT0FBQXQxQyxRQUFBdTFDLFdBQUFDLFlBRUEsSUFBQUssV0FBQSxTQUFBQyxPQVFBLE9BQUEsSUFBQUEsTUFBQWhaLFVBQUEsSUFBQWdaLE1BQUFoWixZQUFBZ1osTUFBQWhaLFVBTUEsU0FBQWlaLE9BQ0FqN0MsS0FBQStqQyxRQUFBbEIsT0FBQWtCLFFBQUFrWCxLQUFBQyxNQUdBRCxLQUFBQyxJQUFBLEVBRUFELEtBQUE1NkMsVUFBQSxDQUVBOHBDLE1BQUEsU0FBQTZRLE9BR0EsSUFBQXgxQyxNQUFBdzFDLE1BQUFoN0MsS0FBQStqQyxTQTRCQSxPQXpCQXYrQixRQUNBQSxNQUFBLEdBS0F1MUMsV0FBQUMsU0FJQUEsTUFBQWhaLFNBQ0FnWixNQUFBaDdDLEtBQUErakMsU0FBQXYrQixNQU1Bb2xCLE9BQUFDLGVBQUFtd0IsTUFBQWg3QyxLQUFBK2pDLFFBQUEsQ0FDQXYrQixNQUFBQSxNQUNBa3lCLGNBQUEsTUFNQWx5QixPQUVBNnFCLElBQUEsU0FBQTJxQixNQUFBcDFDLEtBQUFKLE9BQ0EsSUFBQTIxQyxLQUNBaFIsTUFBQW5xQyxLQUFBbXFDLE1BQUE2USxPQUlBLEdBQUEsaUJBQUFwMUMsS0FDQXVrQyxNQUFBMlEsVUFBQWwxQyxPQUFBSixXQU1BLElBQUEyMUMsUUFBQXYxQyxLQUNBdWtDLE1BQUEyUSxVQUFBSyxPQUFBdjFDLEtBQUF1MUMsTUFHQSxPQUFBaFIsT0FFQXZaLElBQUEsU0FBQW9xQixNQUFBMTFDLEtBQ0EsWUFBQTFDLElBQUEwQyxJQUNBdEYsS0FBQW1xQyxNQUFBNlEsT0FHQUEsTUFBQWg3QyxLQUFBK2pDLFVBQUFpWCxNQUFBaDdDLEtBQUErakMsU0FBQStXLFVBQUF4MUMsT0FFQTgwQyxPQUFBLFNBQUFZLE1BQUExMUMsSUFBQUUsT0FhQSxZQUFBNUMsSUFBQTBDLEtBQ0FBLEtBQUEsaUJBQUFBLFVBQUExQyxJQUFBNEMsTUFFQXhGLEtBQUE0d0IsSUFBQW9xQixNQUFBMTFDLE1BU0F0RixLQUFBcXdCLElBQUEycUIsTUFBQTExQyxJQUFBRSxZQUlBNUMsSUFBQTRDLE1BQUFBLE1BQUFGLE1BRUE0eEMsT0FBQSxTQUFBOEQsTUFBQTExQyxLQUNBLElBQUFqSixFQUNBOHRDLE1BQUE2USxNQUFBaDdDLEtBQUErakMsU0FFQSxRQUFBbmhDLElBQUF1bkMsTUFBQSxDQUlBLFFBQUF2bkMsSUFBQTBDLElBQUEsQ0FrQkFqSixHQVhBaUosSUFKQTJmLE1BQUE1aEIsUUFBQWlDLEtBSUFBLElBQUE2TCxJQUFBMnBDLFlBRUF4MUMsSUFBQXcxQyxVQUFBeDFDLFFBSUE2a0MsTUFDQSxDQUFBN2tDLEtBQ0FBLElBQUEwZixNQUFBMHdCLGdCQUFBLElBR0ExNEMsT0FFQSxLQUFBWCxZQUNBOHRDLE1BQUE3a0MsSUFBQWpKLFVBS0F1RyxJQUFBMEMsS0FBQXU5QixPQUFBdUIsY0FBQStGLFVBTUE2USxNQUFBaFosU0FDQWdaLE1BQUFoN0MsS0FBQStqQyxjQUFBbmhDLFNBRUFvNEMsTUFBQWg3QyxLQUFBK2pDLFlBSUFxWCxRQUFBLFNBQUFKLE9BQ0EsSUFBQTdRLE1BQUE2USxNQUFBaDdDLEtBQUErakMsU0FDQSxZQUFBbmhDLElBQUF1bkMsUUFBQXRILE9BQUF1QixjQUFBK0YsU0FHQSxJQUFBa1IsU0FBQSxJQUFBSixLQUVBSyxTQUFBLElBQUFMLEtBY0FNLE9BQUEsZ0NBQ0FDLFdBQUEsU0EyQkEsU0FBQUMsU0FBQWxZLEtBQUFqK0IsSUFBQU0sTUFDQSxJQUFBakYsS0FJQSxRQUFBaUMsSUFBQWdELE1BQUEsSUFBQTI5QixLQUFBdkIsU0FJQSxHQUhBcmhDLEtBQUEsUUFBQTJFLElBQUFKLFFBQUFzMkMsV0FBQSxPQUFBbHZCLGNBR0EsaUJBRkExbUIsS0FBQTI5QixLQUFBcUcsYUFBQWpwQyxPQUVBLENBQ0EsSUFDQWlGLEtBcENBLFNBQUFBLE1BQ0EsTUFBQSxTQUFBQSxNQUlBLFVBQUFBLE9BSUEsU0FBQUEsS0FDQSxLQUlBQSxRQUFBQSxLQUFBLElBQ0FBLEtBR0EyMUMsT0FBQXo1QyxLQUFBOEQsTUFDQWdKLEtBQUF4USxNQUFBd0gsTUFHQUEsTUFjQTgxQyxDQUFBOTFDLE1BQ0EsTUFBQTNKLElBR0FxL0MsU0FBQWpyQixJQUFBa1QsS0FBQWorQixJQUFBTSxXQUVBQSxVQUFBaEQsRUFHQSxPQUFBZ0QsS0FHQWk5QixPQUFBL2pDLE9BQUEsQ0FDQXM4QyxRQUFBLFNBQUE3WCxNQUNBLE9BQUErWCxTQUFBRixRQUFBN1gsT0FBQThYLFNBQUFELFFBQUE3WCxPQUdBMzlCLEtBQUEsU0FBQTI5QixLQUFBNWlDLEtBQUFpRixNQUNBLE9BQUEwMUMsU0FBQWxCLE9BQUE3VyxLQUFBNWlDLEtBQUFpRixPQUdBKzFDLFdBQUEsU0FBQXBZLEtBQUE1aUMsTUFDQTI2QyxTQUFBcEUsT0FBQTNULEtBQUE1aUMsT0FLQWk3QyxNQUFBLFNBQUFyWSxLQUFBNWlDLEtBQUFpRixNQUNBLE9BQUF5MUMsU0FBQWpCLE9BQUE3VyxLQUFBNWlDLEtBQUFpRixPQUdBaTJDLFlBQUEsU0FBQXRZLEtBQUE1aUMsTUFDQTA2QyxTQUFBbkUsT0FBQTNULEtBQUE1aUMsU0FJQWtpQyxPQUFBamlDLEdBQUE5QixPQUFBLENBQ0E4RyxLQUFBLFNBQUFOLElBQUFFLE9BQ0EsSUFBQW5KLEVBQUFzRSxLQUFBaUYsS0FDQTI5QixLQUFBdmpDLEtBQUEsR0FDQXlxQyxNQUFBbEgsTUFBQUEsS0FBQXFELFdBR0EsUUFBQWhrQyxJQUFBMEMsSUEwQkEsTUFBQSxpQkFBQUEsSUFDQXRGLEtBQUF5RSxLQUFBLFdBQ0E2MkMsU0FBQWpyQixJQUFBcndCLEtBQUFzRixPQUlBODBDLE9BQUFwNkMsS0FBQSxTQUFBd0YsT0FDQSxJQUFBSSxLQU9BLEdBQUEyOUIsV0FBQTNnQyxJQUFBNEMsTUFLQSxZQUFBNUMsS0FEQWdELEtBQUEwMUMsU0FBQTFxQixJQUFBMlMsS0FBQWorQixNQUVBTSxVQU1BaEQsS0FEQWdELEtBQUE2MUMsU0FBQWxZLEtBQUFqK0IsTUFFQU0sVUFJQSxFQUlBNUYsS0FBQXlFLEtBQUEsV0FHQTYyQyxTQUFBanJCLElBQUFyd0IsS0FBQXNGLElBQUFFLFVBRUEsS0FBQUEsTUFBQSxFQUFBWCxVQUFBN0gsT0FBQSxNQUFBLEdBakVBLEdBQUFnRCxLQUFBaEQsU0FDQTRJLEtBQUEwMUMsU0FBQTFxQixJQUFBMlMsTUFFQSxJQUFBQSxLQUFBdkIsV0FBQXFaLFNBQUF6cUIsSUFBQTJTLEtBQUEsaUJBQUEsQ0FFQSxJQURBbG5DLEVBQUFvdUMsTUFBQXp0QyxPQUNBWCxLQUlBb3VDLE1BQUFwdUMsSUFFQSxLQURBc0UsS0FBQThwQyxNQUFBcHVDLEdBQUFzRSxNQUNBNkwsUUFBQSxXQUNBN0wsS0FBQW02QyxVQUFBbjZDLEtBQUFnRyxNQUFBLElBQ0E4MEMsU0FBQWxZLEtBQUE1aUMsS0FBQWlGLEtBQUFqRixRQUlBMDZDLFNBQUFockIsSUFBQWtULEtBQUEsZ0JBQUEsR0FJQSxPQUFBMzlCLE1BK0NBKzFDLFdBQUEsU0FBQXIyQyxLQUNBLE9BQUF0RixLQUFBeUUsS0FBQSxXQUNBNjJDLFNBQUFwRSxPQUFBbDNDLEtBQUFzRixVQU1BdTlCLE9BQUEvakMsT0FBQSxDQUNBKzNDLE1BQUEsU0FBQXRULEtBQUE5aEMsS0FBQW1FLE1BQ0EsSUFBQWl4QyxNQUVBLEdBQUF0VCxLQVlBLE9BWEE5aEMsTUFBQUEsTUFBQSxNQUFBLFFBQ0FvMUMsTUFBQXdFLFNBQUF6cUIsSUFBQTJTLEtBQUE5aEMsTUFHQW1FLFFBQ0FpeEMsT0FBQTV4QixNQUFBNWhCLFFBQUF1QyxNQUNBaXhDLE1BQUF3RSxTQUFBakIsT0FBQTdXLEtBQUE5aEMsS0FBQW9oQyxPQUFBMEIsVUFBQTMrQixPQUVBaXhDLE1BQUFyekMsS0FBQW9DLE9BR0FpeEMsT0FBQSxJQUlBaUYsUUFBQSxTQUFBdlksS0FBQTloQyxNQUNBQSxLQUFBQSxNQUFBLEtBRUEsSUFBQW8xQyxNQUFBaFUsT0FBQWdVLE1BQUF0VCxLQUFBOWhDLE1BQ0FzNkMsWUFBQWxGLE1BQUE3NUMsT0FDQTRELEdBQUFpMkMsTUFBQXB1QyxRQUNBdXpDLE1BQUFuWixPQUFBb1osWUFBQTFZLEtBQUE5aEMsTUFNQSxlQUFBYixLQUNBQSxHQUFBaTJDLE1BQUFwdUMsUUFDQXN6QyxlQUdBbjdDLEtBSUEsT0FBQWEsTUFDQW8xQyxNQUFBdnlDLFFBQUEscUJBSUEwM0MsTUFBQUUsS0FDQXQ3QyxHQUFBN0QsS0FBQXdtQyxLQXBCQSxXQUNBVixPQUFBaVosUUFBQXZZLEtBQUE5aEMsT0FtQkF1NkMsU0FHQUQsYUFBQUMsT0FDQUEsTUFBQXgzQyxNQUFBdXlDLFFBS0FrRixZQUFBLFNBQUExWSxLQUFBOWhDLE1BQ0EsSUFBQTZELElBQUE3RCxLQUFBLGFBQ0EsT0FBQTQ1QyxTQUFBenFCLElBQUEyUyxLQUFBaitCLE1BQUErMUMsU0FBQWpCLE9BQUE3VyxLQUFBaitCLElBQUEsQ0FDQWQsTUFBQXErQixPQUFBeVQsVUFBQSxlQUFBcnlDLElBQUEsV0FDQW8zQyxTQUFBbkUsT0FBQTNULEtBQUEsQ0FBQTloQyxLQUFBLFFBQUE2RCxhQU1BdTlCLE9BQUFqaUMsR0FBQTlCLE9BQUEsQ0FDQSszQyxNQUFBLFNBQUFwMUMsS0FBQW1FLE1BQ0EsSUFBQXUyQyxPQUFBLEVBUUEsTUFOQSxpQkFBQTE2QyxPQUNBbUUsS0FBQW5FLEtBQ0FBLEtBQUEsS0FDQTA2QyxVQUdBdDNDLFVBQUE3SCxPQUFBbS9DLE9BQ0F0WixPQUFBZ1UsTUFBQTcyQyxLQUFBLEdBQUF5QixXQUdBbUIsSUFBQWdELEtBQ0E1RixLQUNBQSxLQUFBeUUsS0FBQSxXQUNBLElBQUFveUMsTUFBQWhVLE9BQUFnVSxNQUFBNzJDLEtBQUF5QixLQUFBbUUsTUFHQWk5QixPQUFBb1osWUFBQWo4QyxLQUFBeUIsTUFFQSxPQUFBQSxNQUFBLGVBQUFvMUMsTUFBQSxJQUNBaFUsT0FBQWlaLFFBQUE5N0MsS0FBQXlCLFNBSUFxNkMsUUFBQSxTQUFBcjZDLE1BQ0EsT0FBQXpCLEtBQUF5RSxLQUFBLFdBQ0FvK0IsT0FBQWlaLFFBQUE5N0MsS0FBQXlCLFNBR0EyNkMsV0FBQSxTQUFBMzZDLE1BQ0EsT0FBQXpCLEtBQUE2MkMsTUFBQXAxQyxNQUFBLEtBQUEsS0FLQTAwQyxRQUFBLFNBQUExMEMsS0FBQTJELEtBQ0EsSUFBQW9sQixJQUNBNnhCLE1BQUEsRUFDQUMsTUFBQXpaLE9BQUF5VSxXQUNBaEssU0FBQXR0QyxLQUNBM0QsRUFBQTJELEtBQUFoRCxPQUNBZzVDLFFBQUEsYUFDQXFHLE9BQ0FDLE1BQUEzRCxZQUFBckwsU0FBQSxDQUFBQSxZQVVBLElBTkEsaUJBQUE3ckMsT0FDQTJELElBQUEzRCxLQUNBQSxVQUFBbUIsR0FFQW5CLEtBQUFBLE1BQUEsS0FFQXBGLE1BQ0FtdUIsSUFBQTZ3QixTQUFBenFCLElBQUEwYyxTQUFBanhDLEdBQUFvRixLQUFBLGdCQUNBK29CLElBQUFobUIsUUFDQTYzQyxRQUNBN3hCLElBQUFobUIsTUFBQVAsSUFBQSt4QyxVQUlBLE9BREFBLFVBQ0FzRyxNQUFBbkcsUUFBQS93QyxRQUdBLElBQUFtM0MsS0FBQSxzQ0FBQTM0QyxPQUVBNDRDLFFBQUEsSUFBQXpWLE9BQUEsaUJBQUF3VixLQUFBLGNBQUEsS0FHQUUsVUFBQSxDQUFBLE1BQUEsUUFBQSxTQUFBLFFBRUFDLG1CQUFBLFNBQUFuWixLQUFBZ0gsSUFPQSxNQUFBLFVBSEFoSCxLQUFBZ0gsSUFBQWhILE1BR0FvWixNQUFBQyxTQUNBLEtBQUFyWixLQUFBb1osTUFBQUMsU0FNQS9aLE9BQUFrRCxTQUFBeEMsS0FBQStGLGNBQUEvRixPQUVBLFNBQUFWLE9BQUFnYSxJQUFBdFosS0FBQSxZQUdBcFAsS0FBQSxTQUFBb1AsS0FBQTlsQyxRQUFBaVosU0FBQW5QLE1BQ0EsSUFBQWpFLElBQUEzQyxLQUNBbThDLElBQUEsR0FHQSxJQUFBbjhDLFFBQUFsRCxRQUNBcS9DLElBQUFuOEMsTUFBQTRpQyxLQUFBb1osTUFBQWg4QyxNQUNBNGlDLEtBQUFvWixNQUFBaDhDLE1BQUFsRCxRQUFBa0QsTUFNQSxJQUFBQSxRQUhBMkMsSUFBQW9ULFNBQUFsRyxNQUFBK3lCLEtBQUFoOEIsTUFBQSxJQUdBOUosUUFDQThsQyxLQUFBb1osTUFBQWg4QyxNQUFBbThDLElBQUFuOEMsTUFHQSxPQUFBMkMsS0FNQSxTQUFBeTVDLFVBQUF4WixLQUFBNFgsS0FBQTZCLFdBQUFDLE9BQ0EsSUFBQUMsU0FBQUMsTUFDQUMsY0FBQSxHQUNBQyxhQUFBSixNQUNBLFdBQ0EsT0FBQUEsTUFBQXBTLE9BRUEsV0FDQSxPQUFBaEksT0FBQWdhLElBQUF0WixLQUFBNFgsS0FBQSxLQUVBbUMsUUFBQUQsZUFDQUUsS0FBQVAsWUFBQUEsV0FBQSxLQUFBbmEsT0FBQTJhLFVBQUFyQyxNQUFBLEdBQUEsTUFHQXNDLGVBQUE1YSxPQUFBMmEsVUFBQXJDLE9BQUEsT0FBQW9DLE9BQUFELFVBQ0FkLFFBQUF6eUIsS0FBQThZLE9BQUFnYSxJQUFBdFosS0FBQTRYLE9BRUEsR0FBQXNDLGVBQUFBLGNBQUEsS0FBQUYsS0FBQSxDQVlBLElBUkFELFNBQUEsRUFHQUMsS0FBQUEsTUFBQUUsY0FBQSxHQUdBQSxlQUFBSCxTQUFBLEVBRUFGLGlCQUlBdmEsT0FBQThaLE1BQUFwWixLQUFBNFgsS0FBQXNDLGNBQUFGLE9BQ0EsRUFBQUosUUFBQSxHQUFBQSxNQUFBRSxlQUFBQyxTQUFBLE1BQUEsSUFDQUYsY0FBQSxHQUVBSyxlQUFBTixNQUlBTSxlQUFBLEVBQ0E1YSxPQUFBOFosTUFBQXBaLEtBQUE0WCxLQUFBc0MsY0FBQUYsTUFHQVAsV0FBQUEsWUFBQSxHQWdCQSxPQWJBQSxhQUNBUyxlQUFBQSxnQkFBQUgsU0FBQSxFQUdBSixTQUFBRixXQUFBLEdBQ0FTLGVBQUFULFdBQUEsR0FBQSxHQUFBQSxXQUFBLElBQ0FBLFdBQUEsR0FDQUMsUUFDQUEsTUFBQU0sS0FBQUEsS0FDQU4sTUFBQXI0QyxNQUFBNjRDLGNBQ0FSLE1BQUF0d0MsSUFBQXV3QyxXQUdBQSxTQUlBLElBQUFRLGtCQUFBLEdBRUEsU0FBQUMsa0JBQUFwYSxNQUNBLElBQUFoUCxLQUNBOE4sSUFBQWtCLEtBQUErRixjQUNBSyxTQUFBcEcsS0FBQW9HLFNBQ0FpVCxRQUFBYyxrQkFBQS9ULFVBRUEsT0FBQWlULFVBSUFyb0IsS0FBQThOLElBQUExNUIsS0FBQTg1QixZQUFBSixJQUFBRSxjQUFBb0gsV0FDQWlULFFBQUEvWixPQUFBZ2EsSUFBQXRvQixLQUFBLFdBRUFBLEtBQUFtTyxXQUFBQyxZQUFBcE8sTUFFQSxTQUFBcW9CLFVBQ0FBLFFBQUEsU0FFQWMsa0JBQUEvVCxVQUFBaVQsU0FLQSxTQUFBZ0IsU0FBQXRRLFNBQUF1USxNQU9BLElBTkEsSUFBQWpCLFFBQUFyWixLQUNBL3VCLE9BQUEsR0FDQThCLE1BQUEsRUFDQXRaLE9BQUFzd0MsU0FBQXR3QyxPQUdBc1osTUFBQXRaLE9BQUFzWixTQUNBaXRCLEtBQUErSixTQUFBaDNCLFFBQ0FxbUMsUUFJQUMsUUFBQXJaLEtBQUFvWixNQUFBQyxRQUNBaUIsTUFLQSxTQUFBakIsVUFDQXBvQyxPQUFBOEIsT0FBQStrQyxTQUFBenFCLElBQUEyUyxLQUFBLFlBQUEsS0FDQS91QixPQUFBOEIsU0FDQWl0QixLQUFBb1osTUFBQUMsUUFBQSxLQUdBLEtBQUFyWixLQUFBb1osTUFBQUMsU0FBQUYsbUJBQUFuWixRQUNBL3VCLE9BQUE4QixPQUFBcW5DLGtCQUFBcGEsUUFHQSxTQUFBcVosVUFDQXBvQyxPQUFBOEIsT0FBQSxPQUdBK2tDLFNBQUFockIsSUFBQWtULEtBQUEsVUFBQXFaLFdBTUEsSUFBQXRtQyxNQUFBLEVBQUFBLE1BQUF0WixPQUFBc1osUUFDQSxNQUFBOUIsT0FBQThCLFNBQ0FnM0IsU0FBQWgzQixPQUFBcW1DLE1BQUFDLFFBQUFwb0MsT0FBQThCLFFBSUEsT0FBQWczQixTQUdBekssT0FBQWppQyxHQUFBOUIsT0FBQSxDQUNBKytDLEtBQUEsV0FDQSxPQUFBRCxTQUFBNTlDLE1BQUEsSUFFQTg5QyxLQUFBLFdBQ0EsT0FBQUYsU0FBQTU5QyxPQUVBKzlDLE9BQUEsU0FBQXg1QixPQUNBLE1BQUEsa0JBQUFBLE1BQ0FBLE1BQUF2a0IsS0FBQTY5QyxPQUFBNzlDLEtBQUE4OUMsT0FHQTk5QyxLQUFBeUUsS0FBQSxXQUNBaTRDLG1CQUFBMThDLE1BQ0E2aUMsT0FBQTdpQyxNQUFBNjlDLE9BRUFoYixPQUFBN2lDLE1BQUE4OUMsWUFLQSxJQUFBRSxlQUFBLHdCQUVBQyxTQUFBLGlDQUVBQyxZQUFBLHFDQUtBQyxRQUFBLENBR0FDLE9BQUEsQ0FBQSxFQUFBLCtCQUFBLGFBS0FDLE1BQUEsQ0FBQSxFQUFBLFVBQUEsWUFDQUMsSUFBQSxDQUFBLEVBQUEsb0JBQUEsdUJBQ0FDLEdBQUEsQ0FBQSxFQUFBLGlCQUFBLG9CQUNBQyxHQUFBLENBQUEsRUFBQSxxQkFBQSx5QkFFQUMsU0FBQSxDQUFBLEVBQUEsR0FBQSxLQVVBLFNBQUFDLE9BQUF0NEMsUUFBQWttQyxLQUlBLElBQUFocEMsSUFZQSxPQVRBQSxTQURBLElBQUE4QyxRQUFBb2pDLHFCQUNBcGpDLFFBQUFvakMscUJBQUE4QyxLQUFBLFVBRUEsSUFBQWxtQyxRQUFBNGpDLGlCQUNBNWpDLFFBQUE0akMsaUJBQUFzQyxLQUFBLEtBR0EsUUFHQTFwQyxJQUFBMHBDLEtBQUFBLEtBQUEzQyxTQUFBdmpDLFFBQUFrbUMsS0FDQXpKLE9BQUF0K0IsTUFBQSxDQUFBNkIsU0FBQTlDLEtBR0FBLElBS0EsU0FBQXE3QyxjQUFBdGIsTUFBQXViLGFBSUEsSUFIQSxJQUFBdmlELEVBQUEsRUFDQXdQLEVBQUF3M0IsTUFBQXJtQyxPQUVBWCxFQUFBd1AsRUFBQXhQLElBQ0FnL0MsU0FBQWhyQixJQUNBZ1QsTUFBQWhuQyxHQUNBLGNBQ0F1aUQsYUFBQXZELFNBQUF6cUIsSUFBQWd1QixZQUFBdmlELEdBQUEsZUF2Q0E4aEQsUUFBQVUsU0FBQVYsUUFBQUMsT0FFQUQsUUFBQVcsTUFBQVgsUUFBQVksTUFBQVosUUFBQWEsU0FBQWIsUUFBQWMsUUFBQWQsUUFBQUUsTUFDQUYsUUFBQWUsR0FBQWYsUUFBQUssR0EwQ0EsSUE4RkFXLElBQ0EzaEQsTUEvRkE0aEQsTUFBQSxZQUVBLFNBQUFDLGNBQUFoYyxNQUFBajlCLFFBQUFrNUMsUUFBQUMsVUFBQUMsU0FPQSxJQU5BLElBQUFqYyxLQUFBL1ksSUFBQThoQixJQUFBN29DLEtBQUFzaUMsU0FBQWphLEVBQ0EyekIsU0FBQXI1QyxRQUFBczVDLHlCQUNBQyxNQUFBLEdBQ0F0akQsRUFBQSxFQUNBd1AsRUFBQXczQixNQUFBcm1DLE9BRUFYLEVBQUF3UCxFQUFBeFAsSUFHQSxJQUZBa25DLEtBQUFGLE1BQUFobkMsS0FFQSxJQUFBa25DLEtBR0EsR0FBQSxXQUFBWCxPQUFBVyxNQUlBVixPQUFBdCtCLE1BQUFvN0MsTUFBQXBjLEtBQUF2QixTQUFBLENBQUF1QixNQUFBQSxXQUdBLEdBQUE2YixNQUFBdDlDLEtBQUF5aEMsTUFJQSxDQVVBLElBVEEvWSxJQUFBQSxLQUFBaTFCLFNBQUFoZCxZQUFBcjhCLFFBQUFtOEIsY0FBQSxRQUdBK0osS0FBQTJSLFNBQUFsMEIsS0FBQXdaLE9BQUEsQ0FBQSxHQUFBLEtBQUEsR0FBQWpYLGNBQ0E3b0IsS0FBQTA2QyxRQUFBN1IsTUFBQTZSLFFBQUFNLFNBQ0FqMEIsSUFBQStoQixVQUFBOW9DLEtBQUEsR0FBQW8vQixPQUFBK2MsY0FBQXJjLE1BQUE5L0IsS0FBQSxHQUdBcW9CLEVBQUFyb0IsS0FBQSxHQUNBcW9CLEtBQ0F0QixJQUFBQSxJQUFBd1UsVUFLQTZELE9BQUF0K0IsTUFBQW83QyxNQUFBbjFCLElBQUFzZSxhQUdBdGUsSUFBQWkxQixTQUFBMVIsWUFHQUQsWUFBQSxRQXpCQTZSLE1BQUFuOEMsS0FBQTRDLFFBQUF5NUMsZUFBQXRjLE9Ba0NBLElBSEFrYyxTQUFBM1IsWUFBQSxHQUVBenhDLEVBQUEsRUFDQWtuQyxLQUFBb2MsTUFBQXRqRCxNQUdBLEdBQUFrakQsWUFBQSxFQUFBMWMsT0FBQTRCLFFBQUFsQixLQUFBZ2MsV0FDQUMsU0FDQUEsUUFBQWg4QyxLQUFBKy9CLFdBZ0JBLEdBWEF3QyxTQUFBbEQsT0FBQWtELFNBQUF4QyxLQUFBK0YsY0FBQS9GLE1BR0EvWSxJQUFBazBCLE9BQUFlLFNBQUFoZCxZQUFBYyxNQUFBLFVBR0F3QyxVQUNBNFksY0FBQW4wQixLQUlBODBCLFFBRUEsSUFEQXh6QixFQUFBLEVBQ0F5WCxLQUFBL1ksSUFBQXNCLE1BQ0FveUIsWUFBQXA4QyxLQUFBeWhDLEtBQUE5aEMsTUFBQSxLQUNBNjlDLFFBQUE5N0MsS0FBQSsvQixNQU1BLE9BQUFrYyxTQU1BTixJQURBOWQsU0FBQXFlLHlCQUNBamQsWUFBQXBCLFNBQUFrQixjQUFBLFNBQ0Eva0MsTUFBQTZqQyxTQUFBa0IsY0FBQSxVQU1Bc0gsYUFBQSxPQUFBLFNBQ0Fyc0MsTUFBQXFzQyxhQUFBLFVBQUEsV0FDQXJzQyxNQUFBcXNDLGFBQUEsT0FBQSxLQUVBc1YsSUFBQTFjLFlBQUFqbEMsT0FJQXVrQyxRQUFBK2QsV0FBQVgsSUFBQVksV0FBQSxHQUFBQSxXQUFBLEdBQUEvZ0IsVUFBQW9SLFFBSUErTyxJQUFBNVMsVUFBQSx5QkFDQXhLLFFBQUFpZSxpQkFBQWIsSUFBQVksV0FBQSxHQUFBL2dCLFVBQUErVSxhQUVBLElBQUF2SSxnQkFBQW5LLFNBQUFtSyxnQkFLQXlVLFVBQUEsT0FDQUMsWUFBQSxpREFDQUMsZUFBQSxzQkFFQSxTQUFBQyxhQUNBLE9BQUEsRUFHQSxTQUFBQyxjQUNBLE9BQUEsRUFLQSxTQUFBQyxvQkFDQSxJQUNBLE9BQUFqZixTQUFBME8sY0FDQSxNQUFBL3NDLE9BR0EsU0FBQXU5QyxHQUFBaGQsS0FBQTl1QixNQUFBcXVCLFNBQUFsOUIsS0FBQWhGLEdBQUE0L0MsS0FDQSxJQUFBQyxPQUFBaC9DLEtBR0EsR0FBQSxpQkFBQWdULE1BQUEsQ0FTQSxJQUFBaFQsT0FOQSxpQkFBQXFoQyxXQUdBbDlCLEtBQUFBLE1BQUFrOUIsU0FDQUEsY0FBQWxnQyxHQUVBNlIsTUFDQThyQyxHQUFBaGQsS0FBQTloQyxLQUFBcWhDLFNBQUFsOUIsS0FBQTZPLE1BQUFoVCxNQUFBKytDLEtBRUEsT0FBQWpkLEtBc0JBLEdBbkJBLE1BQUEzOUIsTUFBQSxNQUFBaEYsSUFHQUEsR0FBQWtpQyxTQUNBbDlCLEtBQUFrOUIsY0FBQWxnQyxHQUNBLE1BQUFoQyxLQUNBLGlCQUFBa2lDLFVBR0FsaUMsR0FBQWdGLEtBQ0FBLFVBQUFoRCxJQUlBaEMsR0FBQWdGLEtBQ0FBLEtBQUFrOUIsU0FDQUEsY0FBQWxnQyxLQUdBLElBQUFoQyxHQUNBQSxHQUFBeS9DLGlCQUNBLElBQUF6L0MsR0FDQSxPQUFBMmlDLEtBZUEsT0FaQSxJQUFBaWQsTUFDQUMsT0FBQTcvQyxJQUNBQSxHQUFBLFNBQUE4L0MsT0FJQSxPQURBN2QsU0FBQThkLElBQUFELE9BQ0FELE9BQUFqd0MsTUFBQXhRLEtBQUE2RSxhQUlBNEMsS0FBQWc1QyxPQUFBaDVDLE9BQUFnNUMsT0FBQWg1QyxLQUFBbzdCLE9BQUFwN0IsU0FFQTg3QixLQUFBOStCLEtBQUEsV0FDQW8rQixPQUFBNmQsTUFBQXo4QyxJQUFBakUsS0FBQXlVLE1BQUE3VCxHQUFBZ0YsS0FBQWs5QixZQVFBRCxPQUFBNmQsTUFBQSxDQUVBN3pCLE9BQUEsR0FFQTVvQixJQUFBLFNBQUFzL0IsS0FBQTl1QixNQUFBaTJCLFFBQUE5a0MsS0FBQWs5QixVQUVBLElBQUE4ZCxZQUFBQyxZQUFBcjJCLElBQ0FzMkIsT0FBQTNrRCxFQUFBNGtELFVBQ0F4SSxRQUFBeUksU0FBQXYvQyxLQUFBdy9DLFdBQUFDLFNBQ0FDLFNBQUE5RixTQUFBenFCLElBQUEyUyxNQUdBLEdBQUE0ZCxTQXVDQSxJQWxDQXpXLFFBQUFBLFVBRUFBLFNBREFrVyxZQUFBbFcsU0FDQUEsUUFDQTVILFNBQUE4ZCxZQUFBOWQsVUFLQUEsVUFDQUQsT0FBQXVKLEtBQUFJLGdCQUFBaEIsZ0JBQUExSSxVQUlBNEgsUUFBQWpqQyxPQUNBaWpDLFFBQUFqakMsS0FBQW83QixPQUFBcDdCLFNBSUFxNUMsT0FBQUssU0FBQUwsVUFDQUEsT0FBQUssU0FBQUwsT0FBQSxLQUVBRCxZQUFBTSxTQUFBQyxVQUNBUCxZQUFBTSxTQUFBQyxPQUFBLFNBQUFubEQsR0FJQSxZQUFBLElBQUE0bUMsUUFBQUEsT0FBQTZkLE1BQUFXLFlBQUFwbEQsRUFBQXdGLEtBQ0FvaEMsT0FBQTZkLE1BQUFZLFNBQUE5d0MsTUFBQSt5QixLQUFBMStCLGdCQUFBakMsSUFNQXpHLEdBREFzWSxPQUFBQSxPQUFBLElBQUF1USxNQUFBMHdCLGdCQUFBLENBQUEsS0FDQTE0QyxPQUNBYixLQUVBc0YsS0FBQXkvQyxVQURBMTJCLElBQUEyMUIsZUFBQXAyQixLQUFBdFYsTUFBQXRZLEtBQUEsSUFDQSxHQUNBOGtELFlBQUF6MkIsSUFBQSxJQUFBLElBQUE5UyxNQUFBLEtBQUF3YyxPQUdBenlCLE9BS0E4MkMsUUFBQTFWLE9BQUE2ZCxNQUFBbkksUUFBQTkyQyxPQUFBLEdBR0FBLE1BQUFxaEMsU0FBQXlWLFFBQUFnSixhQUFBaEosUUFBQWlKLFdBQUEvL0MsS0FHQTgyQyxRQUFBMVYsT0FBQTZkLE1BQUFuSSxRQUFBOTJDLE9BQUEsR0FHQXMvQyxVQUFBbGUsT0FBQS9qQyxPQUFBLENBQ0EyQyxLQUFBQSxLQUNBeS9DLFNBQUFBLFNBQ0F0N0MsS0FBQUEsS0FDQThrQyxRQUFBQSxRQUNBampDLEtBQUFpakMsUUFBQWpqQyxLQUNBcTdCLFNBQUFBLFNBQ0E2RSxhQUFBN0UsVUFBQUQsT0FBQXJzQixLQUFBd08sTUFBQTJpQixhQUFBN2xDLEtBQUFnaEMsVUFDQTJlLFVBQUFSLFdBQUEvOEMsS0FBQSxNQUNBMDhDLGNBR0FJLFNBQUFGLE9BQUFyL0MsVUFDQXUvQyxTQUFBRixPQUFBci9DLE1BQUEsSUFDQWlnRCxjQUFBLEVBR0FuSixRQUFBb0osUUFDQSxJQUFBcEosUUFBQW9KLE1BQUE1a0QsS0FBQXdtQyxLQUFBMzlCLEtBQUFxN0MsV0FBQUosY0FFQXRkLEtBQUFxSSxrQkFDQXJJLEtBQUFxSSxpQkFBQW5xQyxLQUFBby9DLGNBS0F0SSxRQUFBdDBDLE1BQ0FzMEMsUUFBQXQwQyxJQUFBbEgsS0FBQXdtQyxLQUFBd2QsV0FFQUEsVUFBQXJXLFFBQUFqakMsT0FDQXM1QyxVQUFBclcsUUFBQWpqQyxLQUFBaWpDLFFBQUFqakMsT0FLQXE3QixTQUNBa2UsU0FBQXZ1QyxPQUFBdXVDLFNBQUFVLGdCQUFBLEVBQUFYLFdBRUFDLFNBQUF4OUMsS0FBQXU5QyxXQUlBbGUsT0FBQTZkLE1BQUE3ekIsT0FBQXByQixPQUFBLElBTUF5MUMsT0FBQSxTQUFBM1QsS0FBQTl1QixNQUFBaTJCLFFBQUE1SCxTQUFBOGUsYUFFQSxJQUFBOTFCLEVBQUErMUIsVUFBQXIzQixJQUNBczJCLE9BQUEza0QsRUFBQTRrRCxVQUNBeEksUUFBQXlJLFNBQUF2L0MsS0FBQXcvQyxXQUFBQyxTQUNBQyxTQUFBOUYsU0FBQUQsUUFBQTdYLE9BQUE4WCxTQUFBenFCLElBQUEyUyxNQUVBLEdBQUE0ZCxXQUFBTCxPQUFBSyxTQUFBTCxRQUFBLENBT0EsSUFEQTNrRCxHQURBc1ksT0FBQUEsT0FBQSxJQUFBdVEsTUFBQTB3QixnQkFBQSxDQUFBLEtBQ0ExNEMsT0FDQWIsS0FNQSxHQUpBc0YsS0FBQXkvQyxVQURBMTJCLElBQUEyMUIsZUFBQXAyQixLQUFBdFYsTUFBQXRZLEtBQUEsSUFDQSxHQUNBOGtELFlBQUF6MkIsSUFBQSxJQUFBLElBQUE5UyxNQUFBLEtBQUF3YyxPQUdBenlCLEtBQUEsQ0FlQSxJQVJBODJDLFFBQUExVixPQUFBNmQsTUFBQW5JLFFBQUE5MkMsT0FBQSxHQUVBdS9DLFNBQUFGLE9BREFyL0MsTUFBQXFoQyxTQUFBeVYsUUFBQWdKLGFBQUFoSixRQUFBaUosV0FBQS8vQyxPQUNBLEdBQ0Erb0IsSUFBQUEsSUFBQSxJQUNBLElBQUF1YyxPQUFBLFVBQUFrYSxXQUFBLzhDLEtBQUEsaUJBQUEsV0FHQTI5QyxVQUFBLzFCLEVBQUFrMUIsU0FBQWhrRCxPQUNBOHVCLEtBQ0FpMUIsVUFBQUMsU0FBQWwxQixJQUVBODFCLGFBQUFWLFdBQUFILFVBQUFHLFVBQ0F4VyxTQUFBQSxRQUFBampDLE9BQUFzNUMsVUFBQXQ1QyxNQUNBK2lCLE1BQUFBLElBQUExb0IsS0FBQWkvQyxVQUFBVSxZQUNBM2UsVUFBQUEsV0FBQWllLFVBQUFqZSxXQUNBLE9BQUFBLFdBQUFpZSxVQUFBamUsWUFDQWtlLFNBQUF2dUMsT0FBQXFaLEVBQUEsR0FFQWkxQixVQUFBamUsVUFDQWtlLFNBQUFVLGdCQUVBbkosUUFBQXJCLFFBQ0FxQixRQUFBckIsT0FBQW42QyxLQUFBd21DLEtBQUF3ZCxZQU9BYyxZQUFBYixTQUFBaGtELFNBQ0F1N0MsUUFBQXVKLFdBQ0EsSUFBQXZKLFFBQUF1SixTQUFBL2tELEtBQUF3bUMsS0FBQTBkLFdBQUFFLFNBQUFDLFNBRUF2ZSxPQUFBa2YsWUFBQXhlLEtBQUE5aEMsS0FBQTAvQyxTQUFBQyxlQUdBTixPQUFBci9DLFlBMUNBLElBQUFBLFFBQUFxL0MsT0FDQWplLE9BQUE2ZCxNQUFBeEosT0FBQTNULEtBQUE5aEMsS0FBQWdULE1BQUF0WSxHQUFBdXVDLFFBQUE1SCxVQUFBLEdBOENBRCxPQUFBdUIsY0FBQTBjLFNBQ0F6RixTQUFBbkUsT0FBQTNULEtBQUEsbUJBSUErZCxTQUFBLFNBQUFVLGFBR0EsSUFFQTNsRCxFQUFBeXZCLEVBQUF4b0IsSUFBQWlpQixRQUFBdzdCLFVBQUFrQixhQUZBdkIsTUFBQTdkLE9BQUE2ZCxNQUFBd0IsSUFBQUYsYUFHQXo2QyxLQUFBLElBQUEwZCxNQUFBcGdCLFVBQUE3SCxRQUNBZ2tELFVBQUEzRixTQUFBenFCLElBQUE1d0IsS0FBQSxXQUFBLElBQUEwZ0QsTUFBQWovQyxPQUFBLEdBQ0E4MkMsUUFBQTFWLE9BQUE2ZCxNQUFBbkksUUFBQW1JLE1BQUFqL0MsT0FBQSxHQUtBLElBRkE4RixLQUFBLEdBQUFtNUMsTUFFQXJrRCxFQUFBLEVBQUFBLEVBQUF3SSxVQUFBN0gsT0FBQVgsSUFDQWtMLEtBQUFsTCxHQUFBd0ksVUFBQXhJLEdBTUEsR0FIQXFrRCxNQUFBeUIsZUFBQW5pRCxNQUdBdTRDLFFBQUE2SixjQUFBLElBQUE3SixRQUFBNkosWUFBQXJsRCxLQUFBaUQsS0FBQTBnRCxPQUFBLENBU0EsSUFKQXVCLGFBQUFwZixPQUFBNmQsTUFBQU0sU0FBQWprRCxLQUFBaUQsS0FBQTBnRCxNQUFBTSxVQUdBM2tELEVBQUEsR0FDQWtwQixRQUFBMDhCLGFBQUE1bEQsUUFBQXFrRCxNQUFBMkIsd0JBSUEsSUFIQTNCLE1BQUE0QixjQUFBLzhCLFFBQUFnZSxLQUVBelgsRUFBQSxHQUNBaTFCLFVBQUF4N0IsUUFBQXk3QixTQUFBbDFCLFFBQ0E0MEIsTUFBQTZCLGlDQUlBN0IsTUFBQThCLGFBQUE5QixNQUFBOEIsV0FBQTFnRCxLQUFBaS9DLFVBQUFVLGFBRUFmLE1BQUFLLFVBQUFBLFVBQ0FMLE1BQUE5NkMsS0FBQW03QyxVQUFBbjdDLFVBS0FoRCxLQUhBVSxNQUFBdS9CLE9BQUE2ZCxNQUFBbkksUUFBQXdJLFVBQUFHLFdBQUEsSUFBQUUsUUFDQUwsVUFBQXJXLFNBQUFsNkIsTUFBQStVLFFBQUFnZSxLQUFBaDhCLFNBR0EsS0FBQW01QyxNQUFBbjRDLE9BQUFqRixPQUNBbzlDLE1BQUErQixpQkFDQS9CLE1BQUFnQyxvQkFZQSxPQUpBbkssUUFBQW9LLGNBQ0FwSyxRQUFBb0ssYUFBQTVsRCxLQUFBaUQsS0FBQTBnRCxPQUdBQSxNQUFBbjRDLFNBR0F5NEMsU0FBQSxTQUFBTixNQUFBTSxVQUNBLElBQUEza0QsRUFBQTBrRCxVQUFBdFQsSUFBQW1WLGdCQUFBQyxpQkFDQVosYUFBQSxHQUNBUCxjQUFBVixTQUFBVSxjQUNBN1csSUFBQTZWLE1BQUE5YyxPQUdBLEdBQUE4ZCxlQUlBN1csSUFBQTdJLFlBT0EsVUFBQTBlLE1BQUFqL0MsTUFBQSxHQUFBaS9DLE1BQUFsUSxRQUVBLEtBQUEzRixNQUFBN3FDLEtBQUE2cUMsSUFBQUEsSUFBQW5JLFlBQUExaUMsS0FJQSxHQUFBLElBQUE2cUMsSUFBQTdJLFdBQUEsVUFBQTBlLE1BQUFqL0MsT0FBQSxJQUFBb3BDLElBQUFqQyxVQUFBLENBR0EsSUFGQWdhLGdCQUFBLEdBQ0FDLGlCQUFBLEdBQ0F4bUQsRUFBQSxFQUFBQSxFQUFBcWxELGNBQUFybEQsU0FNQXVHLElBQUFpZ0QsaUJBRkFwVixLQUhBc1QsVUFBQUMsU0FBQTNrRCxJQUdBeW1DLFNBQUEsT0FHQStmLGlCQUFBcFYsS0FBQXNULFVBQUFwWixjQUNBLEVBQUE5RSxPQUFBNEssSUFBQXp0QyxNQUFBc1csTUFBQXUwQixLQUNBaEksT0FBQXVKLEtBQUFxQixJQUFBenRDLEtBQUEsS0FBQSxDQUFBNnFDLE1BQUE3dEMsUUFFQTZsRCxpQkFBQXBWLE1BQ0FtVixnQkFBQXAvQyxLQUFBdTlDLFdBR0E2QixnQkFBQTVsRCxRQUNBaWxELGFBQUF6K0MsS0FBQSxDQUFBKy9CLEtBQUFzSCxJQUFBbVcsU0FBQTRCLGtCQVlBLE9BTEEvWCxJQUFBN3FDLEtBQ0EwaEQsY0FBQVYsU0FBQWhrRCxRQUNBaWxELGFBQUF6K0MsS0FBQSxDQUFBKy9CLEtBQUFzSCxJQUFBbVcsU0FBQUEsU0FBQXI2QyxNQUFBKzZDLGlCQUdBTyxjQUdBYSxRQUFBLFNBQUFuaUQsS0FBQW9pRCxNQUNBbjRCLE9BQUFDLGVBQUFnWSxPQUFBbWdCLE1BQUEzaUQsVUFBQU0sS0FBQSxDQUNBbXFCLFlBQUEsRUFDQTRNLGNBQUEsRUFFQTlHLElBQUEvRSxXQUFBazNCLE1BQ0EsV0FDQSxHQUFBL2lELEtBQUFpakQsY0FDQSxPQUFBRixLQUFBL2lELEtBQUFpakQsZ0JBR0EsV0FDQSxHQUFBampELEtBQUFpakQsY0FDQSxPQUFBampELEtBQUFpakQsY0FBQXRpRCxPQUlBMHZCLElBQUEsU0FBQTdxQixPQUNBb2xCLE9BQUFDLGVBQUE3cUIsS0FBQVcsS0FBQSxDQUNBbXFCLFlBQUEsRUFDQTRNLGNBQUEsRUFDQXdyQixVQUFBLEVBQ0ExOUMsTUFBQUEsWUFNQTA4QyxJQUFBLFNBQUFlLGVBQ0EsT0FBQUEsY0FBQXBnQixPQUFBa0IsU0FDQWtmLGNBQ0EsSUFBQXBnQixPQUFBbWdCLE1BQUFDLGdCQUdBMUssUUFBQSxDQUNBNEssS0FBQSxDQUdBQyxVQUFBLEdBRUF0VCxNQUFBLENBR0F1VCxRQUFBLFdBQ0EsR0FBQXJqRCxPQUFBc2dELHFCQUFBdGdELEtBQUE4dkMsTUFFQSxPQURBOXZDLEtBQUE4dkMsU0FDQSxHQUdBeVIsYUFBQSxXQUVBK0IsS0FBQSxDQUNBRCxRQUFBLFdBQ0EsR0FBQXJqRCxPQUFBc2dELHFCQUFBdGdELEtBQUFzakQsS0FFQSxPQURBdGpELEtBQUFzakQsUUFDQSxHQUdBL0IsYUFBQSxZQUVBZ0MsTUFBQSxDQUdBRixRQUFBLFdBQ0EsR0FBQSxhQUFBcmpELEtBQUF5QixNQUFBekIsS0FBQXVqRCxPQUFBNVosU0FBQTNwQyxLQUFBLFNBRUEsT0FEQUEsS0FBQXVqRCxTQUNBLEdBS0E5RSxTQUFBLFNBQUFpQyxPQUNBLE9BQUEvVyxTQUFBK1csTUFBQTljLE9BQUEsT0FJQTRmLGFBQUEsQ0FDQWIsYUFBQSxTQUFBakMsWUFJQTk5QyxJQUFBODlDLE1BQUFuNEMsUUFBQW00QyxNQUFBdUMsZ0JBQ0F2QyxNQUFBdUMsY0FBQVEsWUFBQS9DLE1BQUFuNEMsWUFPQXM2QixPQUFBa2YsWUFBQSxTQUFBeGUsS0FBQTloQyxLQUFBMi9DLFFBR0E3ZCxLQUFBd1cscUJBQ0F4VyxLQUFBd1csb0JBQUF0NEMsS0FBQTIvQyxTQUlBdmUsT0FBQW1nQixNQUFBLFNBQUFoL0MsSUFBQW9tQixPQUdBLEtBQUFwcUIsZ0JBQUE2aUMsT0FBQW1nQixPQUNBLE9BQUEsSUFBQW5nQixPQUFBbWdCLE1BQUFoL0MsSUFBQW9tQixPQUlBcG1CLEtBQUFBLElBQUF2QyxNQUNBekIsS0FBQWlqRCxjQUFBai9DLElBQ0FoRSxLQUFBeUIsS0FBQXVDLElBQUF2QyxLQUlBekIsS0FBQTBqRCxtQkFBQTEvQyxJQUFBMi9DLHVCQUNBL2dELElBQUFvQixJQUFBMi9DLG1CQUdBLElBQUEzL0MsSUFBQXkvQyxZQUNBckQsV0FDQUMsWUFLQXJnRCxLQUFBNGpDLE9BQUE1L0IsSUFBQTQvQixRQUFBLElBQUE1L0IsSUFBQTQvQixPQUFBNUIsU0FDQWgrQixJQUFBNC9CLE9BQUFsQixXQUNBMStCLElBQUE0L0IsT0FFQTVqQyxLQUFBc2lELGNBQUF0K0MsSUFBQXMrQyxjQUNBdGlELEtBQUE0akQsY0FBQTUvQyxJQUFBNC9DLGVBSUE1akQsS0FBQXlCLEtBQUF1QyxJQUlBb21CLE9BQ0F5WSxPQUFBL2pDLE9BQUFrQixLQUFBb3FCLE9BSUFwcUIsS0FBQTZqRCxVQUFBNy9DLEtBQUFBLElBQUE2L0MsV0FBQTdkLEtBQUE4ZCxNQUdBOWpELEtBQUE2aUMsT0FBQWtCLFVBQUEsR0FLQWxCLE9BQUFtZ0IsTUFBQTNpRCxVQUFBLENBQ0FDLFlBQUF1aUMsT0FBQW1nQixNQUNBVSxtQkFBQXJELFlBQ0FnQyxxQkFBQWhDLFlBQ0FrQyw4QkFBQWxDLFlBQ0EwRCxhQUFBLEVBRUF0QixlQUFBLFdBQ0EsSUFBQXhtRCxFQUFBK0QsS0FBQWlqRCxjQUVBampELEtBQUEwakQsbUJBQUF0RCxXQUVBbmtELElBQUErRCxLQUFBK2pELGFBQ0E5bkQsRUFBQXdtRCxrQkFHQUMsZ0JBQUEsV0FDQSxJQUFBem1ELEVBQUErRCxLQUFBaWpELGNBRUFqakQsS0FBQXFpRCxxQkFBQWpDLFdBRUFua0QsSUFBQStELEtBQUErakQsYUFDQTluRCxFQUFBeW1ELG1CQUdBc0IseUJBQUEsV0FDQSxJQUFBL25ELEVBQUErRCxLQUFBaWpELGNBRUFqakQsS0FBQXVpRCw4QkFBQW5DLFdBRUFua0QsSUFBQStELEtBQUErakQsYUFDQTluRCxFQUFBK25ELDJCQUdBaGtELEtBQUEwaUQsb0JBS0E3ZixPQUFBcCtCLEtBQUEsQ0FDQXcvQyxRQUFBLEVBQ0FDLFNBQUEsRUFDQUMsWUFBQSxFQUNBQyxnQkFBQSxFQUNBQyxTQUFBLEVBQ0FDLFFBQUEsRUFDQUMsWUFBQSxFQUNBQyxTQUFBLEVBQ0FDLE9BQUEsRUFDQUMsT0FBQSxFQUNBQyxVQUFBLEVBQ0FDLE1BQUEsRUFDQUMsTUFBQSxFQUNBM3lCLFVBQUEsRUFDQTVzQixLQUFBLEVBQ0F3L0MsU0FBQSxFQUNBdFUsUUFBQSxFQUNBdVUsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFdBQUEsRUFDQUMsYUFBQSxFQUNBQyxTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsZUFBQSxFQUNBQyxXQUFBLEVBQ0FDLFNBQUEsRUFFQUMsTUFBQSxTQUFBakYsT0FDQSxJQUFBbFEsT0FBQWtRLE1BQUFsUSxPQUdBLE9BQUEsTUFBQWtRLE1BQUFpRixPQUFBMUYsVUFBQW4rQyxLQUFBNCtDLE1BQUFqL0MsTUFDQSxNQUFBaS9DLE1BQUF4dUIsU0FBQXd1QixNQUFBeHVCLFNBQUF3dUIsTUFBQW9FLFNBSUFwRSxNQUFBaUYsWUFBQS9pRCxJQUFBNHRDLFFBQUEwUCxZQUFBcCtDLEtBQUE0K0MsTUFBQWovQyxNQUNBLEVBQUErdUMsT0FDQSxFQUdBLEVBQUFBLE9BQ0EsRUFHQSxFQUFBQSxPQUNBLEVBR0EsRUFHQWtRLE1BQUFpRixRQUVBOWlCLE9BQUE2ZCxNQUFBb0MsU0FVQWpnQixPQUFBcCtCLEtBQUEsQ0FDQW1oRCxXQUFBLFlBQ0FDLFdBQUEsV0FDQUMsYUFBQSxjQUNBQyxhQUFBLGNBQ0EsU0FBQUMsS0FBQTlELEtBQ0FyZixPQUFBNmQsTUFBQW5JLFFBQUF5TixNQUFBLENBQ0F6RSxhQUFBVyxJQUNBVixTQUFBVSxJQUVBZCxPQUFBLFNBQUFWLE9BQ0EsSUFBQXA5QyxJQUVBMmlELFFBQUF2RixNQUFBa0QsY0FDQTdDLFVBQUFMLE1BQUFLLFVBU0EsT0FMQWtGLFVBQUFBLFVBTkFqbUQsTUFNQTZpQyxPQUFBa0QsU0FOQS9sQyxLQU1BaW1ELFlBQ0F2RixNQUFBai9DLEtBQUFzL0MsVUFBQUcsU0FDQTU5QyxJQUFBeTlDLFVBQUFyVyxRQUFBbDZCLE1BQUF4USxLQUFBNkUsV0FDQTY3QyxNQUFBai9DLEtBQUF5Z0QsS0FFQTUrQyxRQUtBdS9CLE9BQUFqaUMsR0FBQTlCLE9BQUEsQ0FFQXloRCxHQUFBLFNBQUE5ckMsTUFBQXF1QixTQUFBbDlCLEtBQUFoRixJQUNBLE9BQUEyL0MsR0FBQXZnRCxLQUFBeVUsTUFBQXF1QixTQUFBbDlCLEtBQUFoRixLQUVBNC9DLElBQUEsU0FBQS9yQyxNQUFBcXVCLFNBQUFsOUIsS0FBQWhGLElBQ0EsT0FBQTIvQyxHQUFBdmdELEtBQUF5VSxNQUFBcXVCLFNBQUFsOUIsS0FBQWhGLEdBQUEsSUFFQSsvQyxJQUFBLFNBQUFsc0MsTUFBQXF1QixTQUFBbGlDLElBQ0EsSUFBQW1nRCxVQUFBdC9DLEtBQ0EsR0FBQWdULE9BQUFBLE1BQUFndUMsZ0JBQUFodUMsTUFBQXNzQyxVQVdBLE9BUkFBLFVBQUF0c0MsTUFBQXNzQyxVQUNBbGUsT0FBQXB1QixNQUFBMHRDLGdCQUFBeEIsSUFDQUksVUFBQVUsVUFDQVYsVUFBQUcsU0FBQSxJQUFBSCxVQUFBVSxVQUNBVixVQUFBRyxTQUNBSCxVQUFBamUsU0FDQWllLFVBQUFyVyxTQUVBMXFDLEtBRUEsR0FBQSxpQkFBQXlVLE1BaUJBLE9BVEEsSUFBQXF1QixVQUFBLG1CQUFBQSxXQUdBbGlDLEdBQUFraUMsU0FDQUEsY0FBQWxnQyxJQUVBLElBQUFoQyxLQUNBQSxHQUFBeS9DLGFBRUFyZ0QsS0FBQXlFLEtBQUEsV0FDQW8rQixPQUFBNmQsTUFBQXhKLE9BQUFsM0MsS0FBQXlVLE1BQUE3VCxHQUFBa2lDLFlBZkEsSUFBQXJoQyxRQUFBZ1QsTUFDQXpVLEtBQUEyZ0QsSUFBQWwvQyxLQUFBcWhDLFNBQUFydUIsTUFBQWhULE9BRUEsT0FBQXpCLFFBa0JBLElBS0FrbUQsVUFBQSw4RkFPQUMsYUFBQSx3QkFHQUMsU0FBQSxvQ0FDQUMsYUFBQSwyQ0FHQSxTQUFBQyxtQkFBQS9pQixLQUFBLzRCLFNBQ0EsT0FBQW0vQixTQUFBcEcsS0FBQSxVQUNBb0csU0FBQSxLQUFBbi9CLFFBQUF3M0IsU0FBQXgzQixRQUFBQSxRQUFBdWpDLFdBQUEsT0FFQWxMLE9BQUFVLE1BQUEvN0IsU0FBQSxTQUFBLElBR0ErN0IsS0FJQSxTQUFBZ2pCLGNBQUFoakIsTUFFQSxPQURBQSxLQUFBOWhDLE1BQUEsT0FBQThoQyxLQUFBcUcsYUFBQSxTQUFBLElBQUFyRyxLQUFBOWhDLEtBQ0E4aEMsS0FFQSxTQUFBaWpCLGNBQUFqakIsTUFPQSxNQU5BLFdBQUFBLEtBQUE5aEMsTUFBQSxJQUFBa0YsTUFBQSxFQUFBLEdBQ0E0OEIsS0FBQTloQyxLQUFBOGhDLEtBQUE5aEMsS0FBQWtGLE1BQUEsR0FFQTQ4QixLQUFBMkcsZ0JBQUEsUUFHQTNHLEtBR0EsU0FBQWtqQixlQUFBemlELElBQUEwaUQsTUFDQSxJQUFBcnFELEVBQUF3UCxFQUFBcEssS0FBQWtsRCxTQUFBQyxTQUFBQyxTQUFBQyxTQUFBaEcsT0FFQSxHQUFBLElBQUE0RixLQUFBMWtCLFNBQUEsQ0FLQSxHQUFBcVosU0FBQUQsUUFBQXAzQyxPQUNBMmlELFNBQUF0TCxTQUFBakIsT0FBQXAyQyxLQUNBNGlELFNBQUF2TCxTQUFBaHJCLElBQUFxMkIsS0FBQUMsVUFDQTdGLE9BQUE2RixTQUFBN0YsUUFNQSxJQUFBci9DLGVBSEFtbEQsU0FBQXhGLE9BQ0F3RixTQUFBOUYsT0FBQSxHQUVBQSxPQUNBLElBQUF6a0QsRUFBQSxFQUFBd1AsRUFBQWkxQyxPQUFBci9DLE1BQUF6RSxPQUFBWCxFQUFBd1AsRUFBQXhQLElBQ0F3bUMsT0FBQTZkLE1BQUF6OEMsSUFBQXlpRCxLQUFBamxELEtBQUFxL0MsT0FBQXIvQyxNQUFBcEYsSUFPQWkvQyxTQUFBRixRQUFBcDNDLE9BQ0E2aUQsU0FBQXZMLFNBQUFsQixPQUFBcDJDLEtBQ0E4aUQsU0FBQWprQixPQUFBL2pDLE9BQUEsR0FBQStuRCxVQUVBdkwsU0FBQWpyQixJQUFBcTJCLEtBQUFJLFlBa0JBLFNBQUFDLFNBQUFDLFdBQUF6L0MsS0FBQW1QLFNBQUE4b0MsU0FHQWo0QyxLQUFBaUssT0FBQWhCLE1BQUEsR0FBQWpKLE1BRUEsSUFBQWs0QyxTQUFBN3pCLE1BQUEwekIsUUFBQTJILFdBQUF6bEQsS0FBQTZnQyxJQUNBaG1DLEVBQUEsRUFDQXdQLEVBQUFtN0MsV0FBQWhxRCxPQUNBa3FELFNBQUFyN0MsRUFBQSxFQUNBckcsTUFBQStCLEtBQUEsR0FDQTQvQyxnQkFBQXQ3QixXQUFBcm1CLE9BR0EsR0FBQTJoRCxpQkFDQSxFQUFBdDdDLEdBQUEsaUJBQUFyRyxRQUNBdThCLFFBQUErZCxZQUFBc0csU0FBQXRrRCxLQUFBMEQsT0FDQSxPQUFBd2hELFdBQUF2aUQsS0FBQSxTQUFBNlIsT0FDQSxJQUFBc04sS0FBQW9qQyxXQUFBeGpCLEdBQUFsdEIsT0FDQTZ3QyxrQkFDQTUvQyxLQUFBLEdBQUEvQixNQUFBekksS0FBQWlELEtBQUFzVyxNQUFBc04sS0FBQXdqQyxTQUVBTCxTQUFBbmpDLEtBQUFyYyxLQUFBbVAsU0FBQThvQyxXQUlBLEdBQUEzekMsSUFFQStmLE9BREE2ekIsU0FBQUosY0FBQTkzQyxLQUFBeS9DLFdBQUEsR0FBQTFkLGVBQUEsRUFBQTBkLFdBQUF4SCxVQUNBelIsV0FFQSxJQUFBMFIsU0FBQTNXLFdBQUE5ckMsU0FDQXlpRCxTQUFBN3pCLE9BSUFBLE9BQUE0ekIsU0FBQSxDQU9BLElBTEF5SCxZQURBM0gsUUFBQXpjLE9BQUExeEIsSUFBQXV0QyxPQUFBZSxTQUFBLFVBQUE4RyxnQkFDQXZwRCxPQUtBWCxFQUFBd1AsRUFBQXhQLElBQ0FtRixLQUFBaStDLFNBRUFwakQsSUFBQTZxRCxXQUNBMWxELEtBQUFxaEMsT0FBQWMsTUFBQW5pQyxNQUFBLEdBQUEsR0FHQXlsRCxZQUlBcGtCLE9BQUF0K0IsTUFBQSs2QyxRQUFBWixPQUFBbDlDLEtBQUEsWUFJQWtWLFNBQUEzWixLQUFBaXFELFdBQUEzcUQsR0FBQW1GLEtBQUFuRixHQUdBLEdBQUE0cUQsV0FPQSxJQU5BNWtCLElBQUFpZCxRQUFBQSxRQUFBdGlELE9BQUEsR0FBQXNzQyxjQUdBekcsT0FBQTF4QixJQUFBbXVDLFFBQUFrSCxlQUdBbnFELEVBQUEsRUFBQUEsRUFBQTRxRCxXQUFBNXFELElBQ0FtRixLQUFBODlDLFFBQUFqakQsR0FDQTZoRCxZQUFBcDhDLEtBQUFOLEtBQUFDLE1BQUEsTUFDQTQ1QyxTQUFBakIsT0FBQTU0QyxLQUFBLGVBQ0FxaEMsT0FBQWtELFNBQUExRCxJQUFBN2dDLFFBRUFBLEtBQUF3QyxLQUFBLFlBQUF4QyxLQUFBQyxNQUFBLElBQUE2cUIsY0FHQXVXLE9BQUF3a0IsVUFDQXhrQixPQUFBd2tCLFNBQUE3bEQsS0FBQXdDLEtBR0FvK0IsUUFBQTVnQyxLQUFBc3NDLFlBQUE1b0MsUUFBQW1oRCxhQUFBLElBQUFoa0IsSUFBQTdnQyxPQVFBLE9BQUF3bEQsV0FHQSxTQUFBOVAsT0FBQTNULEtBQUFULFNBQUF3a0IsVUFLQSxJQUpBLElBQUE5bEQsS0FDQW0rQyxNQUFBN2MsU0FBQUQsT0FBQXFKLE9BQUFwSixTQUFBUyxNQUFBQSxLQUNBbG5DLEVBQUEsRUFFQSxPQUFBbUYsS0FBQW0rQyxNQUFBdGpELElBQUFBLElBQ0FpckQsVUFBQSxJQUFBOWxELEtBQUF3Z0MsVUFDQWEsT0FBQTBrQixVQUFBN0ksT0FBQWw5QyxPQUdBQSxLQUFBa2hDLGFBQ0E0a0IsVUFBQXprQixPQUFBa0QsU0FBQXZrQyxLQUFBOG5DLGNBQUE5bkMsT0FDQW05QyxjQUFBRCxPQUFBbDlDLEtBQUEsV0FFQUEsS0FBQWtoQyxXQUFBQyxZQUFBbmhDLE9BSUEsT0FBQStoQyxLQUdBVixPQUFBL2pDLE9BQUEsQ0FDQThnRCxjQUFBLFNBQUF3SCxNQUNBLE9BQUFBLEtBQUFsaUQsUUFBQWdoRCxVQUFBLGNBR0F2aUIsTUFBQSxTQUFBSixLQUFBaWtCLGNBQUFDLG1CQUNBLElBQUFwckQsRUFBQXdQLEVBQUE2N0MsWUFBQUMsYUFsSUEzakQsSUFBQTBpRCxLQUNBL2MsU0FrSUFoRyxNQUFBSixLQUFBd2MsV0FBQSxHQUNBNkgsT0FBQS9rQixPQUFBa0QsU0FBQXhDLEtBQUErRixjQUFBL0YsTUFHQSxLQUFBeEIsUUFBQWllLGdCQUFBLElBQUF6YyxLQUFBdkIsVUFBQSxLQUFBdUIsS0FBQXZCLFVBQ0FhLE9BQUFvUixTQUFBMVEsT0FNQSxJQUhBb2tCLGFBQUFqSixPQUFBL2EsT0FHQXRuQyxFQUFBLEVBQUF3UCxHQUZBNjdDLFlBQUFoSixPQUFBbmIsT0FFQXZtQyxPQUFBWCxFQUFBd1AsRUFBQXhQLElBOUlBMkgsSUErSUEwakQsWUFBQXJyRCxHQS9JQXFxRCxLQStJQWlCLGFBQUF0ckQsUUE5SUFzdEMsRUFHQSxXQUhBQSxTQUFBK2MsS0FBQS9jLFNBQUFyZCxnQkFHQTB4QixlQUFBbDhDLEtBQUFrQyxJQUFBdkMsTUFDQWlsRCxLQUFBdFcsUUFBQXBzQyxJQUFBb3NDLFFBR0EsVUFBQXpHLFVBQUEsYUFBQUEsV0FDQStjLEtBQUEzUyxhQUFBL3ZDLElBQUErdkMsY0EySUEsR0FBQXlULGNBQ0EsR0FBQUMsa0JBSUEsSUFIQUMsWUFBQUEsYUFBQWhKLE9BQUFuYixNQUNBb2tCLGFBQUFBLGNBQUFqSixPQUFBL2EsT0FFQXRuQyxFQUFBLEVBQUF3UCxFQUFBNjdDLFlBQUExcUQsT0FBQVgsRUFBQXdQLEVBQUF4UCxJQUNBb3FELGVBQUFpQixZQUFBcnJELEdBQUFzckQsYUFBQXRyRCxTQUdBb3FELGVBQUFsakIsS0FBQUksT0FXQSxPQUxBLEdBREFna0IsYUFBQWpKLE9BQUEvYSxNQUFBLFdBQ0EzbUMsUUFDQTJoRCxjQUFBZ0osY0FBQUMsUUFBQWxKLE9BQUFuYixLQUFBLFdBSUFJLE9BR0E0akIsVUFBQSxTQUFBbGtCLE9BS0EsSUFKQSxJQUFBejlCLEtBQUEyOUIsS0FBQTloQyxLQUNBODJDLFFBQUExVixPQUFBNmQsTUFBQW5JLFFBQ0FsOEMsRUFBQSxPQUVBdUcsS0FBQTJnQyxLQUFBRixNQUFBaG5DLElBQUFBLElBQ0EsR0FBQTArQyxXQUFBeFgsTUFBQSxDQUNBLEdBQUEzOUIsS0FBQTI5QixLQUFBOFgsU0FBQXRYLFNBQUEsQ0FDQSxHQUFBbitCLEtBQUFrN0MsT0FDQSxJQUFBci9DLFFBQUFtRSxLQUFBazdDLE9BQ0F2SSxRQUFBOTJDLE1BQ0FvaEMsT0FBQTZkLE1BQUF4SixPQUFBM1QsS0FBQTloQyxNQUlBb2hDLE9BQUFrZixZQUFBeGUsS0FBQTloQyxLQUFBbUUsS0FBQXc3QyxRQU9BN2QsS0FBQThYLFNBQUF0WCxjQUFBbmhDLEVBRUEyZ0MsS0FBQStYLFNBQUF2WCxXQUlBUixLQUFBK1gsU0FBQXZYLGNBQUFuaEMsT0FPQWlnQyxPQUFBamlDLEdBQUE5QixPQUFBLENBQ0Erb0QsT0FBQSxTQUFBL2tCLFVBQ0EsT0FBQW9VLE9BQUFsM0MsS0FBQThpQyxVQUFBLElBR0FvVSxPQUFBLFNBQUFwVSxVQUNBLE9BQUFvVSxPQUFBbDNDLEtBQUE4aUMsV0FHQS9kLEtBQUEsU0FBQXZmLE9BQ0EsT0FBQTQwQyxPQUFBcDZDLEtBQUEsU0FBQXdGLE9BQ0EsWUFBQTVDLElBQUE0QyxNQUNBcTlCLE9BQUE5ZCxLQUFBL2tCLE1BQ0FBLEtBQUF3RSxRQUFBQyxLQUFBLFdBQ0EsSUFBQXpFLEtBQUFnaUMsVUFBQSxLQUFBaGlDLEtBQUFnaUMsVUFBQSxJQUFBaGlDLEtBQUFnaUMsV0FDQWhpQyxLQUFBOHRDLFlBQUF0b0MsVUFHQSxLQUFBQSxNQUFBWCxVQUFBN0gsU0FHQWtXLE9BQUEsV0FDQSxPQUFBNnpDLFNBQUEvbUQsS0FBQTZFLFVBQUEsU0FBQTArQixNQUNBLElBQUF2akMsS0FBQWdpQyxVQUFBLEtBQUFoaUMsS0FBQWdpQyxVQUFBLElBQUFoaUMsS0FBQWdpQyxVQUNBc2tCLG1CQUFBdG1ELEtBQUF1akMsTUFDQWQsWUFBQWMsU0FLQXAvQixRQUFBLFdBQ0EsT0FBQTRpRCxTQUFBL21ELEtBQUE2RSxVQUFBLFNBQUEwK0IsTUFDQSxHQUFBLElBQUF2akMsS0FBQWdpQyxVQUFBLEtBQUFoaUMsS0FBQWdpQyxVQUFBLElBQUFoaUMsS0FBQWdpQyxTQUFBLENBQ0EsSUFBQTRCLE9BQUEwaUIsbUJBQUF0bUQsS0FBQXVqQyxNQUNBSyxPQUFBa2tCLGFBQUF2a0IsS0FBQUssT0FBQW1LLGdCQUtBZ2EsT0FBQSxXQUNBLE9BQUFoQixTQUFBL21ELEtBQUE2RSxVQUFBLFNBQUEwK0IsTUFDQXZqQyxLQUFBMGlDLFlBQ0ExaUMsS0FBQTBpQyxXQUFBb2xCLGFBQUF2a0IsS0FBQXZqQyxTQUtBZ29ELE1BQUEsV0FDQSxPQUFBakIsU0FBQS9tRCxLQUFBNkUsVUFBQSxTQUFBMCtCLE1BQ0F2akMsS0FBQTBpQyxZQUNBMWlDLEtBQUEwaUMsV0FBQW9sQixhQUFBdmtCLEtBQUF2akMsS0FBQWdyQyxnQkFLQXhtQyxNQUFBLFdBSUEsSUFIQSxJQUFBKytCLEtBQ0FsbkMsRUFBQSxFQUVBLE9BQUFrbkMsS0FBQXZqQyxLQUFBM0QsSUFBQUEsSUFDQSxJQUFBa25DLEtBQUF2QixXQUdBYSxPQUFBMGtCLFVBQUE3SSxPQUFBbmIsTUFBQSxJQUdBQSxLQUFBdUssWUFBQSxJQUlBLE9BQUE5dEMsTUFHQTJqQyxNQUFBLFNBQUE2akIsY0FBQUMsbUJBSUEsT0FIQUQsY0FBQSxNQUFBQSxlQUFBQSxjQUNBQyxrQkFBQSxNQUFBQSxrQkFBQUQsY0FBQUMsa0JBRUF6bkQsS0FBQW1SLElBQUEsV0FDQSxPQUFBMHhCLE9BQUFjLE1BQUEzakMsS0FBQXduRCxjQUFBQyxzQkFJQUwsS0FBQSxTQUFBNWhELE9BQ0EsT0FBQTQwQyxPQUFBcDZDLEtBQUEsU0FBQXdGLE9BQ0EsSUFBQSs5QixLQUFBdmpDLEtBQUEsSUFBQSxHQUNBM0QsRUFBQSxFQUNBd1AsRUFBQTdMLEtBQUFoRCxPQUVBLFFBQUE0RixJQUFBNEMsT0FBQSxJQUFBKzlCLEtBQUF2QixTQUNBLE9BQUF1QixLQUFBZ0osVUFJQSxHQUFBLGlCQUFBL21DLFFBQUEyZ0QsYUFBQXJrRCxLQUFBMEQsU0FDQTI0QyxTQUFBRixTQUFBbDBCLEtBQUF2a0IsUUFBQSxDQUFBLEdBQUEsS0FBQSxHQUFBOG1CLGVBQUEsQ0FFQTltQixNQUFBcTlCLE9BQUErYyxjQUFBcDZDLE9BRUEsSUFDQSxLQUFBbkosRUFBQXdQLEVBQUF4UCxJQUlBLEtBSEFrbkMsS0FBQXZqQyxLQUFBM0QsSUFBQSxJQUdBMmxDLFdBQ0FhLE9BQUEwa0IsVUFBQTdJLE9BQUFuYixNQUFBLElBQ0FBLEtBQUFnSixVQUFBL21DLE9BSUErOUIsS0FBQSxFQUdBLE1BQUF0bkMsS0FHQXNuQyxNQUNBdmpDLEtBQUF3RSxRQUFBME8sT0FBQTFOLFFBRUEsS0FBQUEsTUFBQVgsVUFBQTdILFNBR0FpckQsWUFBQSxXQUNBLElBQUF6SSxRQUFBLEdBR0EsT0FBQXVILFNBQUEvbUQsS0FBQTZFLFVBQUEsU0FBQTArQixNQUNBLElBQUE3MEIsT0FBQTFPLEtBQUEwaUMsV0FFQUcsT0FBQTRCLFFBQUF6a0MsS0FBQXcvQyxTQUFBLElBQ0EzYyxPQUFBMGtCLFVBQUE3SSxPQUFBMStDLE9BQ0EwTyxRQUNBQSxPQUFBdzVDLGFBQUEza0IsS0FBQXZqQyxRQUtBdy9DLFlBSUEzYyxPQUFBcCtCLEtBQUEsQ0FDQTBqRCxTQUFBLFNBQ0FDLFVBQUEsVUFDQU4sYUFBQSxTQUNBTyxZQUFBLFFBQ0FDLFdBQUEsZUFDQSxTQUFBM25ELEtBQUFvQixVQUNBOGdDLE9BQUFqaUMsR0FBQUQsTUFBQSxTQUFBbWlDLFVBT0EsSUFOQSxJQUFBTyxNQUNBLy9CLElBQUEsR0FDQWlsRCxPQUFBMWxCLE9BQUFDLFVBQ0FuWCxLQUFBNDhCLE9BQUF2ckQsT0FBQSxFQUNBWCxFQUFBLEVBRUFBLEdBQUFzdkIsS0FBQXR2QixJQUNBZ25DLE1BQUFobkMsSUFBQXN2QixLQUFBM3JCLEtBQUFBLEtBQUEyakMsT0FBQSxHQUNBZCxPQUFBMGxCLE9BQUFsc0QsSUFBQTBGLFVBQUFzaEMsT0FJQTcvQixLQUFBZ04sTUFBQWxOLElBQUErL0IsTUFBQXpTLE9BR0EsT0FBQTV3QixLQUFBb2pDLFVBQUE5L0IsUUFHQSxJQUFBa2xELFVBQUEsSUFBQXpoQixPQUFBLEtBQUF3VixLQUFBLGtCQUFBLEtBRUFrTSxVQUFBLFNBQUFsbEIsTUFLQSxJQUFBcWhCLEtBQUFyaEIsS0FBQStGLGNBQUFxQyxZQU1BLE9BSkFpWixNQUFBQSxLQUFBOEQsU0FDQTlELEtBQUE5M0IsUUFHQTgzQixLQUFBK0QsaUJBQUFwbEIsT0FHQXFsQixVQUFBLElBQUE3aEIsT0FBQTBWLFVBQUF2NEMsS0FBQSxLQUFBLEtBK0ZBLFNBQUEya0QsT0FBQXRsQixLQUFBNWlDLEtBQUFtb0QsVUFDQSxJQUFBQyxNQUFBQyxTQUFBQyxTQUFBM2xELElBTUFxNUMsTUFBQXBaLEtBQUFvWixNQXFDQSxPQW5DQW1NLFNBQUFBLFVBQUFMLFVBQUFsbEIsU0FRQSxNQUZBamdDLElBQUF3bEQsU0FBQUksaUJBQUF2b0QsT0FBQW1vRCxTQUFBbm9ELFFBRUFraUMsT0FBQWtELFNBQUF4QyxLQUFBK0YsY0FBQS9GLFFBQ0FqZ0MsSUFBQXUvQixPQUFBOFosTUFBQXBaLEtBQUE1aUMsUUFRQW9oQyxRQUFBb25CLGtCQUFBWCxVQUFBMW1ELEtBQUF3QixNQUFBc2xELFVBQUE5bUQsS0FBQW5CLFFBR0Fvb0QsTUFBQXBNLE1BQUFvTSxNQUNBQyxTQUFBck0sTUFBQXFNLFNBQ0FDLFNBQUF0TSxNQUFBc00sU0FHQXRNLE1BQUFxTSxTQUFBck0sTUFBQXNNLFNBQUF0TSxNQUFBb00sTUFBQXpsRCxJQUNBQSxJQUFBd2xELFNBQUFDLE1BR0FwTSxNQUFBb00sTUFBQUEsTUFDQXBNLE1BQUFxTSxTQUFBQSxTQUNBck0sTUFBQXNNLFNBQUFBLGdCQUlBcm1ELElBQUFVLElBSUFBLElBQUEsR0FDQUEsSUFJQSxTQUFBOGxELGFBQUFDLFlBQUFDLFFBR0EsTUFBQSxDQUNBMTRCLElBQUEsV0FDQSxJQUFBeTRCLGNBU0EsT0FBQXJwRCxLQUFBNHdCLElBQUEwNEIsUUFBQTk0QyxNQUFBeFEsS0FBQTZFLGtCQUxBN0UsS0FBQTR3QixPQXpKQSxXQUlBLFNBQUEyNEIsb0JBR0EsR0FBQXBLLElBQUEsQ0FJQTkwQixVQUFBc3lCLE1BQUE2TSxRQUFBLCtFQUVBckssSUFBQXhDLE1BQUE2TSxRQUNBLDRIQUdBaGUsZ0JBQUEvSSxZQUFBcFksV0FBQW9ZLFlBQUEwYyxLQUVBLElBQUFzSyxTQUFBMzhCLE9BQUE2N0IsaUJBQUF4SixLQUNBdUssaUJBQUEsT0FBQUQsU0FBQTN5QyxJQUdBNnlDLHNCQUFBLEtBQUFDLG1CQUFBSCxTQUFBSSxZQUlBMUssSUFBQXhDLE1BQUFtTixNQUFBLE1BQ0FDLGtCQUFBLEtBQUFILG1CQUFBSCxTQUFBSyxPQUlBRSxxQkFBQSxLQUFBSixtQkFBQUgsU0FBQVYsT0FJQTVKLElBQUF4QyxNQUFBc04sU0FBQSxXQUNBQyxpQkFBQSxLQUFBL0ssSUFBQWdMLGFBQUEsV0FFQTNlLGdCQUFBN0ksWUFBQXRZLFdBSUE4MEIsSUFBQSxNQUdBLFNBQUF5SyxtQkFBQVEsU0FDQSxPQUFBdDNCLEtBQUE4QixNQUFBeTFCLFdBQUFELFVBR0EsSUFBQVYsaUJBQUFNLHFCQUFBRSxpQkFBQUgsa0JBQ0FKLHNCQUNBdC9CLFVBQUFnWCxTQUFBa0IsY0FBQSxPQUNBNGMsSUFBQTlkLFNBQUFrQixjQUFBLE9BR0E0YyxJQUFBeEMsUUFNQXdDLElBQUF4QyxNQUFBMk4sZUFBQSxjQUNBbkwsSUFBQVksV0FBQSxHQUFBcEQsTUFBQTJOLGVBQUEsR0FDQXZvQixRQUFBd29CLGdCQUFBLGdCQUFBcEwsSUFBQXhDLE1BQUEyTixlQUVBem5CLE9BQUEvakMsT0FBQWlqQyxRQUFBLENBQ0F5b0Isa0JBQUEsV0FFQSxPQURBakIsb0JBQ0FTLHNCQUVBYixlQUFBLFdBRUEsT0FEQUksb0JBQ0FRLG1CQUVBVSxjQUFBLFdBRUEsT0FEQWxCLG9CQUNBRyxrQkFFQWdCLG1CQUFBLFdBRUEsT0FEQW5CLG9CQUNBSSx1QkFFQWdCLGNBQUEsV0FFQSxPQURBcEIsb0JBQ0FXLHFCQXJGQSxHQW9LQSxJQUtBVSxhQUFBLDRCQUNBQyxZQUFBLE1BQ0FDLFFBQUEsQ0FBQWIsU0FBQSxXQUFBYyxXQUFBLFNBQUFuTyxRQUFBLFNBQ0FvTyxtQkFBQSxDQUNBQyxjQUFBLElBQ0FDLFdBQUEsT0FHQUMsWUFBQSxDQUFBLFNBQUEsTUFBQSxNQUNBQyxXQUFBL3BCLFNBQUFrQixjQUFBLE9BQUFvYSxNQXdCQSxTQUFBME8sY0FBQTFxRCxNQUNBLElBQUEyQyxJQUFBdS9CLE9BQUF5b0IsU0FBQTNxRCxNQUlBLE9BSEEyQyxNQUNBQSxJQUFBdS9CLE9BQUF5b0IsU0FBQTNxRCxNQXhCQSxTQUFBQSxNQUdBLEdBQUFBLFFBQUF5cUQsV0FDQSxPQUFBenFELEtBT0EsSUFIQSxJQUFBNHFELFFBQUE1cUQsS0FBQSxHQUFBazZDLGNBQUFsNkMsS0FBQWdHLE1BQUEsR0FDQXRLLEVBQUE4dUQsWUFBQW51RCxPQUVBWCxLQUVBLElBREFzRSxLQUFBd3FELFlBQUE5dUQsR0FBQWt2RCxXQUNBSCxXQUNBLE9BQUF6cUQsS0FVQTZxRCxDQUFBN3FELE9BQUFBLE1BRUEyQyxJQUdBLFNBQUFtb0Qsa0JBQUFsb0IsS0FBQS85QixNQUFBa21ELFVBSUEsSUFBQWpsQyxRQUFBKzFCLFFBQUF6eUIsS0FBQXZrQixPQUNBLE9BQUFpaEIsUUFHQXFNLEtBQUE2NEIsSUFBQSxFQUFBbGxDLFFBQUEsSUFBQWlsQyxVQUFBLEtBQUFqbEMsUUFBQSxJQUFBLE1BQ0FqaEIsTUFHQSxTQUFBb21ELG1CQUFBcm9CLEtBQUFzb0IsVUFBQUMsSUFBQUMsWUFBQUMsT0FBQUMsYUFDQSxJQUFBNXZELEVBQUEsVUFBQXd2RCxVQUFBLEVBQUEsRUFDQUssTUFBQSxFQUNBQyxNQUFBLEVBR0EsR0FBQUwsT0FBQUMsWUFBQSxTQUFBLFdBQ0EsT0FBQSxFQUdBLEtBQUExdkQsRUFBQSxFQUFBQSxHQUFBLEVBR0EsV0FBQXl2RCxNQUNBSyxPQUFBdHBCLE9BQUFnYSxJQUFBdFosS0FBQXVvQixJQUFBclAsVUFBQXBnRCxJQUFBLEVBQUEydkQsU0FJQUQsYUFtQkEsWUFBQUQsTUFDQUssT0FBQXRwQixPQUFBZ2EsSUFBQXRaLEtBQUEsVUFBQWtaLFVBQUFwZ0QsSUFBQSxFQUFBMnZELFNBSUEsV0FBQUYsTUFDQUssT0FBQXRwQixPQUFBZ2EsSUFBQXRaLEtBQUEsU0FBQWtaLFVBQUFwZ0QsR0FBQSxTQUFBLEVBQUEydkQsV0F0QkFHLE9BQUF0cEIsT0FBQWdhLElBQUF0WixLQUFBLFVBQUFrWixVQUFBcGdELElBQUEsRUFBQTJ2RCxRQUdBLFlBQUFGLElBQ0FLLE9BQUF0cEIsT0FBQWdhLElBQUF0WixLQUFBLFNBQUFrWixVQUFBcGdELEdBQUEsU0FBQSxFQUFBMnZELFFBSUFFLE9BQUFycEIsT0FBQWdhLElBQUF0WixLQUFBLFNBQUFrWixVQUFBcGdELEdBQUEsU0FBQSxFQUFBMnZELFNBaUNBLE9BYkFELGFBQUEsR0FBQUUsY0FJQUUsT0FBQXI1QixLQUFBNjRCLElBQUEsRUFBQTc0QixLQUFBczVCLEtBQ0E3b0IsS0FBQSxTQUFBc29CLFVBQUEsR0FBQWhSLGNBQUFnUixVQUFBbGxELE1BQUEsSUFDQXNsRCxZQUNBRSxNQUNBRCxNQUNBLE1BSUFDLE1BR0EsU0FBQUUsaUJBQUE5b0IsS0FBQXNvQixVQUFBSyxPQUdBLElBQUFGLE9BQUF2RCxVQUFBbGxCLE1BQ0FuM0IsSUFBQXk4QyxPQUFBdGxCLEtBQUFzb0IsVUFBQUcsUUFDQUQsWUFBQSxlQUFBbHBCLE9BQUFnYSxJQUFBdFosS0FBQSxhQUFBLEVBQUF5b0IsUUFDQU0saUJBQUFQLFlBSUEsR0FBQXZELFVBQUExbUQsS0FBQXNLLEtBQUEsQ0FDQSxJQUFBOC9DLE1BQ0EsT0FBQTkvQyxJQUVBQSxJQUFBLE9BeUJBLE9BcEJBa2dELGlCQUFBQSxtQkFDQXZxQixRQUFBeW9CLHFCQUFBcCtDLE1BQUFtM0IsS0FBQW9aLE1BQUFrUCxhQU1BLFNBQUF6L0MsTUFDQWkrQyxXQUFBaitDLE1BQUEsV0FBQXkyQixPQUFBZ2EsSUFBQXRaLEtBQUEsV0FBQSxFQUFBeW9CLFdBRUE1L0MsSUFBQW0zQixLQUFBLFNBQUFzb0IsVUFBQSxHQUFBaFIsY0FBQWdSLFVBQUFsbEQsTUFBQSxJQUdBMmxELGtCQUFBLElBSUFsZ0QsSUFBQWkrQyxXQUFBaitDLE1BQUEsR0FJQXcvQyxtQkFDQXJvQixLQUNBc29CLFVBQ0FLLFFBQUFILFlBQUEsU0FBQSxXQUNBTyxpQkFDQU4sT0FHQTUvQyxLQUVBLEtBMlJBLFNBQUFtZ0QsTUFBQWhwQixLQUFBOWxDLFFBQUEwOUMsS0FBQXh1QyxJQUFBNi9DLFFBQ0EsT0FBQSxJQUFBRCxNQUFBbHNELFVBQUEwaUMsS0FBQVEsS0FBQTlsQyxRQUFBMDlDLEtBQUF4dUMsSUFBQTYvQyxRQXpSQTNwQixPQUFBL2pDLE9BQUEsQ0FJQTJ0RCxTQUFBLENBQ0FDLFFBQUEsQ0FDQTk3QixJQUFBLFNBQUEyUyxLQUFBdWxCLFVBQ0EsR0FBQUEsU0FBQSxDQUdBLElBQUF4bEQsSUFBQXVsRCxPQUFBdGxCLEtBQUEsV0FDQSxNQUFBLEtBQUFqZ0MsSUFBQSxJQUFBQSxRQU9BazZDLFVBQUEsQ0FDQW1QLHlCQUFBLEVBQ0FDLGFBQUEsRUFDQUMsYUFBQSxFQUNBQyxVQUFBLEVBQ0FDLFlBQUEsRUFDQTdCLFlBQUEsRUFDQThCLFlBQUEsRUFDQU4sU0FBQSxFQUNBTyxPQUFBLEVBQ0FDLFNBQUEsRUFDQUMsUUFBQSxFQUNBQyxRQUFBLEVBQ0FDLE1BQUEsR0FLQS9CLFNBQUEsR0FHQTNPLE1BQUEsU0FBQXBaLEtBQUE1aUMsS0FBQTZFLE1BQUEwbUQsT0FHQSxHQUFBM29CLE1BQUEsSUFBQUEsS0FBQXZCLFVBQUEsSUFBQXVCLEtBQUF2QixVQUFBdUIsS0FBQW9aLE1BQUEsQ0FLQSxJQUFBcjVDLElBQUE3QixLQUFBdTZDLE1BQ0FzUixTQUFBeFMsVUFBQW42QyxNQUNBNHNELGFBQUExQyxZQUFBL29ELEtBQUFuQixNQUNBZzhDLE1BQUFwWixLQUFBb1osTUFhQSxHQVJBNFEsZUFDQTVzRCxLQUFBMHFELGNBQUFpQyxXQUlBdFIsTUFBQW5aLE9BQUE0cEIsU0FBQTlyRCxPQUFBa2lDLE9BQUE0cEIsU0FBQWEsZUFHQTFxRCxJQUFBNEMsTUF3Q0EsT0FBQXcyQyxPQUFBLFFBQUFBLFlBQ0FwNUMsS0FBQVUsSUFBQTA0QyxNQUFBcHJCLElBQUEyUyxNQUFBLEVBQUEyb0IsUUFFQTVvRCxJQUlBcTVDLE1BQUFoOEMsTUEzQ0EsWUFIQWMsWUFBQStELFNBR0FsQyxJQUFBazVDLFFBQUF6eUIsS0FBQXZrQixTQUFBbEMsSUFBQSxLQUNBa0MsTUFBQXUzQyxVQUFBeFosS0FBQTVpQyxLQUFBMkMsS0FHQTdCLEtBQUEsVUFJQSxNQUFBK0QsT0FBQUEsT0FBQUEsUUFLQSxXQUFBL0QsT0FDQStELE9BQUFsQyxLQUFBQSxJQUFBLEtBQUF1L0IsT0FBQTJhLFVBQUE4UCxVQUFBLEdBQUEsT0FJQXZyQixRQUFBd29CLGlCQUFBLEtBQUEva0QsT0FBQSxJQUFBN0UsS0FBQTZMLFFBQUEsZ0JBQ0Ftd0MsTUFBQWg4QyxNQUFBLFdBSUFxN0MsT0FBQSxRQUFBQSxZQUNBcDVDLEtBQUE0QyxNQUFBdzJDLE1BQUEzckIsSUFBQWtULEtBQUEvOUIsTUFBQTBtRCxVQUVBcUIsYUFDQTVRLE1BQUE2USxZQUFBN3NELEtBQUE2RSxPQUVBbTNDLE1BQUFoOEMsTUFBQTZFLFVBa0JBcTNDLElBQUEsU0FBQXRaLEtBQUE1aUMsS0FBQXVyRCxNQUFBRixRQUNBLElBQUE1L0MsSUFBQSsyQixJQUFBNlksTUFDQXNSLFNBQUF4UyxVQUFBbjZDLE1BNkJBLE9BNUJBa3FELFlBQUEvb0QsS0FBQW5CLFFBTUFBLEtBQUEwcUQsY0FBQWlDLFlBSUF0UixNQUFBblosT0FBQTRwQixTQUFBOXJELE9BQUFraUMsT0FBQTRwQixTQUFBYSxZQUdBLFFBQUF0UixRQUNBNXZDLElBQUE0dkMsTUFBQXByQixJQUFBMlMsTUFBQSxFQUFBMm9CLGFBSUF0cEQsSUFBQXdKLE1BQ0FBLElBQUF5OEMsT0FBQXRsQixLQUFBNWlDLEtBQUFxckQsU0FJQSxXQUFBNS9DLEtBQUF6TCxRQUFBcXFELHFCQUNBNStDLElBQUE0K0MsbUJBQUFycUQsT0FJQSxLQUFBdXJELE9BQUFBLE9BQ0Evb0IsSUFBQWtuQixXQUFBaitDLE1BQ0EsSUFBQTgvQyxPQUFBdUIsU0FBQXRxQixLQUFBQSxLQUFBLEVBQUEvMkIsS0FHQUEsT0FJQXkyQixPQUFBcCtCLEtBQUEsQ0FBQSxTQUFBLFNBQUEsU0FBQXBJLEVBQUF3dkQsV0FDQWhwQixPQUFBNHBCLFNBQUFaLFdBQUEsQ0FDQWo3QixJQUFBLFNBQUEyUyxLQUFBdWxCLFNBQUFvRCxPQUNBLEdBQUFwRCxTQUlBLE9BQUE4QixhQUFBOW9ELEtBQUErZ0MsT0FBQWdhLElBQUF0WixLQUFBLGFBUUFBLEtBQUFtcUIsaUJBQUExd0QsUUFBQXVtQyxLQUFBb3FCLHdCQUFBNUUsTUFJQXNELGlCQUFBOW9CLEtBQUFzb0IsVUFBQUssT0FIQS8zQixLQUFBb1AsS0FBQXVuQixRQUFBLFdBQ0EsT0FBQXVCLGlCQUFBOW9CLEtBQUFzb0IsVUFBQUssVUFNQTc3QixJQUFBLFNBQUFrVCxLQUFBLzlCLE1BQUEwbUQsT0FDQSxJQUFBemxDLFFBQ0F1bEMsT0FBQXZELFVBQUFsbEIsTUFDQXdvQixZQUFBLGVBQUFscEIsT0FBQWdhLElBQUF0WixLQUFBLGFBQUEsRUFBQXlvQixRQUNBTixTQUFBUSxPQUFBTixtQkFDQXJvQixLQUNBc29CLFVBQ0FLLE1BQ0FILFlBQ0FDLFFBc0JBLE9BakJBRCxhQUFBaHFCLFFBQUE0b0Isa0JBQUFxQixPQUFBL0IsV0FDQXlCLFVBQUE1NEIsS0FBQXM1QixLQUNBN29CLEtBQUEsU0FBQXNvQixVQUFBLEdBQUFoUixjQUFBZ1IsVUFBQWxsRCxNQUFBLElBQ0EwakQsV0FBQTJCLE9BQUFILFlBQ0FELG1CQUFBcm9CLEtBQUFzb0IsVUFBQSxVQUFBLEVBQUFHLFFBQ0EsS0FLQU4sV0FBQWpsQyxRQUFBKzFCLFFBQUF6eUIsS0FBQXZrQixTQUNBLFFBQUFpaEIsUUFBQSxJQUFBLFFBRUE4YyxLQUFBb1osTUFBQWtQLFdBQUFybUQsTUFDQUEsTUFBQXE5QixPQUFBZ2EsSUFBQXRaLEtBQUFzb0IsWUFHQUosa0JBQUFsb0IsRUFBQS85QixNQUFBa21ELGNBS0E3b0IsT0FBQTRwQixTQUFBNUMsV0FBQVQsYUFBQXJuQixRQUFBMm9CLG1CQUNBLFNBQUFubkIsS0FBQXVsQixVQUNBLEdBQUFBLFNBQ0EsT0FBQXVCLFdBQUF4QixPQUFBdGxCLEtBQUEsZ0JBQ0FBLEtBQUFvcUIsd0JBQUFDLEtBQ0F6NUIsS0FBQW9QLEtBQUEsQ0FBQXNtQixXQUFBLEdBQUEsV0FDQSxPQUFBdG1CLEtBQUFvcUIsd0JBQUFDLFFBRUEsT0FNQS9xQixPQUFBcCtCLEtBQUEsQ0FDQW9wRCxPQUFBLEdBQ0FubUMsUUFBQSxHQUNBb21DLE9BQUEsU0FDQSxTQUFBbjNDLE9BQUFvM0MsUUFDQWxyQixPQUFBNHBCLFNBQUE5MUMsT0FBQW8zQyxRQUFBLENBQ0FDLE9BQUEsU0FBQXhvRCxPQU9BLElBTkEsSUFBQW5KLEVBQUEsRUFDQTR4RCxTQUFBLEdBR0Foc0QsTUFBQSxpQkFBQXVELE1BQUFBLE1BQUFrUyxNQUFBLEtBQUEsQ0FBQWxTLE9BRUFuSixFQUFBLEVBQUFBLElBQ0E0eEQsU0FBQXQzQyxPQUFBOGxDLFVBQUFwZ0QsR0FBQTB4RCxRQUNBOXJELE1BQUE1RixJQUFBNEYsTUFBQTVGLEVBQUEsSUFBQTRGLE1BQUEsR0FHQSxPQUFBZ3NELFdBSUEsV0FBQXQzQyxTQUNBa3NCLE9BQUE0cEIsU0FBQTkxQyxPQUFBbzNDLFFBQUExOUIsSUFBQW83QixxQkFJQTVvQixPQUFBamlDLEdBQUE5QixPQUFBLENBQ0ErOUMsSUFBQSxTQUFBbDhDLEtBQUE2RSxPQUNBLE9BQUE0MEMsT0FBQXA2QyxLQUFBLFNBQUF1akMsS0FBQTVpQyxLQUFBNkUsT0FDQSxJQUFBd21ELE9BQUF6b0QsSUFDQTROLElBQUEsR0FDQTlVLEVBQUEsRUFFQSxHQUFBNG9CLE1BQUE1aEIsUUFBQTFDLE1BQUEsQ0FJQSxJQUhBcXJELE9BQUF2RCxVQUFBbGxCLE1BQ0FoZ0MsSUFBQTVDLEtBQUEzRCxPQUVBWCxFQUFBa0gsSUFBQWxILElBQ0E4VSxJQUFBeFEsS0FBQXRFLElBQUF3bUMsT0FBQWdhLElBQUF0WixLQUFBNWlDLEtBQUF0RSxJQUFBLEVBQUEydkQsUUFHQSxPQUFBNzZDLElBR0EsWUFBQXZPLElBQUE0QyxNQUNBcTlCLE9BQUE4WixNQUFBcFosS0FBQTVpQyxLQUFBNkUsT0FDQXE5QixPQUFBZ2EsSUFBQXRaLEtBQUE1aUMsT0FDQUEsS0FBQTZFLE1BQUEsRUFBQVgsVUFBQTdILGFBUUE2bEMsT0FBQTBwQixNQUFBQSxPQUVBbHNELFVBQUEsQ0FDQUMsWUFBQWlzRCxNQUNBeHBCLEtBQUEsU0FBQVEsS0FBQTlsQyxRQUFBMDlDLEtBQUF4dUMsSUFBQTYvQyxPQUFBalAsTUFDQXY5QyxLQUFBdWpDLEtBQUFBLEtBQ0F2akMsS0FBQW03QyxLQUFBQSxLQUNBbjdDLEtBQUF3c0QsT0FBQUEsUUFBQTNwQixPQUFBMnBCLE9BQUEvTixTQUNBeitDLEtBQUF2QyxRQUFBQSxRQUNBdUMsS0FBQTRFLE1BQUE1RSxLQUFBOGpELElBQUE5akQsS0FBQTZxQyxNQUNBN3FDLEtBQUEyTSxJQUFBQSxJQUNBM00sS0FBQXU5QyxLQUFBQSxPQUFBMWEsT0FBQTJhLFVBQUFyQyxNQUFBLEdBQUEsT0FFQXRRLElBQUEsV0FDQSxJQUFBbVIsTUFBQXVRLE1BQUEyQixVQUFBbHVELEtBQUFtN0MsTUFFQSxPQUFBYSxPQUFBQSxNQUFBcHJCLElBQ0FvckIsTUFBQXByQixJQUFBNXdCLE1BQ0F1c0QsTUFBQTJCLFVBQUF6UCxTQUFBN3RCLElBQUE1d0IsT0FFQW11RCxJQUFBLFNBQUFDLFNBQ0EsSUFBQUMsTUFDQXJTLE1BQUF1USxNQUFBMkIsVUFBQWx1RCxLQUFBbTdDLE1Bb0JBLE9BbEJBbjdDLEtBQUF2QyxRQUFBNndELFNBQ0F0dUQsS0FBQXV1RCxJQUFBRixNQUFBeHJCLE9BQUEycEIsT0FBQXhzRCxLQUFBd3NELFFBQ0E0QixRQUFBcHVELEtBQUF2QyxRQUFBNndELFNBQUFGLFFBQUEsRUFBQSxFQUFBcHVELEtBQUF2QyxRQUFBNndELFVBR0F0dUQsS0FBQXV1RCxJQUFBRixNQUFBRCxRQUVBcHVELEtBQUE4akQsS0FBQTlqRCxLQUFBMk0sSUFBQTNNLEtBQUE0RSxPQUFBeXBELE1BQUFydUQsS0FBQTRFLE1BRUE1RSxLQUFBdkMsUUFBQSt3RCxNQUNBeHVELEtBQUF2QyxRQUFBK3dELEtBQUF6eEQsS0FBQWlELEtBQUF1akMsS0FBQXZqQyxLQUFBOGpELElBQUE5akQsTUFHQWc4QyxPQUFBQSxNQUFBM3JCLElBQ0EyckIsTUFBQTNyQixJQUFBcndCLE1BRUF1c0QsTUFBQTJCLFVBQUF6UCxTQUFBcHVCLElBQUFyd0IsTUFFQUEsUUFJQStpQyxLQUFBMWlDLFVBQUFrc0QsTUFBQWxzRCxXQUVBa3NELE1BQUEyQixVQUFBLENBQ0F6UCxTQUFBLENBQ0E3dEIsSUFBQSxTQUFBcXNCLE9BQ0EsSUFBQTEwQyxPQUlBLE9BQUEsSUFBQTAwQyxNQUFBMVosS0FBQXZCLFVBQ0EsTUFBQWliLE1BQUExWixLQUFBMFosTUFBQTlCLE9BQUEsTUFBQThCLE1BQUExWixLQUFBb1osTUFBQU0sTUFBQTlCLE1BQ0E4QixNQUFBMVosS0FBQTBaLE1BQUE5QixPQU9BNXlDLE9BQUFzNkIsT0FBQWdhLElBQUFJLE1BQUExWixLQUFBMFosTUFBQTlCLEtBQUEsTUFHQSxTQUFBNXlDLE9BQUFBLE9BQUEsR0FFQThuQixJQUFBLFNBQUE0c0IsT0FLQXBhLE9BQUE0ckIsR0FBQUQsS0FBQXZSLE1BQUE5QixNQUNBdFksT0FBQTRyQixHQUFBRCxLQUFBdlIsTUFBQTlCLE1BQUE4QixPQUNBLElBQUFBLE1BQUExWixLQUFBdkIsVUFDQSxNQUFBaWIsTUFBQTFaLEtBQUFvWixNQUFBOVosT0FBQXlvQixTQUFBck8sTUFBQTlCLFNBQ0F0WSxPQUFBNHBCLFNBQUF4UCxNQUFBOUIsTUFHQThCLE1BQUExWixLQUFBMFosTUFBQTlCLE1BQUE4QixNQUFBNkcsSUFGQWpoQixPQUFBOFosTUFBQU0sTUFBQTFaLEtBQUEwWixNQUFBOUIsS0FBQThCLE1BQUE2RyxJQUFBN0csTUFBQU0sVUFVQW1SLFVBQUFuQyxNQUFBMkIsVUFBQVMsV0FBQSxDQUNBdCtCLElBQUEsU0FBQTRzQixPQUNBQSxNQUFBMVosS0FBQXZCLFVBQUFpYixNQUFBMVosS0FBQWIsYUFDQXVhLE1BQUExWixLQUFBMFosTUFBQTlCLE1BQUE4QixNQUFBNkcsT0FLQWpoQixPQUFBMnBCLE9BQUEsQ0FDQW9DLE9BQUEsU0FBQS94RCxHQUNBLE9BQUFBLEdBRUFneUQsTUFBQSxTQUFBaHlELEdBQ0EsTUFBQSxHQUFBaTJCLEtBQUFnOEIsSUFBQWp5RCxFQUFBaTJCLEtBQUFpOEIsSUFBQSxHQUVBdFEsU0FBQSxTQUdBNWIsT0FBQTRyQixHQUFBbEMsTUFBQWxzRCxVQUFBMGlDLEtBR0FGLE9BQUE0ckIsR0FBQUQsS0FBQSxHQUtBLElBQ0FRLE1BQUFDLFdBQ0FDLFNBQUEseUJBQ0FDLEtBQUEsY0FFQSxTQUFBQyxXQUNBSCxjQUNBLElBQUE1dEIsU0FBQWd1QixRQUFBdmlDLE9BQUF3aUMsc0JBQ0F4aUMsT0FBQXdpQyxzQkFBQUYsVUFFQXRpQyxPQUFBbXNCLFdBQUFtVyxTQUFBdnNCLE9BQUE0ckIsR0FBQWMsVUFHQTFzQixPQUFBNHJCLEdBQUFlLFFBS0EsU0FBQUMsY0FJQSxPQUhBM2lDLE9BQUFtc0IsV0FBQSxXQUNBK1YsV0FBQXBzRCxJQUVBb3NELE1BQUFocEIsS0FBQThkLE1BSUEsU0FBQTRMLE1BQUFqdUQsS0FBQWt1RCxjQUNBLElBQUFoSyxNQUNBdHBELEVBQUEsRUFDQW91QyxNQUFBLENBQUFtbEIsT0FBQW51RCxNQUtBLElBREFrdUQsYUFBQUEsYUFBQSxFQUFBLEVBQ0F0ekQsRUFBQSxFQUFBQSxHQUFBLEVBQUFzekQsYUFFQWxsQixNQUFBLFVBREFrYixNQUFBbEosVUFBQXBnRCxLQUNBb3VDLE1BQUEsVUFBQWtiLE9BQUFsa0QsS0FPQSxPQUpBa3VELGVBQ0FsbEIsTUFBQWlpQixRQUFBamlCLE1BQUFzZSxNQUFBdG5ELE1BR0FncEMsTUFHQSxTQUFBb2xCLFlBQUFycUQsTUFBQTIxQyxLQUFBMlUsV0FLQSxJQUpBLElBQUE3UyxNQUNBK0osWUFBQStJLFVBQUFDLFNBQUE3VSxPQUFBLElBQUEzcEMsT0FBQXUrQyxVQUFBQyxTQUFBLE1BQ0ExNUMsTUFBQSxFQUNBdFosT0FBQWdxRCxXQUFBaHFELE9BQ0FzWixNQUFBdFosT0FBQXNaLFFBQ0EsR0FBQTJtQyxNQUFBK0osV0FBQTF3QyxPQUFBdlosS0FBQSt5RCxVQUFBM1UsS0FBQTMxQyxPQUdBLE9BQUF5M0MsTUFzTkEsU0FBQThTLFVBQUF4c0IsS0FBQTBzQixXQUFBeHlELFNBQ0EsSUFBQThLLE9BQ0EybkQsUUFDQTU1QyxNQUFBLEVBQ0F0WixPQUFBK3lELFVBQUFJLFdBQUFuekQsT0FDQTA2QyxTQUFBN1UsT0FBQXlVLFdBQUFHLE9BQUEsa0JBR0ErWCxLQUFBanNCLE9BRUFpc0IsS0FBQSxXQUNBLEdBQUFVLFFBQ0EsT0FBQSxFQVlBLElBVkEsSUFBQUUsWUFBQXBCLE9BQUFTLGNBQ0FwVyxVQUFBdm1CLEtBQUE2NEIsSUFBQSxFQUFBbUUsVUFBQU8sVUFBQVAsVUFBQXhCLFNBQUE4QixhQUtBaEMsUUFBQSxHQURBL1UsVUFBQXlXLFVBQUF4QixVQUFBLEdBRUFoNEMsTUFBQSxFQUNBdFosT0FBQTh5RCxVQUFBUSxPQUFBdHpELE9BRUFzWixNQUFBdFosT0FBQXNaLFFBQ0F3NUMsVUFBQVEsT0FBQWg2QyxPQUFBNjNDLElBQUFDLFNBTUEsT0FIQTFXLFNBQUFnQixXQUFBblYsS0FBQSxDQUFBdXNCLFVBQUExQixRQUFBL1UsWUFHQStVLFFBQUEsR0FBQXB4RCxPQUNBcThDLFdBSUFyOEMsUUFDQTA2QyxTQUFBZ0IsV0FBQW5WLEtBQUEsQ0FBQXVzQixVQUFBLEVBQUEsSUFJQXBZLFNBQUFpQixZQUFBcFYsS0FBQSxDQUFBdXNCLGFBQ0EsSUFFQUEsVUFBQXBZLFNBQUF2QixRQUFBLENBQ0E1UyxLQUFBQSxLQUNBblosTUFBQXlZLE9BQUEvakMsT0FBQSxHQUFBbXhELFlBQ0FNLEtBQUExdEIsT0FBQS9qQyxRQUFBLEVBQUEsQ0FDQTB4RCxjQUFBLEdBQ0FoRSxPQUFBM3BCLE9BQUEycEIsT0FBQS9OLFVBQ0FoaEQsU0FDQWd6RCxtQkFBQVIsV0FDQVMsZ0JBQUFqekQsUUFDQTR5RCxVQUFBckIsT0FBQVMsY0FDQW5CLFNBQUE3d0QsUUFBQTZ3RCxTQUNBZ0MsT0FBQSxHQUNBVCxZQUFBLFNBQUExVSxLQUFBeHVDLEtBQ0EsSUFBQXN3QyxNQUFBcGEsT0FBQTBwQixNQUFBaHBCLEtBQUF1c0IsVUFBQVMsS0FBQXBWLEtBQUF4dUMsSUFDQW1qRCxVQUFBUyxLQUFBQyxjQUFBclYsT0FBQTJVLFVBQUFTLEtBQUEvRCxRQUVBLE9BREFzRCxVQUFBUSxPQUFBOXNELEtBQUF5NUMsT0FDQUEsT0FFQWYsS0FBQSxTQUFBeVUsU0FDQSxJQUFBcjZDLE1BQUEsRUFJQXRaLE9BQUEyekQsUUFBQWIsVUFBQVEsT0FBQXR6RCxPQUFBLEVBQ0EsR0FBQWt6RCxRQUNBLE9BQUFsd0QsS0FHQSxJQURBa3dELFNBQUEsRUFDQTU1QyxNQUFBdFosT0FBQXNaLFFBQ0F3NUMsVUFBQVEsT0FBQWg2QyxPQUFBNjNDLElBQUEsR0FVQSxPQU5Bd0MsU0FDQWpaLFNBQUFnQixXQUFBblYsS0FBQSxDQUFBdXNCLFVBQUEsRUFBQSxJQUNBcFksU0FBQWlCLFlBQUFwVixLQUFBLENBQUF1c0IsVUFBQWEsV0FFQWpaLFNBQUFxQixXQUFBeFYsS0FBQSxDQUFBdXNCLFVBQUFhLFVBRUEzd0QsUUFHQW9xQixNQUFBMGxDLFVBQUExbEMsTUFJQSxLQS9IQSxTQUFBQSxNQUFBb21DLGVBQ0EsSUFBQWw2QyxNQUFBM1YsS0FBQTZyRCxPQUFBaG5ELE1BQUF3MkMsTUFHQSxJQUFBMWxDLFNBQUE4VCxNQWVBLEdBYkFvaUMsT0FBQWdFLGNBREE3dkQsS0FBQW02QyxVQUFBeGtDLFFBRUE5USxNQUFBNGtCLE1BQUE5VCxPQUNBMk8sTUFBQTVoQixRQUFBbUMsU0FDQWduRCxPQUFBaG5ELE1BQUEsR0FDQUEsTUFBQTRrQixNQUFBOVQsT0FBQTlRLE1BQUEsSUFHQThRLFFBQUEzVixPQUNBeXBCLE1BQUF6cEIsTUFBQTZFLGFBQ0E0a0IsTUFBQTlULFNBR0EwbEMsTUFBQW5aLE9BQUE0cEIsU0FBQTlyRCxRQUNBLFdBQUFxN0MsTUFNQSxJQUFBMWxDLFNBTEE5USxNQUFBdzJDLE1BQUFnUyxPQUFBeG9ELGNBQ0E0a0IsTUFBQXpwQixNQUlBNkUsTUFDQThRLFNBQUE4VCxRQUNBQSxNQUFBOVQsT0FBQTlRLE1BQUE4USxPQUNBazZDLGNBQUFsNkMsT0FBQWsyQyxhQUlBZ0UsY0FBQTd2RCxNQUFBNnJELE9BNkZBb0UsQ0FBQXhtQyxNQUFBMGxDLFVBQUFTLEtBQUFDLGVBRUFsNkMsTUFBQXRaLE9BQUFzWixRQUVBLEdBREEvTixPQUFBd25ELFVBQUFJLFdBQUE3NUMsT0FBQXZaLEtBQUEreUQsVUFBQXZzQixLQUFBblosTUFBQTBsQyxVQUFBUyxNQU1BLE9BSkExa0MsV0FBQXRqQixPQUFBMnpDLFFBQ0FyWixPQUFBb1osWUFBQTZULFVBQUF2c0IsS0FBQXVzQixVQUFBUyxLQUFBMVosT0FBQXFGLEtBQ0EzekMsT0FBQTJ6QyxLQUFBMlUsS0FBQXRvRCxTQUVBQSxPQXlCQSxPQXJCQXM2QixPQUFBMXhCLElBQUFpWixNQUFBeWxDLFlBQUFDLFdBRUFqa0MsV0FBQWlrQyxVQUFBUyxLQUFBM3JELFFBQ0FrckQsVUFBQVMsS0FBQTNyRCxNQUFBN0gsS0FBQXdtQyxLQUFBdXNCLFdBSUFBLFVBQ0E3WCxTQUFBNlgsVUFBQVMsS0FBQXRZLFVBQ0EzeUIsS0FBQXdxQyxVQUFBUyxLQUFBanJDLEtBQUF3cUMsVUFBQVMsS0FBQU8sVUFDQTFhLEtBQUEwWixVQUFBUyxLQUFBbmEsTUFDQXFCLE9BQUFxWSxVQUFBUyxLQUFBOVksUUFFQTVVLE9BQUE0ckIsR0FBQXNDLE1BQ0FsdUIsT0FBQS9qQyxPQUFBMHdELEtBQUEsQ0FDQWpzQixLQUFBQSxLQUNBeXRCLEtBQUFsQixVQUNBalosTUFBQWlaLFVBQUFTLEtBQUExWixTQUlBaVosVUFHQWp0QixPQUFBa3RCLFVBQUFsdEIsT0FBQS9qQyxPQUFBaXhELFVBQUEsQ0FFQUMsU0FBQSxDQUNBaUIsSUFBQSxDQUFBLFNBQUE5VixLQUFBMzFDLE9BQ0EsSUFBQXkzQyxNQUFBajlDLEtBQUE2dkQsWUFBQTFVLEtBQUEzMUMsT0FFQSxPQURBdTNDLFVBQUFFLE1BQUExWixLQUFBNFgsS0FBQXFCLFFBQUF6eUIsS0FBQXZrQixPQUFBeTNDLE9BQ0FBLFNBSUFpVSxRQUFBLFNBQUE5bUMsTUFBQTFULFVBWUEsSUFKQSxJQUFBeWtDLEtBQ0E3a0MsTUFBQSxFQUNBdFosUUFQQW90QixNQUZBeUIsV0FBQXpCLFFBQ0ExVCxTQUFBMFQsTUFDQSxDQUFBLE1BRUFBLE1BQUFwRixNQUFBMHdCLGdCQUtBMTRDLE9BRUFzWixNQUFBdFosT0FBQXNaLFFBQ0E2a0MsS0FBQS93QixNQUFBOVQsT0FDQXk1QyxVQUFBQyxTQUFBN1UsTUFBQTRVLFVBQUFDLFNBQUE3VSxPQUFBLEdBQ0E0VSxVQUFBQyxTQUFBN1UsTUFBQTcyQyxRQUFBb1MsV0FJQXk1QyxXQUFBLENBM1dBLFNBQUE1c0IsS0FBQW5aLE1BQUFtbUMsTUFDQSxJQUFBcFYsS0FBQTMxQyxNQUFBdTRDLE9BQUEvQixNQUFBbVYsUUFBQUMsVUFBQUMsZUFBQXpVLFFBQ0EwVSxNQUFBLFVBQUFsbkMsT0FBQSxXQUFBQSxNQUNBNG1DLEtBQUFoeEQsS0FDQWdtRCxLQUFBLEdBQ0FySixNQUFBcFosS0FBQW9aLE1BQ0EwUyxPQUFBOXJCLEtBQUF2QixVQUFBMGEsbUJBQUFuWixNQUNBZ3VCLFNBQUFsVyxTQUFBenFCLElBQUEyUyxLQUFBLFVBNkJBLElBQUE0WCxRQTFCQW9WLEtBQUExWixRQUVBLE9BREFtRixNQUFBblosT0FBQW9aLFlBQUExWSxLQUFBLE9BQ0FpdUIsV0FDQXhWLE1BQUF3VixTQUFBLEVBQ0FMLFFBQUFuVixNQUFBeDNDLE1BQUF1eUMsS0FDQWlGLE1BQUF4M0MsTUFBQXV5QyxLQUFBLFdBQ0FpRixNQUFBd1YsVUFDQUwsWUFJQW5WLE1BQUF3VixXQUVBUixLQUFBdlosT0FBQSxXQUdBdVosS0FBQXZaLE9BQUEsV0FDQXVFLE1BQUF3VixXQUNBM3VCLE9BQUFnVSxNQUFBdFQsS0FBQSxNQUFBdm1DLFFBQ0FnL0MsTUFBQXgzQyxNQUFBdXlDLFlBT0Ezc0IsTUFFQSxHQURBNWtCLE1BQUE0a0IsTUFBQSt3QixNQUNBK1QsU0FBQXB0RCxLQUFBMEQsT0FBQSxDQUdBLFVBRkE0a0IsTUFBQSt3QixNQUNBNEMsT0FBQUEsUUFBQSxXQUFBdjRDLE1BQ0FBLFNBQUE2cEQsT0FBQSxPQUFBLFFBQUEsQ0FJQSxHQUFBLFNBQUE3cEQsUUFBQStyRCxlQUFBM3VELElBQUEydUQsU0FBQXBXLE1BS0EsU0FKQWtVLFFBQUEsRUFPQXJKLEtBQUE3SyxNQUFBb1csVUFBQUEsU0FBQXBXLE9BQUF0WSxPQUFBOFosTUFBQXBaLEtBQUE0WCxNQU1BLElBREFpVyxXQUFBdnVCLE9BQUF1QixjQUFBaGEsVUFDQXlZLE9BQUF1QixjQUFBNGhCLE1BOERBLElBQUE3SyxRQXpEQW1XLE9BQUEsSUFBQS90QixLQUFBdkIsV0FNQXV1QixLQUFBa0IsU0FBQSxDQUFBOVUsTUFBQThVLFNBQUE5VSxNQUFBK1UsVUFBQS9VLE1BQUFnVixXQUlBLE9BREFOLGVBQUFFLFVBQUFBLFNBQUEzVSxXQUVBeVUsZUFBQWhXLFNBQUF6cUIsSUFBQTJTLEtBQUEsWUFHQSxVQURBcVosUUFBQS9aLE9BQUFnYSxJQUFBdFosS0FBQSxjQUVBOHRCLGVBQ0F6VSxRQUFBeVUsZ0JBSUF6VCxTQUFBLENBQUFyYSxPQUFBLEdBQ0E4dEIsZUFBQTl0QixLQUFBb1osTUFBQUMsU0FBQXlVLGVBQ0F6VSxRQUFBL1osT0FBQWdhLElBQUF0WixLQUFBLFdBQ0FxYSxTQUFBLENBQUFyYSxVQUtBLFdBQUFxWixTQUFBLGlCQUFBQSxTQUFBLE1BQUF5VSxpQkFDQSxTQUFBeHVCLE9BQUFnYSxJQUFBdFosS0FBQSxXQUdBNnRCLFlBQ0FKLEtBQUExckMsS0FBQSxXQUNBcTNCLE1BQUFDLFFBQUF5VSxpQkFFQSxNQUFBQSxpQkFDQXpVLFFBQUFELE1BQUFDLFFBQ0F5VSxlQUFBLFNBQUF6VSxRQUFBLEdBQUFBLFVBR0FELE1BQUFDLFFBQUEsaUJBS0EyVCxLQUFBa0IsV0FDQTlVLE1BQUE4VSxTQUFBLFNBQ0FULEtBQUF2WixPQUFBLFdBQ0FrRixNQUFBOFUsU0FBQWxCLEtBQUFrQixTQUFBLEdBQ0E5VSxNQUFBK1UsVUFBQW5CLEtBQUFrQixTQUFBLEdBQ0E5VSxNQUFBZ1YsVUFBQXBCLEtBQUFrQixTQUFBLE1BS0FMLFdBQUEsRUFDQXBMLEtBR0FvTCxZQUNBRyxTQUNBLFdBQUFBLFdBQ0FsQyxPQUFBa0MsU0FBQWxDLFFBR0FrQyxTQUFBbFcsU0FBQWpCLE9BQUE3VyxLQUFBLFNBQUEsQ0FBQXFaLFFBQUF5VSxpQkFJQXRULFNBQ0F3VCxTQUFBbEMsUUFBQUEsUUFJQUEsUUFDQXpSLFNBQUEsQ0FBQXJhLE9BQUEsR0FLQXl0QixLQUFBMXJDLEtBQUEsV0FTQSxJQUFBNjFCLFFBSkFrVSxRQUNBelIsU0FBQSxDQUFBcmEsT0FFQThYLFNBQUFuRSxPQUFBM1QsS0FBQSxVQUNBeWlCLEtBQ0FuakIsT0FBQThaLE1BQUFwWixLQUFBNFgsS0FBQTZLLEtBQUE3SyxVQU1BaVcsVUFBQXZCLFlBQUFSLE9BQUFrQyxTQUFBcFcsTUFBQSxFQUFBQSxLQUFBNlYsTUFDQTdWLFFBQUFvVyxXQUNBQSxTQUFBcFcsTUFBQWlXLFVBQUF4c0QsTUFDQXlxRCxTQUNBK0IsVUFBQXprRCxJQUFBeWtELFVBQUF4c0QsTUFDQXdzRCxVQUFBeHNELE1BQUEsTUF1TUFndEQsVUFBQSxTQUFBbDdDLFNBQUF2UyxTQUNBQSxRQUNBNHJELFVBQUFJLFdBQUE3ckQsUUFBQW9TLFVBRUFxNUMsVUFBQUksV0FBQTNzRCxLQUFBa1QsYUFLQW1zQixPQUFBZ3ZCLE1BQUEsU0FBQUEsTUFBQXJGLE9BQUE1ckQsSUFDQSxJQUFBa3hELElBQUFELE9BQUEsaUJBQUFBLE1BQUFodkIsT0FBQS9qQyxPQUFBLEdBQUEreUQsT0FBQSxDQUNBZixTQUFBbHdELEtBQUFBLElBQUE0ckQsUUFDQTNnQyxXQUFBZ21DLFFBQUFBLE1BQ0F2RCxTQUFBdUQsTUFDQXJGLE9BQUE1ckQsSUFBQTRyRCxRQUFBQSxTQUFBM2dDLFdBQUEyZ0MsU0FBQUEsUUFvQ0EsT0FoQ0EzcEIsT0FBQTRyQixHQUFBOU4sSUFDQW1SLElBQUF4RCxTQUFBLEVBR0EsaUJBQUF3RCxJQUFBeEQsV0FDQXdELElBQUF4RCxZQUFBenJCLE9BQUE0ckIsR0FBQXNELE9BQ0FELElBQUF4RCxTQUFBenJCLE9BQUE0ckIsR0FBQXNELE9BQUFELElBQUF4RCxVQUdBd0QsSUFBQXhELFNBQUF6ckIsT0FBQTRyQixHQUFBc0QsT0FBQXRULFVBTUEsTUFBQXFULElBQUFqYixRQUFBLElBQUFpYixJQUFBamIsUUFDQWliLElBQUFqYixNQUFBLE1BSUFpYixJQUFBaFYsSUFBQWdWLElBQUFoQixTQUVBZ0IsSUFBQWhCLFNBQUEsV0FDQWpsQyxXQUFBaW1DLElBQUFoVixNQUNBZ1YsSUFBQWhWLElBQUEvL0MsS0FBQWlELE1BR0E4eEQsSUFBQWpiLE9BQ0FoVSxPQUFBaVosUUFBQTk3QyxLQUFBOHhELElBQUFqYixRQUlBaWIsS0FHQWp2QixPQUFBamlDLEdBQUE5QixPQUFBLENBQ0FrekQsT0FBQSxTQUFBSCxNQUFBSSxHQUFBekYsT0FBQTkxQyxVQUdBLE9BQUExVyxLQUFBa3NDLE9BQUF3USxvQkFBQUcsSUFBQSxVQUFBLEdBQUFnQixPQUdBbHhDLE1BQUF1bEQsUUFBQSxDQUFBeEYsUUFBQXVGLElBQUFKLE1BQUFyRixPQUFBOTFDLFdBRUF3N0MsUUFBQSxTQUFBL1csS0FBQTBXLE1BQUFyRixPQUFBOTFDLFVBQ0EsSUFBQWxTLE1BQUFxK0IsT0FBQXVCLGNBQUErVyxNQUNBZ1gsT0FBQXR2QixPQUFBZ3ZCLE1BQUFBLE1BQUFyRixPQUFBOTFDLFVBQ0EwN0MsWUFBQSxXQUdBLElBQUFwQixLQUFBakIsVUFBQS92RCxLQUFBNmlDLE9BQUEvakMsT0FBQSxHQUFBcThDLE1BQUFnWCxTQUdBM3RELE9BQUE2MkMsU0FBQXpxQixJQUFBNXdCLEtBQUEsWUFDQWd4RCxLQUFBOVUsTUFBQSxJQUtBLE9BRkFrVyxZQUFBQyxPQUFBRCxZQUVBNXRELFFBQUEsSUFBQTJ0RCxPQUFBdGIsTUFDQTcyQyxLQUFBeUUsS0FBQTJ0RCxhQUNBcHlELEtBQUE2MkMsTUFBQXNiLE9BQUF0YixNQUFBdWIsY0FFQWxXLEtBQUEsU0FBQXo2QyxLQUFBMjZDLFdBQUF1VSxTQUNBLElBQUEyQixVQUFBLFNBQUF0VyxPQUNBLElBQUFFLEtBQUFGLE1BQUFFLFlBQ0FGLE1BQUFFLEtBQ0FBLEtBQUF5VSxVQVlBLE1BVEEsaUJBQUFsdkQsT0FDQWt2RCxRQUFBdlUsV0FDQUEsV0FBQTM2QyxLQUNBQSxVQUFBbUIsR0FFQXc1QyxhQUFBLElBQUEzNkMsTUFDQXpCLEtBQUE2MkMsTUFBQXAxQyxNQUFBLEtBQUEsSUFHQXpCLEtBQUF5RSxLQUFBLFdBQ0EsSUFBQXEzQyxTQUFBLEVBQ0F4bEMsTUFBQSxNQUFBN1UsTUFBQUEsS0FBQSxhQUNBOHdELE9BQUExdkIsT0FBQTB2QixPQUNBM3NELEtBQUF5MUMsU0FBQXpxQixJQUFBNXdCLE1BRUEsR0FBQXNXLE1BQ0ExUSxLQUFBMFEsUUFBQTFRLEtBQUEwUSxPQUFBNGxDLE1BQ0FvVyxVQUFBMXNELEtBQUEwUSxhQUdBLElBQUFBLFNBQUExUSxLQUNBQSxLQUFBMFEsUUFBQTFRLEtBQUEwUSxPQUFBNGxDLE1BQUFpVCxLQUFBcnRELEtBQUF3VSxRQUNBZzhDLFVBQUExc0QsS0FBQTBRLFFBS0EsSUFBQUEsTUFBQWk4QyxPQUFBdjFELE9BQUFzWixTQUNBaThDLE9BQUFqOEMsT0FBQWl0QixPQUFBdmpDLE1BQ0EsTUFBQXlCLE1BQUE4d0QsT0FBQWo4QyxPQUFBdWdDLFFBQUFwMUMsT0FFQTh3RCxPQUFBajhDLE9BQUEwNkMsS0FBQTlVLEtBQUF5VSxTQUNBN1UsU0FBQSxFQUNBeVcsT0FBQTkvQyxPQUFBNkQsTUFBQSxLQU9Bd2xDLFNBQUE2VSxTQUNBOXRCLE9BQUFpWixRQUFBOTdDLEtBQUF5QixTQUlBNHdELE9BQUEsU0FBQTV3RCxNQUlBLE9BSEEsSUFBQUEsT0FDQUEsS0FBQUEsTUFBQSxNQUVBekIsS0FBQXlFLEtBQUEsV0FDQSxJQUFBNlIsTUFDQTFRLEtBQUF5MUMsU0FBQXpxQixJQUFBNXdCLE1BQ0E2MkMsTUFBQWp4QyxLQUFBbkUsS0FBQSxTQUNBdTZDLE1BQUFwMkMsS0FBQW5FLEtBQUEsY0FDQTh3RCxPQUFBMXZCLE9BQUEwdkIsT0FDQXYxRCxPQUFBNjVDLE1BQUFBLE1BQUE3NUMsT0FBQSxFQWFBLElBVkE0SSxLQUFBeXNELFFBQUEsRUFHQXh2QixPQUFBZ1UsTUFBQTcyQyxLQUFBeUIsS0FBQSxJQUVBdTZDLE9BQUFBLE1BQUFFLE1BQ0FGLE1BQUFFLEtBQUFuL0MsS0FBQWlELE1BQUEsR0FJQXNXLE1BQUFpOEMsT0FBQXYxRCxPQUFBc1osU0FDQWk4QyxPQUFBajhDLE9BQUFpdEIsT0FBQXZqQyxNQUFBdXlELE9BQUFqOEMsT0FBQXVnQyxRQUFBcDFDLE9BQ0E4d0QsT0FBQWo4QyxPQUFBMDZDLEtBQUE5VSxNQUFBLEdBQ0FxVyxPQUFBOS9DLE9BQUE2RCxNQUFBLElBS0EsSUFBQUEsTUFBQSxFQUFBQSxNQUFBdFosT0FBQXNaLFFBQ0F1Z0MsTUFBQXZnQyxRQUFBdWdDLE1BQUF2Z0MsT0FBQSs3QyxRQUNBeGIsTUFBQXZnQyxPQUFBKzdDLE9BQUF0MUQsS0FBQWlELGFBS0E0RixLQUFBeXNELFlBS0F4dkIsT0FBQXArQixLQUFBLENBQUEsU0FBQSxPQUFBLFFBQUEsU0FBQXBJLEVBQUFzRSxNQUNBLElBQUE2eEQsTUFBQTN2QixPQUFBamlDLEdBQUFELE1BQ0FraUMsT0FBQWppQyxHQUFBRCxNQUFBLFNBQUFreEQsTUFBQXJGLE9BQUE5MUMsVUFDQSxPQUFBLE1BQUFtN0MsT0FBQSxrQkFBQUEsTUFDQVcsTUFBQWhpRCxNQUFBeFEsS0FBQTZFLFdBQ0E3RSxLQUFBa3lELFFBQUF4QyxNQUFBL3VELE1BQUEsR0FBQWt4RCxNQUFBckYsT0FBQTkxQyxhQUtBbXNCLE9BQUFwK0IsS0FBQSxDQUNBZ3VELFVBQUEvQyxNQUFBLFFBQ0FnRCxRQUFBaEQsTUFBQSxRQUNBaUQsWUFBQWpELE1BQUEsVUFDQWtELE9BQUEsQ0FBQWxHLFFBQUEsUUFDQW1HLFFBQUEsQ0FBQW5HLFFBQUEsUUFDQW9HLFdBQUEsQ0FBQXBHLFFBQUEsV0FDQSxTQUFBL3JELEtBQUF5cEIsT0FDQXlZLE9BQUFqaUMsR0FBQUQsTUFBQSxTQUFBa3hELE1BQUFyRixPQUFBOTFDLFVBQ0EsT0FBQTFXLEtBQUFreUQsUUFBQTluQyxNQUFBeW5DLE1BQUFyRixPQUFBOTFDLGFBSUFtc0IsT0FBQTB2QixPQUFBLEdBQ0ExdkIsT0FBQTRyQixHQUFBZSxLQUFBLFdBQ0EsSUFBQXVCLE1BQ0ExMEQsRUFBQSxFQUNBazJELE9BQUExdkIsT0FBQTB2QixPQUlBLElBRkF2RCxNQUFBaHBCLEtBQUE4ZCxNQUVBem5ELEVBQUFrMkQsT0FBQXYxRCxPQUFBWCxLQUNBMDBELE1BQUF3QixPQUFBbDJELE9BR0FrMkQsT0FBQWwyRCxLQUFBMDBELE9BQ0F3QixPQUFBOS9DLE9BQUFwVyxJQUFBLEdBSUFrMkQsT0FBQXYxRCxRQUNBNmxDLE9BQUE0ckIsR0FBQXZTLE9BRUE4UyxXQUFBcHNELEdBR0FpZ0MsT0FBQTRyQixHQUFBc0MsTUFBQSxTQUFBQSxPQUNBbHVCLE9BQUEwdkIsT0FBQS91RCxLQUFBdXRELE9BQ0FsdUIsT0FBQTRyQixHQUFBN3BELFNBR0FpK0IsT0FBQTRyQixHQUFBYyxTQUFBLEdBQ0Exc0IsT0FBQTRyQixHQUFBN3BELE1BQUEsV0FDQXFxRCxhQUlBQSxZQUFBLEVBQ0FHLGFBR0F2c0IsT0FBQTRyQixHQUFBdlMsS0FBQSxXQUNBK1MsV0FBQSxNQUdBcHNCLE9BQUE0ckIsR0FBQXNELE9BQUEsQ0FDQWdCLEtBQUEsSUFDQUMsS0FBQSxJQUdBdlUsU0FBQSxLQU1BNWIsT0FBQWppQyxHQUFBcXlELE1BQUEsU0FBQUMsS0FBQXp4RCxNQUlBLE9BSEF5eEQsS0FBQXJ3QixPQUFBNHJCLElBQUE1ckIsT0FBQTRyQixHQUFBc0QsT0FBQW1CLE9BQUFBLEtBQ0F6eEQsS0FBQUEsTUFBQSxLQUVBekIsS0FBQTYyQyxNQUFBcDFDLEtBQUEsU0FBQTBrQixLQUFBNjFCLE9BQ0EsSUFBQW1YLFFBQUFybUMsT0FBQW1zQixXQUFBOXlCLEtBQUErc0MsTUFDQWxYLE1BQUFFLEtBQUEsV0FDQXB2QixPQUFBc21DLGFBQUFELGFBTUEsV0FDQSxJQUFBMzFELE1BQUE2akMsU0FBQWtCLGNBQUEsU0FFQXV2QixJQURBendCLFNBQUFrQixjQUFBLFVBQ0FFLFlBQUFwQixTQUFBa0IsY0FBQSxXQUVBL2tDLE1BQUFpRSxLQUFBLFdBSUFzZ0MsUUFBQXN4QixRQUFBLEtBQUE3MUQsTUFBQWdJLE1BSUF1OEIsUUFBQXV4QixZQUFBeEIsSUFBQXpoQixVQUlBN3lDLE1BQUE2akMsU0FBQWtCLGNBQUEsVUFDQS84QixNQUFBLElBQ0FoSSxNQUFBaUUsS0FBQSxRQUNBc2dDLFFBQUF3eEIsV0FBQSxNQUFBLzFELE1BQUFnSSxNQXBCQSxHQXdCQSxJQUFBZ3VELFNBQ0E3b0IsV0FBQTlILE9BQUFyc0IsS0FBQW0wQixXQUVBOUgsT0FBQWppQyxHQUFBOUIsT0FBQSxDQUNBeXVDLEtBQUEsU0FBQTVzQyxLQUFBNkUsT0FDQSxPQUFBNDBDLE9BQUFwNkMsS0FBQTZpQyxPQUFBMEssS0FBQTVzQyxLQUFBNkUsTUFBQSxFQUFBWCxVQUFBN0gsU0FHQXkyRCxXQUFBLFNBQUE5eUQsTUFDQSxPQUFBWCxLQUFBeUUsS0FBQSxXQUNBbytCLE9BQUE0d0IsV0FBQXp6RCxLQUFBVyxXQUtBa2lDLE9BQUEvakMsT0FBQSxDQUNBeXVDLEtBQUEsU0FBQWhLLEtBQUE1aUMsS0FBQTZFLE9BQ0EsSUFBQWxDLElBQUEwNEMsTUFDQTBYLE1BQUFud0IsS0FBQXZCLFNBR0EsR0FBQSxJQUFBMHhCLE9BQUEsSUFBQUEsT0FBQSxJQUFBQSxNQUtBLFlBQUEsSUFBQW53QixLQUFBcUcsYUFDQS9HLE9BQUFzWSxLQUFBNVgsS0FBQTVpQyxLQUFBNkUsUUFLQSxJQUFBa3VELE9BQUE3d0IsT0FBQW9SLFNBQUExUSxRQUNBeVksTUFBQW5aLE9BQUE4d0IsVUFBQWh6RCxLQUFBMnJCLGlCQUNBdVcsT0FBQXJzQixLQUFBd08sTUFBQXZaLEtBQUEzSixLQUFBbkIsTUFBQTZ5RCxjQUFBNXdELFNBR0FBLElBQUE0QyxNQUNBLE9BQUFBLFdBQ0FxOUIsT0FBQTR3QixXQUFBbHdCLEtBQUE1aUMsTUFJQXE3QyxPQUFBLFFBQUFBLFlBQ0FwNUMsS0FBQVUsSUFBQTA0QyxNQUFBM3JCLElBQUFrVCxLQUFBLzlCLE1BQUE3RSxPQUNBMkMsS0FHQWlnQyxLQUFBc0csYUFBQWxwQyxLQUFBNkUsTUFBQSxJQUNBQSxPQUdBdzJDLE9BQUEsUUFBQUEsT0FBQSxRQUFBMTRDLElBQUEwNEMsTUFBQXByQixJQUFBMlMsS0FBQTVpQyxPQUNBMkMsSUFNQSxPQUhBQSxJQUFBdS9CLE9BQUF1SixLQUFBbUIsS0FBQWhLLEtBQUE1aUMsWUFHQWlDLEVBQUFVLE1BR0Fxd0QsVUFBQSxDQUNBbHlELEtBQUEsQ0FDQTR1QixJQUFBLFNBQUFrVCxLQUFBLzlCLE9BQ0EsSUFBQXU4QixRQUFBd3hCLFlBQUEsVUFBQS90RCxPQUNBbWtDLFNBQUFwRyxLQUFBLFNBQUEsQ0FDQSxJQUFBbjNCLElBQUFtM0IsS0FBQS85QixNQUtBLE9BSkErOUIsS0FBQXNHLGFBQUEsT0FBQXJrQyxPQUNBNEcsTUFDQW0zQixLQUFBLzlCLE1BQUE0RyxLQUVBNUcsVUFNQWl1RCxXQUFBLFNBQUFsd0IsS0FBQS85QixPQUNBLElBQUE3RSxLQUNBdEUsRUFBQSxFQUlBdTNELFVBQUFwdUQsT0FBQUEsTUFBQXdmLE1BQUEwd0IsZUFFQSxHQUFBa2UsV0FBQSxJQUFBcndCLEtBQUF2QixTQUNBLEtBQUFyaEMsS0FBQWl6RCxVQUFBdjNELE1BQ0FrbkMsS0FBQTJHLGdCQUFBdnBDLFNBT0E2eUQsU0FBQSxDQUNBbmpDLElBQUEsU0FBQWtULEtBQUEvOUIsTUFBQTdFLE1BUUEsT0FQQSxJQUFBNkUsTUFHQXE5QixPQUFBNHdCLFdBQUFsd0IsS0FBQTVpQyxNQUVBNGlDLEtBQUFzRyxhQUFBbHBDLEtBQUFBLE1BRUFBLE9BSUFraUMsT0FBQXArQixLQUFBbytCLE9BQUFyc0IsS0FBQXdPLE1BQUF2WixLQUFBN0gsT0FBQW9oQixNQUFBLFFBQUEsU0FBQTNvQixFQUFBc0UsTUFDQSxJQUFBa3pELE9BQUFscEIsV0FBQWhxQyxPQUFBa2lDLE9BQUF1SixLQUFBbUIsS0FFQTVDLFdBQUFocUMsTUFBQSxTQUFBNGlDLEtBQUE1aUMsS0FBQXlrQyxPQUNBLElBQUE5aEMsSUFBQTg5QyxPQUNBMFMsY0FBQW56RCxLQUFBMnJCLGNBWUEsT0FWQThZLFFBR0FnYyxPQUFBelcsV0FBQW1wQixlQUNBbnBCLFdBQUFtcEIsZUFBQXh3RCxJQUNBQSxJQUFBLE1BQUF1d0QsT0FBQXR3QixLQUFBNWlDLEtBQUF5a0MsT0FDQTB1QixjQUNBLEtBQ0FucEIsV0FBQW1wQixlQUFBMVMsUUFFQTk5QyxPQU9BLElBQUF5d0QsV0FBQSxzQ0FDQUMsV0FBQSxnQkF5SUEsU0FBQUMsaUJBQUF6dUQsT0FFQSxPQURBQSxNQUFBd2YsTUFBQTB3QixnQkFBQSxJQUNBeHhDLEtBQUEsS0FJQSxTQUFBZ3dELFNBQUEzd0IsTUFDQSxPQUFBQSxLQUFBcUcsY0FBQXJHLEtBQUFxRyxhQUFBLFVBQUEsR0FHQSxTQUFBdXFCLGVBQUEzdUQsT0FDQSxPQUFBeWYsTUFBQTVoQixRQUFBbUMsT0FDQUEsTUFFQSxpQkFBQUEsT0FDQUEsTUFBQXdmLE1BQUEwd0IsZ0JBRUEsR0F4SkE3UyxPQUFBamlDLEdBQUE5QixPQUFBLENBQ0FxOEMsS0FBQSxTQUFBeDZDLEtBQUE2RSxPQUNBLE9BQUE0MEMsT0FBQXA2QyxLQUFBNmlDLE9BQUFzWSxLQUFBeDZDLEtBQUE2RSxNQUFBLEVBQUFYLFVBQUE3SCxTQUdBbzNELFdBQUEsU0FBQXp6RCxNQUNBLE9BQUFYLEtBQUF5RSxLQUFBLGtCQUNBekUsS0FBQTZpQyxPQUFBd3hCLFFBQUExekQsT0FBQUEsV0FLQWtpQyxPQUFBL2pDLE9BQUEsQ0FDQXE4QyxLQUFBLFNBQUE1WCxLQUFBNWlDLEtBQUE2RSxPQUNBLElBQUFsQyxJQUFBMDRDLE1BQ0EwWCxNQUFBbndCLEtBQUF2QixTQUdBLEdBQUEsSUFBQTB4QixPQUFBLElBQUFBLE9BQUEsSUFBQUEsTUFXQSxPQVBBLElBQUFBLE9BQUE3d0IsT0FBQW9SLFNBQUExUSxRQUdBNWlDLEtBQUFraUMsT0FBQXd4QixRQUFBMXpELE9BQUFBLEtBQ0FxN0MsTUFBQW5aLE9BQUFxckIsVUFBQXZ0RCxZQUdBaUMsSUFBQTRDLE1BQ0F3MkMsT0FBQSxRQUFBQSxZQUNBcDVDLEtBQUFVLElBQUEwNEMsTUFBQTNyQixJQUFBa1QsS0FBQS85QixNQUFBN0UsT0FDQTJDLElBR0FpZ0MsS0FBQTVpQyxNQUFBNkUsTUFHQXcyQyxPQUFBLFFBQUFBLE9BQUEsUUFBQTE0QyxJQUFBMDRDLE1BQUFwckIsSUFBQTJTLEtBQUE1aUMsT0FDQTJDLElBR0FpZ0MsS0FBQTVpQyxPQUdBdXRELFVBQUEsQ0FDQWhlLFNBQUEsQ0FDQXRmLElBQUEsU0FBQTJTLE1BT0EsSUFBQSt3QixTQUFBenhCLE9BQUF1SixLQUFBbUIsS0FBQWhLLEtBQUEsWUFFQSxPQUFBK3dCLFNBQ0EvbkMsU0FBQStuQyxTQUFBLElBSUFQLFdBQUFqeUQsS0FBQXloQyxLQUFBb0csV0FDQXFxQixXQUFBbHlELEtBQUF5aEMsS0FBQW9HLFdBQ0FwRyxLQUFBME0sS0FFQSxHQUdBLEtBS0Fva0IsUUFBQSxDQUNBRSxJQUFBLFVBQ0FDLE1BQUEsZUFZQXp5QixRQUFBdXhCLGNBQ0F6d0IsT0FBQXFyQixVQUFBN2QsU0FBQSxDQUNBemYsSUFBQSxTQUFBMlMsTUFJQSxJQUFBNzBCLE9BQUE2MEIsS0FBQWIsV0FJQSxPQUhBaDBCLFFBQUFBLE9BQUFnMEIsWUFDQWgwQixPQUFBZzBCLFdBQUE0TixjQUVBLE1BRUFqZ0IsSUFBQSxTQUFBa1QsTUFJQSxJQUFBNzBCLE9BQUE2MEIsS0FBQWIsV0FDQWgwQixTQUNBQSxPQUFBNGhDLGNBRUE1aEMsT0FBQWcwQixZQUNBaDBCLE9BQUFnMEIsV0FBQTROLGtCQU9Bek4sT0FBQXArQixLQUFBLENBQ0EsV0FDQSxXQUNBLFlBQ0EsY0FDQSxjQUNBLFVBQ0EsVUFDQSxTQUNBLGNBQ0EsbUJBQ0EsV0FDQW8rQixPQUFBd3hCLFFBQUFyMEQsS0FBQXNzQixlQUFBdHNCLE9BNEJBNmlDLE9BQUFqaUMsR0FBQTlCLE9BQUEsQ0FDQTIxRCxTQUFBLFNBQUFqdkQsT0FDQSxJQUFBa3ZELFFBQUFueEIsS0FBQXNILElBQUE4cEIsU0FBQUMsTUFBQTlvQyxFQUFBK29DLFdBQ0F4NEQsRUFBQSxFQUVBLEdBQUF3dkIsV0FBQXJtQixPQUNBLE9BQUF4RixLQUFBeUUsS0FBQSxTQUFBcW5CLEdBQ0ErVyxPQUFBN2lDLE1BQUF5MEQsU0FBQWp2RCxNQUFBekksS0FBQWlELEtBQUE4ckIsRUFBQW9vQyxTQUFBbDBELFVBTUEsSUFGQTAwRCxRQUFBUCxlQUFBM3VELFFBRUF4SSxPQUNBLEtBQUF1bUMsS0FBQXZqQyxLQUFBM0QsTUFJQSxHQUhBczRELFNBQUFULFNBQUEzd0IsTUFDQXNILElBQUEsSUFBQXRILEtBQUF2QixVQUFBLElBQUFpeUIsaUJBQUFVLFVBQUEsSUFFQSxDQUVBLElBREE3b0MsRUFBQSxFQUNBOG9DLE1BQUFGLFFBQUE1b0MsTUFDQStlLElBQUFyK0IsUUFBQSxJQUFBb29ELE1BQUEsS0FBQSxJQUNBL3BCLEtBQUErcEIsTUFBQSxLQU1BRCxZQURBRSxXQUFBWixpQkFBQXBwQixPQUVBdEgsS0FBQXNHLGFBQUEsUUFBQWdyQixZQU1BLE9BQUE3MEQsTUFHQTgwRCxZQUFBLFNBQUF0dkQsT0FDQSxJQUFBa3ZELFFBQUFueEIsS0FBQXNILElBQUE4cEIsU0FBQUMsTUFBQTlvQyxFQUFBK29DLFdBQ0F4NEQsRUFBQSxFQUVBLEdBQUF3dkIsV0FBQXJtQixPQUNBLE9BQUF4RixLQUFBeUUsS0FBQSxTQUFBcW5CLEdBQ0ErVyxPQUFBN2lDLE1BQUE4MEQsWUFBQXR2RCxNQUFBekksS0FBQWlELEtBQUE4ckIsRUFBQW9vQyxTQUFBbDBELFVBSUEsSUFBQTZFLFVBQUE3SCxPQUNBLE9BQUFnRCxLQUFBdXRDLEtBQUEsUUFBQSxJQUtBLElBRkFtbkIsUUFBQVAsZUFBQTN1RCxRQUVBeEksT0FDQSxLQUFBdW1DLEtBQUF2akMsS0FBQTNELE1BTUEsR0FMQXM0RCxTQUFBVCxTQUFBM3dCLE1BR0FzSCxJQUFBLElBQUF0SCxLQUFBdkIsVUFBQSxJQUFBaXlCLGlCQUFBVSxVQUFBLElBRUEsQ0FFQSxJQURBN29DLEVBQUEsRUFDQThvQyxNQUFBRixRQUFBNW9DLE1BR0EsTUFBQSxFQUFBK2UsSUFBQXIrQixRQUFBLElBQUFvb0QsTUFBQSxNQUNBL3BCLElBQUFBLElBQUEzbEMsUUFBQSxJQUFBMHZELE1BQUEsSUFBQSxLQU1BRCxZQURBRSxXQUFBWixpQkFBQXBwQixPQUVBdEgsS0FBQXNHLGFBQUEsUUFBQWdyQixZQU1BLE9BQUE3MEQsTUFHQSswRCxZQUFBLFNBQUF2dkQsTUFBQXd2RCxVQUNBLElBQUF2ekQsWUFBQStELE1BQ0F5dkQsYUFBQSxXQUFBeHpELE1BQUF3akIsTUFBQTVoQixRQUFBbUMsT0FFQSxNQUFBLGtCQUFBd3ZELFVBQUFDLGFBQ0FELFNBQUFoMUQsS0FBQXkwRCxTQUFBanZELE9BQUF4RixLQUFBODBELFlBQUF0dkQsT0FHQXFtQixXQUFBcm1CLE9BQ0F4RixLQUFBeUUsS0FBQSxTQUFBcEksR0FDQXdtQyxPQUFBN2lDLE1BQUErMEQsWUFDQXZ2RCxNQUFBekksS0FBQWlELEtBQUEzRCxFQUFBNjNELFNBQUFsMEQsTUFBQWcxRCxVQUNBQSxZQUtBaDFELEtBQUF5RSxLQUFBLFdBQ0EsSUFBQXFuQyxVQUFBenZDLEVBQUF1bkIsS0FBQXN4QyxXQUVBLEdBQUFELGFBT0EsSUFKQTU0RCxFQUFBLEVBQ0F1bkIsS0FBQWlmLE9BQUE3aUMsTUFDQWsxRCxXQUFBZixlQUFBM3VELE9BRUFzbUMsVUFBQW9wQixXQUFBNzRELE1BR0F1bkIsS0FBQXV4QyxTQUFBcnBCLFdBQ0Fsb0IsS0FBQWt4QyxZQUFBaHBCLFdBRUFsb0IsS0FBQTZ3QyxTQUFBM29CLHFCQUtBbHBDLElBQUE0QyxPQUFBLFlBQUEvRCxRQUNBcXFDLFVBQUFvb0IsU0FBQWwwRCxRQUlBcTdDLFNBQUFockIsSUFBQXJ3QixLQUFBLGdCQUFBOHJDLFdBT0E5ckMsS0FBQTZwQyxjQUNBN3BDLEtBQUE2cEMsYUFBQSxRQUNBaUMsWUFBQSxJQUFBdG1DLE1BQ0EsR0FDQTYxQyxTQUFBenFCLElBQUE1d0IsS0FBQSxrQkFBQSxRQU9BbTFELFNBQUEsU0FBQXJ5QixVQUNBLElBQUFnSixVQUFBdkksS0FDQWxuQyxFQUFBLEVBR0EsSUFEQXl2QyxVQUFBLElBQUFoSixTQUFBLElBQ0FTLEtBQUF2akMsS0FBQTNELE1BQ0EsR0FBQSxJQUFBa25DLEtBQUF2QixXQUNBLEdBQUEsSUFBQWl5QixpQkFBQUMsU0FBQTN3QixPQUFBLEtBQUEvMkIsUUFBQXMvQixXQUNBLE9BQUEsRUFJQSxPQUFBLEtBT0EsSUFBQXNwQixRQUFBLE1BRUF2eUIsT0FBQWppQyxHQUFBOUIsT0FBQSxDQUNBc04sSUFBQSxTQUFBNUcsT0FDQSxJQUFBdzJDLE1BQUExNEMsSUFBQTZqRCxnQkFDQTVqQixLQUFBdmpDLEtBQUEsR0FFQSxPQUFBNkUsVUFBQTdILFFBMEJBbXFELGdCQUFBdDdCLFdBQUFybUIsT0FFQXhGLEtBQUF5RSxLQUFBLFNBQUFwSSxHQUNBLElBQUErUCxJQUVBLElBQUFwTSxLQUFBZ2lDLFdBV0EsT0FOQTUxQixJQURBKzZDLGdCQUNBM2hELE1BQUF6SSxLQUFBaUQsS0FBQTNELEVBQUF3bUMsT0FBQTdpQyxNQUFBb00sT0FFQTVHLE9BS0E0RyxJQUFBLEdBRUEsaUJBQUFBLElBQ0FBLEtBQUEsR0FFQTZZLE1BQUE1aEIsUUFBQStJLE9BQ0FBLElBQUF5MkIsT0FBQTF4QixJQUFBL0UsSUFBQSxTQUFBNUcsT0FDQSxPQUFBLE1BQUFBLE1BQUEsR0FBQUEsTUFBQSxPQUlBdzJDLE1BQUFuWixPQUFBd3lCLFNBQUFyMUQsS0FBQXlCLE9BQUFvaEMsT0FBQXd5QixTQUFBcjFELEtBQUEycEMsU0FBQXJkLGlCQUdBLFFBQUEwdkIsWUFBQXA1QyxJQUFBbzVDLE1BQUEzckIsSUFBQXJ3QixLQUFBb00sSUFBQSxXQUNBcE0sS0FBQXdGLE1BQUE0RyxTQXpEQW0zQixNQUNBeVksTUFBQW5aLE9BQUF3eUIsU0FBQTl4QixLQUFBOWhDLE9BQ0FvaEMsT0FBQXd5QixTQUFBOXhCLEtBQUFvRyxTQUFBcmQsaUJBR0EsUUFBQTB2QixZQUNBcDVDLEtBQUFVLElBQUEwNEMsTUFBQXByQixJQUFBMlMsS0FBQSxVQUVBamdDLElBTUEsaUJBSEFBLElBQUFpZ0MsS0FBQS85QixPQUlBbEMsSUFBQTRCLFFBQUFrd0QsUUFBQSxJQUlBLE1BQUE5eEQsSUFBQSxHQUFBQSxTQUdBLEtBeUNBdS9CLE9BQUEvakMsT0FBQSxDQUNBdTJELFNBQUEsQ0FDQWpYLE9BQUEsQ0FDQXh0QixJQUFBLFNBQUEyUyxNQUVBLElBQUFuM0IsSUFBQXkyQixPQUFBdUosS0FBQW1CLEtBQUFoSyxLQUFBLFNBQ0EsT0FBQSxNQUFBbjNCLElBQ0FBLElBTUE2bkQsaUJBQUFweEIsT0FBQTlkLEtBQUF3ZSxTQUdBK0IsT0FBQSxDQUNBMVUsSUFBQSxTQUFBMlMsTUFDQSxJQUFBLzlCLE1BQUE0NEMsT0FBQS9oRCxFQUNBb0IsUUFBQThsQyxLQUFBOWxDLFFBQ0E2WSxNQUFBaXRCLEtBQUErTSxjQUNBa1EsSUFBQSxlQUFBamQsS0FBQTloQyxLQUNBK1MsT0FBQWdzQyxJQUFBLEtBQUEsR0FDQW1MLElBQUFuTCxJQUFBbHFDLE1BQUEsRUFBQTdZLFFBQUFULE9BVUEsSUFQQVgsRUFEQWlhLE1BQUEsRUFDQXExQyxJQUdBbkwsSUFBQWxxQyxNQUFBLEVBSUFqYSxFQUFBc3ZELElBQUF0dkQsSUFLQSxLQUpBK2hELE9BQUEzZ0QsUUFBQXBCLElBSUFnMEMsVUFBQWgwQyxJQUFBaWEsU0FHQThuQyxPQUFBeFYsWUFDQXdWLE9BQUExYixXQUFBa0csV0FDQWUsU0FBQXlVLE9BQUExYixXQUFBLGFBQUEsQ0FNQSxHQUhBbDlCLE1BQUFxOUIsT0FBQXViLFFBQUFoeUMsTUFHQW8wQyxJQUNBLE9BQUFoN0MsTUFJQWdQLE9BQUFoUixLQUFBZ0MsT0FJQSxPQUFBZ1AsUUFHQTZiLElBQUEsU0FBQWtULEtBQUEvOUIsT0FNQSxJQUxBLElBQUE4dkQsVUFBQWxYLE9BQ0EzZ0QsUUFBQThsQyxLQUFBOWxDLFFBQ0ErVyxPQUFBcXVCLE9BQUEwQixVQUFBLytCLE9BQ0FuSixFQUFBb0IsUUFBQVQsT0FFQVgsT0FDQStoRCxPQUFBM2dELFFBQUFwQixJQUlBZzBDLFVBQ0EsRUFBQXhOLE9BQUE0QixRQUFBNUIsT0FBQXd5QixTQUFBalgsT0FBQXh0QixJQUFBd3RCLFFBQUE1cEMsV0FFQThnRCxXQUFBLEdBVUEsT0FIQUEsWUFDQS94QixLQUFBK00sZUFBQSxHQUVBOTdCLFlBT0FxdUIsT0FBQXArQixLQUFBLENBQUEsUUFBQSxZQUFBLFdBQ0FvK0IsT0FBQXd5QixTQUFBcjFELE1BQUEsQ0FDQXF3QixJQUFBLFNBQUFrVCxLQUFBLzlCLE9BQ0EsR0FBQXlmLE1BQUE1aEIsUUFBQW1DLE9BQ0EsT0FBQSs5QixLQUFBNk0sU0FBQSxFQUFBdk4sT0FBQTRCLFFBQUE1QixPQUFBVSxNQUFBbjNCLE1BQUE1RyxTQUlBdThCLFFBQUFzeEIsVUFDQXh3QixPQUFBd3lCLFNBQUFyMUQsTUFBQTR3QixJQUFBLFNBQUEyUyxNQUNBLE9BQUEsT0FBQUEsS0FBQXFHLGFBQUEsU0FBQSxLQUFBckcsS0FBQS85QixVQVdBdThCLFFBQUF3ekIsUUFBQSxjQUFBem9DLE9BR0EsSUFBQTBvQyxZQUFBLGtDQUNBQyx3QkFBQSxTQUFBeDVELEdBQ0FBLEVBQUF5bUQsbUJBR0E3ZixPQUFBL2pDLE9BQUErakMsT0FBQTZkLE1BQUEsQ0FFQTJDLFFBQUEsU0FBQTNDLE1BQUE5NkMsS0FBQTI5QixLQUFBbXlCLGNBRUEsSUFBQXI1RCxFQUFBd3VDLElBQUFyZ0IsSUFBQW1yQyxXQUFBQyxPQUFBeFUsT0FBQTdJLFFBQUFzZCxZQUNBQyxVQUFBLENBQUF2eUIsTUFBQWxDLFVBQ0E1L0IsS0FBQW1nQyxPQUFBN2tDLEtBQUEyakQsTUFBQSxRQUFBQSxNQUFBai9DLEtBQUFpL0MsTUFDQU8sV0FBQXJmLE9BQUE3a0MsS0FBQTJqRCxNQUFBLGFBQUFBLE1BQUFlLFVBQUEvcEMsTUFBQSxLQUFBLEdBS0EsR0FIQW16QixJQUFBZ3JCLFlBQUFyckMsSUFBQStZLEtBQUFBLE1BQUFsQyxTQUdBLElBQUFrQyxLQUFBdkIsVUFBQSxJQUFBdUIsS0FBQXZCLFdBS0F3ekIsWUFBQTF6RCxLQUFBTCxLQUFBb2hDLE9BQUE2ZCxNQUFBVyxjQUlBLEVBQUE1L0MsS0FBQStLLFFBQUEsT0FJQS9LLE1BREF3L0MsV0FBQXgvQyxLQUFBaVcsTUFBQSxNQUNBalAsUUFDQXc0QyxXQUFBL3NCLFFBRUEwaEMsT0FBQW4wRCxLQUFBK0ssUUFBQSxLQUFBLEdBQUEsS0FBQS9LLE1BR0FpL0MsTUFBQUEsTUFBQTdkLE9BQUFrQixTQUNBMmMsTUFDQSxJQUFBN2QsT0FBQW1nQixNQUFBdmhELEtBQUEsaUJBQUFpL0MsT0FBQUEsUUFHQXFWLFVBQUFMLGFBQUEsRUFBQSxFQUNBaFYsTUFBQWUsVUFBQVIsV0FBQS84QyxLQUFBLEtBQ0F3OEMsTUFBQThCLFdBQUE5QixNQUFBZSxVQUNBLElBQUExYSxPQUFBLFVBQUFrYSxXQUFBLzhDLEtBQUEsaUJBQUEsV0FDQSxLQUdBdzhDLE1BQUFuNEMsWUFBQTNGLEVBQ0E4OUMsTUFBQTljLFNBQ0E4YyxNQUFBOWMsT0FBQUwsTUFJQTM5QixLQUFBLE1BQUFBLEtBQ0EsQ0FBQTg2QyxPQUNBN2QsT0FBQTBCLFVBQUEzK0IsS0FBQSxDQUFBODZDLFFBR0FuSSxRQUFBMVYsT0FBQTZkLE1BQUFuSSxRQUFBOTJDLE9BQUEsR0FDQWkwRCxlQUFBbmQsUUFBQThLLFVBQUEsSUFBQTlLLFFBQUE4SyxRQUFBN3lDLE1BQUEreUIsS0FBQTM5QixPQUFBLENBTUEsSUFBQTh2RCxlQUFBbmQsUUFBQTZLLFdBQUFuaEIsU0FBQXNCLE1BQUEsQ0FNQSxJQUpBb3lCLFdBQUFwZCxRQUFBZ0osY0FBQTkvQyxLQUNBK3pELFlBQUExekQsS0FBQTZ6RCxXQUFBbDBELFFBQ0FvcEMsSUFBQUEsSUFBQW5JLFlBRUFtSSxJQUFBQSxJQUFBQSxJQUFBbkksV0FDQW96QixVQUFBdHlELEtBQUFxbkMsS0FDQXJnQixJQUFBcWdCLElBSUFyZ0IsT0FBQStZLEtBQUErRixlQUFBakksV0FDQXkwQixVQUFBdHlELEtBQUFnbkIsSUFBQW1oQixhQUFBbmhCLElBQUF3ckMsY0FBQWxwQyxRQU1BLElBREF6d0IsRUFBQSxHQUNBd3VDLElBQUFpckIsVUFBQXo1RCxRQUFBcWtELE1BQUEyQix3QkFDQXdULFlBQUFockIsSUFDQTZWLE1BQUFqL0MsS0FBQSxFQUFBcEYsRUFDQXM1RCxXQUNBcGQsUUFBQWlKLFVBQUEvL0MsTUFHQTIvQyxRQUFBL0YsU0FBQXpxQixJQUFBaWEsSUFBQSxXQUFBLElBQUE2VixNQUFBai9DLE9BQ0E0NUMsU0FBQXpxQixJQUFBaWEsSUFBQSxZQUVBdVcsT0FBQTV3QyxNQUFBcTZCLElBQUFqbEMsT0FJQXc3QyxPQUFBd1UsUUFBQS9xQixJQUFBK3FCLFVBQ0F4VSxPQUFBNXdDLE9BQUF1cUMsV0FBQWxRLE9BQ0E2VixNQUFBbjRDLE9BQUE2NEMsT0FBQTV3QyxNQUFBcTZCLElBQUFqbEMsT0FDQSxJQUFBODZDLE1BQUFuNEMsUUFDQW00QyxNQUFBK0Isa0JBOENBLE9BMUNBL0IsTUFBQWovQyxLQUFBQSxLQUdBaTBELGNBQUFoVixNQUFBZ0Qsc0JBRUFuTCxRQUFBa0csV0FDQSxJQUFBbEcsUUFBQWtHLFNBQUFqdUMsTUFBQXNsRCxVQUFBamhELE1BQUFqUCxRQUNBbTFDLFdBQUF4WCxPQUlBcXlCLFFBQUEvcEMsV0FBQTBYLEtBQUE5aEMsU0FBQXdnQyxTQUFBc0IsU0FHQS9ZLElBQUErWSxLQUFBcXlCLFdBR0FyeUIsS0FBQXF5QixRQUFBLE1BSUEveUIsT0FBQTZkLE1BQUFXLFVBQUE1L0MsS0FFQWkvQyxNQUFBMkIsd0JBQ0F3VCxZQUFBanFCLGlCQUFBbnFDLEtBQUFnMEQseUJBR0FseUIsS0FBQTloQyxRQUVBaS9DLE1BQUEyQix3QkFDQXdULFlBQUE5YixvQkFBQXQ0QyxLQUFBZzBELHlCQUdBNXlCLE9BQUE2ZCxNQUFBVyxlQUFBeitDLEVBRUE0bkIsTUFDQStZLEtBQUFxeUIsUUFBQXByQyxNQU1BazJCLE1BQUFuNEMsU0FLQTB0RCxTQUFBLFNBQUF4MEQsS0FBQThoQyxLQUFBbWQsT0FDQSxJQUFBemtELEVBQUE0bUMsT0FBQS9qQyxPQUNBLElBQUErakMsT0FBQW1nQixNQUNBdEMsTUFDQSxDQUNBai9DLEtBQUFBLEtBQ0FzaUQsYUFBQSxJQUlBbGhCLE9BQUE2ZCxNQUFBMkMsUUFBQXBuRCxFQUFBLEtBQUFzbkMsU0FLQVYsT0FBQWppQyxHQUFBOUIsT0FBQSxDQUVBdWtELFFBQUEsU0FBQTVoRCxLQUFBbUUsTUFDQSxPQUFBNUYsS0FBQXlFLEtBQUEsV0FDQW8rQixPQUFBNmQsTUFBQTJDLFFBQUE1aEQsS0FBQW1FLEtBQUE1RixTQUdBazJELGVBQUEsU0FBQXowRCxLQUFBbUUsTUFDQSxJQUFBMjlCLEtBQUF2akMsS0FBQSxHQUNBLEdBQUF1akMsS0FDQSxPQUFBVixPQUFBNmQsTUFBQTJDLFFBQUE1aEQsS0FBQW1FLEtBQUEyOUIsTUFBQSxNQWNBeEIsUUFBQXd6QixTQUNBMXlCLE9BQUFwK0IsS0FBQSxDQUFBcXJDLE1BQUEsVUFBQXdULEtBQUEsWUFBQSxTQUFBMEMsS0FBQTlELEtBR0EsSUFBQXhYLFFBQUEsU0FBQWdXLE9BQ0E3ZCxPQUFBNmQsTUFBQXVWLFNBQUEvVCxJQUFBeEIsTUFBQTljLE9BQUFmLE9BQUE2ZCxNQUFBd0IsSUFBQXhCLFNBR0E3ZCxPQUFBNmQsTUFBQW5JLFFBQUEySixLQUFBLENBQ0FQLE1BQUEsV0FDQSxJQUFBdGYsSUFBQXJpQyxLQUFBc3BDLGVBQUF0cEMsS0FDQW0yRCxTQUFBOWEsU0FBQWpCLE9BQUEvWCxJQUFBNmYsS0FFQWlVLFVBQ0E5ekIsSUFBQXVKLGlCQUFBb2EsS0FBQXRiLFNBQUEsR0FFQTJRLFNBQUFqQixPQUFBL1gsSUFBQTZmLEtBQUFpVSxVQUFBLEdBQUEsSUFFQXJVLFNBQUEsV0FDQSxJQUFBemYsSUFBQXJpQyxLQUFBc3BDLGVBQUF0cEMsS0FDQW0yRCxTQUFBOWEsU0FBQWpCLE9BQUEvWCxJQUFBNmYsS0FBQSxFQUVBaVUsU0FLQTlhLFNBQUFqQixPQUFBL1gsSUFBQTZmLElBQUFpVSxXQUpBOXpCLElBQUEwWCxvQkFBQWlNLEtBQUF0YixTQUFBLEdBQ0EyUSxTQUFBbkUsT0FBQTdVLElBQUE2ZixVQVNBLElBQUE1eUMsU0FBQXdkLE9BQUF4ZCxTQUVBOG1ELE1BQUFwd0IsS0FBQThkLE1BRUF1UyxPQUFBLEtBS0F4ekIsT0FBQXl6QixTQUFBLFNBQUExd0QsTUFDQSxJQUFBb3BDLElBQ0EsSUFBQXBwQyxNQUFBLGlCQUFBQSxLQUNBLE9BQUEsS0FLQSxJQUNBb3BDLEtBQUEsSUFBQWxpQixPQUFBeXBDLFdBQUFDLGdCQUFBNXdELEtBQUEsWUFDQSxNQUFBM0osR0FDQSt5QyxTQUFBcHNDLEVBTUEsT0FIQW9zQyxNQUFBQSxJQUFBeEYscUJBQUEsZUFBQXhzQyxRQUNBNmxDLE9BQUE3cUIsTUFBQSxnQkFBQXBTLE1BRUFvcEMsS0FJQSxJQUNBeW5CLFNBQUEsUUFDQUMsTUFBQSxTQUNBQyxnQkFBQSx3Q0FDQUMsYUFBQSxxQ0FFQSxTQUFBQyxZQUFBbGdELE9BQUF2UixJQUFBMHhELFlBQUE3eUQsS0FDQSxJQUFBdEQsS0FFQSxHQUFBc2tCLE1BQUE1aEIsUUFBQStCLEtBR0F5OUIsT0FBQXArQixLQUFBVyxJQUFBLFNBQUEvSSxFQUFBdTVDLEdBQ0FraEIsYUFBQUwsU0FBQTMwRCxLQUFBNlUsUUFHQTFTLElBQUEwUyxPQUFBaS9CLEdBS0FpaEIsWUFDQWxnRCxPQUFBLEtBQUEsaUJBQUFpL0IsR0FBQSxNQUFBQSxFQUFBdjVDLEVBQUEsSUFBQSxJQUNBdTVDLEVBQ0FraEIsWUFDQTd5RCxZQUtBLEdBQUE2eUQsYUFBQSxXQUFBbDBCLE9BQUF4OUIsS0FVQW5CLElBQUEwUyxPQUFBdlIsVUFQQSxJQUFBekUsUUFBQXlFLElBQ0F5eEQsWUFBQWxnRCxPQUFBLElBQUFoVyxLQUFBLElBQUF5RSxJQUFBekUsTUFBQW0yRCxZQUFBN3lELEtBWUE0K0IsT0FBQXQyQixNQUFBLFNBQUE3UCxFQUFBbzZELGFBQ0EsSUFBQW5nRCxPQUNBK2YsRUFBQSxHQUNBenlCLElBQUEsU0FBQXFCLElBQUF5eEQsaUJBR0EsSUFBQXZ4RCxNQUFBcW1CLFdBQUFrckMsaUJBQ0FBLGtCQUNBQSxnQkFFQXJnQyxFQUFBQSxFQUFBMTVCLFFBQUFnNkQsbUJBQUExeEQsS0FBQSxJQUNBMHhELG1CQUFBLE1BQUF4eEQsTUFBQSxHQUFBQSxRQUlBLEdBQUF5ZixNQUFBNWhCLFFBQUEzRyxJQUFBQSxFQUFBd21DLFNBQUFMLE9BQUFpQixjQUFBcG5DLEdBR0FtbUMsT0FBQXArQixLQUFBL0gsRUFBQSxXQUNBdUgsSUFBQWpFLEtBQUFXLEtBQUFYLEtBQUF3RixjQU9BLElBQUFtUixVQUFBamEsRUFDQW02RCxZQUFBbGdELE9BQUFqYSxFQUFBaWEsUUFBQW1nRCxZQUFBN3lELEtBS0EsT0FBQXl5QixFQUFBeHlCLEtBQUEsTUFHQTIrQixPQUFBamlDLEdBQUE5QixPQUFBLENBQ0FtNEQsVUFBQSxXQUNBLE9BQUFwMEIsT0FBQXQyQixNQUFBdk0sS0FBQWszRCxtQkFFQUEsZUFBQSxXQUNBLE9BQUFsM0QsS0FBQW1SLElBQUEsV0FHQSxJQUFBbThCLFNBQUF6SyxPQUFBc1ksS0FBQW43QyxLQUFBLFlBQ0EsT0FBQXN0QyxTQUFBekssT0FBQTBCLFVBQUErSSxVQUFBdHRDLE9BRUFrc0MsT0FBQSxXQUNBLElBQUF6cUMsS0FBQXpCLEtBQUF5QixLQUdBLE9BQUF6QixLQUFBVyxPQUFBa2lDLE9BQUE3aUMsTUFBQXEwQyxHQUFBLGNBQ0F1aUIsYUFBQTkwRCxLQUFBOUIsS0FBQTJwQyxZQUFBZ3RCLGdCQUFBNzBELEtBQUFMLFFBQ0F6QixLQUFBb3dDLFVBQUE0TixlQUFBbDhDLEtBQUFMLFNBRUEwUCxJQUFBLFNBQUE5VSxFQUFBa25DLE1BQ0EsSUFBQW4zQixJQUFBeTJCLE9BQUE3aUMsTUFBQW9NLE1BRUEsT0FBQSxNQUFBQSxJQUNBLEtBR0E2WSxNQUFBNWhCLFFBQUErSSxLQUNBeTJCLE9BQUExeEIsSUFBQS9FLElBQUEsU0FBQUEsS0FDQSxNQUFBLENBQUF6TCxLQUFBNGlDLEtBQUE1aUMsS0FBQTZFLE1BQUE0RyxJQUFBbEgsUUFBQXd4RCxNQUFBLFdBSUEsQ0FBQS8xRCxLQUFBNGlDLEtBQUE1aUMsS0FBQTZFLE1BQUE0RyxJQUFBbEgsUUFBQXd4RCxNQUFBLFdBQ0E5bEMsU0FLQSxJQUNBdW1DLElBQUEsT0FDQUMsTUFBQSxPQUNBQyxXQUFBLGdCQUNBQyxTQUFBLDZCQUlBQyxXQUFBLGlCQUNBQyxVQUFBLFFBV0FySCxXQUFBLEdBT0FzSCxXQUFBLEdBR0FDLFNBQUEsS0FBQWxtRCxPQUFBLEtBR0FtbUQsYUFBQXQyQixTQUFBa0IsY0FBQSxLQUlBLFNBQUFxMUIsNEJBQUFDLFdBR0EsT0FBQSxTQUFBQyxtQkFBQXZnQixNQUVBLGlCQUFBdWdCLHFCQUNBdmdCLEtBQUF1Z0IsbUJBQ0FBLG1CQUFBLEtBR0EsSUFBQUMsU0FDQTE3RCxFQUFBLEVBQ0EyN0QsVUFBQUYsbUJBQUF4ckMsY0FBQXRILE1BQUEwd0IsZ0JBQUEsR0FFQSxHQUFBN3BCLFdBQUEwckIsTUFHQSxLQUFBd2dCLFNBQUFDLFVBQUEzN0QsTUFHQSxNQUFBMDdELFNBQUEsSUFDQUEsU0FBQUEsU0FBQXB4RCxNQUFBLElBQUEsS0FDQWt4RCxVQUFBRSxVQUFBRixVQUFBRSxXQUFBLElBQUF6ekQsUUFBQWl6QyxRQUlBc2dCLFVBQUFFLFVBQUFGLFVBQUFFLFdBQUEsSUFBQXYwRCxLQUFBK3pDLE9BUUEsU0FBQTBnQiw4QkFBQUosVUFBQXA2RCxRQUFBaXpELGdCQUFBd0gsT0FFQSxJQUFBQyxVQUFBLEdBQ0FDLGlCQUFBUCxZQUFBSixXQUVBLFNBQUFZLFFBQUFOLFVBQ0EsSUFBQTFuQixTQWNBLE9BYkE4bkIsVUFBQUosV0FBQSxFQUNBbDFCLE9BQUFwK0IsS0FBQW96RCxVQUFBRSxXQUFBLEdBQUEsU0FBQTV2QixFQUFBbXdCLG9CQUNBLElBQUFDLG9CQUFBRCxtQkFBQTc2RCxRQUFBaXpELGdCQUFBd0gsT0FDQSxNQUFBLGlCQUFBSyxxQkFDQUgsa0JBQUFELFVBQUFJLHFCQUtBSCxtQkFDQS9uQixTQUFBa29CLDBCQURBLEdBSEE5NkQsUUFBQXU2RCxVQUFBMXpELFFBQUFpMEQscUJBQ0FGLFFBQUFFLHNCQUNBLEtBS0Fsb0IsU0FHQSxPQUFBZ29CLFFBQUE1NkQsUUFBQXU2RCxVQUFBLE1BQUFHLFVBQUEsTUFBQUUsUUFBQSxLQU1BLFNBQUFHLFdBQUE1MEIsT0FBQTUvQixLQUNBLElBQUFzQixJQUFBdStCLEtBQ0E0MEIsWUFBQTUxQixPQUFBNjFCLGFBQUFELGFBQUEsR0FFQSxJQUFBbnpELE9BQUF0QixTQUNBcEIsSUFBQW9CLElBQUFzQixRQUNBbXpELFlBQUFuekQsS0FBQXMrQixPQUFBQyxPQUFBQSxLQUFBLEtBQUF2K0IsS0FBQXRCLElBQUFzQixNQU9BLE9BSkF1K0IsTUFDQWhCLE9BQUEvakMsUUFBQSxFQUFBOGtDLE9BQUFDLE1BR0FELE9BL0VBK3pCLGFBQUExbkIsS0FBQTNnQyxTQUFBMmdDLEtBZ1BBcE4sT0FBQS9qQyxPQUFBLENBR0E2NUQsT0FBQSxFQUdBQyxhQUFBLEdBQ0FDLEtBQUEsR0FFQUgsYUFBQSxDQUNBdmhDLElBQUE3bkIsU0FBQTJnQyxLQUNBeHVDLEtBQUEsTUFDQXEzRCxRQXZSQSw0REF1UkFoM0QsS0FBQXdOLFNBQUF5cEQsVUFDQWxzQyxRQUFBLEVBQ0Ftc0MsYUFBQSxFQUNBQyxPQUFBLEVBQ0FDLFlBQUEsbURBY0FDLFFBQUEsQ0FDQWxJLElBQUF5RyxTQUNBM3lDLEtBQUEsYUFDQXFpQyxLQUFBLFlBQ0FwWSxJQUFBLDRCQUNBb3FCLEtBQUEscUNBR0F6ckQsU0FBQSxDQUNBcWhDLElBQUEsVUFDQW9ZLEtBQUEsU0FDQWdTLEtBQUEsWUFHQUMsZUFBQSxDQUNBcnFCLElBQUEsY0FDQWpxQixLQUFBLGVBQ0FxMEMsS0FBQSxnQkFLQUUsV0FBQSxDQUdBQyxTQUFBbmpDLE9BR0FvakMsYUFBQSxFQUdBQyxZQUFBN3FELEtBQUF4USxNQUdBczdELFdBQUE3MkIsT0FBQXl6QixVQU9BbUMsWUFBQSxDQUNBdGhDLEtBQUEsRUFDQS93QixTQUFBLElBT0F1ekQsVUFBQSxTQUFBLzFCLE9BQUFnMkIsVUFDQSxPQUFBQSxTQUdBcEIsV0FBQUEsV0FBQTUwQixPQUFBZixPQUFBNjFCLGNBQUFrQixVQUdBcEIsV0FBQTMxQixPQUFBNjFCLGFBQUE5MEIsU0FHQWkyQixjQUFBakMsNEJBQUF6SCxZQUNBMkosY0FBQWxDLDRCQUFBSCxZQUdBc0MsS0FBQSxTQUFBNWlDLElBQUExNUIsU0FHQSxpQkFBQTA1QixNQUNBMTVCLFFBQUEwNUIsSUFDQUEsU0FBQXYwQixHQUlBbkYsUUFBQUEsU0FBQSxHQUVBLElBQUF1OEQsVUFHQUMsU0FHQUMsc0JBQ0FDLGdCQUdBQyxhQUdBQyxVQUdBdmdCLFVBR0F3Z0IsWUFHQWorRCxFQUdBaytELFNBR0E3akMsRUFBQW1NLE9BQUE4MkIsVUFBQSxHQUFBbDhELFNBR0ErOEQsZ0JBQUE5akMsRUFBQXR3QixTQUFBc3dCLEVBR0ErakMsbUJBQUEvakMsRUFBQXR3QixVQUNBbzBELGdCQUFBeDRCLFVBQUF3NEIsZ0JBQUF0M0IsUUFDQUwsT0FBQTIzQixpQkFDQTMzQixPQUFBNmQsTUFHQWhKLFNBQUE3VSxPQUFBeVUsV0FDQW9qQixpQkFBQTczQixPQUFBeVQsVUFBQSxlQUdBcWtCLFdBQUFqa0MsRUFBQWlrQyxZQUFBLEdBR0FDLGVBQUEsR0FDQUMsb0JBQUEsR0FHQUMsU0FBQSxXQUdBNUMsTUFBQSxDQUNBaGUsV0FBQSxFQUdBNmdCLGtCQUFBLFNBQUF6MUQsS0FDQSxJQUFBMGYsTUFDQSxHQUFBODBCLFVBQUEsQ0FDQSxJQUFBcWdCLGdCQUVBLElBREFBLGdCQUFBLEdBQ0FuMUMsTUFBQXN5QyxTQUFBdnRDLEtBQUFtd0Msd0JBQ0FDLGdCQUFBbjFDLE1BQUEsR0FBQXNILGVBQUF0SCxNQUFBLEdBR0FBLE1BQUFtMUMsZ0JBQUE3MEQsSUFBQWduQixlQUVBLE9BQUEsTUFBQXRILE1BQUEsS0FBQUEsT0FJQWcyQyxzQkFBQSxXQUNBLE9BQUFsaEIsVUFBQW9nQixzQkFBQSxNQUlBZSxpQkFBQSxTQUFBdDZELEtBQUE2RSxPQU1BLE9BTEEsTUFBQXMwQyxZQUNBbjVDLEtBQUFrNkQsb0JBQUFsNkQsS0FBQTJyQixlQUNBdXVDLG9CQUFBbDZELEtBQUEyckIsZ0JBQUEzckIsS0FDQWk2RCxlQUFBajZELE1BQUE2RSxPQUVBeEYsTUFJQWs3RCxpQkFBQSxTQUFBejVELE1BSUEsT0FIQSxNQUFBcTRDLFlBQ0FwakIsRUFBQXlrQyxTQUFBMTVELE1BRUF6QixNQUlBMjZELFdBQUEsU0FBQXhwRCxLQUNBLElBQUF2VSxLQUNBLEdBQUF1VSxJQUNBLEdBQUEyb0MsVUFHQW9lLE1BQUF6Z0IsT0FBQXRtQyxJQUFBK21ELE1BQUFrRCxjQUlBLElBQUF4K0QsUUFBQXVVLElBQ0F3cEQsV0FBQS85RCxNQUFBLENBQUErOUQsV0FBQS85RCxNQUFBdVUsSUFBQXZVLE9BSUEsT0FBQW9ELE1BSUFxN0QsTUFBQSxTQUFBQyxZQUNBLElBQUFDLFVBQUFELFlBQUFSLFNBS0EsT0FKQWQsV0FDQUEsVUFBQXFCLE1BQUFFLFdBRUFqMkMsS0FBQSxFQUFBaTJDLFdBQ0F2N0QsT0FvQkEsR0FmQTAzQyxTQUFBdkIsUUFBQStoQixPQUtBeGhDLEVBQUFTLE1BQUFBLEtBQUFULEVBQUFTLEtBQUE3bkIsU0FBQTJnQyxNQUFBLElBQ0EvcUMsUUFBQXN5RCxVQUFBbG9ELFNBQUF5cEQsU0FBQSxNQUdBcmlDLEVBQUFqMUIsS0FBQWhFLFFBQUFndkIsUUFBQWh2QixRQUFBZ0UsTUFBQWkxQixFQUFBakssUUFBQWlLLEVBQUFqMUIsS0FHQWkxQixFQUFBc2hDLFdBQUF0aEMsRUFBQXFoQyxVQUFBLEtBQUF6ckMsY0FBQXRILE1BQUEwd0IsZ0JBQUEsQ0FBQSxJQUdBLE1BQUFoZixFQUFBOGtDLFlBQUEsQ0FDQW5CLFVBQUFoNUIsU0FBQWtCLGNBQUEsS0FLQSxJQUNBODNCLFVBQUFwcUIsS0FBQXZaLEVBQUFTLElBSUFrakMsVUFBQXBxQixLQUFBb3FCLFVBQUFwcUIsS0FDQXZaLEVBQUE4a0MsWUFBQTdELGFBQUFvQixTQUFBLEtBQUFwQixhQUFBNzNCLE1BQ0F1NkIsVUFBQXRCLFNBQUEsS0FBQXNCLFVBQUF2NkIsS0FDQSxNQUFBN2pDLEdBSUF5NkIsRUFBQThrQyxhQUFBLEdBYUEsR0FSQTlrQyxFQUFBOXdCLE1BQUE4d0IsRUFBQXNpQyxhQUFBLGlCQUFBdGlDLEVBQUE5d0IsT0FDQTh3QixFQUFBOXdCLEtBQUFpOUIsT0FBQXQyQixNQUFBbXFCLEVBQUE5d0IsS0FBQTh3QixFQUFBb2dDLGNBSUFtQiw4QkFBQTlILFdBQUF6NUIsRUFBQWo1QixRQUFBeTZELE9BR0FwZSxVQUNBLE9BQUFvZSxNQTZFQSxJQUFBNzdELEtBeEVBaStELFlBQUF6M0IsT0FBQTZkLE9BQUFocUIsRUFBQTdKLFNBR0EsR0FBQWdXLE9BQUE4MUIsVUFDQTkxQixPQUFBNmQsTUFBQTJDLFFBQUEsYUFJQTNzQixFQUFBajFCLEtBQUFpMUIsRUFBQWoxQixLQUFBbzVDLGNBR0Fua0IsRUFBQStrQyxZQUFBbEUsV0FBQXoxRCxLQUFBNDBCLEVBQUFqMUIsTUFLQXc0RCxTQUFBdmpDLEVBQUFTLElBQUFqeUIsUUFBQWt5RCxNQUFBLElBR0ExZ0MsRUFBQStrQyxXQXVCQS9rQyxFQUFBOXdCLE1BQUE4d0IsRUFBQXNpQyxhQUNBLEtBQUF0aUMsRUFBQXdpQyxhQUFBLElBQUExc0QsUUFBQSx1Q0FDQWtxQixFQUFBOXdCLEtBQUE4d0IsRUFBQTl3QixLQUFBVixRQUFBaXlELElBQUEsT0F0QkFvRCxTQUFBN2pDLEVBQUFTLElBQUF4d0IsTUFBQXN6RCxTQUFBajlELFFBR0EwNUIsRUFBQTl3QixPQUFBOHdCLEVBQUFzaUMsYUFBQSxpQkFBQXRpQyxFQUFBOXdCLFFBQ0FxMEQsV0FBQTVELE9BQUF2MEQsS0FBQW00RCxVQUFBLElBQUEsS0FBQXZqQyxFQUFBOXdCLFlBR0E4d0IsRUFBQTl3QixPQUlBLElBQUE4d0IsRUFBQXlULFFBQ0E4dkIsU0FBQUEsU0FBQS8wRCxRQUFBbXlELFdBQUEsTUFDQWtELFVBQUFsRSxPQUFBdjBELEtBQUFtNEQsVUFBQSxJQUFBLEtBQUEsS0FBQTdELFFBQUFtRSxVQUlBN2pDLEVBQUFTLElBQUE4aUMsU0FBQU0sVUFTQTdqQyxFQUFBZ2xDLGFBQ0E3NEIsT0FBQSsxQixhQUFBcUIsV0FDQS9CLE1BQUErQyxpQkFBQSxvQkFBQXA0QixPQUFBKzFCLGFBQUFxQixXQUVBcDNCLE9BQUFnMkIsS0FBQW9CLFdBQ0EvQixNQUFBK0MsaUJBQUEsZ0JBQUFwNEIsT0FBQWcyQixLQUFBb0IsYUFLQXZqQyxFQUFBOXdCLE1BQUE4d0IsRUFBQStrQyxhQUFBLElBQUEva0MsRUFBQXdpQyxhQUFBejdELFFBQUF5N0QsY0FDQWhCLE1BQUErQyxpQkFBQSxlQUFBdmtDLEVBQUF3aUMsYUFJQWhCLE1BQUErQyxpQkFDQSxTQUNBdmtDLEVBQUFzaEMsVUFBQSxJQUFBdGhDLEVBQUF5aUMsUUFBQXppQyxFQUFBc2hDLFVBQUEsSUFDQXRoQyxFQUFBeWlDLFFBQUF6aUMsRUFBQXNoQyxVQUFBLEtBQ0EsTUFBQXRoQyxFQUFBc2hDLFVBQUEsR0FBQSxLQUFBTixTQUFBLFdBQUEsSUFDQWhoQyxFQUFBeWlDLFFBQUEsTUFJQXppQyxFQUFBaWxDLFFBQ0F6RCxNQUFBK0MsaUJBQUE1K0QsRUFBQXE2QixFQUFBaWxDLFFBQUF0L0QsSUFJQSxHQUFBcTZCLEVBQUFrbEMsY0FDQSxJQUFBbGxDLEVBQUFrbEMsV0FBQTcrRCxLQUFBeTlELGdCQUFBdEMsTUFBQXhoQyxJQUFBb2pCLFdBR0EsT0FBQW9lLE1BQUFtRCxRQWVBLEdBWEFQLFNBQUEsUUFHQUosaUJBQUF6MkQsSUFBQXl5QixFQUFBbzZCLFVBQ0FvSCxNQUFBNXlDLEtBQUFvUixFQUFBbWxDLFNBQ0EzRCxNQUFBOWhCLEtBQUExZixFQUFBMWUsT0FHQWdpRCxVQUFBL0IsOEJBQUFSLFdBQUEvZ0MsRUFBQWo1QixRQUFBeTZELE9BS0EsQ0FTQSxHQVJBQSxNQUFBaGUsV0FBQSxFQUdBb2dCLGFBQ0FHLG1CQUFBcFgsUUFBQSxXQUFBLENBQUE2VSxNQUFBeGhDLElBSUFvakIsVUFDQSxPQUFBb2UsTUFJQXhoQyxFQUFBdWlDLE9BQUEsRUFBQXZpQyxFQUFBeThCLFVBQ0FpSCxhQUFBdHRDLE9BQUFtc0IsV0FBQSxXQUNBaWYsTUFBQW1ELE1BQUEsWUFDQTNrQyxFQUFBeThCLFVBR0EsSUFDQXJaLFdBQUEsRUFDQWtnQixVQUFBOEIsS0FBQWxCLGVBQUF0MUMsTUFDQSxNQUFBcnBCLEdBR0EsR0FBQTY5QyxVQUNBLE1BQUE3OUMsRUFJQXFwQixNQUFBLEVBQUFycEIsU0FoQ0FxcEIsTUFBQSxFQUFBLGdCQXFDQSxTQUFBQSxLQUFBODFDLE9BQUFXLGlCQUFBQyxVQUFBTCxTQUNBLElBQUFNLFVBQUFKLFFBQUE3akQsTUFBQWtrRCxTQUFBQyxTQUNBYixXQUFBUyxpQkFHQWppQixZQUlBQSxXQUFBLEVBR0FzZ0IsY0FDQXR0QyxPQUFBc21DLGFBQUFnSCxjQUtBSixlQUFBcDNELEVBR0FzM0Qsc0JBQUF5QixTQUFBLEdBR0F6RCxNQUFBaGUsV0FBQSxFQUFBa2hCLE9BQUEsRUFBQSxFQUdBYSxVQUFBLEtBQUFiLFFBQUFBLE9BQUEsS0FBQSxNQUFBQSxPQUdBWSxZQUNBRSxTQTFsQkEsU0FBQXhsQyxFQUFBd2hDLE1BQUE4RCxXQU9BLElBTEEsSUFBQUksR0FBQTM2RCxLQUFBNDZELGNBQUFDLGNBQ0EzdUQsU0FBQStvQixFQUFBL29CLFNBQ0FxcUQsVUFBQXRoQyxFQUFBc2hDLFVBR0EsTUFBQUEsVUFBQSxJQUNBQSxVQUFBdnZELGFBQ0E3RixJQUFBdzVELEtBQ0FBLEdBQUExbEMsRUFBQXlrQyxVQUFBakQsTUFBQTZDLGtCQUFBLGlCQUtBLEdBQUFxQixHQUNBLElBQUEzNkQsUUFBQWtNLFNBQ0EsR0FBQUEsU0FBQWxNLE9BQUFrTSxTQUFBbE0sTUFBQUssS0FBQXM2RCxJQUFBLENBQ0FwRSxVQUFBMXpELFFBQUE3QyxNQUNBLE1BTUEsR0FBQXUyRCxVQUFBLEtBQUFnRSxVQUNBSyxjQUFBckUsVUFBQSxPQUNBLENBR0EsSUFBQXYyRCxRQUFBdTZELFVBQUEsQ0FDQSxJQUFBaEUsVUFBQSxJQUFBdGhDLEVBQUE0aUMsV0FBQTczRCxLQUFBLElBQUF1MkQsVUFBQSxJQUFBLENBQ0FxRSxjQUFBNTZELEtBQ0EsTUFFQTY2RCxnQkFDQUEsY0FBQTc2RCxNQUtBNDZELGNBQUFBLGVBQUFDLGNBTUEsR0FBQUQsY0FJQSxPQUhBQSxnQkFBQXJFLFVBQUEsSUFDQUEsVUFBQTF6RCxRQUFBKzNELGVBRUFMLFVBQUFLLGVBdWlCQUUsQ0FBQTdsQyxFQUFBd2hDLE1BQUE4RCxZQUlBRSxTQXBpQkEsU0FBQXhsQyxFQUFBd2xDLFNBQUFoRSxNQUFBK0QsV0FDQSxJQUFBTyxNQUFBNXBELFFBQUE2cEQsS0FBQWp5QyxJQUFBekIsS0FDQXV3QyxXQUFBLEdBR0F0QixVQUFBdGhDLEVBQUFzaEMsVUFBQXJ4RCxRQUdBLEdBQUFxeEQsVUFBQSxHQUNBLElBQUF5RSxRQUFBL2xDLEVBQUE0aUMsV0FDQUEsV0FBQW1ELEtBQUFud0MsZUFBQW9LLEVBQUE0aUMsV0FBQW1ELE1BT0EsSUFIQTdwRCxRQUFBb2xELFVBQUF2dkQsUUFHQW1LLFNBY0EsR0FaQThqQixFQUFBMmlDLGVBQUF6bUQsV0FDQXNsRCxNQUFBeGhDLEVBQUEyaUMsZUFBQXptRCxVQUFBc3BELFdBSUFuekMsTUFBQWt6QyxXQUFBdmxDLEVBQUFnbUMsYUFDQVIsU0FBQXhsQyxFQUFBZ21DLFdBQUFSLFNBQUF4bEMsRUFBQXFoQyxXQUdBaHZDLEtBQUFuVyxRQUNBQSxRQUFBb2xELFVBQUF2dkQsUUFLQSxHQUFBLE1BQUFtSyxRQUVBQSxRQUFBbVcsVUFHQSxHQUFBLE1BQUFBLE1BQUFBLE9BQUFuVyxRQUFBLENBTUEsS0FIQTZwRCxLQUFBbkQsV0FBQXZ3QyxLQUFBLElBQUFuVyxVQUFBMG1ELFdBQUEsS0FBQTFtRCxVQUlBLElBQUE0cEQsU0FBQWxELFdBSUEsSUFEQTl1QyxJQUFBZ3lDLE1BQUE5a0QsTUFBQSxNQUNBLEtBQUE5RSxVQUdBNnBELEtBQUFuRCxXQUFBdndDLEtBQUEsSUFBQXlCLElBQUEsS0FDQTh1QyxXQUFBLEtBQUE5dUMsSUFBQSxLQUNBLEVBR0EsSUFBQWl5QyxLQUNBQSxLQUFBbkQsV0FBQWtELFFBR0EsSUFBQWxELFdBQUFrRCxTQUNBNXBELFFBQUE0WCxJQUFBLEdBQ0F3dEMsVUFBQTF6RCxRQUFBa21CLElBQUEsS0FFQSxNQU9BLElBQUEsSUFBQWl5QyxLQUdBLEdBQUFBLE1BQUEvbEMsRUFBQWltQyxPQUNBVCxTQUFBTyxLQUFBUCxlQUVBLElBQ0FBLFNBQUFPLEtBQUFQLFVBQ0EsTUFBQWpnRSxHQUNBLE1BQUEsQ0FDQXNvQixNQUFBLGNBQ0F2TSxNQUFBeWtELEtBQUF4Z0UsRUFBQSxzQkFBQThzQixLQUFBLE9BQUFuVyxVQVNBLE1BQUEsQ0FBQTJSLE1BQUEsVUFBQTNlLEtBQUFzMkQsVUF1Y0FVLENBQUFsbUMsRUFBQXdsQyxTQUFBaEUsTUFBQStELFdBR0FBLFdBR0F2bEMsRUFBQWdsQyxjQUNBUyxTQUFBakUsTUFBQTZDLGtCQUFBLG9CQUVBbDRCLE9BQUErMUIsYUFBQXFCLFVBQUFrQyxXQUVBQSxTQUFBakUsTUFBQTZDLGtCQUFBLFdBRUFsNEIsT0FBQWcyQixLQUFBb0IsVUFBQWtDLFdBS0EsTUFBQWYsUUFBQSxTQUFBMWtDLEVBQUFqMUIsS0FDQTY1RCxXQUFBLFlBR0EsTUFBQUYsT0FDQUUsV0FBQSxlQUlBQSxXQUFBWSxTQUFBMzNDLE1BQ0FzM0MsUUFBQUssU0FBQXQyRCxLQUVBcTJELFlBREFqa0QsTUFBQWtrRCxTQUFBbGtELFVBTUFBLE1BQUFzakQsWUFDQUYsUUFBQUUsYUFDQUEsV0FBQSxRQUNBRixPQUFBLElBQ0FBLE9BQUEsS0FNQWxELE1BQUFrRCxPQUFBQSxPQUNBbEQsTUFBQW9ELFlBQUFTLGtCQUFBVCxZQUFBLEdBR0FXLFVBQ0F2a0IsU0FBQWlCLFlBQUE2aEIsZ0JBQUEsQ0FBQXFCLFFBQUFQLFdBQUFwRCxRQUVBeGdCLFNBQUFxQixXQUFBeWhCLGdCQUFBLENBQUF0QyxNQUFBb0QsV0FBQXRqRCxRQUlBa2dELE1BQUF5QyxXQUFBQSxZQUNBQSxnQkFBQS8zRCxFQUVBMDNELGFBQ0FHLG1CQUFBcFgsUUFBQTRZLFVBQUEsY0FBQSxZQUNBLENBQUEvRCxNQUFBeGhDLEVBQUF1bEMsVUFBQUosUUFBQTdqRCxRQUlBMGlELGlCQUFBcmpCLFNBQUFtakIsZ0JBQUEsQ0FBQXRDLE1BQUFvRCxhQUVBaEIsY0FDQUcsbUJBQUFwWCxRQUFBLGVBQUEsQ0FBQTZVLE1BQUF4aEMsTUFHQW1NLE9BQUE4MUIsUUFDQTkxQixPQUFBNmQsTUFBQTJDLFFBQUEsY0FLQSxPQUFBNlUsT0FHQTJFLFFBQUEsU0FBQTFsQyxJQUFBdnhCLEtBQUE4USxVQUNBLE9BQUFtc0IsT0FBQWpTLElBQUF1RyxJQUFBdnhCLEtBQUE4USxTQUFBLFNBR0FvbUQsVUFBQSxTQUFBM2xDLElBQUF6Z0IsVUFDQSxPQUFBbXNCLE9BQUFqUyxJQUFBdUcsU0FBQXYwQixFQUFBOFQsU0FBQSxhQUlBbXNCLE9BQUFwK0IsS0FBQSxDQUFBLE1BQUEsUUFBQSxTQUFBcEksRUFBQW93QixRQUNBb1csT0FBQXBXLFFBQUEsU0FBQTBLLElBQUF2eEIsS0FBQThRLFNBQUFqVixNQVVBLE9BUEFvcUIsV0FBQWptQixRQUNBbkUsS0FBQUEsTUFBQWlWLFNBQ0FBLFNBQUE5USxLQUNBQSxVQUFBaEQsR0FJQWlnQyxPQUFBazNCLEtBQUFsM0IsT0FBQS9qQyxPQUFBLENBQ0FxNEIsSUFBQUEsSUFDQTExQixLQUFBZ3JCLE9BQ0FzckMsU0FBQXQyRCxLQUNBbUUsS0FBQUEsS0FDQWkyRCxRQUFBbmxELFVBQ0Ftc0IsT0FBQWlCLGNBQUEzTSxNQUFBQSxTQUtBMEwsT0FBQXdrQixTQUFBLFNBQUFsd0IsS0FDQSxPQUFBMEwsT0FBQWszQixLQUFBLENBQ0E1aUMsSUFBQUEsSUFHQTExQixLQUFBLE1BQ0FzMkQsU0FBQSxTQUNBNXRCLE9BQUEsRUFDQTh1QixPQUFBLEVBQ0Fwc0MsUUFBQSxFQUNBOHZDLFFBQUEsS0FLQTk1QixPQUFBamlDLEdBQUE5QixPQUFBLENBQ0FpK0QsUUFBQSxTQUFBM1YsTUFDQSxJQUFBM2pELEtBeUJBLE9BdkJBekQsS0FBQSxLQUNBNnJCLFdBQUF1N0IsUUFDQUEsS0FBQUEsS0FBQXJxRCxLQUFBaUQsS0FBQSxLQUlBeUQsS0FBQW8vQixPQUFBdWtCLEtBQUFwbkQsS0FBQSxHQUFBc3BDLGVBQUE5RixHQUFBLEdBQUFHLE9BQUEsR0FFQTNqQyxLQUFBLEdBQUEwaUMsWUFDQWovQixLQUFBcWtELGFBQUE5bkQsS0FBQSxJQUdBeUQsS0FBQTBOLElBQUEsV0FHQSxJQUZBLElBQUFveUIsS0FBQXZqQyxLQUVBdWpDLEtBQUF5NUIsbUJBQ0F6NUIsS0FBQUEsS0FBQXk1QixrQkFHQSxPQUFBejVCLE9BQ0Fyd0IsT0FBQWxULE9BR0FBLE1BR0FpOUQsVUFBQSxTQUFBN1YsTUFDQSxPQUFBdjdCLFdBQUF1N0IsTUFDQXBuRCxLQUFBeUUsS0FBQSxTQUFBcEksR0FDQXdtQyxPQUFBN2lDLE1BQUFpOUQsVUFBQTdWLEtBQUFycUQsS0FBQWlELEtBQUEzRCxNQUlBMkQsS0FBQXlFLEtBQUEsV0FDQSxJQUFBbWYsS0FBQWlmLE9BQUE3aUMsTUFDQTJOLFNBQUFpVyxLQUFBalcsV0FFQUEsU0FBQTNRLE9BQ0EyUSxTQUFBb3ZELFFBQUEzVixNQUdBeGpDLEtBQUExUSxPQUFBazBDLFNBS0EzakQsS0FBQSxTQUFBMmpELE1BQ0EsSUFBQThWLGVBQUFyeEMsV0FBQXU3QixNQUVBLE9BQUFwbkQsS0FBQXlFLEtBQUEsU0FBQXBJLEdBQ0F3bUMsT0FBQTdpQyxNQUFBKzhELFFBQUFHLGVBQUE5VixLQUFBcnFELEtBQUFpRCxLQUFBM0QsR0FBQStxRCxTQUlBK1YsT0FBQSxTQUFBcjZCLFVBSUEsT0FIQTlpQyxLQUFBME8sT0FBQW8wQixVQUFBME0sSUFBQSxRQUFBL3FDLEtBQUEsV0FDQW8rQixPQUFBN2lDLE1BQUFpb0QsWUFBQWpvRCxLQUFBOG9DLGNBRUE5b0MsUUFLQTZpQyxPQUFBcnNCLEtBQUFxd0IsUUFBQXdvQixPQUFBLFNBQUE5ckIsTUFDQSxPQUFBVixPQUFBcnNCLEtBQUFxd0IsUUFBQXUyQixRQUFBNzVCLE9BRUFWLE9BQUFyc0IsS0FBQXF3QixRQUFBdTJCLFFBQUEsU0FBQTc1QixNQUNBLFNBQUFBLEtBQUE0bUIsYUFBQTVtQixLQUFBODVCLGNBQUE5NUIsS0FBQW1xQixpQkFBQTF3RCxTQU1BNmxDLE9BQUE2MUIsYUFBQTRFLElBQUEsV0FDQSxJQUNBLE9BQUEsSUFBQXh3QyxPQUFBeXdDLGVBQ0EsTUFBQXRoRSxNQUdBLElBQUF1aEUsaUJBQUEsQ0FHQUMsRUFBQSxJQUlBQyxLQUFBLEtBRUFDLGFBQUE5NkIsT0FBQTYxQixhQUFBNEUsTUFFQXY3QixRQUFBNjdCLE9BQUFELGNBQUEsb0JBQUFBLGFBQ0E1N0IsUUFBQWc0QixLQUFBNEQsZUFBQUEsYUFFQTk2QixPQUFBaTNCLGNBQUEsU0FBQXI4RCxTQUNBLElBQUFpWixTQUFBbW5ELGNBR0EsR0FBQTk3QixRQUFBNjdCLE1BQUFELGVBQUFsZ0UsUUFBQSs5RCxZQUNBLE1BQUEsQ0FDQU0sS0FBQSxTQUFBSCxRQUFBN0ssVUFDQSxJQUFBejBELEVBQ0FpaEUsSUFBQTcvRCxRQUFBNi9ELE1BV0EsR0FUQUEsSUFBQXR3RCxLQUNBdlAsUUFBQWdFLEtBQ0FoRSxRQUFBMDVCLElBQ0ExNUIsUUFBQXc3RCxNQUNBeDdELFFBQUFxZ0UsU0FDQXJnRSxRQUFBc3pDLFVBSUF0ekMsUUFBQXNnRSxVQUNBLElBQUExaEUsS0FBQW9CLFFBQUFzZ0UsVUFDQVQsSUFBQWpoRSxHQUFBb0IsUUFBQXNnRSxVQUFBMWhFLEdBbUJBLElBQUFBLEtBZEFvQixRQUFBMDlELFVBQUFtQyxJQUFBcEMsa0JBQ0FvQyxJQUFBcEMsaUJBQUF6OUQsUUFBQTA5RCxVQVFBMTlELFFBQUErOUQsYUFBQUcsUUFBQSxzQkFDQUEsUUFBQSxvQkFBQSxrQkFJQUEsUUFDQTJCLElBQUFyQyxpQkFBQTUrRCxFQUFBcy9ELFFBQUF0L0QsSUFJQXFhLFNBQUEsU0FBQWpWLE1BQ0EsT0FBQSxXQUNBaVYsV0FDQUEsU0FBQW1uRCxjQUFBUCxJQUFBVSxPQUNBVixJQUFBVyxRQUFBWCxJQUFBWSxRQUFBWixJQUFBYSxVQUNBYixJQUFBYyxtQkFBQSxLQUVBLFVBQUEzOEQsS0FDQTY3RCxJQUFBakMsUUFDQSxVQUFBNTVELEtBS0EsaUJBQUE2N0QsSUFBQWxDLE9BQ0F0SyxTQUFBLEVBQUEsU0FFQUEsU0FHQXdNLElBQUFsQyxPQUNBa0MsSUFBQWhDLFlBSUF4SyxTQUNBME0saUJBQUFGLElBQUFsQyxTQUFBa0MsSUFBQWxDLE9BQ0FrQyxJQUFBaEMsV0FLQSxVQUFBZ0MsSUFBQWUsY0FBQSxTQUNBLGlCQUFBZixJQUFBZ0IsYUFDQSxDQUFBQyxPQUFBakIsSUFBQXBCLFVBQ0EsQ0FBQW4zQyxLQUFBdTRDLElBQUFnQixjQUNBaEIsSUFBQXRDLDRCQVFBc0MsSUFBQVUsT0FBQXRuRCxXQUNBbW5ELGNBQUFQLElBQUFXLFFBQUFYLElBQUFhLFVBQUF6bkQsU0FBQSxjQUtBOVQsSUFBQTA2RCxJQUFBWSxRQUNBWixJQUFBWSxRQUFBTCxjQUVBUCxJQUFBYyxtQkFBQSxXQUdBLElBQUFkLElBQUFwakIsWUFNQXB0QixPQUFBbXNCLFdBQUEsV0FDQXZpQyxVQUNBbW5ELG1CQVFBbm5ELFNBQUFBLFNBQUEsU0FFQSxJQUdBNG1ELElBQUF4QixLQUFBcitELFFBQUFnK0QsWUFBQWgrRCxRQUFBbUksTUFBQSxNQUNBLE1BQUEzSixHQUdBLEdBQUF5YSxTQUNBLE1BQUF6YSxJQUtBby9ELE1BQUEsV0FDQTNrRCxVQUNBQSxlQVdBbXNCLE9BQUFnM0IsY0FBQSxTQUFBbmpDLEdBQ0FBLEVBQUE4a0MsY0FDQTlrQyxFQUFBL29CLFNBQUEyMEIsUUFBQSxLQUtBTyxPQUFBODJCLFVBQUEsQ0FDQVIsUUFBQSxDQUNBNzJCLE9BQUEsNkZBR0EzMEIsU0FBQSxDQUNBMjBCLE9BQUEsMkJBRUFnM0IsV0FBQSxDQUNBa0YsY0FBQSxTQUFBejVDLE1BRUEsT0FEQThkLE9BQUF3QixXQUFBdGYsTUFDQUEsU0FNQThkLE9BQUFnM0IsY0FBQSxTQUFBLFNBQUFuakMsUUFDQTl6QixJQUFBOHpCLEVBQUF5VCxRQUNBelQsRUFBQXlULE9BQUEsR0FFQXpULEVBQUE4a0MsY0FDQTlrQyxFQUFBajFCLEtBQUEsU0FLQW9oQyxPQUFBaTNCLGNBQUEsU0FBQSxTQUFBcGpDLEdBSUEsSUFBQTRMLE9BQUE1ckIsU0FEQSxHQUFBZ2dCLEVBQUE4a0MsWUFFQSxNQUFBLENBQ0FNLEtBQUEsU0FBQTN6QixFQUFBMm9CLFVBQ0F4dUIsT0FBQU8sT0FBQSxZQUFBc1ksS0FBQSxDQUNBc2pCLFFBQUEvbkMsRUFBQWdvQyxjQUNBMTZELElBQUEweUIsRUFBQVMsTUFDQW9wQixHQUNBLGFBQ0E3cEMsU0FBQSxTQUFBaW9ELEtBQ0FyOEIsT0FBQTRVLFNBQ0F4Z0MsU0FBQSxLQUNBaW9ELEtBQ0E3TixTQUFBLFVBQUE2TixJQUFBbDlELEtBQUEsSUFBQSxJQUFBazlELElBQUFsOUQsUUFNQTQvQixTQUFBbUIsS0FBQUMsWUFBQUgsT0FBQSxLQUVBKzRCLE1BQUEsV0FDQTNrRCxVQUNBQSxlQVVBLElBcUdBL04sS0FyR0FpMkQsYUFBQSxHQUNBQyxPQUFBLG9CQUdBaDhCLE9BQUE4MkIsVUFBQSxDQUNBbUYsTUFBQSxXQUNBQyxjQUFBLFdBQ0EsSUFBQXJvRCxTQUFBa29ELGFBQUEvcEQsT0FBQWd1QixPQUFBa0IsUUFBQSxJQUFBcXlCLFFBRUEsT0FEQXAyRCxLQUFBMFcsV0FBQSxFQUNBQSxZQUtBbXNCLE9BQUFnM0IsY0FBQSxhQUFBLFNBQUFuakMsRUFBQXNvQyxpQkFBQTlHLE9BRUEsSUFBQStHLGFBQUFDLFlBQUFDLGtCQUNBQyxVQUFBLElBQUExb0MsRUFBQW9vQyxRQUFBRCxPQUFBLzhELEtBQUE0MEIsRUFBQVMsS0FDQSxNQUNBLGlCQUFBVCxFQUFBOXdCLE1BRUEsS0FEQTh3QixFQUFBd2lDLGFBQUEsSUFDQTFzRCxRQUFBLHNDQUNBcXlELE9BQUEvOEQsS0FBQTQwQixFQUFBOXdCLE9BQUEsUUFJQSxHQUFBdzVELFVBQUEsVUFBQTFvQyxFQUFBc2hDLFVBQUEsR0E4REEsT0EzREFpSCxhQUFBdm9DLEVBQUFxb0MsY0FBQWx6QyxXQUFBNkssRUFBQXFvQyxlQUNBcm9DLEVBQUFxb0MsZ0JBQ0Fyb0MsRUFBQXFvQyxjQUdBSyxTQUNBMW9DLEVBQUEwb0MsVUFBQTFvQyxFQUFBMG9DLFVBQUFsNkQsUUFBQTI1RCxPQUFBLEtBQUFJLGVBQ0EsSUFBQXZvQyxFQUFBb29DLFFBQ0Fwb0MsRUFBQVMsTUFBQWsvQixPQUFBdjBELEtBQUE0MEIsRUFBQVMsS0FBQSxJQUFBLEtBQUFULEVBQUFvb0MsTUFBQSxJQUFBRyxjQUlBdm9DLEVBQUE0aUMsV0FBQSxlQUFBLFdBSUEsT0FIQTZGLG1CQUNBdDhCLE9BQUE3cUIsTUFBQWluRCxhQUFBLG1CQUVBRSxrQkFBQSxJQUlBem9DLEVBQUFzaEMsVUFBQSxHQUFBLE9BR0FrSCxZQUFBcHlDLE9BQUFteUMsY0FDQW55QyxPQUFBbXlDLGNBQUEsV0FDQUUsa0JBQUF0NkQsV0FJQXF6RCxNQUFBemdCLE9BQUEsZ0JBR0E3MEMsSUFBQXM4RCxZQUNBcjhCLE9BQUEvVixRQUFBc25DLFdBQUE2SyxjQUlBbnlDLE9BQUFteUMsY0FBQUMsWUFJQXhvQyxFQUFBdW9DLGdCQUdBdm9DLEVBQUFxb0MsY0FBQUMsaUJBQUFELGNBR0FILGFBQUFwN0QsS0FBQXk3RCxlQUlBRSxtQkFBQXR6QyxXQUFBcXpDLGNBQ0FBLFlBQUFDLGtCQUFBLElBR0FBLGtCQUFBRCxpQkFBQXQ4RCxJQUlBLFdBWUFtL0IsUUFBQXM5QixxQkFDQTEyRCxLQUFBMDRCLFNBQUFpK0IsZUFBQUQsbUJBQUEsSUFBQTEyRCxNQUNBNGpDLFVBQUEsNkJBQ0EsSUFBQTVqQyxLQUFBbWdDLFdBQUE5ckMsUUFRQTZsQyxPQUFBZ1MsVUFBQSxTQUFBanZDLEtBQUFRLFFBQUFtNUQsYUFDQSxNQUFBLGlCQUFBMzVELEtBQ0EsSUFFQSxrQkFBQVEsVUFDQW01RCxZQUFBbjVELFFBQ0FBLFNBQUEsR0FLQUEsVUFJQTI3QixRQUFBczlCLHFCQU1BNWdFLE1BTEEySCxRQUFBaTdCLFNBQUFpK0IsZUFBQUQsbUJBQUEsS0FLQTk4QixjQUFBLFNBQ0EwTixLQUFBNU8sU0FBQS94QixTQUFBMmdDLEtBQ0E3cEMsUUFBQW84QixLQUFBQyxZQUFBaGtDLE9BRUEySCxRQUFBaTdCLFVBS0FpZSxTQUFBaWdCLGFBQUEsSUFEQXArQixPQUFBcVQsV0FBQXpxQixLQUFBbmtCLE9BS0EsQ0FBQVEsUUFBQW04QixjQUFBcEIsT0FBQSxNQUdBQSxPQUFBa2UsY0FBQSxDQUFBejVDLE1BQUFRLFFBQUFrNUMsU0FFQUEsU0FBQUEsUUFBQXRpRCxRQUNBNmxDLE9BQUF5YyxTQUFBcEksU0FHQXJVLE9BQUF0K0IsTUFBQSxHQUFBNDhCLE9BQUEySCxjQWxDQSxJQUFBcnFDLEtBQUEwaUMsT0FBQW1lLFNBeUNBemMsT0FBQWppQyxHQUFBdWlELEtBQUEsU0FBQWhzQixJQUFBejFCLE9BQUFnVixVQUNBLElBQUFvc0IsU0FBQXJoQyxLQUFBeTZELFNBQ0F0NEMsS0FBQTVqQixLQUNBMmdELElBQUF4cEIsSUFBQTNxQixRQUFBLEtBc0RBLE9BcERBLEVBQUFtMEMsTUFDQTdkLFNBQUFteEIsaUJBQUE5OEIsSUFBQXh3QixNQUFBZzZDLE1BQ0F4cEIsSUFBQUEsSUFBQXh3QixNQUFBLEVBQUFnNkMsTUFJQTkwQixXQUFBbnFCLFNBR0FnVixTQUFBaFYsT0FDQUEsWUFBQWtCLEdBR0FsQixRQUFBLGlCQUFBQSxTQUNBRCxLQUFBLFFBSUEsRUFBQW1pQixLQUFBNW1CLFFBQ0E2bEMsT0FBQWszQixLQUFBLENBQ0E1aUMsSUFBQUEsSUFLQTExQixLQUFBQSxNQUFBLE1BQ0FzMkQsU0FBQSxPQUNBbnlELEtBQUFsRSxTQUNBNGpCLEtBQUEsU0FBQWc1QyxjQUdBcEMsU0FBQXIzRCxVQUVBK2UsS0FBQXdqQyxLQUFBdGtCLFNBSUFELE9BQUEsU0FBQTN2QixPQUFBMnZCLE9BQUFnUyxVQUFBeXBCLGVBQUFseUIsS0FBQXRKLFVBR0F3N0IsZ0JBS0E3bUIsT0FBQS9nQyxVQUFBLFNBQUF3aEQsTUFBQWtELFFBQ0F4M0MsS0FBQW5mLEtBQUEsV0FDQWlTLFNBQUFsRyxNQUFBeFEsS0FBQWs4RCxVQUFBLENBQUFoRSxNQUFBb0csYUFBQWxELE9BQUFsRCxZQUtBbDRELE1BT0E2aUMsT0FBQXArQixLQUFBLENBQ0EsWUFDQSxXQUNBLGVBQ0EsWUFDQSxjQUNBLFlBQ0EsU0FBQXBJLEVBQUFvRixNQUNBb2hDLE9BQUFqaUMsR0FBQWEsTUFBQSxTQUFBYixJQUNBLE9BQUFaLEtBQUF1Z0QsR0FBQTkrQyxLQUFBYixPQU9BaWlDLE9BQUFyc0IsS0FBQXF3QixRQUFBMjRCLFNBQUEsU0FBQWo4QixNQUNBLE9BQUFWLE9BQUE4QixLQUFBOUIsT0FBQTB2QixPQUFBLFNBQUEzeEQsSUFDQSxPQUFBMmlDLE9BQUEzaUMsR0FBQTJpQyxPQUNBdm1DLFFBTUE2bEMsT0FBQXBkLE9BQUEsQ0FDQWc2QyxVQUFBLFNBQUFsOEIsS0FBQTlsQyxRQUFBcEIsR0FDQSxJQUFBcWpFLFlBQUFDLFFBQUFDLFVBQUFDLE9BQUFDLFVBQUFDLFdBQ0E5VixTQUFBcG5CLE9BQUFnYSxJQUFBdFosS0FBQSxZQUNBeThCLFFBQUFuOUIsT0FBQVUsTUFDQW5aLE1BQUEsR0FHQSxXQUFBNi9CLFdBQ0ExbUIsS0FBQW9aLE1BQUFzTixTQUFBLFlBR0E2VixVQUFBRSxRQUFBdjZDLFNBQ0FtNkMsVUFBQS84QixPQUFBZ2EsSUFBQXRaLEtBQUEsT0FDQXc4QixXQUFBbDlCLE9BQUFnYSxJQUFBdFosS0FBQSxRQVNBbzhCLFNBUkEsYUFBQTFWLFVBQUEsVUFBQUEsWUFDQSxHQUFBMlYsVUFBQUcsWUFBQXZ6RCxRQUFBLFNBTUFxekQsUUFEQUgsWUFBQU0sUUFBQS9WLFlBQ0FuekMsSUFDQTRvRCxZQUFBOVIsT0FHQWlTLE9BQUF4VixXQUFBdVYsWUFBQSxFQUNBdlYsV0FBQTBWLGFBQUEsR0FHQWwwQyxXQUFBcHVCLFdBR0FBLFFBQUFBLFFBQUFWLEtBQUF3bUMsS0FBQWxuQyxFQUFBd21DLE9BQUEvakMsT0FBQSxHQUFBZ2hFLGFBR0EsTUFBQXJpRSxRQUFBcVosTUFDQXNULE1BQUF0VCxJQUFBclosUUFBQXFaLElBQUFncEQsVUFBQWhwRCxJQUFBK29ELFFBRUEsTUFBQXBpRSxRQUFBbXdELE9BQ0F4akMsTUFBQXdqQyxLQUFBbndELFFBQUFtd0QsS0FBQWtTLFVBQUFsUyxLQUFBK1IsU0FHQSxVQUFBbGlFLFFBQ0FBLFFBQUF3aUUsTUFBQWxqRSxLQUFBd21DLEtBQUFuWixPQUdBNDFDLFFBQUFuakIsSUFBQXp5QixTQUtBeVksT0FBQWppQyxHQUFBOUIsT0FBQSxDQUdBMm1CLE9BQUEsU0FBQWhvQixTQUdBLEdBQUFvSCxVQUFBN0gsT0FDQSxZQUFBNEYsSUFBQW5GLFFBQ0F1QyxLQUNBQSxLQUFBeUUsS0FBQSxTQUFBcEksR0FDQXdtQyxPQUFBcGQsT0FBQWc2QyxVQUFBei9ELEtBQUF2QyxRQUFBcEIsS0FJQSxJQUFBNmpFLEtBQUFDLElBQ0E1OEIsS0FBQXZqQyxLQUFBLEdBRUEsT0FBQXVqQyxLQVFBQSxLQUFBbXFCLGlCQUFBMXdELFFBS0FrakUsS0FBQTM4QixLQUFBb3FCLHdCQUNBd1MsSUFBQTU4QixLQUFBK0YsY0FBQXFDLFlBQ0EsQ0FDQTcwQixJQUFBb3BELEtBQUFwcEQsSUFBQXFwRCxJQUFBQyxZQUNBeFMsS0FBQXNTLEtBQUF0UyxLQUFBdVMsSUFBQUUsY0FSQSxDQUFBdnBELElBQUEsRUFBQTgyQyxLQUFBLFFBVEEsR0F1QkEzRCxTQUFBLFdBQ0EsR0FBQWpxRCxLQUFBLEdBQUEsQ0FJQSxJQUFBc2dFLGFBQUE3NkMsT0FBQTRjLElBQ0FrQixLQUFBdmpDLEtBQUEsR0FDQXVnRSxhQUFBLENBQUF6cEQsSUFBQSxFQUFBODJDLEtBQUEsR0FHQSxHQUFBLFVBQUEvcUIsT0FBQWdhLElBQUF0WixLQUFBLFlBR0E5ZCxPQUFBOGQsS0FBQW9xQiw0QkFFQSxDQU9BLElBTkFsb0MsT0FBQXpsQixLQUFBeWxCLFNBSUE0YyxJQUFBa0IsS0FBQStGLGNBQ0FnM0IsYUFBQS84QixLQUFBKzhCLGNBQUFqK0IsSUFBQW1KLGdCQUNBODBCLGVBQ0FBLGVBQUFqK0IsSUFBQTE1QixNQUFBMjNELGVBQUFqK0IsSUFBQW1KLGtCQUNBLFdBQUEzSSxPQUFBZ2EsSUFBQXlqQixhQUFBLGFBRUFBLGFBQUFBLGFBQUE1OUIsV0FFQTQ5QixjQUFBQSxlQUFBLzhCLE1BQUEsSUFBQSs4QixhQUFBdCtCLFlBR0F1K0IsYUFBQTE5QixPQUFBeTlCLGNBQUE3NkMsVUFDQTNPLEtBQUErckIsT0FBQWdhLElBQUF5akIsYUFBQSxrQkFBQSxHQUNBQyxhQUFBM1MsTUFBQS9xQixPQUFBZ2EsSUFBQXlqQixhQUFBLG1CQUFBLElBS0EsTUFBQSxDQUNBeHBELElBQUEyTyxPQUFBM08sSUFBQXlwRCxhQUFBenBELElBQUErckIsT0FBQWdhLElBQUF0WixLQUFBLGFBQUEsR0FDQXFxQixLQUFBbm9DLE9BQUFtb0MsS0FBQTJTLGFBQUEzUyxLQUFBL3FCLE9BQUFnYSxJQUFBdFosS0FBQSxjQUFBLE1BY0ErOEIsYUFBQSxXQUNBLE9BQUF0Z0UsS0FBQW1SLElBQUEsV0FHQSxJQUZBLElBQUFtdkQsYUFBQXRnRSxLQUFBc2dFLGFBRUFBLGNBQUEsV0FBQXo5QixPQUFBZ2EsSUFBQXlqQixhQUFBLGFBQ0FBLGFBQUFBLGFBQUFBLGFBR0EsT0FBQUEsY0FBQTkwQixxQkFNQTNJLE9BQUFwK0IsS0FBQSxDQUFBa3FELFdBQUEsY0FBQUQsVUFBQSxlQUFBLFNBQUFqaUMsT0FBQTB1QixNQUNBLElBQUFya0MsSUFBQSxnQkFBQXFrQyxLQUVBdFksT0FBQWppQyxHQUFBNnJCLFFBQUEsU0FBQXJnQixLQUNBLE9BQUFndUMsT0FBQXA2QyxLQUFBLFNBQUF1akMsS0FBQTlXLE9BQUFyZ0IsS0FHQSxJQUFBK3pELElBT0EsR0FOQWwrQixTQUFBc0IsTUFDQTQ4QixJQUFBNThCLEtBQ0EsSUFBQUEsS0FBQXZCLFdBQ0FtK0IsSUFBQTU4QixLQUFBb0ksa0JBR0Evb0MsSUFBQXdKLElBQ0EsT0FBQSt6RCxJQUFBQSxJQUFBaGxCLE1BQUE1WCxLQUFBOVcsUUFHQTB6QyxJQUNBQSxJQUFBSyxTQUNBMXBELElBQUFxcEQsSUFBQUUsWUFBQWowRCxJQUNBMEssSUFBQTFLLElBQUErekQsSUFBQUMsYUFJQTc4QixLQUFBOVcsUUFBQXJnQixLQUVBcWdCLE9BQUFyZ0IsSUFBQXZILFVBQUE3SCxXQVVBNmxDLE9BQUFwK0IsS0FBQSxDQUFBLE1BQUEsUUFBQSxTQUFBcEksRUFBQTgrQyxNQUNBdFksT0FBQTRwQixTQUFBdFIsTUFBQWlPLGFBQUFybkIsUUFBQTBvQixjQUNBLFNBQUFsbkIsS0FBQXVsQixVQUNBLEdBQUFBLFNBSUEsT0FIQUEsU0FBQUQsT0FBQXRsQixLQUFBNFgsTUFHQXFOLFVBQUExbUQsS0FBQWduRCxVQUNBam1CLE9BQUFVLE1BQUEwbUIsV0FBQTlPLE1BQUEsS0FDQTJOLGFBUUFqbUIsT0FBQXArQixLQUFBLENBQUFnOEQsT0FBQSxTQUFBQyxNQUFBLFNBQUEsU0FBQS8vRCxLQUFBYyxNQUNBb2hDLE9BQUFwK0IsS0FBQSxDQUFBaWpCLFFBQUEsUUFBQS9tQixLQUFBNkosUUFBQS9JLEtBQUFrL0QsR0FBQSxRQUFBaGdFLE1BQ0EsU0FBQWlnRSxhQUFBQyxVQUdBaCtCLE9BQUFqaUMsR0FBQWlnRSxVQUFBLFNBQUFoVCxPQUFBcm9ELE9BQ0EsSUFBQTYwQyxVQUFBeDFDLFVBQUE3SCxTQUFBNGpFLGNBQUEsa0JBQUEvUyxRQUNBM0IsTUFBQTBVLGdCQUFBLElBQUEvUyxTQUFBLElBQUFyb0QsTUFBQSxTQUFBLFVBRUEsT0FBQTQwQyxPQUFBcDZDLEtBQUEsU0FBQXVqQyxLQUFBOWhDLEtBQUErRCxPQUNBLElBQUE2OEIsSUFFQSxPQUFBSixTQUFBc0IsTUFHQSxJQUFBczlCLFNBQUFyMEQsUUFBQSxTQUNBKzJCLEtBQUEsUUFBQTVpQyxNQUNBNGlDLEtBQUFsQyxTQUFBbUssZ0JBQUEsU0FBQTdxQyxNQUlBLElBQUE0aUMsS0FBQXZCLFVBQ0FLLElBQUFrQixLQUFBaUksZ0JBSUExWSxLQUFBNjRCLElBQ0Fwb0IsS0FBQTU2QixLQUFBLFNBQUFoSSxNQUFBMGhDLElBQUEsU0FBQTFoQyxNQUNBNGlDLEtBQUE1NkIsS0FBQSxTQUFBaEksTUFBQTBoQyxJQUFBLFNBQUExaEMsTUFDQTBoQyxJQUFBLFNBQUExaEMsYUFJQWlDLElBQUE0QyxNQUdBcTlCLE9BQUFnYSxJQUFBdFosS0FBQTloQyxLQUFBeXFELE9BR0FycEIsT0FBQThaLE1BQUFwWixLQUFBOWhDLEtBQUErRCxNQUFBMG1ELFFBQ0F6cUQsS0FBQTQ0QyxVQUFBd1QsWUFBQWpyRCxFQUFBeTNDLGdCQU1BeFgsT0FBQXArQixLQUFBLHdMQUVBaVQsTUFBQSxLQUNBLFNBQUFyYixFQUFBc0UsTUFHQWtpQyxPQUFBamlDLEdBQUFELE1BQUEsU0FBQWlGLEtBQUFoRixJQUNBLE9BQUEsRUFBQWlFLFVBQUE3SCxPQUNBZ0QsS0FBQXVnRCxHQUFBNS9DLEtBQUEsS0FBQWlGLEtBQUFoRixJQUNBWixLQUFBcWpELFFBQUExaUQsU0FJQWtpQyxPQUFBamlDLEdBQUE5QixPQUFBLENBQ0FnaUUsTUFBQSxTQUFBQyxPQUFBQyxPQUNBLE9BQUFoaEUsS0FBQTRsRCxXQUFBbWIsUUFBQWxiLFdBQUFtYixPQUFBRCxXQU9BbCtCLE9BQUFqaUMsR0FBQTlCLE9BQUEsQ0FFQSt4RCxLQUFBLFNBQUFwOEMsTUFBQTdPLEtBQUFoRixJQUNBLE9BQUFaLEtBQUF1Z0QsR0FBQTlyQyxNQUFBLEtBQUE3TyxLQUFBaEYsS0FFQXFnRSxPQUFBLFNBQUF4c0QsTUFBQTdULElBQ0EsT0FBQVosS0FBQTJnRCxJQUFBbHNDLE1BQUEsS0FBQTdULEtBR0FzZ0UsU0FBQSxTQUFBcCtCLFNBQUFydUIsTUFBQTdPLEtBQUFoRixJQUNBLE9BQUFaLEtBQUF1Z0QsR0FBQTlyQyxNQUFBcXVCLFNBQUFsOUIsS0FBQWhGLEtBRUF1Z0UsV0FBQSxTQUFBcitCLFNBQUFydUIsTUFBQTdULElBR0EsT0FBQSxJQUFBaUUsVUFBQTdILE9BQ0FnRCxLQUFBMmdELElBQUE3ZCxTQUFBLE1BQ0E5aUMsS0FBQTJnRCxJQUFBbHNDLE1BQUFxdUIsVUFBQSxLQUFBbGlDLE9BUUFpaUMsT0FBQXUrQixNQUFBLFNBQUF4Z0UsR0FBQXdGLFNBQ0EsSUFBQW9rQixJQUFBampCLEtBQUE2NUQsTUFVQSxHQVJBLGlCQUFBaDdELFVBQ0Fva0IsSUFBQTVwQixHQUFBd0YsU0FDQUEsUUFBQXhGLEdBQ0FBLEdBQUE0cEIsS0FLQXFCLFdBQUFqckIsSUFhQSxPQVJBMkcsS0FBQVosTUFBQTVKLEtBQUE4SCxVQUFBLElBQ0F1OEQsTUFBQSxXQUNBLE9BQUF4Z0UsR0FBQTRQLE1BQUFwSyxTQUFBcEcsS0FBQXVILEtBQUFpSyxPQUFBN0ssTUFBQTVKLEtBQUE4SCxlQUlBNEMsS0FBQTdHLEdBQUE2RyxLQUFBN0csR0FBQTZHLE1BQUFvN0IsT0FBQXA3QixPQUVBMjVELE9BR0F2K0IsT0FBQXcrQixVQUFBLFNBQUFDLE1BQ0FBLEtBQ0F6K0IsT0FBQW1YLFlBRUFuWCxPQUFBK1IsT0FBQSxJQUdBL1IsT0FBQXgvQixRQUFBNGhCLE1BQUE1aEIsUUFDQXcvQixPQUFBMCtCLFVBQUEzeUQsS0FBQXhRLE1BQ0F5a0MsT0FBQThHLFNBQUFBLFNBQ0E5RyxPQUFBaFgsV0FBQUEsV0FDQWdYLE9BQUFaLFNBQUFBLFNBQ0FZLE9BQUFpWSxVQUFBQSxVQUNBalksT0FBQXBoQyxLQUFBbWhDLE9BRUFDLE9BQUFpaEIsSUFBQTlkLEtBQUE4ZCxJQUVBamhCLE9BQUEyK0IsVUFBQSxTQUFBcDhELEtBS0EsSUFBQTNELEtBQUFvaEMsT0FBQXBoQyxLQUFBMkQsS0FDQSxPQUFBLFdBQUEzRCxNQUFBLFdBQUFBLFFBS0FnZ0UsTUFBQXI4RCxJQUFBaWxELFdBQUFqbEQsT0FtQkEsbUJBQUF2QyxRQUFBQSxPQUFBQyxLQUNBRCxPQUFBLFNBQUEsR0FBQSxXQUNBLE9BQUFnZ0MsU0FPQSxJQUdBNitCLFFBQUE1MEMsT0FBQStWLE9BR0EvakIsR0FBQWdPLE9BQUE5TixFQXdCQSxPQXRCQTZqQixPQUFBN1YsV0FBQSxTQUFBNlcsTUFTQSxPQVJBL1csT0FBQTlOLElBQUE2akIsU0FDQS9WLE9BQUE5TixFQUFBRixJQUdBK2tCLE1BQUEvVyxPQUFBK1YsU0FBQUEsU0FDQS9WLE9BQUErVixPQUFBNitCLFNBR0E3K0IsUUFNQXRCLFdBQ0F6VSxPQUFBK1YsT0FBQS9WLE9BQUE5TixFQUFBNmpCLFFBTUFBLG1EQzFuVUEzbEMsT0FBQUosUUFBQSxDQUNBLENBQ0EwbEMsS0FBQSxnQkFDQW0vQixVQUFBLGFBQ0FDLE1BQUEsdUpBQ0F6cUMsSUFBQSwyREFDQTBxQyxLQUFBLENBQUEsT0FBQSxNQUFBLGVBRUEsQ0FDQXIvQixLQUFBLFdBQ0FtL0IsVUFBQSxXQUNBQyxNQUFBLGdNQUNBenFDLElBQUEsb0ZBQ0EwcUMsS0FBQSxJQUVBLENBQ0FyL0IsS0FBQSxtQkFDQW0vQixVQUFBLGFBQ0FDLE1BQUEsa0pBQ0F6cUMsSUFBQSxvRkFDQTBxQyxLQUFBLENBQUEsT0FBQSxNQUFBLGVBRUEsQ0FDQXIvQixLQUFBLGFBQ0FtL0IsVUFBQSxhQUNBQyxNQUFBLGdMQUNBenFDLElBQUEsdURBQ0EwcUMsS0FBQSxDQUFBLE9BQUEsTUFBQSxlQUVBLENBQ0FyL0IsS0FBQSx1QkFDQW0vQixVQUFBLE9BQ0FDLE1BQUEsa05BQ0F6cUMsSUFBQSwrREFDQTBxQyxLQUFBLENBQUEsT0FBQSxNQUFBLGFBQUEsV0FFQSxDQUNBci9CLEtBQUEsNkJBQ0FtL0IsVUFBQSxRQUNBQyxNQUFBLHFQQUNBenFDLElBQUEsd0RBQ0EwcUMsS0FBQSxDQUFBLE9BQUEsTUFBQSxhQUFBLG1FQ3pDQSxvQ0FBQXJsRSxRQUFBLCtDQUNBQSxRQUFBLCtDQUNBQSxRQUFBLDRHQUVBNmtDLFNBQVN1SyxpQkFBaUIsbUJBQW9CLFNBQUMzdkMsR0FDN0MsSUFBTTJILE9BQVN5OUIsU0FBU2tJLGVBQWUsaUJBQWlCZ0QsVUFDbER1MUIsYUFBZUMsYUFBQUMsUUFBV3prRSxRQUFRcUcsUUFDdkJ5OUIsU0FBU2tJLGVBQWUsY0FFekMwNEIsU0FBQUQsUUFBU3Z1QyxRQUFRLFNBQUN5dUMsU0FDaEIsSUFBTUMsYUFBZUwsYUFBYUksVUFDbEMsRUFBQUUsU0FBQUosU0FBRSxlQUFlOXVELE9BQU9pdkQiLCJmaWxlIjoic2NyaXB0cy1idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiaW1wb3J0IHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzLnJ1bnRpbWUnO1xuXG4vLyBDb21waWxlciBpbXBvcnRzXG5pbXBvcnQgQVNUIGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9hc3QnO1xuaW1wb3J0IHsgcGFyc2VyIGFzIFBhcnNlciwgcGFyc2UgfSBmcm9tICcuL2hhbmRsZWJhcnMvY29tcGlsZXIvYmFzZSc7XG5pbXBvcnQgeyBDb21waWxlciwgY29tcGlsZSwgcHJlY29tcGlsZSB9IGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9jb21waWxlcic7XG5pbXBvcnQgSmF2YVNjcmlwdENvbXBpbGVyIGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9qYXZhc2NyaXB0LWNvbXBpbGVyJztcbmltcG9ydCBWaXNpdG9yIGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci92aXNpdG9yJztcblxuaW1wb3J0IG5vQ29uZmxpY3QgZnJvbSAnLi9oYW5kbGViYXJzL25vLWNvbmZsaWN0JztcblxubGV0IF9jcmVhdGUgPSBydW50aW1lLmNyZWF0ZTtcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gX2NyZWF0ZSgpO1xuXG4gIGhiLmNvbXBpbGUgPSBmdW5jdGlvbihpbnB1dCwgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21waWxlKGlucHV0LCBvcHRpb25zLCBoYik7XG4gIH07XG4gIGhiLnByZWNvbXBpbGUgPSBmdW5jdGlvbihpbnB1dCwgb3B0aW9ucykge1xuICAgIHJldHVybiBwcmVjb21waWxlKGlucHV0LCBvcHRpb25zLCBoYik7XG4gIH07XG5cbiAgaGIuQVNUID0gQVNUO1xuICBoYi5Db21waWxlciA9IENvbXBpbGVyO1xuICBoYi5KYXZhU2NyaXB0Q29tcGlsZXIgPSBKYXZhU2NyaXB0Q29tcGlsZXI7XG4gIGhiLlBhcnNlciA9IFBhcnNlcjtcbiAgaGIucGFyc2UgPSBwYXJzZTtcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdC5WaXNpdG9yID0gVmlzaXRvcjtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcbiIsImltcG9ydCAqIGFzIGJhc2UgZnJvbSAnLi9oYW5kbGViYXJzL2Jhc2UnO1xuXG4vLyBFYWNoIG9mIHRoZXNlIGF1Z21lbnQgdGhlIEhhbmRsZWJhcnMgb2JqZWN0LiBObyBuZWVkIHRvIHNldHVwIGhlcmUuXG4vLyAoVGhpcyBpcyBkb25lIHRvIGVhc2lseSBzaGFyZSBjb2RlIGJldHdlZW4gY29tbW9uanMgYW5kIGJyb3dzZSBlbnZzKVxuaW1wb3J0IFNhZmVTdHJpbmcgZnJvbSAnLi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9oYW5kbGViYXJzL2V4Y2VwdGlvbic7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL2hhbmRsZWJhcnMvdXRpbHMnO1xuaW1wb3J0ICogYXMgcnVudGltZSBmcm9tICcuL2hhbmRsZWJhcnMvcnVudGltZSc7XG5cbmltcG9ydCBub0NvbmZsaWN0IGZyb20gJy4vaGFuZGxlYmFycy9uby1jb25mbGljdCc7XG5cbi8vIEZvciBjb21wYXRpYmlsaXR5IGFuZCB1c2FnZSBvdXRzaWRlIG9mIG1vZHVsZSBzeXN0ZW1zLCBtYWtlIHRoZSBIYW5kbGViYXJzIG9iamVjdCBhIG5hbWVzcGFjZVxuZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgaGIgPSBuZXcgYmFzZS5IYW5kbGViYXJzRW52aXJvbm1lbnQoKTtcblxuICBVdGlscy5leHRlbmQoaGIsIGJhc2UpO1xuICBoYi5TYWZlU3RyaW5nID0gU2FmZVN0cmluZztcbiAgaGIuRXhjZXB0aW9uID0gRXhjZXB0aW9uO1xuICBoYi5VdGlscyA9IFV0aWxzO1xuICBoYi5lc2NhcGVFeHByZXNzaW9uID0gVXRpbHMuZXNjYXBlRXhwcmVzc2lvbjtcblxuICBoYi5WTSA9IHJ1bnRpbWU7XG4gIGhiLnRlbXBsYXRlID0gZnVuY3Rpb24oc3BlYykge1xuICAgIHJldHVybiBydW50aW1lLnRlbXBsYXRlKHNwZWMsIGhiKTtcbiAgfTtcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcbiIsImltcG9ydCB7Y3JlYXRlRnJhbWUsIGV4dGVuZCwgdG9TdHJpbmd9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdEhlbHBlcnN9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnN9IGZyb20gJy4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC4wLjEyJztcbmV4cG9ydCBjb25zdCBDT01QSUxFUl9SRVZJU0lPTiA9IDc7XG5cbmV4cG9ydCBjb25zdCBSRVZJU0lPTl9DSEFOR0VTID0ge1xuICAxOiAnPD0gMS4wLnJjLjInLCAvLyAxLjAucmMuMiBpcyBhY3R1YWxseSByZXYyIGJ1dCBkb2Vzbid0IHJlcG9ydCBpdFxuICAyOiAnPT0gMS4wLjAtcmMuMycsXG4gIDM6ICc9PSAxLjAuMC1yYy40JyxcbiAgNDogJz09IDEueC54JyxcbiAgNTogJz09IDIuMC4wLWFscGhhLngnLFxuICA2OiAnPj0gMi4wLjAtYmV0YS4xJyxcbiAgNzogJz49IDQuMC4wJ1xufTtcblxuY29uc3Qgb2JqZWN0VHlwZSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG5leHBvcnQgZnVuY3Rpb24gSGFuZGxlYmFyc0Vudmlyb25tZW50KGhlbHBlcnMsIHBhcnRpYWxzLCBkZWNvcmF0b3JzKSB7XG4gIHRoaXMuaGVscGVycyA9IGhlbHBlcnMgfHwge307XG4gIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcbiAgdGhpcy5kZWNvcmF0b3JzID0gZGVjb3JhdG9ycyB8fCB7fTtcblxuICByZWdpc3RlckRlZmF1bHRIZWxwZXJzKHRoaXMpO1xuICByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKHRoaXMpO1xufVxuXG5IYW5kbGViYXJzRW52aXJvbm1lbnQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogSGFuZGxlYmFyc0Vudmlyb25tZW50LFxuXG4gIGxvZ2dlcjogbG9nZ2VyLFxuICBsb2c6IGxvZ2dlci5sb2csXG5cbiAgcmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikgeyB0aHJvdyBuZXcgRXhjZXB0aW9uKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGhlbHBlcnMnKTsgfVxuICAgICAgZXh0ZW5kKHRoaXMuaGVscGVycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGVscGVyc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckhlbHBlcjogZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLmhlbHBlcnNbbmFtZV07XG4gIH0sXG5cbiAgcmVnaXN0ZXJQYXJ0aWFsOiBmdW5jdGlvbihuYW1lLCBwYXJ0aWFsKSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGV4dGVuZCh0aGlzLnBhcnRpYWxzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBwYXJ0aWFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKGBBdHRlbXB0aW5nIHRvIHJlZ2lzdGVyIGEgcGFydGlhbCBjYWxsZWQgXCIke25hbWV9XCIgYXMgdW5kZWZpbmVkYCk7XG4gICAgICB9XG4gICAgICB0aGlzLnBhcnRpYWxzW25hbWVdID0gcGFydGlhbDtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJQYXJ0aWFsOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMucGFydGlhbHNbbmFtZV07XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikgeyB0aHJvdyBuZXcgRXhjZXB0aW9uKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGRlY29yYXRvcnMnKTsgfVxuICAgICAgZXh0ZW5kKHRoaXMuZGVjb3JhdG9ycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVjb3JhdG9yc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLmRlY29yYXRvcnNbbmFtZV07XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgbG9nID0gbG9nZ2VyLmxvZztcblxuZXhwb3J0IHtjcmVhdGVGcmFtZSwgbG9nZ2VyfTtcbiIsImxldCBBU1QgPSB7XG4gIC8vIFB1YmxpYyBBUEkgdXNlZCB0byBldmFsdWF0ZSBkZXJpdmVkIGF0dHJpYnV0ZXMgcmVnYXJkaW5nIEFTVCBub2Rlc1xuICBoZWxwZXJzOiB7XG4gICAgLy8gYSBtdXN0YWNoZSBpcyBkZWZpbml0ZWx5IGEgaGVscGVyIGlmOlxuICAgIC8vICogaXQgaXMgYW4gZWxpZ2libGUgaGVscGVyLCBhbmRcbiAgICAvLyAqIGl0IGhhcyBhdCBsZWFzdCBvbmUgcGFyYW1ldGVyIG9yIGhhc2ggc2VnbWVudFxuICAgIGhlbHBlckV4cHJlc3Npb246IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiAobm9kZS50eXBlID09PSAnU3ViRXhwcmVzc2lvbicpXG4gICAgICAgICAgfHwgKChub2RlLnR5cGUgPT09ICdNdXN0YWNoZVN0YXRlbWVudCcgfHwgbm9kZS50eXBlID09PSAnQmxvY2tTdGF0ZW1lbnQnKVxuICAgICAgICAgICAgJiYgISEoKG5vZGUucGFyYW1zICYmIG5vZGUucGFyYW1zLmxlbmd0aCkgfHwgbm9kZS5oYXNoKSk7XG4gICAgfSxcblxuICAgIHNjb3BlZElkOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gKC9eXFwufHRoaXNcXGIvKS50ZXN0KHBhdGgub3JpZ2luYWwpO1xuICAgIH0sXG5cbiAgICAvLyBhbiBJRCBpcyBzaW1wbGUgaWYgaXQgb25seSBoYXMgb25lIHBhcnQsIGFuZCB0aGF0IHBhcnQgaXMgbm90XG4gICAgLy8gYC4uYCBvciBgdGhpc2AuXG4gICAgc2ltcGxlSWQ6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLnBhcnRzLmxlbmd0aCA9PT0gMSAmJiAhQVNULmhlbHBlcnMuc2NvcGVkSWQocGF0aCkgJiYgIXBhdGguZGVwdGg7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIE11c3QgYmUgZXhwb3J0ZWQgYXMgYW4gb2JqZWN0IHJhdGhlciB0aGFuIHRoZSByb290IG9mIHRoZSBtb2R1bGUgYXMgdGhlIGppc29uIGxleGVyXG4vLyBtdXN0IG1vZGlmeSB0aGUgb2JqZWN0IHRvIG9wZXJhdGUgcHJvcGVybHkuXG5leHBvcnQgZGVmYXVsdCBBU1Q7XG4iLCJpbXBvcnQgcGFyc2VyIGZyb20gJy4vcGFyc2VyJztcbmltcG9ydCBXaGl0ZXNwYWNlQ29udHJvbCBmcm9tICcuL3doaXRlc3BhY2UtY29udHJvbCc7XG5pbXBvcnQgKiBhcyBIZWxwZXJzIGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCB7IHBhcnNlciB9O1xuXG5sZXQgeXkgPSB7fTtcbmV4dGVuZCh5eSwgSGVscGVycyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShpbnB1dCwgb3B0aW9ucykge1xuICAvLyBKdXN0IHJldHVybiBpZiBhbiBhbHJlYWR5LWNvbXBpbGVkIEFTVCB3YXMgcGFzc2VkIGluLlxuICBpZiAoaW5wdXQudHlwZSA9PT0gJ1Byb2dyYW0nKSB7IHJldHVybiBpbnB1dDsgfVxuXG4gIHBhcnNlci55eSA9IHl5O1xuXG4gIC8vIEFsdGVyaW5nIHRoZSBzaGFyZWQgb2JqZWN0IGhlcmUsIGJ1dCB0aGlzIGlzIG9rIGFzIHBhcnNlciBpcyBhIHN5bmMgb3BlcmF0aW9uXG4gIHl5LmxvY0luZm8gPSBmdW5jdGlvbihsb2NJbmZvKSB7XG4gICAgcmV0dXJuIG5ldyB5eS5Tb3VyY2VMb2NhdGlvbihvcHRpb25zICYmIG9wdGlvbnMuc3JjTmFtZSwgbG9jSW5mbyk7XG4gIH07XG5cbiAgbGV0IHN0cmlwID0gbmV3IFdoaXRlc3BhY2VDb250cm9sKG9wdGlvbnMpO1xuICByZXR1cm4gc3RyaXAuYWNjZXB0KHBhcnNlci5wYXJzZShpbnB1dCkpO1xufVxuIiwiLyogZ2xvYmFsIGRlZmluZSAqL1xuaW1wb3J0IHtpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmxldCBTb3VyY2VOb2RlO1xuXG50cnkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJyB8fCAhZGVmaW5lLmFtZCkge1xuICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgdGhpcyBpbiBBTUQgZW52aXJvbm1lbnRzLiBGb3IgdGhlc2UgZW52aXJvbm1lbnRzLCB3ZSBhc3VzbWUgdGhhdFxuICAgIC8vIHRoZXkgYXJlIHJ1bm5pbmcgb24gdGhlIGJyb3dzZXIgYW5kIHRodXMgaGF2ZSBubyBuZWVkIGZvciB0aGUgc291cmNlLW1hcCBsaWJyYXJ5LlxuICAgIGxldCBTb3VyY2VNYXAgPSByZXF1aXJlKCdzb3VyY2UtbWFwJyk7XG4gICAgU291cmNlTm9kZSA9IFNvdXJjZU1hcC5Tb3VyY2VOb2RlO1xuICB9XG59IGNhdGNoIChlcnIpIHtcbiAgLyogTk9QICovXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZjogdGVzdGVkIGJ1dCBub3QgY292ZXJlZCBpbiBpc3RhbmJ1bCBkdWUgdG8gZGlzdCBidWlsZCAgKi9cbmlmICghU291cmNlTm9kZSkge1xuICBTb3VyY2VOb2RlID0gZnVuY3Rpb24obGluZSwgY29sdW1uLCBzcmNGaWxlLCBjaHVua3MpIHtcbiAgICB0aGlzLnNyYyA9ICcnO1xuICAgIGlmIChjaHVua3MpIHtcbiAgICAgIHRoaXMuYWRkKGNodW5rcyk7XG4gICAgfVxuICB9O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZSA9IHtcbiAgICBhZGQ6IGZ1bmN0aW9uKGNodW5rcykge1xuICAgICAgaWYgKGlzQXJyYXkoY2h1bmtzKSkge1xuICAgICAgICBjaHVua3MgPSBjaHVua3Muam9pbignJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnNyYyArPSBjaHVua3M7XG4gICAgfSxcbiAgICBwcmVwZW5kOiBmdW5jdGlvbihjaHVua3MpIHtcbiAgICAgIGlmIChpc0FycmF5KGNodW5rcykpIHtcbiAgICAgICAgY2h1bmtzID0gY2h1bmtzLmpvaW4oJycpO1xuICAgICAgfVxuICAgICAgdGhpcy5zcmMgPSBjaHVua3MgKyB0aGlzLnNyYztcbiAgICB9LFxuICAgIHRvU3RyaW5nV2l0aFNvdXJjZU1hcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge2NvZGU6IHRoaXMudG9TdHJpbmcoKX07XG4gICAgfSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zcmM7XG4gICAgfVxuICB9O1xufVxuXG5cbmZ1bmN0aW9uIGNhc3RDaHVuayhjaHVuaywgY29kZUdlbiwgbG9jKSB7XG4gIGlmIChpc0FycmF5KGNodW5rKSkge1xuICAgIGxldCByZXQgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaHVuay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgcmV0LnB1c2goY29kZUdlbi53cmFwKGNodW5rW2ldLCBsb2MpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgY2h1bmsgPT09ICdudW1iZXInKSB7XG4gICAgLy8gSGFuZGxlIHByaW1pdGl2ZXMgdGhhdCB0aGUgU291cmNlTm9kZSB3aWxsIHRocm93IHVwIG9uXG4gICAgcmV0dXJuIGNodW5rICsgJyc7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5cbmZ1bmN0aW9uIENvZGVHZW4oc3JjRmlsZSkge1xuICB0aGlzLnNyY0ZpbGUgPSBzcmNGaWxlO1xuICB0aGlzLnNvdXJjZSA9IFtdO1xufVxuXG5Db2RlR2VuLnByb3RvdHlwZSA9IHtcbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gIXRoaXMuc291cmNlLmxlbmd0aDtcbiAgfSxcbiAgcHJlcGVuZDogZnVuY3Rpb24oc291cmNlLCBsb2MpIHtcbiAgICB0aGlzLnNvdXJjZS51bnNoaWZ0KHRoaXMud3JhcChzb3VyY2UsIGxvYykpO1xuICB9LFxuICBwdXNoOiBmdW5jdGlvbihzb3VyY2UsIGxvYykge1xuICAgIHRoaXMuc291cmNlLnB1c2godGhpcy53cmFwKHNvdXJjZSwgbG9jKSk7XG4gIH0sXG5cbiAgbWVyZ2U6IGZ1bmN0aW9uKCkge1xuICAgIGxldCBzb3VyY2UgPSB0aGlzLmVtcHR5KCk7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHNvdXJjZS5hZGQoWycgICcsIGxpbmUsICdcXG4nXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfSxcblxuICBlYWNoOiBmdW5jdGlvbihpdGVyKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuc291cmNlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpdGVyKHRoaXMuc291cmNlW2ldKTtcbiAgICB9XG4gIH0sXG5cbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGxldCBsb2MgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbiB8fCB7c3RhcnQ6IHt9fTtcbiAgICByZXR1cm4gbmV3IFNvdXJjZU5vZGUobG9jLnN0YXJ0LmxpbmUsIGxvYy5zdGFydC5jb2x1bW4sIHRoaXMuc3JjRmlsZSk7XG4gIH0sXG4gIHdyYXA6IGZ1bmN0aW9uKGNodW5rLCBsb2MgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbiB8fCB7c3RhcnQ6IHt9fSkge1xuICAgIGlmIChjaHVuayBpbnN0YW5jZW9mIFNvdXJjZU5vZGUpIHtcbiAgICAgIHJldHVybiBjaHVuaztcbiAgICB9XG5cbiAgICBjaHVuayA9IGNhc3RDaHVuayhjaHVuaywgdGhpcywgbG9jKTtcblxuICAgIHJldHVybiBuZXcgU291cmNlTm9kZShsb2Muc3RhcnQubGluZSwgbG9jLnN0YXJ0LmNvbHVtbiwgdGhpcy5zcmNGaWxlLCBjaHVuayk7XG4gIH0sXG5cbiAgZnVuY3Rpb25DYWxsOiBmdW5jdGlvbihmbiwgdHlwZSwgcGFyYW1zKSB7XG4gICAgcGFyYW1zID0gdGhpcy5nZW5lcmF0ZUxpc3QocGFyYW1zKTtcbiAgICByZXR1cm4gdGhpcy53cmFwKFtmbiwgdHlwZSA/ICcuJyArIHR5cGUgKyAnKCcgOiAnKCcsIHBhcmFtcywgJyknXSk7XG4gIH0sXG5cbiAgcXVvdGVkU3RyaW5nOiBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gJ1wiJyArIChzdHIgKyAnJylcbiAgICAgIC5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpXG4gICAgICAucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpXG4gICAgICAucmVwbGFjZSgvXFxuL2csICdcXFxcbicpXG4gICAgICAucmVwbGFjZSgvXFxyL2csICdcXFxccicpXG4gICAgICAucmVwbGFjZSgvXFx1MjAyOC9nLCAnXFxcXHUyMDI4JykgLy8gUGVyIEVjbWEtMjYyIDcuMyArIDcuOC40XG4gICAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5JykgKyAnXCInO1xuICB9LFxuXG4gIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uKG9iaikge1xuICAgIGxldCBwYWlycyA9IFtdO1xuXG4gICAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGNhc3RDaHVuayhvYmpba2V5XSwgdGhpcyk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFt0aGlzLnF1b3RlZFN0cmluZyhrZXkpLCAnOicsIHZhbHVlXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmV0ID0gdGhpcy5nZW5lcmF0ZUxpc3QocGFpcnMpO1xuICAgIHJldC5wcmVwZW5kKCd7Jyk7XG4gICAgcmV0LmFkZCgnfScpO1xuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cblxuICBnZW5lcmF0ZUxpc3Q6IGZ1bmN0aW9uKGVudHJpZXMpIHtcbiAgICBsZXQgcmV0ID0gdGhpcy5lbXB0eSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChpKSB7XG4gICAgICAgIHJldC5hZGQoJywnKTtcbiAgICAgIH1cblxuICAgICAgcmV0LmFkZChjYXN0Q2h1bmsoZW50cmllc1tpXSwgdGhpcykpO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgZ2VuZXJhdGVBcnJheTogZnVuY3Rpb24oZW50cmllcykge1xuICAgIGxldCByZXQgPSB0aGlzLmdlbmVyYXRlTGlzdChlbnRyaWVzKTtcbiAgICByZXQucHJlcGVuZCgnWycpO1xuICAgIHJldC5hZGQoJ10nKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvZGVHZW47XG5cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5ldy1jYXAgKi9cblxuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuaW1wb3J0IHtpc0FycmF5LCBpbmRleE9mLCBleHRlbmR9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBBU1QgZnJvbSAnLi9hc3QnO1xuXG5jb25zdCBzbGljZSA9IFtdLnNsaWNlO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29tcGlsZXIoKSB7fVxuXG4vLyB0aGUgZm91bmRIZWxwZXIgcmVnaXN0ZXIgd2lsbCBkaXNhbWJpZ3VhdGUgaGVscGVyIGxvb2t1cCBmcm9tIGZpbmRpbmcgYVxuLy8gZnVuY3Rpb24gaW4gYSBjb250ZXh0LiBUaGlzIGlzIG5lY2Vzc2FyeSBmb3IgbXVzdGFjaGUgY29tcGF0aWJpbGl0eSwgd2hpY2hcbi8vIHJlcXVpcmVzIHRoYXQgY29udGV4dCBmdW5jdGlvbnMgaW4gYmxvY2tzIGFyZSBldmFsdWF0ZWQgYnkgYmxvY2tIZWxwZXJNaXNzaW5nLFxuLy8gYW5kIHRoZW4gcHJvY2VlZCBhcyBpZiB0aGUgcmVzdWx0aW5nIHZhbHVlIHdhcyBwcm92aWRlZCB0byBibG9ja0hlbHBlck1pc3NpbmcuXG5cbkNvbXBpbGVyLnByb3RvdHlwZSA9IHtcbiAgY29tcGlsZXI6IENvbXBpbGVyLFxuXG4gIGVxdWFsczogZnVuY3Rpb24ob3RoZXIpIHtcbiAgICBsZXQgbGVuID0gdGhpcy5vcGNvZGVzLmxlbmd0aDtcbiAgICBpZiAob3RoZXIub3Bjb2Rlcy5sZW5ndGggIT09IGxlbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGxldCBvcGNvZGUgPSB0aGlzLm9wY29kZXNbaV0sXG4gICAgICAgICAgb3RoZXJPcGNvZGUgPSBvdGhlci5vcGNvZGVzW2ldO1xuICAgICAgaWYgKG9wY29kZS5vcGNvZGUgIT09IG90aGVyT3Bjb2RlLm9wY29kZSB8fCAhYXJnRXF1YWxzKG9wY29kZS5hcmdzLCBvdGhlck9wY29kZS5hcmdzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gV2Uga25vdyB0aGF0IGxlbmd0aCBpcyB0aGUgc2FtZSBiZXR3ZWVuIHRoZSB0d28gYXJyYXlzIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgdGllZFxuICAgIC8vIHRvIHRoZSBvcGNvZGUgYmVoYXZpb3IgYWJvdmUuXG4gICAgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuW2ldLmVxdWFscyhvdGhlci5jaGlsZHJlbltpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIGd1aWQ6IDAsXG5cbiAgY29tcGlsZTogZnVuY3Rpb24ocHJvZ3JhbSwgb3B0aW9ucykge1xuICAgIHRoaXMuc291cmNlTm9kZSA9IFtdO1xuICAgIHRoaXMub3Bjb2RlcyA9IFtdO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3RyaW5nUGFyYW1zID0gb3B0aW9ucy5zdHJpbmdQYXJhbXM7XG4gICAgdGhpcy50cmFja0lkcyA9IG9wdGlvbnMudHJhY2tJZHM7XG5cbiAgICBvcHRpb25zLmJsb2NrUGFyYW1zID0gb3B0aW9ucy5ibG9ja1BhcmFtcyB8fCBbXTtcblxuICAgIC8vIFRoZXNlIGNoYW5nZXMgd2lsbCBwcm9wYWdhdGUgdG8gdGhlIG90aGVyIGNvbXBpbGVyIGNvbXBvbmVudHNcbiAgICBsZXQga25vd25IZWxwZXJzID0gb3B0aW9ucy5rbm93bkhlbHBlcnM7XG4gICAgb3B0aW9ucy5rbm93bkhlbHBlcnMgPSB7XG4gICAgICAnaGVscGVyTWlzc2luZyc6IHRydWUsXG4gICAgICAnYmxvY2tIZWxwZXJNaXNzaW5nJzogdHJ1ZSxcbiAgICAgICdlYWNoJzogdHJ1ZSxcbiAgICAgICdpZic6IHRydWUsXG4gICAgICAndW5sZXNzJzogdHJ1ZSxcbiAgICAgICd3aXRoJzogdHJ1ZSxcbiAgICAgICdsb2cnOiB0cnVlLFxuICAgICAgJ2xvb2t1cCc6IHRydWVcbiAgICB9O1xuICAgIGlmIChrbm93bkhlbHBlcnMpIHtcbiAgICAgIC8vIHRoZSBuZXh0IGxpbmUgc2hvdWxkIHVzZSBcIk9iamVjdC5rZXlzXCIsIGJ1dCB0aGUgY29kZSBoYXMgYmVlbiBsaWtlIHRoaXMgYSBsb25nIHRpbWUgYW5kIGNoYW5naW5nIGl0LCBtaWdodFxuICAgICAgLy8gY2F1c2UgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgaXNzdWVzLi4uIEl0J3MgYW4gb2xkIGxpYnJhcnkuLi5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICAgIGZvciAobGV0IG5hbWUgaW4ga25vd25IZWxwZXJzKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmtub3duSGVscGVyc1tuYW1lXSA9IGtub3duSGVscGVyc1tuYW1lXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hY2NlcHQocHJvZ3JhbSk7XG4gIH0sXG5cbiAgY29tcGlsZVByb2dyYW06IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgICBsZXQgY2hpbGRDb21waWxlciA9IG5ldyB0aGlzLmNvbXBpbGVyKCksIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuICAgICAgICByZXN1bHQgPSBjaGlsZENvbXBpbGVyLmNvbXBpbGUocHJvZ3JhbSwgdGhpcy5vcHRpb25zKSxcbiAgICAgICAgZ3VpZCA9IHRoaXMuZ3VpZCsrO1xuXG4gICAgdGhpcy51c2VQYXJ0aWFsID0gdGhpcy51c2VQYXJ0aWFsIHx8IHJlc3VsdC51c2VQYXJ0aWFsO1xuXG4gICAgdGhpcy5jaGlsZHJlbltndWlkXSA9IHJlc3VsdDtcbiAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IHJlc3VsdC51c2VEZXB0aHM7XG5cbiAgICByZXR1cm4gZ3VpZDtcbiAgfSxcblxuICBhY2NlcHQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogU2FuaXR5IGNvZGUgKi9cbiAgICBpZiAoIXRoaXNbbm9kZS50eXBlXSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVW5rbm93biB0eXBlOiAnICsgbm9kZS50eXBlLCBub2RlKTtcbiAgICB9XG5cbiAgICB0aGlzLnNvdXJjZU5vZGUudW5zaGlmdChub2RlKTtcbiAgICBsZXQgcmV0ID0gdGhpc1tub2RlLnR5cGVdKG5vZGUpO1xuICAgIHRoaXMuc291cmNlTm9kZS5zaGlmdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgUHJvZ3JhbTogZnVuY3Rpb24ocHJvZ3JhbSkge1xuICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy51bnNoaWZ0KHByb2dyYW0uYmxvY2tQYXJhbXMpO1xuXG4gICAgbGV0IGJvZHkgPSBwcm9ncmFtLmJvZHksXG4gICAgICAgIGJvZHlMZW5ndGggPSBib2R5Lmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvZHlMZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5hY2NlcHQoYm9keVtpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zLnNoaWZ0KCk7XG5cbiAgICB0aGlzLmlzU2ltcGxlID0gYm9keUxlbmd0aCA9PT0gMTtcbiAgICB0aGlzLmJsb2NrUGFyYW1zID0gcHJvZ3JhbS5ibG9ja1BhcmFtcyA/IHByb2dyYW0uYmxvY2tQYXJhbXMubGVuZ3RoIDogMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbihibG9jaykge1xuICAgIHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgoYmxvY2spO1xuXG4gICAgbGV0IHByb2dyYW0gPSBibG9jay5wcm9ncmFtLFxuICAgICAgICBpbnZlcnNlID0gYmxvY2suaW52ZXJzZTtcblxuICAgIHByb2dyYW0gPSBwcm9ncmFtICYmIHRoaXMuY29tcGlsZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgaW52ZXJzZSA9IGludmVyc2UgJiYgdGhpcy5jb21waWxlUHJvZ3JhbShpbnZlcnNlKTtcblxuICAgIGxldCB0eXBlID0gdGhpcy5jbGFzc2lmeVNleHByKGJsb2NrKTtcblxuICAgIGlmICh0eXBlID09PSAnaGVscGVyJykge1xuICAgICAgdGhpcy5oZWxwZXJTZXhwcihibG9jaywgcHJvZ3JhbSwgaW52ZXJzZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc2ltcGxlJykge1xuICAgICAgdGhpcy5zaW1wbGVTZXhwcihibG9jayk7XG5cbiAgICAgIC8vIG5vdyB0aGF0IHRoZSBzaW1wbGUgbXVzdGFjaGUgaXMgcmVzb2x2ZWQsIHdlIG5lZWQgdG9cbiAgICAgIC8vIGV2YWx1YXRlIGl0IGJ5IGV4ZWN1dGluZyBgYmxvY2tIZWxwZXJNaXNzaW5nYFxuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XG4gICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdibG9ja1ZhbHVlJywgYmxvY2sucGF0aC5vcmlnaW5hbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYW1iaWd1b3VzU2V4cHIoYmxvY2ssIHByb2dyYW0sIGludmVyc2UpO1xuXG4gICAgICAvLyBub3cgdGhhdCB0aGUgc2ltcGxlIG11c3RhY2hlIGlzIHJlc29sdmVkLCB3ZSBuZWVkIHRvXG4gICAgICAvLyBldmFsdWF0ZSBpdCBieSBleGVjdXRpbmcgYGJsb2NrSGVscGVyTWlzc2luZ2BcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG4gICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJyk7XG4gICAgICB0aGlzLm9wY29kZSgnYW1iaWd1b3VzQmxvY2tWYWx1ZScpO1xuICAgIH1cblxuICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcbiAgfSxcblxuICBEZWNvcmF0b3JCbG9jayhkZWNvcmF0b3IpIHtcbiAgICBsZXQgcHJvZ3JhbSA9IGRlY29yYXRvci5wcm9ncmFtICYmIHRoaXMuY29tcGlsZVByb2dyYW0oZGVjb3JhdG9yLnByb2dyYW0pO1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLnNldHVwRnVsbE11c3RhY2hlUGFyYW1zKGRlY29yYXRvciwgcHJvZ3JhbSwgdW5kZWZpbmVkKSxcbiAgICAgICAgcGF0aCA9IGRlY29yYXRvci5wYXRoO1xuXG4gICAgdGhpcy51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLm9wY29kZSgncmVnaXN0ZXJEZWNvcmF0b3InLCBwYXJhbXMubGVuZ3RoLCBwYXRoLm9yaWdpbmFsKTtcbiAgfSxcblxuICBQYXJ0aWFsU3RhdGVtZW50OiBmdW5jdGlvbihwYXJ0aWFsKSB7XG4gICAgdGhpcy51c2VQYXJ0aWFsID0gdHJ1ZTtcblxuICAgIGxldCBwcm9ncmFtID0gcGFydGlhbC5wcm9ncmFtO1xuICAgIGlmIChwcm9ncmFtKSB7XG4gICAgICBwcm9ncmFtID0gdGhpcy5jb21waWxlUHJvZ3JhbShwYXJ0aWFsLnByb2dyYW0pO1xuICAgIH1cblxuICAgIGxldCBwYXJhbXMgPSBwYXJ0aWFsLnBhcmFtcztcbiAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1Vuc3VwcG9ydGVkIG51bWJlciBvZiBwYXJ0aWFsIGFyZ3VtZW50czogJyArIHBhcmFtcy5sZW5ndGgsIHBhcnRpYWwpO1xuICAgIH0gZWxzZSBpZiAoIXBhcmFtcy5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXhwbGljaXRQYXJ0aWFsQ29udGV4dCkge1xuICAgICAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCAndW5kZWZpbmVkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMucHVzaCh7dHlwZTogJ1BhdGhFeHByZXNzaW9uJywgcGFydHM6IFtdLCBkZXB0aDogMH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwYXJ0aWFsTmFtZSA9IHBhcnRpYWwubmFtZS5vcmlnaW5hbCxcbiAgICAgICAgaXNEeW5hbWljID0gcGFydGlhbC5uYW1lLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJztcbiAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICB0aGlzLmFjY2VwdChwYXJ0aWFsLm5hbWUpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMocGFydGlhbCwgcHJvZ3JhbSwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIGxldCBpbmRlbnQgPSBwYXJ0aWFsLmluZGVudCB8fCAnJztcbiAgICBpZiAodGhpcy5vcHRpb25zLnByZXZlbnRJbmRlbnQgJiYgaW5kZW50KSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXBwZW5kQ29udGVudCcsIGluZGVudCk7XG4gICAgICBpbmRlbnQgPSAnJztcbiAgICB9XG5cbiAgICB0aGlzLm9wY29kZSgnaW52b2tlUGFydGlhbCcsIGlzRHluYW1pYywgcGFydGlhbE5hbWUsIGluZGVudCk7XG4gICAgdGhpcy5vcGNvZGUoJ2FwcGVuZCcpO1xuICB9LFxuICBQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQ6IGZ1bmN0aW9uKHBhcnRpYWxCbG9jaykge1xuICAgIHRoaXMuUGFydGlhbFN0YXRlbWVudChwYXJ0aWFsQmxvY2spO1xuICB9LFxuXG4gIE11c3RhY2hlU3RhdGVtZW50OiBmdW5jdGlvbihtdXN0YWNoZSkge1xuICAgIHRoaXMuU3ViRXhwcmVzc2lvbihtdXN0YWNoZSk7XG5cbiAgICBpZiAobXVzdGFjaGUuZXNjYXBlZCAmJiAhdGhpcy5vcHRpb25zLm5vRXNjYXBlKSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXBwZW5kRXNjYXBlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7XG4gICAgfVxuICB9LFxuICBEZWNvcmF0b3IoZGVjb3JhdG9yKSB7XG4gICAgdGhpcy5EZWNvcmF0b3JCbG9jayhkZWNvcmF0b3IpO1xuICB9LFxuXG5cbiAgQ29udGVudFN0YXRlbWVudDogZnVuY3Rpb24oY29udGVudCkge1xuICAgIGlmIChjb250ZW50LnZhbHVlKSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXBwZW5kQ29udGVudCcsIGNvbnRlbnQudmFsdWUpO1xuICAgIH1cbiAgfSxcblxuICBDb21tZW50U3RhdGVtZW50OiBmdW5jdGlvbigpIHt9LFxuXG4gIFN1YkV4cHJlc3Npb246IGZ1bmN0aW9uKHNleHByKSB7XG4gICAgdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChzZXhwcik7XG4gICAgbGV0IHR5cGUgPSB0aGlzLmNsYXNzaWZ5U2V4cHIoc2V4cHIpO1xuXG4gICAgaWYgKHR5cGUgPT09ICdzaW1wbGUnKSB7XG4gICAgICB0aGlzLnNpbXBsZVNleHByKHNleHByKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdoZWxwZXInKSB7XG4gICAgICB0aGlzLmhlbHBlclNleHByKHNleHByKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hbWJpZ3VvdXNTZXhwcihzZXhwcik7XG4gICAgfVxuICB9LFxuICBhbWJpZ3VvdXNTZXhwcjogZnVuY3Rpb24oc2V4cHIsIHByb2dyYW0sIGludmVyc2UpIHtcbiAgICBsZXQgcGF0aCA9IHNleHByLnBhdGgsXG4gICAgICAgIG5hbWUgPSBwYXRoLnBhcnRzWzBdLFxuICAgICAgICBpc0Jsb2NrID0gcHJvZ3JhbSAhPSBudWxsIHx8IGludmVyc2UgIT0gbnVsbDtcblxuICAgIHRoaXMub3Bjb2RlKCdnZXRDb250ZXh0JywgcGF0aC5kZXB0aCk7XG5cbiAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcbiAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcblxuICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcbiAgICB0aGlzLmFjY2VwdChwYXRoKTtcblxuICAgIHRoaXMub3Bjb2RlKCdpbnZva2VBbWJpZ3VvdXMnLCBuYW1lLCBpc0Jsb2NrKTtcbiAgfSxcblxuICBzaW1wbGVTZXhwcjogZnVuY3Rpb24oc2V4cHIpIHtcbiAgICBsZXQgcGF0aCA9IHNleHByLnBhdGg7XG4gICAgcGF0aC5zdHJpY3QgPSB0cnVlO1xuICAgIHRoaXMuYWNjZXB0KHBhdGgpO1xuICAgIHRoaXMub3Bjb2RlKCdyZXNvbHZlUG9zc2libGVMYW1iZGEnKTtcbiAgfSxcblxuICBoZWxwZXJTZXhwcjogZnVuY3Rpb24oc2V4cHIsIHByb2dyYW0sIGludmVyc2UpIHtcbiAgICBsZXQgcGFyYW1zID0gdGhpcy5zZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSksXG4gICAgICAgIHBhdGggPSBzZXhwci5wYXRoLFxuICAgICAgICBuYW1lID0gcGF0aC5wYXJ0c1swXTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMua25vd25IZWxwZXJzW25hbWVdKSB7XG4gICAgICB0aGlzLm9wY29kZSgnaW52b2tlS25vd25IZWxwZXInLCBwYXJhbXMubGVuZ3RoLCBuYW1lKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNPbmx5KSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdZb3Ugc3BlY2lmaWVkIGtub3duSGVscGVyc09ubHksIGJ1dCB1c2VkIHRoZSB1bmtub3duIGhlbHBlciAnICsgbmFtZSwgc2V4cHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoLnN0cmljdCA9IHRydWU7XG4gICAgICBwYXRoLmZhbHN5ID0gdHJ1ZTtcblxuICAgICAgdGhpcy5hY2NlcHQocGF0aCk7XG4gICAgICB0aGlzLm9wY29kZSgnaW52b2tlSGVscGVyJywgcGFyYW1zLmxlbmd0aCwgcGF0aC5vcmlnaW5hbCwgQVNULmhlbHBlcnMuc2ltcGxlSWQocGF0aCkpO1xuICAgIH1cbiAgfSxcblxuICBQYXRoRXhwcmVzc2lvbjogZnVuY3Rpb24ocGF0aCkge1xuICAgIHRoaXMuYWRkRGVwdGgocGF0aC5kZXB0aCk7XG4gICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCBwYXRoLmRlcHRoKTtcblxuICAgIGxldCBuYW1lID0gcGF0aC5wYXJ0c1swXSxcbiAgICAgICAgc2NvcGVkID0gQVNULmhlbHBlcnMuc2NvcGVkSWQocGF0aCksXG4gICAgICAgIGJsb2NrUGFyYW1JZCA9ICFwYXRoLmRlcHRoICYmICFzY29wZWQgJiYgdGhpcy5ibG9ja1BhcmFtSW5kZXgobmFtZSk7XG5cbiAgICBpZiAoYmxvY2tQYXJhbUlkKSB7XG4gICAgICB0aGlzLm9wY29kZSgnbG9va3VwQmxvY2tQYXJhbScsIGJsb2NrUGFyYW1JZCwgcGF0aC5wYXJ0cyk7XG4gICAgfSBlbHNlIGlmICghbmFtZSkge1xuICAgICAgLy8gQ29udGV4dCByZWZlcmVuY2UsIGkuZS4gYHt7Zm9vIC59fWAgb3IgYHt7Zm9vIC4ufX1gXG4gICAgICB0aGlzLm9wY29kZSgncHVzaENvbnRleHQnKTtcbiAgICB9IGVsc2UgaWYgKHBhdGguZGF0YSkge1xuICAgICAgdGhpcy5vcHRpb25zLmRhdGEgPSB0cnVlO1xuICAgICAgdGhpcy5vcGNvZGUoJ2xvb2t1cERhdGEnLCBwYXRoLmRlcHRoLCBwYXRoLnBhcnRzLCBwYXRoLnN0cmljdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBPbkNvbnRleHQnLCBwYXRoLnBhcnRzLCBwYXRoLmZhbHN5LCBwYXRoLnN0cmljdCwgc2NvcGVkKTtcbiAgICB9XG4gIH0sXG5cbiAgU3RyaW5nTGl0ZXJhbDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hTdHJpbmcnLCBzdHJpbmcudmFsdWUpO1xuICB9LFxuXG4gIE51bWJlckxpdGVyYWw6IGZ1bmN0aW9uKG51bWJlcikge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIG51bWJlci52YWx1ZSk7XG4gIH0sXG5cbiAgQm9vbGVhbkxpdGVyYWw6IGZ1bmN0aW9uKGJvb2wpIHtcbiAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCBib29sLnZhbHVlKTtcbiAgfSxcblxuICBVbmRlZmluZWRMaXRlcmFsOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCAndW5kZWZpbmVkJyk7XG4gIH0sXG5cbiAgTnVsbExpdGVyYWw6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICdudWxsJyk7XG4gIH0sXG5cbiAgSGFzaDogZnVuY3Rpb24oaGFzaCkge1xuICAgIGxldCBwYWlycyA9IGhhc2gucGFpcnMsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBsID0gcGFpcnMubGVuZ3RoO1xuXG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hIYXNoJyk7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5wdXNoUGFyYW0ocGFpcnNbaV0udmFsdWUpO1xuICAgIH1cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXNzaWduVG9IYXNoJywgcGFpcnNbaV0ua2V5KTtcbiAgICB9XG4gICAgdGhpcy5vcGNvZGUoJ3BvcEhhc2gnKTtcbiAgfSxcblxuICAvLyBIRUxQRVJTXG4gIG9wY29kZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHRoaXMub3Bjb2Rlcy5wdXNoKHsgb3Bjb2RlOiBuYW1lLCBhcmdzOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGxvYzogdGhpcy5zb3VyY2VOb2RlWzBdLmxvYyB9KTtcbiAgfSxcblxuICBhZGREZXB0aDogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICBpZiAoIWRlcHRoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy51c2VEZXB0aHMgPSB0cnVlO1xuICB9LFxuXG4gIGNsYXNzaWZ5U2V4cHI6IGZ1bmN0aW9uKHNleHByKSB7XG4gICAgbGV0IGlzU2ltcGxlID0gQVNULmhlbHBlcnMuc2ltcGxlSWQoc2V4cHIucGF0aCk7XG5cbiAgICBsZXQgaXNCbG9ja1BhcmFtID0gaXNTaW1wbGUgJiYgISF0aGlzLmJsb2NrUGFyYW1JbmRleChzZXhwci5wYXRoLnBhcnRzWzBdKTtcblxuICAgIC8vIGEgbXVzdGFjaGUgaXMgYW4gZWxpZ2libGUgaGVscGVyIGlmOlxuICAgIC8vICogaXRzIGlkIGlzIHNpbXBsZSAoYSBzaW5nbGUgcGFydCwgbm90IGB0aGlzYCBvciBgLi5gKVxuICAgIGxldCBpc0hlbHBlciA9ICFpc0Jsb2NrUGFyYW0gJiYgQVNULmhlbHBlcnMuaGVscGVyRXhwcmVzc2lvbihzZXhwcik7XG5cbiAgICAvLyBpZiBhIG11c3RhY2hlIGlzIGFuIGVsaWdpYmxlIGhlbHBlciBidXQgbm90IGEgZGVmaW5pdGVcbiAgICAvLyBoZWxwZXIsIGl0IGlzIGFtYmlndW91cywgYW5kIHdpbGwgYmUgcmVzb2x2ZWQgaW4gYSBsYXRlclxuICAgIC8vIHBhc3Mgb3IgYXQgcnVudGltZS5cbiAgICBsZXQgaXNFbGlnaWJsZSA9ICFpc0Jsb2NrUGFyYW0gJiYgKGlzSGVscGVyIHx8IGlzU2ltcGxlKTtcblxuICAgIC8vIGlmIGFtYmlndW91cywgd2UgY2FuIHBvc3NpYmx5IHJlc29sdmUgdGhlIGFtYmlndWl0eSBub3dcbiAgICAvLyBBbiBlbGlnaWJsZSBoZWxwZXIgaXMgb25lIHRoYXQgZG9lcyBub3QgaGF2ZSBhIGNvbXBsZXggcGF0aCwgaS5lLiBgdGhpcy5mb29gLCBgLi4vZm9vYCBldGMuXG4gICAgaWYgKGlzRWxpZ2libGUgJiYgIWlzSGVscGVyKSB7XG4gICAgICBsZXQgbmFtZSA9IHNleHByLnBhdGgucGFydHNbMF0sXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKG9wdGlvbnMua25vd25IZWxwZXJzW25hbWVdKSB7XG4gICAgICAgIGlzSGVscGVyID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5rbm93bkhlbHBlcnNPbmx5KSB7XG4gICAgICAgIGlzRWxpZ2libGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNIZWxwZXIpIHtcbiAgICAgIHJldHVybiAnaGVscGVyJztcbiAgICB9IGVsc2UgaWYgKGlzRWxpZ2libGUpIHtcbiAgICAgIHJldHVybiAnYW1iaWd1b3VzJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdzaW1wbGUnO1xuICAgIH1cbiAgfSxcblxuICBwdXNoUGFyYW1zOiBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcmFtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHVzaFBhcmFtKHBhcmFtc1tpXSk7XG4gICAgfVxuICB9LFxuXG4gIHB1c2hQYXJhbTogZnVuY3Rpb24odmFsKSB7XG4gICAgbGV0IHZhbHVlID0gdmFsLnZhbHVlICE9IG51bGwgPyB2YWwudmFsdWUgOiB2YWwub3JpZ2luYWwgfHwgJyc7XG5cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIGlmICh2YWx1ZS5yZXBsYWNlKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eKFxcLj9cXC5cXC8pKi9nLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC8vZywgJy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbC5kZXB0aCkge1xuICAgICAgICB0aGlzLmFkZERlcHRoKHZhbC5kZXB0aCk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wY29kZSgnZ2V0Q29udGV4dCcsIHZhbC5kZXB0aCB8fCAwKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoU3RyaW5nUGFyYW0nLCB2YWx1ZSwgdmFsLnR5cGUpO1xuXG4gICAgICBpZiAodmFsLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJykge1xuICAgICAgICAvLyBTdWJFeHByZXNzaW9ucyBnZXQgZXZhbHVhdGVkIGFuZCBwYXNzZWQgaW5cbiAgICAgICAgLy8gaW4gc3RyaW5nIHBhcmFtcyBtb2RlLlxuICAgICAgICB0aGlzLmFjY2VwdCh2YWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgICBsZXQgYmxvY2tQYXJhbUluZGV4O1xuICAgICAgICBpZiAodmFsLnBhcnRzICYmICFBU1QuaGVscGVycy5zY29wZWRJZCh2YWwpICYmICF2YWwuZGVwdGgpIHtcbiAgICAgICAgICAgYmxvY2tQYXJhbUluZGV4ID0gdGhpcy5ibG9ja1BhcmFtSW5kZXgodmFsLnBhcnRzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmxvY2tQYXJhbUluZGV4KSB7XG4gICAgICAgICAgbGV0IGJsb2NrUGFyYW1DaGlsZCA9IHZhbC5wYXJ0cy5zbGljZSgxKS5qb2luKCcuJyk7XG4gICAgICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hJZCcsICdCbG9ja1BhcmFtJywgYmxvY2tQYXJhbUluZGV4LCBibG9ja1BhcmFtQ2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gdmFsLm9yaWdpbmFsIHx8IHZhbHVlO1xuICAgICAgICAgIGlmICh2YWx1ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL150aGlzKD86XFwufCQpLywgJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL15cXC5cXC8vLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXlxcLiQvLCAnJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hJZCcsIHZhbC50eXBlLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuYWNjZXB0KHZhbCk7XG4gICAgfVxuICB9LFxuXG4gIHNldHVwRnVsbE11c3RhY2hlUGFyYW1zOiBmdW5jdGlvbihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSwgb21pdEVtcHR5KSB7XG4gICAgbGV0IHBhcmFtcyA9IHNleHByLnBhcmFtcztcbiAgICB0aGlzLnB1c2hQYXJhbXMocGFyYW1zKTtcblxuICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuXG4gICAgaWYgKHNleHByLmhhc2gpIHtcbiAgICAgIHRoaXMuYWNjZXB0KHNleHByLmhhc2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJywgb21pdEVtcHR5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9LFxuXG4gIGJsb2NrUGFyYW1JbmRleDogZnVuY3Rpb24obmFtZSkge1xuICAgIGZvciAobGV0IGRlcHRoID0gMCwgbGVuID0gdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zLmxlbmd0aDsgZGVwdGggPCBsZW47IGRlcHRoKyspIHtcbiAgICAgIGxldCBibG9ja1BhcmFtcyA9IHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtc1tkZXB0aF0sXG4gICAgICAgICAgcGFyYW0gPSBibG9ja1BhcmFtcyAmJiBpbmRleE9mKGJsb2NrUGFyYW1zLCBuYW1lKTtcbiAgICAgIGlmIChibG9ja1BhcmFtcyAmJiBwYXJhbSA+PSAwKSB7XG4gICAgICAgIHJldHVybiBbZGVwdGgsIHBhcmFtXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVjb21waWxlKGlucHV0LCBvcHRpb25zLCBlbnYpIHtcbiAgaWYgKGlucHV0ID09IG51bGwgfHwgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgJiYgaW5wdXQudHlwZSAhPT0gJ1Byb2dyYW0nKSkge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1lvdSBtdXN0IHBhc3MgYSBzdHJpbmcgb3IgSGFuZGxlYmFycyBBU1QgdG8gSGFuZGxlYmFycy5wcmVjb21waWxlLiBZb3UgcGFzc2VkICcgKyBpbnB1dCk7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCEoJ2RhdGEnIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kYXRhID0gdHJ1ZTtcbiAgfVxuICBpZiAob3B0aW9ucy5jb21wYXQpIHtcbiAgICBvcHRpb25zLnVzZURlcHRocyA9IHRydWU7XG4gIH1cblxuICBsZXQgYXN0ID0gZW52LnBhcnNlKGlucHV0LCBvcHRpb25zKSxcbiAgICAgIGVudmlyb25tZW50ID0gbmV3IGVudi5Db21waWxlcigpLmNvbXBpbGUoYXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIG5ldyBlbnYuSmF2YVNjcmlwdENvbXBpbGVyKCkuY29tcGlsZShlbnZpcm9ubWVudCwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlKGlucHV0LCBvcHRpb25zID0ge30sIGVudikge1xuICBpZiAoaW5wdXQgPT0gbnVsbCB8fCAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJyAmJiBpbnB1dC50eXBlICE9PSAnUHJvZ3JhbScpKSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignWW91IG11c3QgcGFzcyBhIHN0cmluZyBvciBIYW5kbGViYXJzIEFTVCB0byBIYW5kbGViYXJzLmNvbXBpbGUuIFlvdSBwYXNzZWQgJyArIGlucHV0KTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuICBpZiAoISgnZGF0YScgaW4gb3B0aW9ucykpIHtcbiAgICBvcHRpb25zLmRhdGEgPSB0cnVlO1xuICB9XG4gIGlmIChvcHRpb25zLmNvbXBhdCkge1xuICAgIG9wdGlvbnMudXNlRGVwdGhzID0gdHJ1ZTtcbiAgfVxuXG4gIGxldCBjb21waWxlZDtcblxuICBmdW5jdGlvbiBjb21waWxlSW5wdXQoKSB7XG4gICAgbGV0IGFzdCA9IGVudi5wYXJzZShpbnB1dCwgb3B0aW9ucyksXG4gICAgICAgIGVudmlyb25tZW50ID0gbmV3IGVudi5Db21waWxlcigpLmNvbXBpbGUoYXN0LCBvcHRpb25zKSxcbiAgICAgICAgdGVtcGxhdGVTcGVjID0gbmV3IGVudi5KYXZhU2NyaXB0Q29tcGlsZXIoKS5jb21waWxlKGVudmlyb25tZW50LCBvcHRpb25zLCB1bmRlZmluZWQsIHRydWUpO1xuICAgIHJldHVybiBlbnYudGVtcGxhdGUodGVtcGxhdGVTcGVjKTtcbiAgfVxuXG4gIC8vIFRlbXBsYXRlIGlzIG9ubHkgY29tcGlsZWQgb24gZmlyc3QgdXNlIGFuZCBjYWNoZWQgYWZ0ZXIgdGhhdCBwb2ludC5cbiAgZnVuY3Rpb24gcmV0KGNvbnRleHQsIGV4ZWNPcHRpb25zKSB7XG4gICAgaWYgKCFjb21waWxlZCkge1xuICAgICAgY29tcGlsZWQgPSBjb21waWxlSW5wdXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBpbGVkLmNhbGwodGhpcywgY29udGV4dCwgZXhlY09wdGlvbnMpO1xuICB9XG4gIHJldC5fc2V0dXAgPSBmdW5jdGlvbihzZXR1cE9wdGlvbnMpIHtcbiAgICBpZiAoIWNvbXBpbGVkKSB7XG4gICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGlsZWQuX3NldHVwKHNldHVwT3B0aW9ucyk7XG4gIH07XG4gIHJldC5fY2hpbGQgPSBmdW5jdGlvbihpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgaWYgKCFjb21waWxlZCkge1xuICAgICAgY29tcGlsZWQgPSBjb21waWxlSW5wdXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBpbGVkLl9jaGlsZChpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgfTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gYXJnRXF1YWxzKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KGEpICYmIGlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWFyZ0VxdWFscyhhW2ldLCBiW2ldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgoc2V4cHIpIHtcbiAgaWYgKCFzZXhwci5wYXRoLnBhcnRzKSB7XG4gICAgbGV0IGxpdGVyYWwgPSBzZXhwci5wYXRoO1xuICAgIC8vIENhc3RpbmcgdG8gc3RyaW5nIGhlcmUgdG8gbWFrZSBmYWxzZSBhbmQgMCBsaXRlcmFsIHZhbHVlcyBwbGF5IG5pY2VseSB3aXRoIHRoZSByZXN0XG4gICAgLy8gb2YgdGhlIHN5c3RlbS5cbiAgICBzZXhwci5wYXRoID0ge1xuICAgICAgdHlwZTogJ1BhdGhFeHByZXNzaW9uJyxcbiAgICAgIGRhdGE6IGZhbHNlLFxuICAgICAgZGVwdGg6IDAsXG4gICAgICBwYXJ0czogW2xpdGVyYWwub3JpZ2luYWwgKyAnJ10sXG4gICAgICBvcmlnaW5hbDogbGl0ZXJhbC5vcmlnaW5hbCArICcnLFxuICAgICAgbG9jOiBsaXRlcmFsLmxvY1xuICAgIH07XG4gIH1cbn1cbiIsImltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZnVuY3Rpb24gdmFsaWRhdGVDbG9zZShvcGVuLCBjbG9zZSkge1xuICBjbG9zZSA9IGNsb3NlLnBhdGggPyBjbG9zZS5wYXRoLm9yaWdpbmFsIDogY2xvc2U7XG5cbiAgaWYgKG9wZW4ucGF0aC5vcmlnaW5hbCAhPT0gY2xvc2UpIHtcbiAgICBsZXQgZXJyb3JOb2RlID0ge2xvYzogb3Blbi5wYXRoLmxvY307XG5cbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKG9wZW4ucGF0aC5vcmlnaW5hbCArIFwiIGRvZXNuJ3QgbWF0Y2ggXCIgKyBjbG9zZSwgZXJyb3JOb2RlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gU291cmNlTG9jYXRpb24oc291cmNlLCBsb2NJbmZvKSB7XG4gIHRoaXMuc291cmNlID0gc291cmNlO1xuICB0aGlzLnN0YXJ0ID0ge1xuICAgIGxpbmU6IGxvY0luZm8uZmlyc3RfbGluZSxcbiAgICBjb2x1bW46IGxvY0luZm8uZmlyc3RfY29sdW1uXG4gIH07XG4gIHRoaXMuZW5kID0ge1xuICAgIGxpbmU6IGxvY0luZm8ubGFzdF9saW5lLFxuICAgIGNvbHVtbjogbG9jSW5mby5sYXN0X2NvbHVtblxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaWQodG9rZW4pIHtcbiAgaWYgKC9eXFxbLipcXF0kLy50ZXN0KHRva2VuKSkge1xuICAgIHJldHVybiB0b2tlbi5zdWJzdHIoMSwgdG9rZW4ubGVuZ3RoIC0gMik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEZsYWdzKG9wZW4sIGNsb3NlKSB7XG4gIHJldHVybiB7XG4gICAgb3Blbjogb3Blbi5jaGFyQXQoMikgPT09ICd+JyxcbiAgICBjbG9zZTogY2xvc2UuY2hhckF0KGNsb3NlLmxlbmd0aCAtIDMpID09PSAnfidcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwQ29tbWVudChjb21tZW50KSB7XG4gIHJldHVybiBjb21tZW50LnJlcGxhY2UoL15cXHtcXHt+PyEtPy0/LywgJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLy0/LT9+P1xcfVxcfSQvLCAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUGF0aChkYXRhLCBwYXJ0cywgbG9jKSB7XG4gIGxvYyA9IHRoaXMubG9jSW5mbyhsb2MpO1xuXG4gIGxldCBvcmlnaW5hbCA9IGRhdGEgPyAnQCcgOiAnJyxcbiAgICAgIGRpZyA9IFtdLFxuICAgICAgZGVwdGggPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IHBhcnQgPSBwYXJ0c1tpXS5wYXJ0LFxuICAgICAgICAvLyBJZiB3ZSBoYXZlIFtdIHN5bnRheCB0aGVuIHdlIGRvIG5vdCB0cmVhdCBwYXRoIHJlZmVyZW5jZXMgYXMgb3BlcmF0b3JzLFxuICAgICAgICAvLyBpLmUuIGZvby5bdGhpc10gcmVzb2x2ZXMgdG8gYXBwcm94aW1hdGVseSBjb250ZXh0LmZvb1sndGhpcyddXG4gICAgICAgIGlzTGl0ZXJhbCA9IHBhcnRzW2ldLm9yaWdpbmFsICE9PSBwYXJ0O1xuICAgIG9yaWdpbmFsICs9IChwYXJ0c1tpXS5zZXBhcmF0b3IgfHwgJycpICsgcGFydDtcblxuICAgIGlmICghaXNMaXRlcmFsICYmIChwYXJ0ID09PSAnLi4nIHx8IHBhcnQgPT09ICcuJyB8fCBwYXJ0ID09PSAndGhpcycpKSB7XG4gICAgICBpZiAoZGlnLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignSW52YWxpZCBwYXRoOiAnICsgb3JpZ2luYWwsIHtsb2N9KTtcbiAgICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgICBkZXB0aCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkaWcucHVzaChwYXJ0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQYXRoRXhwcmVzc2lvbicsXG4gICAgZGF0YSxcbiAgICBkZXB0aCxcbiAgICBwYXJ0czogZGlnLFxuICAgIG9yaWdpbmFsLFxuICAgIGxvY1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZU11c3RhY2hlKHBhdGgsIHBhcmFtcywgaGFzaCwgb3Blbiwgc3RyaXAsIGxvY0luZm8pIHtcbiAgLy8gTXVzdCB1c2UgY2hhckF0IHRvIHN1cHBvcnQgSUUgcHJlLTEwXG4gIGxldCBlc2NhcGVGbGFnID0gb3Blbi5jaGFyQXQoMykgfHwgb3Blbi5jaGFyQXQoMiksXG4gICAgICBlc2NhcGVkID0gZXNjYXBlRmxhZyAhPT0gJ3snICYmIGVzY2FwZUZsYWcgIT09ICcmJztcblxuICBsZXQgZGVjb3JhdG9yID0gKC9cXCovLnRlc3Qob3BlbikpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGRlY29yYXRvciA/ICdEZWNvcmF0b3InIDogJ011c3RhY2hlU3RhdGVtZW50JyxcbiAgICBwYXRoLFxuICAgIHBhcmFtcyxcbiAgICBoYXNoLFxuICAgIGVzY2FwZWQsXG4gICAgc3RyaXAsXG4gICAgbG9jOiB0aGlzLmxvY0luZm8obG9jSW5mbylcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVSYXdCbG9jayhvcGVuUmF3QmxvY2ssIGNvbnRlbnRzLCBjbG9zZSwgbG9jSW5mbykge1xuICB2YWxpZGF0ZUNsb3NlKG9wZW5SYXdCbG9jaywgY2xvc2UpO1xuXG4gIGxvY0luZm8gPSB0aGlzLmxvY0luZm8obG9jSW5mbyk7XG4gIGxldCBwcm9ncmFtID0ge1xuICAgIHR5cGU6ICdQcm9ncmFtJyxcbiAgICBib2R5OiBjb250ZW50cyxcbiAgICBzdHJpcDoge30sXG4gICAgbG9jOiBsb2NJbmZvXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQmxvY2tTdGF0ZW1lbnQnLFxuICAgIHBhdGg6IG9wZW5SYXdCbG9jay5wYXRoLFxuICAgIHBhcmFtczogb3BlblJhd0Jsb2NrLnBhcmFtcyxcbiAgICBoYXNoOiBvcGVuUmF3QmxvY2suaGFzaCxcbiAgICBwcm9ncmFtLFxuICAgIG9wZW5TdHJpcDoge30sXG4gICAgaW52ZXJzZVN0cmlwOiB7fSxcbiAgICBjbG9zZVN0cmlwOiB7fSxcbiAgICBsb2M6IGxvY0luZm9cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVCbG9jayhvcGVuQmxvY2ssIHByb2dyYW0sIGludmVyc2VBbmRQcm9ncmFtLCBjbG9zZSwgaW52ZXJ0ZWQsIGxvY0luZm8pIHtcbiAgaWYgKGNsb3NlICYmIGNsb3NlLnBhdGgpIHtcbiAgICB2YWxpZGF0ZUNsb3NlKG9wZW5CbG9jaywgY2xvc2UpO1xuICB9XG5cbiAgbGV0IGRlY29yYXRvciA9ICgvXFwqLy50ZXN0KG9wZW5CbG9jay5vcGVuKSk7XG5cbiAgcHJvZ3JhbS5ibG9ja1BhcmFtcyA9IG9wZW5CbG9jay5ibG9ja1BhcmFtcztcblxuICBsZXQgaW52ZXJzZSxcbiAgICAgIGludmVyc2VTdHJpcDtcblxuICBpZiAoaW52ZXJzZUFuZFByb2dyYW0pIHtcbiAgICBpZiAoZGVjb3JhdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmV4cGVjdGVkIGludmVyc2UgYmxvY2sgb24gZGVjb3JhdG9yJywgaW52ZXJzZUFuZFByb2dyYW0pO1xuICAgIH1cblxuICAgIGlmIChpbnZlcnNlQW5kUHJvZ3JhbS5jaGFpbikge1xuICAgICAgaW52ZXJzZUFuZFByb2dyYW0ucHJvZ3JhbS5ib2R5WzBdLmNsb3NlU3RyaXAgPSBjbG9zZS5zdHJpcDtcbiAgICB9XG5cbiAgICBpbnZlcnNlU3RyaXAgPSBpbnZlcnNlQW5kUHJvZ3JhbS5zdHJpcDtcbiAgICBpbnZlcnNlID0gaW52ZXJzZUFuZFByb2dyYW0ucHJvZ3JhbTtcbiAgfVxuXG4gIGlmIChpbnZlcnRlZCkge1xuICAgIGludmVydGVkID0gaW52ZXJzZTtcbiAgICBpbnZlcnNlID0gcHJvZ3JhbTtcbiAgICBwcm9ncmFtID0gaW52ZXJ0ZWQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6IGRlY29yYXRvciA/ICdEZWNvcmF0b3JCbG9jaycgOiAnQmxvY2tTdGF0ZW1lbnQnLFxuICAgIHBhdGg6IG9wZW5CbG9jay5wYXRoLFxuICAgIHBhcmFtczogb3BlbkJsb2NrLnBhcmFtcyxcbiAgICBoYXNoOiBvcGVuQmxvY2suaGFzaCxcbiAgICBwcm9ncmFtLFxuICAgIGludmVyc2UsXG4gICAgb3BlblN0cmlwOiBvcGVuQmxvY2suc3RyaXAsXG4gICAgaW52ZXJzZVN0cmlwLFxuICAgIGNsb3NlU3RyaXA6IGNsb3NlICYmIGNsb3NlLnN0cmlwLFxuICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUHJvZ3JhbShzdGF0ZW1lbnRzLCBsb2MpIHtcbiAgaWYgKCFsb2MgJiYgc3RhdGVtZW50cy5sZW5ndGgpIHtcbiAgICBjb25zdCBmaXJzdExvYyA9IHN0YXRlbWVudHNbMF0ubG9jLFxuICAgICAgICAgIGxhc3RMb2MgPSBzdGF0ZW1lbnRzW3N0YXRlbWVudHMubGVuZ3RoIC0gMV0ubG9jO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoZmlyc3RMb2MgJiYgbGFzdExvYykge1xuICAgICAgbG9jID0ge1xuICAgICAgICBzb3VyY2U6IGZpcnN0TG9jLnNvdXJjZSxcbiAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICBsaW5lOiBmaXJzdExvYy5zdGFydC5saW5lLFxuICAgICAgICAgIGNvbHVtbjogZmlyc3RMb2Muc3RhcnQuY29sdW1uXG4gICAgICAgIH0sXG4gICAgICAgIGVuZDoge1xuICAgICAgICAgIGxpbmU6IGxhc3RMb2MuZW5kLmxpbmUsXG4gICAgICAgICAgY29sdW1uOiBsYXN0TG9jLmVuZC5jb2x1bW5cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQcm9ncmFtJyxcbiAgICBib2R5OiBzdGF0ZW1lbnRzLFxuICAgIHN0cmlwOiB7fSxcbiAgICBsb2M6IGxvY1xuICB9O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUGFydGlhbEJsb2NrKG9wZW4sIHByb2dyYW0sIGNsb3NlLCBsb2NJbmZvKSB7XG4gIHZhbGlkYXRlQ2xvc2Uob3BlbiwgY2xvc2UpO1xuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1BhcnRpYWxCbG9ja1N0YXRlbWVudCcsXG4gICAgbmFtZTogb3Blbi5wYXRoLFxuICAgIHBhcmFtczogb3Blbi5wYXJhbXMsXG4gICAgaGFzaDogb3Blbi5oYXNoLFxuICAgIHByb2dyYW0sXG4gICAgb3BlblN0cmlwOiBvcGVuLnN0cmlwLFxuICAgIGNsb3NlU3RyaXA6IGNsb3NlICYmIGNsb3NlLnN0cmlwLFxuICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXG4gIH07XG59XG5cbiIsImltcG9ydCB7IENPTVBJTEVSX1JFVklTSU9OLCBSRVZJU0lPTl9DSEFOR0VTIH0gZnJvbSAnLi4vYmFzZSc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5pbXBvcnQge2lzQXJyYXl9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBDb2RlR2VuIGZyb20gJy4vY29kZS1nZW4nO1xuXG5mdW5jdGlvbiBMaXRlcmFsKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gSmF2YVNjcmlwdENvbXBpbGVyKCkge31cblxuSmF2YVNjcmlwdENvbXBpbGVyLnByb3RvdHlwZSA9IHtcbiAgLy8gUFVCTElDIEFQSTogWW91IGNhbiBvdmVycmlkZSB0aGVzZSBtZXRob2RzIGluIGEgc3ViY2xhc3MgdG8gcHJvdmlkZVxuICAvLyBhbHRlcm5hdGl2ZSBjb21waWxlZCBmb3JtcyBmb3IgbmFtZSBsb29rdXAgYW5kIGJ1ZmZlcmluZyBzZW1hbnRpY3NcbiAgbmFtZUxvb2t1cDogZnVuY3Rpb24ocGFyZW50LCBuYW1lLyogLCB0eXBlKi8pIHtcbiAgICBpZiAoSmF2YVNjcmlwdENvbXBpbGVyLmlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lKG5hbWUpKSB7XG4gICAgICByZXR1cm4gW3BhcmVudCwgJy4nLCBuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtwYXJlbnQsICdbJywgSlNPTi5zdHJpbmdpZnkobmFtZSksICddJ107XG4gICAgfVxuICB9LFxuICBkZXB0aGVkTG9va3VwOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIFt0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmxvb2t1cCcpLCAnKGRlcHRocywgXCInLCBuYW1lLCAnXCIpJ107XG4gIH0sXG5cbiAgY29tcGlsZXJJbmZvOiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCByZXZpc2lvbiA9IENPTVBJTEVSX1JFVklTSU9OLFxuICAgICAgICAgIHZlcnNpb25zID0gUkVWSVNJT05fQ0hBTkdFU1tyZXZpc2lvbl07XG4gICAgcmV0dXJuIFtyZXZpc2lvbiwgdmVyc2lvbnNdO1xuICB9LFxuXG4gIGFwcGVuZFRvQnVmZmVyOiBmdW5jdGlvbihzb3VyY2UsIGxvY2F0aW9uLCBleHBsaWNpdCkge1xuICAgIC8vIEZvcmNlIGEgc291cmNlIGFzIHRoaXMgc2ltcGxpZmllcyB0aGUgbWVyZ2UgbG9naWMuXG4gICAgaWYgKCFpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHNvdXJjZSA9IFtzb3VyY2VdO1xuICAgIH1cbiAgICBzb3VyY2UgPSB0aGlzLnNvdXJjZS53cmFwKHNvdXJjZSwgbG9jYXRpb24pO1xuXG4gICAgaWYgKHRoaXMuZW52aXJvbm1lbnQuaXNTaW1wbGUpIHtcbiAgICAgIHJldHVybiBbJ3JldHVybiAnLCBzb3VyY2UsICc7J107XG4gICAgfSBlbHNlIGlmIChleHBsaWNpdCkge1xuICAgICAgLy8gVGhpcyBpcyBhIGNhc2Ugd2hlcmUgdGhlIGJ1ZmZlciBvcGVyYXRpb24gb2NjdXJzIGFzIGEgY2hpbGQgb2YgYW5vdGhlclxuICAgICAgLy8gY29uc3RydWN0LCBnZW5lcmFsbHkgYnJhY2VzLiBXZSBoYXZlIHRvIGV4cGxpY2l0bHkgb3V0cHV0IHRoZXNlIGJ1ZmZlclxuICAgICAgLy8gb3BlcmF0aW9ucyB0byBlbnN1cmUgdGhhdCB0aGUgZW1pdHRlZCBjb2RlIGdvZXMgaW4gdGhlIGNvcnJlY3QgbG9jYXRpb24uXG4gICAgICByZXR1cm4gWydidWZmZXIgKz0gJywgc291cmNlLCAnOyddO1xuICAgIH0gZWxzZSB7XG4gICAgICBzb3VyY2UuYXBwZW5kVG9CdWZmZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG4gIH0sXG5cbiAgaW5pdGlhbGl6ZUJ1ZmZlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVvdGVkU3RyaW5nKCcnKTtcbiAgfSxcbiAgLy8gRU5EIFBVQkxJQyBBUElcblxuICBjb21waWxlOiBmdW5jdGlvbihlbnZpcm9ubWVudCwgb3B0aW9ucywgY29udGV4dCwgYXNPYmplY3QpIHtcbiAgICB0aGlzLmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnN0cmluZ1BhcmFtcyA9IHRoaXMub3B0aW9ucy5zdHJpbmdQYXJhbXM7XG4gICAgdGhpcy50cmFja0lkcyA9IHRoaXMub3B0aW9ucy50cmFja0lkcztcbiAgICB0aGlzLnByZWNvbXBpbGUgPSAhYXNPYmplY3Q7XG5cbiAgICB0aGlzLm5hbWUgPSB0aGlzLmVudmlyb25tZW50Lm5hbWU7XG4gICAgdGhpcy5pc0NoaWxkID0gISFjb250ZXh0O1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQgfHwge1xuICAgICAgZGVjb3JhdG9yczogW10sXG4gICAgICBwcm9ncmFtczogW10sXG4gICAgICBlbnZpcm9ubWVudHM6IFtdXG4gICAgfTtcblxuICAgIHRoaXMucHJlYW1ibGUoKTtcblxuICAgIHRoaXMuc3RhY2tTbG90ID0gMDtcbiAgICB0aGlzLnN0YWNrVmFycyA9IFtdO1xuICAgIHRoaXMuYWxpYXNlcyA9IHt9O1xuICAgIHRoaXMucmVnaXN0ZXJzID0geyBsaXN0OiBbXSB9O1xuICAgIHRoaXMuaGFzaGVzID0gW107XG4gICAgdGhpcy5jb21waWxlU3RhY2sgPSBbXTtcbiAgICB0aGlzLmlubGluZVN0YWNrID0gW107XG4gICAgdGhpcy5ibG9ja1BhcmFtcyA9IFtdO1xuXG4gICAgdGhpcy5jb21waWxlQ2hpbGRyZW4oZW52aXJvbm1lbnQsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBlbnZpcm9ubWVudC51c2VEZXB0aHMgfHwgZW52aXJvbm1lbnQudXNlRGVjb3JhdG9ycyB8fCB0aGlzLm9wdGlvbnMuY29tcGF0O1xuICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGVudmlyb25tZW50LnVzZUJsb2NrUGFyYW1zO1xuXG4gICAgbGV0IG9wY29kZXMgPSBlbnZpcm9ubWVudC5vcGNvZGVzLFxuICAgICAgICBvcGNvZGUsXG4gICAgICAgIGZpcnN0TG9jLFxuICAgICAgICBpLFxuICAgICAgICBsO1xuXG4gICAgZm9yIChpID0gMCwgbCA9IG9wY29kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBvcGNvZGUgPSBvcGNvZGVzW2ldO1xuXG4gICAgICB0aGlzLnNvdXJjZS5jdXJyZW50TG9jYXRpb24gPSBvcGNvZGUubG9jO1xuICAgICAgZmlyc3RMb2MgPSBmaXJzdExvYyB8fCBvcGNvZGUubG9jO1xuICAgICAgdGhpc1tvcGNvZGUub3Bjb2RlXS5hcHBseSh0aGlzLCBvcGNvZGUuYXJncyk7XG4gICAgfVxuXG4gICAgLy8gRmx1c2ggYW55IHRyYWlsaW5nIGNvbnRlbnQgdGhhdCBtaWdodCBiZSBwZW5kaW5nLlxuICAgIHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbiA9IGZpcnN0TG9jO1xuICAgIHRoaXMucHVzaFNvdXJjZSgnJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0aGlzLnN0YWNrU2xvdCB8fCB0aGlzLmlubGluZVN0YWNrLmxlbmd0aCB8fCB0aGlzLmNvbXBpbGVTdGFjay5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0NvbXBpbGUgY29tcGxldGVkIHdpdGggY29udGVudCBsZWZ0IG9uIHN0YWNrJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmRlY29yYXRvcnMuaXNFbXB0eSgpKSB7XG4gICAgICB0aGlzLnVzZURlY29yYXRvcnMgPSB0cnVlO1xuXG4gICAgICB0aGlzLmRlY29yYXRvcnMucHJlcGVuZCgndmFyIGRlY29yYXRvcnMgPSBjb250YWluZXIuZGVjb3JhdG9ycztcXG4nKTtcbiAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCdyZXR1cm4gZm47Jyk7XG5cbiAgICAgIGlmIChhc09iamVjdCkge1xuICAgICAgICB0aGlzLmRlY29yYXRvcnMgPSBGdW5jdGlvbi5hcHBseSh0aGlzLCBbJ2ZuJywgJ3Byb3BzJywgJ2NvbnRhaW5lcicsICdkZXB0aDAnLCAnZGF0YScsICdibG9ja1BhcmFtcycsICdkZXB0aHMnLCB0aGlzLmRlY29yYXRvcnMubWVyZ2UoKV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZWNvcmF0b3JzLnByZXBlbmQoJ2Z1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aDAsIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcXG4nKTtcbiAgICAgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goJ31cXG4nKTtcbiAgICAgICAgdGhpcy5kZWNvcmF0b3JzID0gdGhpcy5kZWNvcmF0b3JzLm1lcmdlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVjb3JhdG9ycyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBsZXQgZm4gPSB0aGlzLmNyZWF0ZUZ1bmN0aW9uQ29udGV4dChhc09iamVjdCk7XG4gICAgaWYgKCF0aGlzLmlzQ2hpbGQpIHtcbiAgICAgIGxldCByZXQgPSB7XG4gICAgICAgIGNvbXBpbGVyOiB0aGlzLmNvbXBpbGVySW5mbygpLFxuICAgICAgICBtYWluOiBmblxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuZGVjb3JhdG9ycykge1xuICAgICAgICByZXQubWFpbl9kID0gdGhpcy5kZWNvcmF0b3JzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgICAgICByZXQudXNlRGVjb3JhdG9ycyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGxldCB7cHJvZ3JhbXMsIGRlY29yYXRvcnN9ID0gdGhpcy5jb250ZXh0O1xuICAgICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAocHJvZ3JhbXNbaV0pIHtcbiAgICAgICAgICByZXRbaV0gPSBwcm9ncmFtc1tpXTtcbiAgICAgICAgICBpZiAoZGVjb3JhdG9yc1tpXSkge1xuICAgICAgICAgICAgcmV0W2kgKyAnX2QnXSA9IGRlY29yYXRvcnNbaV07XG4gICAgICAgICAgICByZXQudXNlRGVjb3JhdG9ycyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmVudmlyb25tZW50LnVzZVBhcnRpYWwpIHtcbiAgICAgICAgcmV0LnVzZVBhcnRpYWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XG4gICAgICAgIHJldC51c2VEYXRhID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnVzZURlcHRocykge1xuICAgICAgICByZXQudXNlRGVwdGhzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHJldC51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdCkge1xuICAgICAgICByZXQuY29tcGF0ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhc09iamVjdCkge1xuICAgICAgICByZXQuY29tcGlsZXIgPSBKU09OLnN0cmluZ2lmeShyZXQuY29tcGlsZXIpO1xuXG4gICAgICAgIHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbiA9IHtzdGFydDoge2xpbmU6IDEsIGNvbHVtbjogMH19O1xuICAgICAgICByZXQgPSB0aGlzLm9iamVjdExpdGVyYWwocmV0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zcmNOYW1lKSB7XG4gICAgICAgICAgcmV0ID0gcmV0LnRvU3RyaW5nV2l0aFNvdXJjZU1hcCh7ZmlsZTogb3B0aW9ucy5kZXN0TmFtZX0pO1xuICAgICAgICAgIHJldC5tYXAgPSByZXQubWFwICYmIHJldC5tYXAudG9TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSByZXQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0LmNvbXBpbGVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgfSxcblxuICBwcmVhbWJsZTogZnVuY3Rpb24oKSB7XG4gICAgLy8gdHJhY2sgdGhlIGxhc3QgY29udGV4dCBwdXNoZWQgaW50byBwbGFjZSB0byBhbGxvdyBza2lwcGluZyB0aGVcbiAgICAvLyBnZXRDb250ZXh0IG9wY29kZSB3aGVuIGl0IHdvdWxkIGJlIGEgbm9vcFxuICAgIHRoaXMubGFzdENvbnRleHQgPSAwO1xuICAgIHRoaXMuc291cmNlID0gbmV3IENvZGVHZW4odGhpcy5vcHRpb25zLnNyY05hbWUpO1xuICAgIHRoaXMuZGVjb3JhdG9ycyA9IG5ldyBDb2RlR2VuKHRoaXMub3B0aW9ucy5zcmNOYW1lKTtcbiAgfSxcblxuICBjcmVhdGVGdW5jdGlvbkNvbnRleHQ6IGZ1bmN0aW9uKGFzT2JqZWN0KSB7XG4gICAgbGV0IHZhckRlY2xhcmF0aW9ucyA9ICcnO1xuXG4gICAgbGV0IGxvY2FscyA9IHRoaXMuc3RhY2tWYXJzLmNvbmNhdCh0aGlzLnJlZ2lzdGVycy5saXN0KTtcbiAgICBpZiAobG9jYWxzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCAnICsgbG9jYWxzLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgbWluaW1pemVyIGFsaWFzIG1hcHBpbmdzXG4gICAgLy9cbiAgICAvLyBXaGVuIHVzaW5nIHRydWUgU291cmNlTm9kZXMsIHRoaXMgd2lsbCB1cGRhdGUgYWxsIHJlZmVyZW5jZXMgdG8gdGhlIGdpdmVuIGFsaWFzXG4gICAgLy8gYXMgdGhlIHNvdXJjZSBub2RlcyBhcmUgcmV1c2VkIGluIHNpdHUuIEZvciB0aGUgbm9uLXNvdXJjZSBub2RlIGNvbXBpbGF0aW9uIG1vZGUsXG4gICAgLy8gYWxpYXNlcyB3aWxsIG5vdCBiZSB1c2VkLCBidXQgdGhpcyBjYXNlIGlzIGFscmVhZHkgYmVpbmcgcnVuIG9uIHRoZSBjbGllbnQgYW5kXG4gICAgLy8gd2UgYXJlbid0IGNvbmNlcm4gYWJvdXQgbWluaW1pemluZyB0aGUgdGVtcGxhdGUgc2l6ZS5cbiAgICBsZXQgYWxpYXNDb3VudCA9IDA7XG4gICAgZm9yIChsZXQgYWxpYXMgaW4gdGhpcy5hbGlhc2VzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgICBsZXQgbm9kZSA9IHRoaXMuYWxpYXNlc1thbGlhc107XG5cbiAgICAgIGlmICh0aGlzLmFsaWFzZXMuaGFzT3duUHJvcGVydHkoYWxpYXMpICYmIG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5yZWZlcmVuY2VDb3VudCA+IDEpIHtcbiAgICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsIGFsaWFzJyArICgrK2FsaWFzQ291bnQpICsgJz0nICsgYWxpYXM7XG4gICAgICAgIG5vZGUuY2hpbGRyZW5bMF0gPSAnYWxpYXMnICsgYWxpYXNDb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcGFyYW1zID0gWydjb250YWluZXInLCAnZGVwdGgwJywgJ2hlbHBlcnMnLCAncGFydGlhbHMnLCAnZGF0YSddO1xuXG4gICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgdGhpcy51c2VEZXB0aHMpIHtcbiAgICAgIHBhcmFtcy5wdXNoKCdibG9ja1BhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGhpcy51c2VEZXB0aHMpIHtcbiAgICAgIHBhcmFtcy5wdXNoKCdkZXB0aHMnKTtcbiAgICB9XG5cbiAgICAvLyBQZXJmb3JtIGEgc2Vjb25kIHBhc3Mgb3ZlciB0aGUgb3V0cHV0IHRvIG1lcmdlIGNvbnRlbnQgd2hlbiBwb3NzaWJsZVxuICAgIGxldCBzb3VyY2UgPSB0aGlzLm1lcmdlU291cmNlKHZhckRlY2xhcmF0aW9ucyk7XG5cbiAgICBpZiAoYXNPYmplY3QpIHtcbiAgICAgIHBhcmFtcy5wdXNoKHNvdXJjZSk7XG5cbiAgICAgIHJldHVybiBGdW5jdGlvbi5hcHBseSh0aGlzLCBwYXJhbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2Uud3JhcChbJ2Z1bmN0aW9uKCcsIHBhcmFtcy5qb2luKCcsJyksICcpIHtcXG4gICcsIHNvdXJjZSwgJ30nXSk7XG4gICAgfVxuICB9LFxuICBtZXJnZVNvdXJjZTogZnVuY3Rpb24odmFyRGVjbGFyYXRpb25zKSB7XG4gICAgbGV0IGlzU2ltcGxlID0gdGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSxcbiAgICAgICAgYXBwZW5kT25seSA9ICF0aGlzLmZvcmNlQnVmZmVyLFxuICAgICAgICBhcHBlbmRGaXJzdCxcblxuICAgICAgICBzb3VyY2VTZWVuLFxuICAgICAgICBidWZmZXJTdGFydCxcbiAgICAgICAgYnVmZmVyRW5kO1xuICAgIHRoaXMuc291cmNlLmVhY2goKGxpbmUpID0+IHtcbiAgICAgIGlmIChsaW5lLmFwcGVuZFRvQnVmZmVyKSB7XG4gICAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICAgIGxpbmUucHJlcGVuZCgnICArICcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1ZmZlclN0YXJ0ID0gbGluZTtcbiAgICAgICAgfVxuICAgICAgICBidWZmZXJFbmQgPSBsaW5lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XG4gICAgICAgICAgaWYgKCFzb3VyY2VTZWVuKSB7XG4gICAgICAgICAgICBhcHBlbmRGaXJzdCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlclN0YXJ0LnByZXBlbmQoJ2J1ZmZlciArPSAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmZmVyRW5kLmFkZCgnOycpO1xuICAgICAgICAgIGJ1ZmZlclN0YXJ0ID0gYnVmZmVyRW5kID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgc291cmNlU2VlbiA9IHRydWU7XG4gICAgICAgIGlmICghaXNTaW1wbGUpIHtcbiAgICAgICAgICBhcHBlbmRPbmx5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgaWYgKGFwcGVuZE9ubHkpIHtcbiAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gJyk7XG4gICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcbiAgICAgIH0gZWxzZSBpZiAoIXNvdXJjZVNlZW4pIHtcbiAgICAgICAgdGhpcy5zb3VyY2UucHVzaCgncmV0dXJuIFwiXCI7Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCBidWZmZXIgPSAnICsgKGFwcGVuZEZpcnN0ID8gJycgOiB0aGlzLmluaXRpYWxpemVCdWZmZXIoKSk7XG5cbiAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gYnVmZmVyICsgJyk7XG4gICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc291cmNlLnB1c2goJ3JldHVybiBidWZmZXI7Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhckRlY2xhcmF0aW9ucykge1xuICAgICAgdGhpcy5zb3VyY2UucHJlcGVuZCgndmFyICcgKyB2YXJEZWNsYXJhdGlvbnMuc3Vic3RyaW5nKDIpICsgKGFwcGVuZEZpcnN0ID8gJycgOiAnO1xcbicpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zb3VyY2UubWVyZ2UoKTtcbiAgfSxcblxuICAvLyBbYmxvY2tWYWx1ZV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXR1cm4gdmFsdWUgb2YgYmxvY2tIZWxwZXJNaXNzaW5nXG4gIC8vXG4gIC8vIFRoZSBwdXJwb3NlIG9mIHRoaXMgb3Bjb2RlIGlzIHRvIHRha2UgYSBibG9jayBvZiB0aGUgZm9ybVxuICAvLyBge3sjdGhpcy5mb299fS4uLnt7L3RoaXMuZm9vfX1gLCByZXNvbHZlIHRoZSB2YWx1ZSBvZiBgZm9vYCwgYW5kXG4gIC8vIHJlcGxhY2UgaXQgb24gdGhlIHN0YWNrIHdpdGggdGhlIHJlc3VsdCBvZiBwcm9wZXJseVxuICAvLyBpbnZva2luZyBibG9ja0hlbHBlck1pc3NpbmcuXG4gIGJsb2NrVmFsdWU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBsZXQgYmxvY2tIZWxwZXJNaXNzaW5nID0gdGhpcy5hbGlhc2FibGUoJ2hlbHBlcnMuYmxvY2tIZWxwZXJNaXNzaW5nJyksXG4gICAgICAgIHBhcmFtcyA9IFt0aGlzLmNvbnRleHROYW1lKDApXTtcbiAgICB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCAwLCBwYXJhbXMpO1xuXG4gICAgbGV0IGJsb2NrTmFtZSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICBwYXJhbXMuc3BsaWNlKDEsIDAsIGJsb2NrTmFtZSk7XG5cbiAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGJsb2NrSGVscGVyTWlzc2luZywgJ2NhbGwnLCBwYXJhbXMpKTtcbiAgfSxcblxuICAvLyBbYW1iaWd1b3VzQmxvY2tWYWx1ZV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcbiAgLy8gQ29tcGlsZXIgdmFsdWUsIGJlZm9yZTogbGFzdEhlbHBlcj12YWx1ZSBvZiBsYXN0IGZvdW5kIGhlbHBlciwgaWYgYW55XG4gIC8vIE9uIHN0YWNrLCBhZnRlciwgaWYgbm8gbGFzdEhlbHBlcjogc2FtZSBhcyBbYmxvY2tWYWx1ZV1cbiAgLy8gT24gc3RhY2ssIGFmdGVyLCBpZiBsYXN0SGVscGVyOiB2YWx1ZVxuICBhbWJpZ3VvdXNCbG9ja1ZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAvLyBXZSdyZSBiZWluZyBhIGJpdCBjaGVla3kgYW5kIHJldXNpbmcgdGhlIG9wdGlvbnMgdmFsdWUgZnJvbSB0aGUgcHJpb3IgZXhlY1xuICAgIGxldCBibG9ja0hlbHBlck1pc3NpbmcgPSB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5ibG9ja0hlbHBlck1pc3NpbmcnKSxcbiAgICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldO1xuICAgIHRoaXMuc2V0dXBIZWxwZXJBcmdzKCcnLCAwLCBwYXJhbXMsIHRydWUpO1xuXG4gICAgdGhpcy5mbHVzaElubGluZSgpO1xuXG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLnRvcFN0YWNrKCk7XG4gICAgcGFyYW1zLnNwbGljZSgxLCAwLCBjdXJyZW50KTtcblxuICAgIHRoaXMucHVzaFNvdXJjZShbXG4gICAgICAgICdpZiAoIScsIHRoaXMubGFzdEhlbHBlciwgJykgeyAnLFxuICAgICAgICAgIGN1cnJlbnQsICcgPSAnLCB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoYmxvY2tIZWxwZXJNaXNzaW5nLCAnY2FsbCcsIHBhcmFtcyksXG4gICAgICAgICd9J10pO1xuICB9LFxuXG4gIC8vIFthcHBlbmRDb250ZW50XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gQXBwZW5kcyB0aGUgc3RyaW5nIHZhbHVlIG9mIGBjb250ZW50YCB0byB0aGUgY3VycmVudCBidWZmZXJcbiAgYXBwZW5kQ29udGVudDogZnVuY3Rpb24oY29udGVudCkge1xuICAgIGlmICh0aGlzLnBlbmRpbmdDb250ZW50KSB7XG4gICAgICBjb250ZW50ID0gdGhpcy5wZW5kaW5nQ29udGVudCArIGNvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGVuZGluZ0xvY2F0aW9uID0gdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uO1xuICAgIH1cblxuICAgIHRoaXMucGVuZGluZ0NvbnRlbnQgPSBjb250ZW50O1xuICB9LFxuXG4gIC8vIFthcHBlbmRdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gQ29lcmNlcyBgdmFsdWVgIHRvIGEgU3RyaW5nIGFuZCBhcHBlbmRzIGl0IHRvIHRoZSBjdXJyZW50IGJ1ZmZlci5cbiAgLy9cbiAgLy8gSWYgYHZhbHVlYCBpcyB0cnV0aHksIG9yIDAsIGl0IGlzIGNvZXJjZWQgaW50byBhIHN0cmluZyBhbmQgYXBwZW5kZWRcbiAgLy8gT3RoZXJ3aXNlLCB0aGUgZW1wdHkgc3RyaW5nIGlzIGFwcGVuZGVkXG4gIGFwcGVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaXNJbmxpbmUoKSkge1xuICAgICAgdGhpcy5yZXBsYWNlU3RhY2soKGN1cnJlbnQpID0+IFsnICE9IG51bGwgPyAnLCBjdXJyZW50LCAnIDogXCJcIiddKTtcblxuICAgICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5wb3BTdGFjaygpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBsb2NhbCA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICgnLCBsb2NhbCwgJyAhPSBudWxsKSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIobG9jYWwsIHVuZGVmaW5lZCwgdHJ1ZSksICcgfSddKTtcbiAgICAgIGlmICh0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlKSB7XG4gICAgICAgIHRoaXMucHVzaFNvdXJjZShbJ2Vsc2UgeyAnLCB0aGlzLmFwcGVuZFRvQnVmZmVyKFwiJydcIiwgdW5kZWZpbmVkLCB0cnVlKSwgJyB9J10pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvLyBbYXBwZW5kRXNjYXBlZF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLlxuICAvL1xuICAvLyBFc2NhcGUgYHZhbHVlYCBhbmQgYXBwZW5kIGl0IHRvIHRoZSBidWZmZXJcbiAgYXBwZW5kRXNjYXBlZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIoXG4gICAgICAgIFt0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24nKSwgJygnLCB0aGlzLnBvcFN0YWNrKCksICcpJ10pKTtcbiAgfSxcblxuICAvLyBbZ2V0Q29udGV4dF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG4gIC8vIENvbXBpbGVyIHZhbHVlLCBhZnRlcjogbGFzdENvbnRleHQ9ZGVwdGhcbiAgLy9cbiAgLy8gU2V0IHRoZSB2YWx1ZSBvZiB0aGUgYGxhc3RDb250ZXh0YCBjb21waWxlciB2YWx1ZSB0byB0aGUgZGVwdGhcbiAgZ2V0Q29udGV4dDogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICB0aGlzLmxhc3RDb250ZXh0ID0gZGVwdGg7XG4gIH0sXG5cbiAgLy8gW3B1c2hDb250ZXh0XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBjdXJyZW50Q29udGV4dCwgLi4uXG4gIC8vXG4gIC8vIFB1c2hlcyB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgY29udGV4dCBvbnRvIHRoZSBzdGFjay5cbiAgcHVzaENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLmNvbnRleHROYW1lKHRoaXMubGFzdENvbnRleHQpKTtcbiAgfSxcblxuICAvLyBbbG9va3VwT25Db250ZXh0XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBjdXJyZW50Q29udGV4dFtuYW1lXSwgLi4uXG4gIC8vXG4gIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgbmFtZWAgb24gdGhlIGN1cnJlbnQgY29udGV4dCBhbmQgcHVzaGVzXG4gIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxuICBsb29rdXBPbkNvbnRleHQ6IGZ1bmN0aW9uKHBhcnRzLCBmYWxzeSwgc3RyaWN0LCBzY29wZWQpIHtcbiAgICBsZXQgaSA9IDA7XG5cbiAgICBpZiAoIXNjb3BlZCAmJiB0aGlzLm9wdGlvbnMuY29tcGF0ICYmICF0aGlzLmxhc3RDb250ZXh0KSB7XG4gICAgICAvLyBUaGUgZGVwdGhlZCBxdWVyeSBpcyBleHBlY3RlZCB0byBoYW5kbGUgdGhlIHVuZGVmaW5lZCBsb2dpYyBmb3IgdGhlIHJvb3QgbGV2ZWwgdGhhdFxuICAgICAgLy8gaXMgaW1wbGVtZW50ZWQgYmVsb3csIHNvIHdlIGV2YWx1YXRlIHRoYXQgZGlyZWN0bHkgaW4gY29tcGF0IG1vZGVcbiAgICAgIHRoaXMucHVzaCh0aGlzLmRlcHRoZWRMb29rdXAocGFydHNbaSsrXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hDb250ZXh0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KTtcbiAgfSxcblxuICAvLyBbbG9va3VwQmxvY2tQYXJhbV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogYmxvY2tQYXJhbVtuYW1lXSwgLi4uXG4gIC8vXG4gIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgcGFydHNgIG9uIHRoZSBnaXZlbiBibG9jayBwYXJhbSBhbmQgcHVzaGVzXG4gIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxuICBsb29rdXBCbG9ja1BhcmFtOiBmdW5jdGlvbihibG9ja1BhcmFtSWQsIHBhcnRzKSB7XG4gICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG5cbiAgICB0aGlzLnB1c2goWydibG9ja1BhcmFtc1snLCBibG9ja1BhcmFtSWRbMF0sICddWycsIGJsb2NrUGFyYW1JZFsxXSwgJ10nXSk7XG4gICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCAxKTtcbiAgfSxcblxuICAvLyBbbG9va3VwRGF0YV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogZGF0YSwgLi4uXG4gIC8vXG4gIC8vIFB1c2ggdGhlIGRhdGEgbG9va3VwIG9wZXJhdG9yXG4gIGxvb2t1cERhdGE6IGZ1bmN0aW9uKGRlcHRoLCBwYXJ0cywgc3RyaWN0KSB7XG4gICAgaWYgKCFkZXB0aCkge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdkYXRhJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnY29udGFpbmVyLmRhdGEoZGF0YSwgJyArIGRlcHRoICsgJyknKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc29sdmVQYXRoKCdkYXRhJywgcGFydHMsIDAsIHRydWUsIHN0cmljdCk7XG4gIH0sXG5cbiAgcmVzb2x2ZVBhdGg6IGZ1bmN0aW9uKHR5cGUsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgfHwgdGhpcy5vcHRpb25zLmFzc3VtZU9iamVjdHMpIHtcbiAgICAgIHRoaXMucHVzaChzdHJpY3RMb29rdXAodGhpcy5vcHRpb25zLnN0cmljdCAmJiBzdHJpY3QsIHRoaXMsIHBhcnRzLCB0eXBlKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGxlbiA9IHBhcnRzLmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cbiAgICAgIHRoaXMucmVwbGFjZVN0YWNrKChjdXJyZW50KSA9PiB7XG4gICAgICAgIGxldCBsb29rdXAgPSB0aGlzLm5hbWVMb29rdXAoY3VycmVudCwgcGFydHNbaV0sIHR5cGUpO1xuICAgICAgICAvLyBXZSB3YW50IHRvIGVuc3VyZSB0aGF0IHplcm8gYW5kIGZhbHNlIGFyZSBoYW5kbGVkIHByb3Blcmx5IGlmIHRoZSBjb250ZXh0IChmYWxzeSBmbGFnKVxuICAgICAgICAvLyBuZWVkcyB0byBoYXZlIHRoZSBzcGVjaWFsIGhhbmRsaW5nIGZvciB0aGVzZSB2YWx1ZXMuXG4gICAgICAgIGlmICghZmFsc3kpIHtcbiAgICAgICAgICByZXR1cm4gWycgIT0gbnVsbCA/ICcsIGxvb2t1cCwgJyA6ICcsIGN1cnJlbnRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSB3ZSBjYW4gdXNlIGdlbmVyaWMgZmFsc3kgaGFuZGxpbmdcbiAgICAgICAgICByZXR1cm4gWycgJiYgJywgbG9va3VwXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuICAgIH1cbiAgfSxcblxuICAvLyBbcmVzb2x2ZVBvc3NpYmxlTGFtYmRhXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzb2x2ZWQgdmFsdWUsIC4uLlxuICAvL1xuICAvLyBJZiB0aGUgYHZhbHVlYCBpcyBhIGxhbWJkYSwgcmVwbGFjZSBpdCBvbiB0aGUgc3RhY2sgYnlcbiAgLy8gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbGFtYmRhXG4gIHJlc29sdmVQb3NzaWJsZUxhbWJkYTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXNoKFt0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmxhbWJkYScpLCAnKCcsIHRoaXMucG9wU3RhY2soKSwgJywgJywgdGhpcy5jb250ZXh0TmFtZSgwKSwgJyknXSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hTdHJpbmdQYXJhbV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogc3RyaW5nLCBjdXJyZW50Q29udGV4dCwgLi4uXG4gIC8vXG4gIC8vIFRoaXMgb3Bjb2RlIGlzIGRlc2lnbmVkIGZvciB1c2UgaW4gc3RyaW5nIG1vZGUsIHdoaWNoXG4gIC8vIHByb3ZpZGVzIHRoZSBzdHJpbmcgdmFsdWUgb2YgYSBwYXJhbWV0ZXIgYWxvbmcgd2l0aCBpdHNcbiAgLy8gZGVwdGggcmF0aGVyIHRoYW4gcmVzb2x2aW5nIGl0IGltbWVkaWF0ZWx5LlxuICBwdXNoU3RyaW5nUGFyYW06IGZ1bmN0aW9uKHN0cmluZywgdHlwZSkge1xuICAgIHRoaXMucHVzaENvbnRleHQoKTtcbiAgICB0aGlzLnB1c2hTdHJpbmcodHlwZSk7XG5cbiAgICAvLyBJZiBpdCdzIGEgc3ViZXhwcmVzc2lvbiwgdGhlIHN0cmluZyByZXN1bHRcbiAgICAvLyB3aWxsIGJlIHB1c2hlZCBhZnRlciB0aGlzIG9wY29kZS5cbiAgICBpZiAodHlwZSAhPT0gJ1N1YkV4cHJlc3Npb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5wdXNoU3RyaW5nKHN0cmluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZW1wdHlIYXNoOiBmdW5jdGlvbihvbWl0RW1wdHkpIHtcbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgdGhpcy5wdXNoKCd7fScpOyAvLyBoYXNoSWRzXG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgdGhpcy5wdXNoKCd7fScpOyAvLyBoYXNoQ29udGV4dHNcbiAgICAgIHRoaXMucHVzaCgne30nKTsgLy8gaGFzaFR5cGVzXG4gICAgfVxuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbChvbWl0RW1wdHkgPyAndW5kZWZpbmVkJyA6ICd7fScpO1xuICB9LFxuICBwdXNoSGFzaDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaGFzaCkge1xuICAgICAgdGhpcy5oYXNoZXMucHVzaCh0aGlzLmhhc2gpO1xuICAgIH1cbiAgICB0aGlzLmhhc2ggPSB7dmFsdWVzOiBbXSwgdHlwZXM6IFtdLCBjb250ZXh0czogW10sIGlkczogW119O1xuICB9LFxuICBwb3BIYXNoOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgaGFzaCA9IHRoaXMuaGFzaDtcbiAgICB0aGlzLmhhc2ggPSB0aGlzLmhhc2hlcy5wb3AoKTtcblxuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2guaWRzKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLmNvbnRleHRzKSk7XG4gICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudHlwZXMpKTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudmFsdWVzKSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hTdHJpbmddXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHF1b3RlZFN0cmluZyhzdHJpbmcpLCAuLi5cbiAgLy9cbiAgLy8gUHVzaCBhIHF1b3RlZCB2ZXJzaW9uIG9mIGBzdHJpbmdgIG9udG8gdGhlIHN0YWNrXG4gIHB1c2hTdHJpbmc6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLnF1b3RlZFN0cmluZyhzdHJpbmcpKTtcbiAgfSxcblxuICAvLyBbcHVzaExpdGVyYWxdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHZhbHVlLCAuLi5cbiAgLy9cbiAgLy8gUHVzaGVzIGEgdmFsdWUgb250byB0aGUgc3RhY2suIFRoaXMgb3BlcmF0aW9uIHByZXZlbnRzXG4gIC8vIHRoZSBjb21waWxlciBmcm9tIGNyZWF0aW5nIGEgdGVtcG9yYXJ5IHZhcmlhYmxlIHRvIGhvbGRcbiAgLy8gaXQuXG4gIHB1c2hMaXRlcmFsOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh2YWx1ZSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hQcm9ncmFtXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBwcm9ncmFtKGd1aWQpLCAuLi5cbiAgLy9cbiAgLy8gUHVzaCBhIHByb2dyYW0gZXhwcmVzc2lvbiBvbnRvIHRoZSBzdGFjay4gVGhpcyB0YWtlc1xuICAvLyBhIGNvbXBpbGUtdGltZSBndWlkIGFuZCBjb252ZXJ0cyBpdCBpbnRvIGEgcnVudGltZS1hY2Nlc3NpYmxlXG4gIC8vIGV4cHJlc3Npb24uXG4gIHB1c2hQcm9ncmFtOiBmdW5jdGlvbihndWlkKSB7XG4gICAgaWYgKGd1aWQgIT0gbnVsbCkge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMucHJvZ3JhbUV4cHJlc3Npb24oZ3VpZCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwobnVsbCk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFtyZWdpc3RlckRlY29yYXRvcl1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gUG9wcyBvZmYgdGhlIGRlY29yYXRvcidzIHBhcmFtZXRlcnMsIGludm9rZXMgdGhlIGRlY29yYXRvcixcbiAgLy8gYW5kIGluc2VydHMgdGhlIGRlY29yYXRvciBpbnRvIHRoZSBkZWNvcmF0b3JzIGxpc3QuXG4gIHJlZ2lzdGVyRGVjb3JhdG9yKHBhcmFtU2l6ZSwgbmFtZSkge1xuICAgIGxldCBmb3VuZERlY29yYXRvciA9IHRoaXMubmFtZUxvb2t1cCgnZGVjb3JhdG9ycycsIG5hbWUsICdkZWNvcmF0b3InKSxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMuc2V0dXBIZWxwZXJBcmdzKG5hbWUsIHBhcmFtU2l6ZSk7XG5cbiAgICB0aGlzLmRlY29yYXRvcnMucHVzaChbXG4gICAgICAnZm4gPSAnLFxuICAgICAgdGhpcy5kZWNvcmF0b3JzLmZ1bmN0aW9uQ2FsbChmb3VuZERlY29yYXRvciwgJycsIFsnZm4nLCAncHJvcHMnLCAnY29udGFpbmVyJywgb3B0aW9uc10pLFxuICAgICAgJyB8fCBmbjsnXG4gICAgXSk7XG4gIH0sXG5cbiAgLy8gW2ludm9rZUhlbHBlcl1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXN1bHQgb2YgaGVscGVyIGludm9jYXRpb25cbiAgLy9cbiAgLy8gUG9wcyBvZmYgdGhlIGhlbHBlcidzIHBhcmFtZXRlcnMsIGludm9rZXMgdGhlIGhlbHBlcixcbiAgLy8gYW5kIHB1c2hlcyB0aGUgaGVscGVyJ3MgcmV0dXJuIHZhbHVlIG9udG8gdGhlIHN0YWNrLlxuICAvL1xuICAvLyBJZiB0aGUgaGVscGVyIGlzIG5vdCBmb3VuZCwgYGhlbHBlck1pc3NpbmdgIGlzIGNhbGxlZC5cbiAgaW52b2tlSGVscGVyOiBmdW5jdGlvbihwYXJhbVNpemUsIG5hbWUsIGlzU2ltcGxlKSB7XG4gICAgbGV0IG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKSxcbiAgICAgICAgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUpLFxuICAgICAgICBzaW1wbGUgPSBpc1NpbXBsZSA/IFtoZWxwZXIubmFtZSwgJyB8fCAnXSA6ICcnO1xuXG4gICAgbGV0IGxvb2t1cCA9IFsnKCddLmNvbmNhdChzaW1wbGUsIG5vbkhlbHBlcik7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICBsb29rdXAucHVzaCgnIHx8ICcsIHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmhlbHBlck1pc3NpbmcnKSk7XG4gICAgfVxuICAgIGxvb2t1cC5wdXNoKCcpJyk7XG5cbiAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGxvb2t1cCwgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcykpO1xuICB9LFxuXG4gIC8vIFtpbnZva2VLbm93bkhlbHBlcl1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXN1bHQgb2YgaGVscGVyIGludm9jYXRpb25cbiAgLy9cbiAgLy8gVGhpcyBvcGVyYXRpb24gaXMgdXNlZCB3aGVuIHRoZSBoZWxwZXIgaXMga25vd24gdG8gZXhpc3QsXG4gIC8vIHNvIGEgYGhlbHBlck1pc3NpbmdgIGZhbGxiYWNrIGlzIG5vdCByZXF1aXJlZC5cbiAgaW52b2tlS25vd25IZWxwZXI6IGZ1bmN0aW9uKHBhcmFtU2l6ZSwgbmFtZSkge1xuICAgIGxldCBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSk7XG4gICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChoZWxwZXIubmFtZSwgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcykpO1xuICB9LFxuXG4gIC8vIFtpbnZva2VBbWJpZ3VvdXNdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGRpc2FtYmlndWF0aW9uXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIGlzIHVzZWQgd2hlbiBhbiBleHByZXNzaW9uIGxpa2UgYHt7Zm9vfX1gXG4gIC8vIGlzIHByb3ZpZGVkLCBidXQgd2UgZG9uJ3Qga25vdyBhdCBjb21waWxlLXRpbWUgd2hldGhlciBpdFxuICAvLyBpcyBhIGhlbHBlciBvciBhIHBhdGguXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIGVtaXRzIG1vcmUgY29kZSB0aGFuIHRoZSBvdGhlciBvcHRpb25zLFxuICAvLyBhbmQgY2FuIGJlIGF2b2lkZWQgYnkgcGFzc2luZyB0aGUgYGtub3duSGVscGVyc2AgYW5kXG4gIC8vIGBrbm93bkhlbHBlcnNPbmx5YCBmbGFncyBhdCBjb21waWxlLXRpbWUuXG4gIGludm9rZUFtYmlndW91czogZnVuY3Rpb24obmFtZSwgaGVscGVyQ2FsbCkge1xuICAgIHRoaXMudXNlUmVnaXN0ZXIoJ2hlbHBlcicpO1xuXG4gICAgbGV0IG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKTtcblxuICAgIHRoaXMuZW1wdHlIYXNoKCk7XG4gICAgbGV0IGhlbHBlciA9IHRoaXMuc2V0dXBIZWxwZXIoMCwgbmFtZSwgaGVscGVyQ2FsbCk7XG5cbiAgICBsZXQgaGVscGVyTmFtZSA9IHRoaXMubGFzdEhlbHBlciA9IHRoaXMubmFtZUxvb2t1cCgnaGVscGVycycsIG5hbWUsICdoZWxwZXInKTtcblxuICAgIGxldCBsb29rdXAgPSBbJygnLCAnKGhlbHBlciA9ICcsIGhlbHBlck5hbWUsICcgfHwgJywgbm9uSGVscGVyLCAnKSddO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnN0cmljdCkge1xuICAgICAgbG9va3VwWzBdID0gJyhoZWxwZXIgPSAnO1xuICAgICAgbG9va3VwLnB1c2goXG4gICAgICAgICcgIT0gbnVsbCA/IGhlbHBlciA6ICcsXG4gICAgICAgIHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmhlbHBlck1pc3NpbmcnKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2goW1xuICAgICAgICAnKCcsIGxvb2t1cCxcbiAgICAgICAgKGhlbHBlci5wYXJhbXNJbml0ID8gWycpLCgnLCBoZWxwZXIucGFyYW1zSW5pdF0gOiBbXSksICcpLCcsXG4gICAgICAgICcodHlwZW9mIGhlbHBlciA9PT0gJywgdGhpcy5hbGlhc2FibGUoJ1wiZnVuY3Rpb25cIicpLCAnID8gJyxcbiAgICAgICAgdGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKCdoZWxwZXInLCAnY2FsbCcsIGhlbHBlci5jYWxsUGFyYW1zKSwgJyA6IGhlbHBlcikpJ1xuICAgIF0pO1xuICB9LFxuXG4gIC8vIFtpbnZva2VQYXJ0aWFsXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBjb250ZXh0LCAuLi5cbiAgLy8gT24gc3RhY2sgYWZ0ZXI6IHJlc3VsdCBvZiBwYXJ0aWFsIGludm9jYXRpb25cbiAgLy9cbiAgLy8gVGhpcyBvcGVyYXRpb24gcG9wcyBvZmYgYSBjb250ZXh0LCBpbnZva2VzIGEgcGFydGlhbCB3aXRoIHRoYXQgY29udGV4dCxcbiAgLy8gYW5kIHB1c2hlcyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZvY2F0aW9uIGJhY2suXG4gIGludm9rZVBhcnRpYWw6IGZ1bmN0aW9uKGlzRHluYW1pYywgbmFtZSwgaW5kZW50KSB7XG4gICAgbGV0IHBhcmFtcyA9IFtdLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhuYW1lLCAxLCBwYXJhbXMpO1xuXG4gICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgbmFtZSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIGRlbGV0ZSBvcHRpb25zLm5hbWU7XG4gICAgfVxuXG4gICAgaWYgKGluZGVudCkge1xuICAgICAgb3B0aW9ucy5pbmRlbnQgPSBKU09OLnN0cmluZ2lmeShpbmRlbnQpO1xuICAgIH1cbiAgICBvcHRpb25zLmhlbHBlcnMgPSAnaGVscGVycyc7XG4gICAgb3B0aW9ucy5wYXJ0aWFscyA9ICdwYXJ0aWFscyc7XG4gICAgb3B0aW9ucy5kZWNvcmF0b3JzID0gJ2NvbnRhaW5lci5kZWNvcmF0b3JzJztcblxuICAgIGlmICghaXNEeW5hbWljKSB7XG4gICAgICBwYXJhbXMudW5zaGlmdCh0aGlzLm5hbWVMb29rdXAoJ3BhcnRpYWxzJywgbmFtZSwgJ3BhcnRpYWwnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmFtcy51bnNoaWZ0KG5hbWUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7XG4gICAgICBvcHRpb25zLmRlcHRocyA9ICdkZXB0aHMnO1xuICAgIH1cbiAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xuICAgIHBhcmFtcy5wdXNoKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbCgnY29udGFpbmVyLmludm9rZVBhcnRpYWwnLCAnJywgcGFyYW1zKSk7XG4gIH0sXG5cbiAgLy8gW2Fzc2lnblRvSGFzaF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLiwgaGFzaCwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uLCBoYXNoLCAuLi5cbiAgLy9cbiAgLy8gUG9wcyBhIHZhbHVlIG9mZiB0aGUgc3RhY2sgYW5kIGFzc2lnbnMgaXQgdG8gdGhlIGN1cnJlbnQgaGFzaFxuICBhc3NpZ25Ub0hhc2g6IGZ1bmN0aW9uKGtleSkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMucG9wU3RhY2soKSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgaWQ7XG5cbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgaWQgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgdHlwZSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIGNvbnRleHQgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuXG4gICAgbGV0IGhhc2ggPSB0aGlzLmhhc2g7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIGhhc2guY29udGV4dHNba2V5XSA9IGNvbnRleHQ7XG4gICAgfVxuICAgIGlmICh0eXBlKSB7XG4gICAgICBoYXNoLnR5cGVzW2tleV0gPSB0eXBlO1xuICAgIH1cbiAgICBpZiAoaWQpIHtcbiAgICAgIGhhc2guaWRzW2tleV0gPSBpZDtcbiAgICB9XG4gICAgaGFzaC52YWx1ZXNba2V5XSA9IHZhbHVlO1xuICB9LFxuXG4gIHB1c2hJZDogZnVuY3Rpb24odHlwZSwgbmFtZSwgY2hpbGQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ0Jsb2NrUGFyYW0nKSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoXG4gICAgICAgICAgJ2Jsb2NrUGFyYW1zWycgKyBuYW1lWzBdICsgJ10ucGF0aFsnICsgbmFtZVsxXSArICddJ1xuICAgICAgICAgICsgKGNoaWxkID8gJyArICcgKyBKU09OLnN0cmluZ2lmeSgnLicgKyBjaGlsZCkgOiAnJykpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1BhdGhFeHByZXNzaW9uJykge1xuICAgICAgdGhpcy5wdXNoU3RyaW5nKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nKSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ3RydWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdudWxsJyk7XG4gICAgfVxuICB9LFxuXG4gIC8vIEhFTFBFUlNcblxuICBjb21waWxlcjogSmF2YVNjcmlwdENvbXBpbGVyLFxuXG4gIGNvbXBpbGVDaGlsZHJlbjogZnVuY3Rpb24oZW52aXJvbm1lbnQsIG9wdGlvbnMpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBlbnZpcm9ubWVudC5jaGlsZHJlbiwgY2hpbGQsIGNvbXBpbGVyO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBjb21waWxlciA9IG5ldyB0aGlzLmNvbXBpbGVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuXG4gICAgICBsZXQgZXhpc3RpbmcgPSB0aGlzLm1hdGNoRXhpc3RpbmdQcm9ncmFtKGNoaWxkKTtcblxuICAgICAgaWYgKGV4aXN0aW5nID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LnByb2dyYW1zLnB1c2goJycpOyAvLyBQbGFjZWhvbGRlciB0byBwcmV2ZW50IG5hbWUgY29uZmxpY3RzIGZvciBuZXN0ZWQgY2hpbGRyZW5cbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jb250ZXh0LnByb2dyYW1zLmxlbmd0aDtcbiAgICAgICAgY2hpbGQuaW5kZXggPSBpbmRleDtcbiAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGluZGV4O1xuICAgICAgICB0aGlzLmNvbnRleHQucHJvZ3JhbXNbaW5kZXhdID0gY29tcGlsZXIuY29tcGlsZShjaGlsZCwgb3B0aW9ucywgdGhpcy5jb250ZXh0LCAhdGhpcy5wcmVjb21waWxlKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LmRlY29yYXRvcnNbaW5kZXhdID0gY29tcGlsZXIuZGVjb3JhdG9ycztcbiAgICAgICAgdGhpcy5jb250ZXh0LmVudmlyb25tZW50c1tpbmRleF0gPSBjaGlsZDtcblxuICAgICAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IGNvbXBpbGVyLnVzZURlcHRocztcbiAgICAgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgY29tcGlsZXIudXNlQmxvY2tQYXJhbXM7XG4gICAgICAgIGNoaWxkLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzO1xuICAgICAgICBjaGlsZC51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZC5pbmRleCA9IGV4aXN0aW5nLmluZGV4O1xuICAgICAgICBjaGlsZC5uYW1lID0gJ3Byb2dyYW0nICsgZXhpc3RpbmcuaW5kZXg7XG5cbiAgICAgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBleGlzdGluZy51c2VEZXB0aHM7XG4gICAgICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGV4aXN0aW5nLnVzZUJsb2NrUGFyYW1zO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbWF0Y2hFeGlzdGluZ1Byb2dyYW06IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGxldCBlbnZpcm9ubWVudCA9IHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHNbaV07XG4gICAgICBpZiAoZW52aXJvbm1lbnQgJiYgZW52aXJvbm1lbnQuZXF1YWxzKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gZW52aXJvbm1lbnQ7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHByb2dyYW1FeHByZXNzaW9uOiBmdW5jdGlvbihndWlkKSB7XG4gICAgbGV0IGNoaWxkID0gdGhpcy5lbnZpcm9ubWVudC5jaGlsZHJlbltndWlkXSxcbiAgICAgICAgcHJvZ3JhbVBhcmFtcyA9IFtjaGlsZC5pbmRleCwgJ2RhdGEnLCBjaGlsZC5ibG9ja1BhcmFtc107XG5cbiAgICBpZiAodGhpcy51c2VCbG9ja1BhcmFtcyB8fCB0aGlzLnVzZURlcHRocykge1xuICAgICAgcHJvZ3JhbVBhcmFtcy5wdXNoKCdibG9ja1BhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGhpcy51c2VEZXB0aHMpIHtcbiAgICAgIHByb2dyYW1QYXJhbXMucHVzaCgnZGVwdGhzJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuICdjb250YWluZXIucHJvZ3JhbSgnICsgcHJvZ3JhbVBhcmFtcy5qb2luKCcsICcpICsgJyknO1xuICB9LFxuXG4gIHVzZVJlZ2lzdGVyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKCF0aGlzLnJlZ2lzdGVyc1tuYW1lXSkge1xuICAgICAgdGhpcy5yZWdpc3RlcnNbbmFtZV0gPSB0cnVlO1xuICAgICAgdGhpcy5yZWdpc3RlcnMubGlzdC5wdXNoKG5hbWUpO1xuICAgIH1cbiAgfSxcblxuICBwdXNoOiBmdW5jdGlvbihleHByKSB7XG4gICAgaWYgKCEoZXhwciBpbnN0YW5jZW9mIExpdGVyYWwpKSB7XG4gICAgICBleHByID0gdGhpcy5zb3VyY2Uud3JhcChleHByKTtcbiAgICB9XG5cbiAgICB0aGlzLmlubGluZVN0YWNrLnB1c2goZXhwcik7XG4gICAgcmV0dXJuIGV4cHI7XG4gIH0sXG5cbiAgcHVzaFN0YWNrTGl0ZXJhbDogZnVuY3Rpb24oaXRlbSkge1xuICAgIHRoaXMucHVzaChuZXcgTGl0ZXJhbChpdGVtKSk7XG4gIH0sXG5cbiAgcHVzaFNvdXJjZTogZnVuY3Rpb24oc291cmNlKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZ0NvbnRlbnQpIHtcbiAgICAgIHRoaXMuc291cmNlLnB1c2goXG4gICAgICAgICAgdGhpcy5hcHBlbmRUb0J1ZmZlcih0aGlzLnNvdXJjZS5xdW90ZWRTdHJpbmcodGhpcy5wZW5kaW5nQ29udGVudCksIHRoaXMucGVuZGluZ0xvY2F0aW9uKSk7XG4gICAgICB0aGlzLnBlbmRpbmdDb250ZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgIHRoaXMuc291cmNlLnB1c2goc291cmNlKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVwbGFjZVN0YWNrOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGxldCBwcmVmaXggPSBbJygnXSxcbiAgICAgICAgc3RhY2ssXG4gICAgICAgIGNyZWF0ZWRTdGFjayxcbiAgICAgICAgdXNlZExpdGVyYWw7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICghdGhpcy5pc0lubGluZSgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdyZXBsYWNlU3RhY2sgb24gbm9uLWlubGluZScpO1xuICAgIH1cblxuICAgIC8vIFdlIHdhbnQgdG8gbWVyZ2UgdGhlIGlubGluZSBzdGF0ZW1lbnQgaW50byB0aGUgcmVwbGFjZW1lbnQgc3RhdGVtZW50IHZpYSAnLCdcbiAgICBsZXQgdG9wID0gdGhpcy5wb3BTdGFjayh0cnVlKTtcblxuICAgIGlmICh0b3AgaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG4gICAgICAvLyBMaXRlcmFscyBkbyBub3QgbmVlZCB0byBiZSBpbmxpbmVkXG4gICAgICBzdGFjayA9IFt0b3AudmFsdWVdO1xuICAgICAgcHJlZml4ID0gWycoJywgc3RhY2tdO1xuICAgICAgdXNlZExpdGVyYWwgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBHZXQgb3IgY3JlYXRlIHRoZSBjdXJyZW50IHN0YWNrIG5hbWUgZm9yIHVzZSBieSB0aGUgaW5saW5lXG4gICAgICBjcmVhdGVkU3RhY2sgPSB0cnVlO1xuICAgICAgbGV0IG5hbWUgPSB0aGlzLmluY3JTdGFjaygpO1xuXG4gICAgICBwcmVmaXggPSBbJygoJywgdGhpcy5wdXNoKG5hbWUpLCAnID0gJywgdG9wLCAnKSddO1xuICAgICAgc3RhY2sgPSB0aGlzLnRvcFN0YWNrKCk7XG4gICAgfVxuXG4gICAgbGV0IGl0ZW0gPSBjYWxsYmFjay5jYWxsKHRoaXMsIHN0YWNrKTtcblxuICAgIGlmICghdXNlZExpdGVyYWwpIHtcbiAgICAgIHRoaXMucG9wU3RhY2soKTtcbiAgICB9XG4gICAgaWYgKGNyZWF0ZWRTdGFjaykge1xuICAgICAgdGhpcy5zdGFja1Nsb3QtLTtcbiAgICB9XG4gICAgdGhpcy5wdXNoKHByZWZpeC5jb25jYXQoaXRlbSwgJyknKSk7XG4gIH0sXG5cbiAgaW5jclN0YWNrOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0YWNrU2xvdCsrO1xuICAgIGlmICh0aGlzLnN0YWNrU2xvdCA+IHRoaXMuc3RhY2tWYXJzLmxlbmd0aCkgeyB0aGlzLnN0YWNrVmFycy5wdXNoKCdzdGFjaycgKyB0aGlzLnN0YWNrU2xvdCk7IH1cbiAgICByZXR1cm4gdGhpcy50b3BTdGFja05hbWUoKTtcbiAgfSxcbiAgdG9wU3RhY2tOYW1lOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ3N0YWNrJyArIHRoaXMuc3RhY2tTbG90O1xuICB9LFxuICBmbHVzaElubGluZTogZnVuY3Rpb24oKSB7XG4gICAgbGV0IGlubGluZVN0YWNrID0gdGhpcy5pbmxpbmVTdGFjaztcbiAgICB0aGlzLmlubGluZVN0YWNrID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGlubGluZVN0YWNrLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBsZXQgZW50cnkgPSBpbmxpbmVTdGFja1tpXTtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgICB0aGlzLmNvbXBpbGVTdGFjay5wdXNoKGVudHJ5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBzdGFjayA9IHRoaXMuaW5jclN0YWNrKCk7XG4gICAgICAgIHRoaXMucHVzaFNvdXJjZShbc3RhY2ssICcgPSAnLCBlbnRyeSwgJzsnXSk7XG4gICAgICAgIHRoaXMuY29tcGlsZVN0YWNrLnB1c2goc3RhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaXNJbmxpbmU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmlubGluZVN0YWNrLmxlbmd0aDtcbiAgfSxcblxuICBwb3BTdGFjazogZnVuY3Rpb24od3JhcHBlZCkge1xuICAgIGxldCBpbmxpbmUgPSB0aGlzLmlzSW5saW5lKCksXG4gICAgICAgIGl0ZW0gPSAoaW5saW5lID8gdGhpcy5pbmxpbmVTdGFjayA6IHRoaXMuY29tcGlsZVN0YWNrKS5wb3AoKTtcblxuICAgIGlmICghd3JhcHBlZCAmJiAoaXRlbSBpbnN0YW5jZW9mIExpdGVyYWwpKSB7XG4gICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpbmxpbmUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgaWYgKCF0aGlzLnN0YWNrU2xvdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0ludmFsaWQgc3RhY2sgcG9wJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFja1Nsb3QtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfSxcblxuICB0b3BTdGFjazogZnVuY3Rpb24oKSB7XG4gICAgbGV0IHN0YWNrID0gKHRoaXMuaXNJbmxpbmUoKSA/IHRoaXMuaW5saW5lU3RhY2sgOiB0aGlzLmNvbXBpbGVTdGFjayksXG4gICAgICAgIGl0ZW0gPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfSxcblxuICBjb250ZXh0TmFtZTogZnVuY3Rpb24oY29udGV4dCkge1xuICAgIGlmICh0aGlzLnVzZURlcHRocyAmJiBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gJ2RlcHRoc1snICsgY29udGV4dCArICddJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdkZXB0aCcgKyBjb250ZXh0O1xuICAgIH1cbiAgfSxcblxuICBxdW90ZWRTdHJpbmc6IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5xdW90ZWRTdHJpbmcoc3RyKTtcbiAgfSxcblxuICBvYmplY3RMaXRlcmFsOiBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2Uub2JqZWN0TGl0ZXJhbChvYmopO1xuICB9LFxuXG4gIGFsaWFzYWJsZTogZnVuY3Rpb24obmFtZSkge1xuICAgIGxldCByZXQgPSB0aGlzLmFsaWFzZXNbbmFtZV07XG4gICAgaWYgKHJldCkge1xuICAgICAgcmV0LnJlZmVyZW5jZUNvdW50Kys7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHJldCA9IHRoaXMuYWxpYXNlc1tuYW1lXSA9IHRoaXMuc291cmNlLndyYXAobmFtZSk7XG4gICAgcmV0LmFsaWFzYWJsZSA9IHRydWU7XG4gICAgcmV0LnJlZmVyZW5jZUNvdW50ID0gMTtcblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgc2V0dXBIZWxwZXI6IGZ1bmN0aW9uKHBhcmFtU2l6ZSwgbmFtZSwgYmxvY2tIZWxwZXIpIHtcbiAgICBsZXQgcGFyYW1zID0gW10sXG4gICAgICAgIHBhcmFtc0luaXQgPSB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCBwYXJhbVNpemUsIHBhcmFtcywgYmxvY2tIZWxwZXIpO1xuICAgIGxldCBmb3VuZEhlbHBlciA9IHRoaXMubmFtZUxvb2t1cCgnaGVscGVycycsIG5hbWUsICdoZWxwZXInKSxcbiAgICAgICAgY2FsbENvbnRleHQgPSB0aGlzLmFsaWFzYWJsZShgJHt0aGlzLmNvbnRleHROYW1lKDApfSAhPSBudWxsID8gJHt0aGlzLmNvbnRleHROYW1lKDApfSA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pYCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICBwYXJhbXNJbml0OiBwYXJhbXNJbml0LFxuICAgICAgbmFtZTogZm91bmRIZWxwZXIsXG4gICAgICBjYWxsUGFyYW1zOiBbY2FsbENvbnRleHRdLmNvbmNhdChwYXJhbXMpXG4gICAgfTtcbiAgfSxcblxuICBzZXR1cFBhcmFtczogZnVuY3Rpb24oaGVscGVyLCBwYXJhbVNpemUsIHBhcmFtcykge1xuICAgIGxldCBvcHRpb25zID0ge30sXG4gICAgICAgIGNvbnRleHRzID0gW10sXG4gICAgICAgIHR5cGVzID0gW10sXG4gICAgICAgIGlkcyA9IFtdLFxuICAgICAgICBvYmplY3RBcmdzID0gIXBhcmFtcyxcbiAgICAgICAgcGFyYW07XG5cbiAgICBpZiAob2JqZWN0QXJncykge1xuICAgICAgcGFyYW1zID0gW107XG4gICAgfVxuXG4gICAgb3B0aW9ucy5uYW1lID0gdGhpcy5xdW90ZWRTdHJpbmcoaGVscGVyKTtcbiAgICBvcHRpb25zLmhhc2ggPSB0aGlzLnBvcFN0YWNrKCk7XG5cbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgb3B0aW9ucy5oYXNoSWRzID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIG9wdGlvbnMuaGFzaFR5cGVzID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgb3B0aW9ucy5oYXNoQ29udGV4dHMgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuXG4gICAgbGV0IGludmVyc2UgPSB0aGlzLnBvcFN0YWNrKCksXG4gICAgICAgIHByb2dyYW0gPSB0aGlzLnBvcFN0YWNrKCk7XG5cbiAgICAvLyBBdm9pZCBzZXR0aW5nIGZuIGFuZCBpbnZlcnNlIGlmIG5laXRoZXIgYXJlIHNldC4gVGhpcyBhbGxvd3NcbiAgICAvLyBoZWxwZXJzIHRvIGRvIGEgY2hlY2sgZm9yIGBpZiAob3B0aW9ucy5mbilgXG4gICAgaWYgKHByb2dyYW0gfHwgaW52ZXJzZSkge1xuICAgICAgb3B0aW9ucy5mbiA9IHByb2dyYW0gfHwgJ2NvbnRhaW5lci5ub29wJztcbiAgICAgIG9wdGlvbnMuaW52ZXJzZSA9IGludmVyc2UgfHwgJ2NvbnRhaW5lci5ub29wJztcbiAgICB9XG5cbiAgICAvLyBUaGUgcGFyYW1ldGVycyBnbyBvbiB0byB0aGUgc3RhY2sgaW4gb3JkZXIgKG1ha2luZyBzdXJlIHRoYXQgdGhleSBhcmUgZXZhbHVhdGVkIGluIG9yZGVyKVxuICAgIC8vIHNvIHdlIG5lZWQgdG8gcG9wIHRoZW0gb2ZmIHRoZSBzdGFjayBpbiByZXZlcnNlIG9yZGVyXG4gICAgbGV0IGkgPSBwYXJhbVNpemU7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcGFyYW0gPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICBwYXJhbXNbaV0gPSBwYXJhbTtcblxuICAgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgICAgaWRzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICAgIHR5cGVzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgICBjb250ZXh0c1tpXSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2JqZWN0QXJncykge1xuICAgICAgb3B0aW9ucy5hcmdzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheShwYXJhbXMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICBvcHRpb25zLmlkcyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkoaWRzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICBvcHRpb25zLnR5cGVzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheSh0eXBlcyk7XG4gICAgICBvcHRpb25zLmNvbnRleHRzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheShjb250ZXh0cyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XG4gICAgICBvcHRpb25zLmRhdGEgPSAnZGF0YSc7XG4gICAgfVxuICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zKSB7XG4gICAgICBvcHRpb25zLmJsb2NrUGFyYW1zID0gJ2Jsb2NrUGFyYW1zJztcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH0sXG5cbiAgc2V0dXBIZWxwZXJBcmdzOiBmdW5jdGlvbihoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zLCB1c2VSZWdpc3Rlcikge1xuICAgIGxldCBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zKTtcbiAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xuICAgIGlmICh1c2VSZWdpc3Rlcikge1xuICAgICAgdGhpcy51c2VSZWdpc3Rlcignb3B0aW9ucycpO1xuICAgICAgcGFyYW1zLnB1c2goJ29wdGlvbnMnKTtcbiAgICAgIHJldHVybiBbJ29wdGlvbnM9Jywgb3B0aW9uc107XG4gICAgfSBlbHNlIGlmIChwYXJhbXMpIHtcbiAgICAgIHBhcmFtcy5wdXNoKG9wdGlvbnMpO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG4gIH1cbn07XG5cblxuKGZ1bmN0aW9uKCkge1xuICBjb25zdCByZXNlcnZlZFdvcmRzID0gKFxuICAgICdicmVhayBlbHNlIG5ldyB2YXInICtcbiAgICAnIGNhc2UgZmluYWxseSByZXR1cm4gdm9pZCcgK1xuICAgICcgY2F0Y2ggZm9yIHN3aXRjaCB3aGlsZScgK1xuICAgICcgY29udGludWUgZnVuY3Rpb24gdGhpcyB3aXRoJyArXG4gICAgJyBkZWZhdWx0IGlmIHRocm93JyArXG4gICAgJyBkZWxldGUgaW4gdHJ5JyArXG4gICAgJyBkbyBpbnN0YW5jZW9mIHR5cGVvZicgK1xuICAgICcgYWJzdHJhY3QgZW51bSBpbnQgc2hvcnQnICtcbiAgICAnIGJvb2xlYW4gZXhwb3J0IGludGVyZmFjZSBzdGF0aWMnICtcbiAgICAnIGJ5dGUgZXh0ZW5kcyBsb25nIHN1cGVyJyArXG4gICAgJyBjaGFyIGZpbmFsIG5hdGl2ZSBzeW5jaHJvbml6ZWQnICtcbiAgICAnIGNsYXNzIGZsb2F0IHBhY2thZ2UgdGhyb3dzJyArXG4gICAgJyBjb25zdCBnb3RvIHByaXZhdGUgdHJhbnNpZW50JyArXG4gICAgJyBkZWJ1Z2dlciBpbXBsZW1lbnRzIHByb3RlY3RlZCB2b2xhdGlsZScgK1xuICAgICcgZG91YmxlIGltcG9ydCBwdWJsaWMgbGV0IHlpZWxkIGF3YWl0JyArXG4gICAgJyBudWxsIHRydWUgZmFsc2UnXG4gICkuc3BsaXQoJyAnKTtcblxuICBjb25zdCBjb21waWxlcldvcmRzID0gSmF2YVNjcmlwdENvbXBpbGVyLlJFU0VSVkVEX1dPUkRTID0ge307XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSByZXNlcnZlZFdvcmRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbXBpbGVyV29yZHNbcmVzZXJ2ZWRXb3Jkc1tpXV0gPSB0cnVlO1xuICB9XG59KCkpO1xuXG5KYXZhU2NyaXB0Q29tcGlsZXIuaXNWYWxpZEphdmFTY3JpcHRWYXJpYWJsZU5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiAhSmF2YVNjcmlwdENvbXBpbGVyLlJFU0VSVkVEX1dPUkRTW25hbWVdICYmICgvXlthLXpBLVpfJF1bMC05YS16QS1aXyRdKiQvKS50ZXN0KG5hbWUpO1xufTtcblxuZnVuY3Rpb24gc3RyaWN0TG9va3VwKHJlcXVpcmVUZXJtaW5hbCwgY29tcGlsZXIsIHBhcnRzLCB0eXBlKSB7XG4gIGxldCBzdGFjayA9IGNvbXBpbGVyLnBvcFN0YWNrKCksXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHBhcnRzLmxlbmd0aDtcbiAgaWYgKHJlcXVpcmVUZXJtaW5hbCkge1xuICAgIGxlbi0tO1xuICB9XG5cbiAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgIHN0YWNrID0gY29tcGlsZXIubmFtZUxvb2t1cChzdGFjaywgcGFydHNbaV0sIHR5cGUpO1xuICB9XG5cbiAgaWYgKHJlcXVpcmVUZXJtaW5hbCkge1xuICAgIHJldHVybiBbY29tcGlsZXIuYWxpYXNhYmxlKCdjb250YWluZXIuc3RyaWN0JyksICcoJywgc3RhY2ssICcsICcsIGNvbXBpbGVyLnF1b3RlZFN0cmluZyhwYXJ0c1tpXSksICcpJ107XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0YWNrO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEphdmFTY3JpcHRDb21waWxlcjtcbiIsIi8vIEZpbGUgaWdub3JlZCBpbiBjb3ZlcmFnZSB0ZXN0cyB2aWEgc2V0dGluZyBpbiAuaXN0YW5idWwueW1sXG4vKiBKaXNvbiBnZW5lcmF0ZWQgcGFyc2VyICovXG52YXIgaGFuZGxlYmFycyA9IChmdW5jdGlvbigpe1xudmFyIHBhcnNlciA9IHt0cmFjZTogZnVuY3Rpb24gdHJhY2UoKSB7IH0sXG55eToge30sXG5zeW1ib2xzXzoge1wiZXJyb3JcIjoyLFwicm9vdFwiOjMsXCJwcm9ncmFtXCI6NCxcIkVPRlwiOjUsXCJwcm9ncmFtX3JlcGV0aXRpb24wXCI6NixcInN0YXRlbWVudFwiOjcsXCJtdXN0YWNoZVwiOjgsXCJibG9ja1wiOjksXCJyYXdCbG9ja1wiOjEwLFwicGFydGlhbFwiOjExLFwicGFydGlhbEJsb2NrXCI6MTIsXCJjb250ZW50XCI6MTMsXCJDT01NRU5UXCI6MTQsXCJDT05URU5UXCI6MTUsXCJvcGVuUmF3QmxvY2tcIjoxNixcInJhd0Jsb2NrX3JlcGV0aXRpb25fcGx1czBcIjoxNyxcIkVORF9SQVdfQkxPQ0tcIjoxOCxcIk9QRU5fUkFXX0JMT0NLXCI6MTksXCJoZWxwZXJOYW1lXCI6MjAsXCJvcGVuUmF3QmxvY2tfcmVwZXRpdGlvbjBcIjoyMSxcIm9wZW5SYXdCbG9ja19vcHRpb24wXCI6MjIsXCJDTE9TRV9SQVdfQkxPQ0tcIjoyMyxcIm9wZW5CbG9ja1wiOjI0LFwiYmxvY2tfb3B0aW9uMFwiOjI1LFwiY2xvc2VCbG9ja1wiOjI2LFwib3BlbkludmVyc2VcIjoyNyxcImJsb2NrX29wdGlvbjFcIjoyOCxcIk9QRU5fQkxPQ0tcIjoyOSxcIm9wZW5CbG9ja19yZXBldGl0aW9uMFwiOjMwLFwib3BlbkJsb2NrX29wdGlvbjBcIjozMSxcIm9wZW5CbG9ja19vcHRpb24xXCI6MzIsXCJDTE9TRVwiOjMzLFwiT1BFTl9JTlZFUlNFXCI6MzQsXCJvcGVuSW52ZXJzZV9yZXBldGl0aW9uMFwiOjM1LFwib3BlbkludmVyc2Vfb3B0aW9uMFwiOjM2LFwib3BlbkludmVyc2Vfb3B0aW9uMVwiOjM3LFwib3BlbkludmVyc2VDaGFpblwiOjM4LFwiT1BFTl9JTlZFUlNFX0NIQUlOXCI6MzksXCJvcGVuSW52ZXJzZUNoYWluX3JlcGV0aXRpb24wXCI6NDAsXCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjBcIjo0MSxcIm9wZW5JbnZlcnNlQ2hhaW5fb3B0aW9uMVwiOjQyLFwiaW52ZXJzZUFuZFByb2dyYW1cIjo0MyxcIklOVkVSU0VcIjo0NCxcImludmVyc2VDaGFpblwiOjQ1LFwiaW52ZXJzZUNoYWluX29wdGlvbjBcIjo0NixcIk9QRU5fRU5EQkxPQ0tcIjo0NyxcIk9QRU5cIjo0OCxcIm11c3RhY2hlX3JlcGV0aXRpb24wXCI6NDksXCJtdXN0YWNoZV9vcHRpb24wXCI6NTAsXCJPUEVOX1VORVNDQVBFRFwiOjUxLFwibXVzdGFjaGVfcmVwZXRpdGlvbjFcIjo1MixcIm11c3RhY2hlX29wdGlvbjFcIjo1MyxcIkNMT1NFX1VORVNDQVBFRFwiOjU0LFwiT1BFTl9QQVJUSUFMXCI6NTUsXCJwYXJ0aWFsTmFtZVwiOjU2LFwicGFydGlhbF9yZXBldGl0aW9uMFwiOjU3LFwicGFydGlhbF9vcHRpb24wXCI6NTgsXCJvcGVuUGFydGlhbEJsb2NrXCI6NTksXCJPUEVOX1BBUlRJQUxfQkxPQ0tcIjo2MCxcIm9wZW5QYXJ0aWFsQmxvY2tfcmVwZXRpdGlvbjBcIjo2MSxcIm9wZW5QYXJ0aWFsQmxvY2tfb3B0aW9uMFwiOjYyLFwicGFyYW1cIjo2MyxcInNleHByXCI6NjQsXCJPUEVOX1NFWFBSXCI6NjUsXCJzZXhwcl9yZXBldGl0aW9uMFwiOjY2LFwic2V4cHJfb3B0aW9uMFwiOjY3LFwiQ0xPU0VfU0VYUFJcIjo2OCxcImhhc2hcIjo2OSxcImhhc2hfcmVwZXRpdGlvbl9wbHVzMFwiOjcwLFwiaGFzaFNlZ21lbnRcIjo3MSxcIklEXCI6NzIsXCJFUVVBTFNcIjo3MyxcImJsb2NrUGFyYW1zXCI6NzQsXCJPUEVOX0JMT0NLX1BBUkFNU1wiOjc1LFwiYmxvY2tQYXJhbXNfcmVwZXRpdGlvbl9wbHVzMFwiOjc2LFwiQ0xPU0VfQkxPQ0tfUEFSQU1TXCI6NzcsXCJwYXRoXCI6NzgsXCJkYXRhTmFtZVwiOjc5LFwiU1RSSU5HXCI6ODAsXCJOVU1CRVJcIjo4MSxcIkJPT0xFQU5cIjo4MixcIlVOREVGSU5FRFwiOjgzLFwiTlVMTFwiOjg0LFwiREFUQVwiOjg1LFwicGF0aFNlZ21lbnRzXCI6ODYsXCJTRVBcIjo4NyxcIiRhY2NlcHRcIjowLFwiJGVuZFwiOjF9LFxudGVybWluYWxzXzogezI6XCJlcnJvclwiLDU6XCJFT0ZcIiwxNDpcIkNPTU1FTlRcIiwxNTpcIkNPTlRFTlRcIiwxODpcIkVORF9SQVdfQkxPQ0tcIiwxOTpcIk9QRU5fUkFXX0JMT0NLXCIsMjM6XCJDTE9TRV9SQVdfQkxPQ0tcIiwyOTpcIk9QRU5fQkxPQ0tcIiwzMzpcIkNMT1NFXCIsMzQ6XCJPUEVOX0lOVkVSU0VcIiwzOTpcIk9QRU5fSU5WRVJTRV9DSEFJTlwiLDQ0OlwiSU5WRVJTRVwiLDQ3OlwiT1BFTl9FTkRCTE9DS1wiLDQ4OlwiT1BFTlwiLDUxOlwiT1BFTl9VTkVTQ0FQRURcIiw1NDpcIkNMT1NFX1VORVNDQVBFRFwiLDU1OlwiT1BFTl9QQVJUSUFMXCIsNjA6XCJPUEVOX1BBUlRJQUxfQkxPQ0tcIiw2NTpcIk9QRU5fU0VYUFJcIiw2ODpcIkNMT1NFX1NFWFBSXCIsNzI6XCJJRFwiLDczOlwiRVFVQUxTXCIsNzU6XCJPUEVOX0JMT0NLX1BBUkFNU1wiLDc3OlwiQ0xPU0VfQkxPQ0tfUEFSQU1TXCIsODA6XCJTVFJJTkdcIiw4MTpcIk5VTUJFUlwiLDgyOlwiQk9PTEVBTlwiLDgzOlwiVU5ERUZJTkVEXCIsODQ6XCJOVUxMXCIsODU6XCJEQVRBXCIsODc6XCJTRVBcIn0sXG5wcm9kdWN0aW9uc186IFswLFszLDJdLFs0LDFdLFs3LDFdLFs3LDFdLFs3LDFdLFs3LDFdLFs3LDFdLFs3LDFdLFs3LDFdLFsxMywxXSxbMTAsM10sWzE2LDVdLFs5LDRdLFs5LDRdLFsyNCw2XSxbMjcsNl0sWzM4LDZdLFs0MywyXSxbNDUsM10sWzQ1LDFdLFsyNiwzXSxbOCw1XSxbOCw1XSxbMTEsNV0sWzEyLDNdLFs1OSw1XSxbNjMsMV0sWzYzLDFdLFs2NCw1XSxbNjksMV0sWzcxLDNdLFs3NCwzXSxbMjAsMV0sWzIwLDFdLFsyMCwxXSxbMjAsMV0sWzIwLDFdLFsyMCwxXSxbMjAsMV0sWzU2LDFdLFs1NiwxXSxbNzksMl0sWzc4LDFdLFs4NiwzXSxbODYsMV0sWzYsMF0sWzYsMl0sWzE3LDFdLFsxNywyXSxbMjEsMF0sWzIxLDJdLFsyMiwwXSxbMjIsMV0sWzI1LDBdLFsyNSwxXSxbMjgsMF0sWzI4LDFdLFszMCwwXSxbMzAsMl0sWzMxLDBdLFszMSwxXSxbMzIsMF0sWzMyLDFdLFszNSwwXSxbMzUsMl0sWzM2LDBdLFszNiwxXSxbMzcsMF0sWzM3LDFdLFs0MCwwXSxbNDAsMl0sWzQxLDBdLFs0MSwxXSxbNDIsMF0sWzQyLDFdLFs0NiwwXSxbNDYsMV0sWzQ5LDBdLFs0OSwyXSxbNTAsMF0sWzUwLDFdLFs1MiwwXSxbNTIsMl0sWzUzLDBdLFs1MywxXSxbNTcsMF0sWzU3LDJdLFs1OCwwXSxbNTgsMV0sWzYxLDBdLFs2MSwyXSxbNjIsMF0sWzYyLDFdLFs2NiwwXSxbNjYsMl0sWzY3LDBdLFs2NywxXSxbNzAsMV0sWzcwLDJdLFs3NiwxXSxbNzYsMl1dLFxucGVyZm9ybUFjdGlvbjogZnVuY3Rpb24gYW5vbnltb3VzKHl5dGV4dCx5eWxlbmcseXlsaW5lbm8seXkseXlzdGF0ZSwkJCxfJFxuLypgYCovKSB7XG5cbnZhciAkMCA9ICQkLmxlbmd0aCAtIDE7XG5zd2l0Y2ggKHl5c3RhdGUpIHtcbmNhc2UgMTogcmV0dXJuICQkWyQwLTFdOyBcbmJyZWFrO1xuY2FzZSAyOnRoaXMuJCA9IHl5LnByZXBhcmVQcm9ncmFtKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgMzp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNDp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNTp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNjp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNzp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgODp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgOTpcbiAgICB0aGlzLiQgPSB7XG4gICAgICB0eXBlOiAnQ29tbWVudFN0YXRlbWVudCcsXG4gICAgICB2YWx1ZTogeXkuc3RyaXBDb21tZW50KCQkWyQwXSksXG4gICAgICBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMF0sICQkWyQwXSksXG4gICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICB9O1xuICBcbmJyZWFrO1xuY2FzZSAxMDpcbiAgICB0aGlzLiQgPSB7XG4gICAgICB0eXBlOiAnQ29udGVudFN0YXRlbWVudCcsXG4gICAgICBvcmlnaW5hbDogJCRbJDBdLFxuICAgICAgdmFsdWU6ICQkWyQwXSxcbiAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxuICAgIH07XG4gIFxuYnJlYWs7XG5jYXNlIDExOnRoaXMuJCA9IHl5LnByZXBhcmVSYXdCbG9jaygkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwXSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMTI6dGhpcy4kID0geyBwYXRoOiAkJFskMC0zXSwgcGFyYW1zOiAkJFskMC0yXSwgaGFzaDogJCRbJDAtMV0gfTtcbmJyZWFrO1xuY2FzZSAxMzp0aGlzLiQgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAtM10sICQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDBdLCBmYWxzZSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMTQ6dGhpcy4kID0geXkucHJlcGFyZUJsb2NrKCQkWyQwLTNdLCAkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwXSwgdHJ1ZSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMTU6dGhpcy4kID0geyBvcGVuOiAkJFskMC01XSwgcGF0aDogJCRbJDAtNF0sIHBhcmFtczogJCRbJDAtM10sIGhhc2g6ICQkWyQwLTJdLCBibG9ja1BhcmFtczogJCRbJDAtMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTVdLCAkJFskMF0pIH07XG5icmVhaztcbmNhc2UgMTY6dGhpcy4kID0geyBwYXRoOiAkJFskMC00XSwgcGFyYW1zOiAkJFskMC0zXSwgaGFzaDogJCRbJDAtMl0sIGJsb2NrUGFyYW1zOiAkJFskMC0xXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtNV0sICQkWyQwXSkgfTtcbmJyZWFrO1xuY2FzZSAxNzp0aGlzLiQgPSB7IHBhdGg6ICQkWyQwLTRdLCBwYXJhbXM6ICQkWyQwLTNdLCBoYXNoOiAkJFskMC0yXSwgYmxvY2tQYXJhbXM6ICQkWyQwLTFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC01XSwgJCRbJDBdKSB9O1xuYnJlYWs7XG5jYXNlIDE4OnRoaXMuJCA9IHsgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtMV0sICQkWyQwLTFdKSwgcHJvZ3JhbTogJCRbJDBdIH07XG5icmVhaztcbmNhc2UgMTk6XG4gICAgdmFyIGludmVyc2UgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sICQkWyQwXSwgZmFsc2UsIHRoaXMuXyQpLFxuICAgICAgICBwcm9ncmFtID0geXkucHJlcGFyZVByb2dyYW0oW2ludmVyc2VdLCAkJFskMC0xXS5sb2MpO1xuICAgIHByb2dyYW0uY2hhaW5lZCA9IHRydWU7XG5cbiAgICB0aGlzLiQgPSB7IHN0cmlwOiAkJFskMC0yXS5zdHJpcCwgcHJvZ3JhbTogcHJvZ3JhbSwgY2hhaW46IHRydWUgfTtcbiAgXG5icmVhaztcbmNhc2UgMjA6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDIxOnRoaXMuJCA9IHtwYXRoOiAkJFskMC0xXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtMl0sICQkWyQwXSl9O1xuYnJlYWs7XG5jYXNlIDIyOnRoaXMuJCA9IHl5LnByZXBhcmVNdXN0YWNoZSgkJFskMC0zXSwgJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMC00XSwgeXkuc3RyaXBGbGFncygkJFskMC00XSwgJCRbJDBdKSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMjM6dGhpcy4kID0geXkucHJlcGFyZU11c3RhY2hlKCQkWyQwLTNdLCAkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwLTRdLCB5eS5zdHJpcEZsYWdzKCQkWyQwLTRdLCAkJFskMF0pLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSAyNDpcbiAgICB0aGlzLiQgPSB7XG4gICAgICB0eXBlOiAnUGFydGlhbFN0YXRlbWVudCcsXG4gICAgICBuYW1lOiAkJFskMC0zXSxcbiAgICAgIHBhcmFtczogJCRbJDAtMl0sXG4gICAgICBoYXNoOiAkJFskMC0xXSxcbiAgICAgIGluZGVudDogJycsXG4gICAgICBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC00XSwgJCRbJDBdKSxcbiAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxuICAgIH07XG4gIFxuYnJlYWs7XG5jYXNlIDI1OnRoaXMuJCA9IHl5LnByZXBhcmVQYXJ0aWFsQmxvY2soJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDI2OnRoaXMuJCA9IHsgcGF0aDogJCRbJDAtM10sIHBhcmFtczogJCRbJDAtMl0sIGhhc2g6ICQkWyQwLTFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC00XSwgJCRbJDBdKSB9O1xuYnJlYWs7XG5jYXNlIDI3OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSAyODp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgMjk6XG4gICAgdGhpcy4kID0ge1xuICAgICAgdHlwZTogJ1N1YkV4cHJlc3Npb24nLFxuICAgICAgcGF0aDogJCRbJDAtM10sXG4gICAgICBwYXJhbXM6ICQkWyQwLTJdLFxuICAgICAgaGFzaDogJCRbJDAtMV0sXG4gICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICB9O1xuICBcbmJyZWFrO1xuY2FzZSAzMDp0aGlzLiQgPSB7dHlwZTogJ0hhc2gnLCBwYWlyczogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDMxOnRoaXMuJCA9IHt0eXBlOiAnSGFzaFBhaXInLCBrZXk6IHl5LmlkKCQkWyQwLTJdKSwgdmFsdWU6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzMjp0aGlzLiQgPSB5eS5pZCgkJFskMC0xXSk7XG5icmVhaztcbmNhc2UgMzM6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDM0OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSAzNTp0aGlzLiQgPSB7dHlwZTogJ1N0cmluZ0xpdGVyYWwnLCB2YWx1ZTogJCRbJDBdLCBvcmlnaW5hbDogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDM2OnRoaXMuJCA9IHt0eXBlOiAnTnVtYmVyTGl0ZXJhbCcsIHZhbHVlOiBOdW1iZXIoJCRbJDBdKSwgb3JpZ2luYWw6IE51bWJlcigkJFskMF0pLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDM3OnRoaXMuJCA9IHt0eXBlOiAnQm9vbGVhbkxpdGVyYWwnLCB2YWx1ZTogJCRbJDBdID09PSAndHJ1ZScsIG9yaWdpbmFsOiAkJFskMF0gPT09ICd0cnVlJywgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzODp0aGlzLiQgPSB7dHlwZTogJ1VuZGVmaW5lZExpdGVyYWwnLCBvcmlnaW5hbDogdW5kZWZpbmVkLCB2YWx1ZTogdW5kZWZpbmVkLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDM5OnRoaXMuJCA9IHt0eXBlOiAnTnVsbExpdGVyYWwnLCBvcmlnaW5hbDogbnVsbCwgdmFsdWU6IG51bGwsIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKX07XG5icmVhaztcbmNhc2UgNDA6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDQxOnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSA0Mjp0aGlzLiQgPSB5eS5wcmVwYXJlUGF0aCh0cnVlLCAkJFskMF0sIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDQzOnRoaXMuJCA9IHl5LnByZXBhcmVQYXRoKGZhbHNlLCAkJFskMF0sIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDQ0OiAkJFskMC0yXS5wdXNoKHtwYXJ0OiB5eS5pZCgkJFskMF0pLCBvcmlnaW5hbDogJCRbJDBdLCBzZXBhcmF0b3I6ICQkWyQwLTFdfSk7IHRoaXMuJCA9ICQkWyQwLTJdOyBcbmJyZWFrO1xuY2FzZSA0NTp0aGlzLiQgPSBbe3BhcnQ6IHl5LmlkKCQkWyQwXSksIG9yaWdpbmFsOiAkJFskMF19XTtcbmJyZWFrO1xuY2FzZSA0Njp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA0NzokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNDg6dGhpcy4kID0gWyQkWyQwXV07XG5icmVhaztcbmNhc2UgNDk6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDUwOnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDUxOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA1ODp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA1OTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNjQ6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNjU6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDcwOnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDcxOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA3ODp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA3OTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgODI6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgODM6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDg2OnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDg3OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA5MDp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA5MTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgOTQ6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgOTU6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDk4OnRoaXMuJCA9IFskJFskMF1dO1xuYnJlYWs7XG5jYXNlIDk5OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSAxMDA6dGhpcy4kID0gWyQkWyQwXV07XG5icmVhaztcbmNhc2UgMTAxOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xufVxufSxcbnRhYmxlOiBbezM6MSw0OjIsNTpbMiw0Nl0sNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7MTpbM119LHs1OlsxLDRdfSx7NTpbMiwyXSw3OjUsODo2LDk6NywxMDo4LDExOjksMTI6MTAsMTM6MTEsMTQ6WzEsMTJdLDE1OlsxLDIwXSwxNjoxNywxOTpbMSwyM10sMjQ6MTUsMjc6MTYsMjk6WzEsMjFdLDM0OlsxLDIyXSwzOTpbMiwyXSw0NDpbMiwyXSw0NzpbMiwyXSw0ODpbMSwxM10sNTE6WzEsMTRdLDU1OlsxLDE4XSw1OToxOSw2MDpbMSwyNF19LHsxOlsyLDFdfSx7NTpbMiw0N10sMTQ6WzIsNDddLDE1OlsyLDQ3XSwxOTpbMiw0N10sMjk6WzIsNDddLDM0OlsyLDQ3XSwzOTpbMiw0N10sNDQ6WzIsNDddLDQ3OlsyLDQ3XSw0ODpbMiw0N10sNTE6WzIsNDddLDU1OlsyLDQ3XSw2MDpbMiw0N119LHs1OlsyLDNdLDE0OlsyLDNdLDE1OlsyLDNdLDE5OlsyLDNdLDI5OlsyLDNdLDM0OlsyLDNdLDM5OlsyLDNdLDQ0OlsyLDNdLDQ3OlsyLDNdLDQ4OlsyLDNdLDUxOlsyLDNdLDU1OlsyLDNdLDYwOlsyLDNdfSx7NTpbMiw0XSwxNDpbMiw0XSwxNTpbMiw0XSwxOTpbMiw0XSwyOTpbMiw0XSwzNDpbMiw0XSwzOTpbMiw0XSw0NDpbMiw0XSw0NzpbMiw0XSw0ODpbMiw0XSw1MTpbMiw0XSw1NTpbMiw0XSw2MDpbMiw0XX0sezU6WzIsNV0sMTQ6WzIsNV0sMTU6WzIsNV0sMTk6WzIsNV0sMjk6WzIsNV0sMzQ6WzIsNV0sMzk6WzIsNV0sNDQ6WzIsNV0sNDc6WzIsNV0sNDg6WzIsNV0sNTE6WzIsNV0sNTU6WzIsNV0sNjA6WzIsNV19LHs1OlsyLDZdLDE0OlsyLDZdLDE1OlsyLDZdLDE5OlsyLDZdLDI5OlsyLDZdLDM0OlsyLDZdLDM5OlsyLDZdLDQ0OlsyLDZdLDQ3OlsyLDZdLDQ4OlsyLDZdLDUxOlsyLDZdLDU1OlsyLDZdLDYwOlsyLDZdfSx7NTpbMiw3XSwxNDpbMiw3XSwxNTpbMiw3XSwxOTpbMiw3XSwyOTpbMiw3XSwzNDpbMiw3XSwzOTpbMiw3XSw0NDpbMiw3XSw0NzpbMiw3XSw0ODpbMiw3XSw1MTpbMiw3XSw1NTpbMiw3XSw2MDpbMiw3XX0sezU6WzIsOF0sMTQ6WzIsOF0sMTU6WzIsOF0sMTk6WzIsOF0sMjk6WzIsOF0sMzQ6WzIsOF0sMzk6WzIsOF0sNDQ6WzIsOF0sNDc6WzIsOF0sNDg6WzIsOF0sNTE6WzIsOF0sNTU6WzIsOF0sNjA6WzIsOF19LHs1OlsyLDldLDE0OlsyLDldLDE1OlsyLDldLDE5OlsyLDldLDI5OlsyLDldLDM0OlsyLDldLDM5OlsyLDldLDQ0OlsyLDldLDQ3OlsyLDldLDQ4OlsyLDldLDUxOlsyLDldLDU1OlsyLDldLDYwOlsyLDldfSx7MjA6MjUsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6MzYsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NDozNyw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSwzOTpbMiw0Nl0sNDQ6WzIsNDZdLDQ3OlsyLDQ2XSw0ODpbMiw0Nl0sNTE6WzIsNDZdLDU1OlsyLDQ2XSw2MDpbMiw0Nl19LHs0OjM4LDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDQ0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7MTM6NDAsMTU6WzEsMjBdLDE3OjM5fSx7MjA6NDIsNTY6NDEsNjQ6NDMsNjU6WzEsNDRdLDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezQ6NDUsNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sNDc6WzIsNDZdLDQ4OlsyLDQ2XSw1MTpbMiw0Nl0sNTU6WzIsNDZdLDYwOlsyLDQ2XX0sezU6WzIsMTBdLDE0OlsyLDEwXSwxNTpbMiwxMF0sMTg6WzIsMTBdLDE5OlsyLDEwXSwyOTpbMiwxMF0sMzQ6WzIsMTBdLDM5OlsyLDEwXSw0NDpbMiwxMF0sNDc6WzIsMTBdLDQ4OlsyLDEwXSw1MTpbMiwxMF0sNTU6WzIsMTBdLDYwOlsyLDEwXX0sezIwOjQ2LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjQ3LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjQ4LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjQyLDU2OjQ5LDY0OjQzLDY1OlsxLDQ0XSw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHszMzpbMiw3OF0sNDk6NTAsNjU6WzIsNzhdLDcyOlsyLDc4XSw4MDpbMiw3OF0sODE6WzIsNzhdLDgyOlsyLDc4XSw4MzpbMiw3OF0sODQ6WzIsNzhdLDg1OlsyLDc4XX0sezIzOlsyLDMzXSwzMzpbMiwzM10sNTQ6WzIsMzNdLDY1OlsyLDMzXSw2ODpbMiwzM10sNzI6WzIsMzNdLDc1OlsyLDMzXSw4MDpbMiwzM10sODE6WzIsMzNdLDgyOlsyLDMzXSw4MzpbMiwzM10sODQ6WzIsMzNdLDg1OlsyLDMzXX0sezIzOlsyLDM0XSwzMzpbMiwzNF0sNTQ6WzIsMzRdLDY1OlsyLDM0XSw2ODpbMiwzNF0sNzI6WzIsMzRdLDc1OlsyLDM0XSw4MDpbMiwzNF0sODE6WzIsMzRdLDgyOlsyLDM0XSw4MzpbMiwzNF0sODQ6WzIsMzRdLDg1OlsyLDM0XX0sezIzOlsyLDM1XSwzMzpbMiwzNV0sNTQ6WzIsMzVdLDY1OlsyLDM1XSw2ODpbMiwzNV0sNzI6WzIsMzVdLDc1OlsyLDM1XSw4MDpbMiwzNV0sODE6WzIsMzVdLDgyOlsyLDM1XSw4MzpbMiwzNV0sODQ6WzIsMzVdLDg1OlsyLDM1XX0sezIzOlsyLDM2XSwzMzpbMiwzNl0sNTQ6WzIsMzZdLDY1OlsyLDM2XSw2ODpbMiwzNl0sNzI6WzIsMzZdLDc1OlsyLDM2XSw4MDpbMiwzNl0sODE6WzIsMzZdLDgyOlsyLDM2XSw4MzpbMiwzNl0sODQ6WzIsMzZdLDg1OlsyLDM2XX0sezIzOlsyLDM3XSwzMzpbMiwzN10sNTQ6WzIsMzddLDY1OlsyLDM3XSw2ODpbMiwzN10sNzI6WzIsMzddLDc1OlsyLDM3XSw4MDpbMiwzN10sODE6WzIsMzddLDgyOlsyLDM3XSw4MzpbMiwzN10sODQ6WzIsMzddLDg1OlsyLDM3XX0sezIzOlsyLDM4XSwzMzpbMiwzOF0sNTQ6WzIsMzhdLDY1OlsyLDM4XSw2ODpbMiwzOF0sNzI6WzIsMzhdLDc1OlsyLDM4XSw4MDpbMiwzOF0sODE6WzIsMzhdLDgyOlsyLDM4XSw4MzpbMiwzOF0sODQ6WzIsMzhdLDg1OlsyLDM4XX0sezIzOlsyLDM5XSwzMzpbMiwzOV0sNTQ6WzIsMzldLDY1OlsyLDM5XSw2ODpbMiwzOV0sNzI6WzIsMzldLDc1OlsyLDM5XSw4MDpbMiwzOV0sODE6WzIsMzldLDgyOlsyLDM5XSw4MzpbMiwzOV0sODQ6WzIsMzldLDg1OlsyLDM5XX0sezIzOlsyLDQzXSwzMzpbMiw0M10sNTQ6WzIsNDNdLDY1OlsyLDQzXSw2ODpbMiw0M10sNzI6WzIsNDNdLDc1OlsyLDQzXSw4MDpbMiw0M10sODE6WzIsNDNdLDgyOlsyLDQzXSw4MzpbMiw0M10sODQ6WzIsNDNdLDg1OlsyLDQzXSw4NzpbMSw1MV19LHs3MjpbMSwzNV0sODY6NTJ9LHsyMzpbMiw0NV0sMzM6WzIsNDVdLDU0OlsyLDQ1XSw2NTpbMiw0NV0sNjg6WzIsNDVdLDcyOlsyLDQ1XSw3NTpbMiw0NV0sODA6WzIsNDVdLDgxOlsyLDQ1XSw4MjpbMiw0NV0sODM6WzIsNDVdLDg0OlsyLDQ1XSw4NTpbMiw0NV0sODc6WzIsNDVdfSx7NTI6NTMsNTQ6WzIsODJdLDY1OlsyLDgyXSw3MjpbMiw4Ml0sODA6WzIsODJdLDgxOlsyLDgyXSw4MjpbMiw4Ml0sODM6WzIsODJdLDg0OlsyLDgyXSw4NTpbMiw4Ml19LHsyNTo1NCwzODo1NiwzOTpbMSw1OF0sNDM6NTcsNDQ6WzEsNTldLDQ1OjU1LDQ3OlsyLDU0XX0sezI4OjYwLDQzOjYxLDQ0OlsxLDU5XSw0NzpbMiw1Nl19LHsxMzo2MywxNTpbMSwyMF0sMTg6WzEsNjJdfSx7MTU6WzIsNDhdLDE4OlsyLDQ4XX0sezMzOlsyLDg2XSw1Nzo2NCw2NTpbMiw4Nl0sNzI6WzIsODZdLDgwOlsyLDg2XSw4MTpbMiw4Nl0sODI6WzIsODZdLDgzOlsyLDg2XSw4NDpbMiw4Nl0sODU6WzIsODZdfSx7MzM6WzIsNDBdLDY1OlsyLDQwXSw3MjpbMiw0MF0sODA6WzIsNDBdLDgxOlsyLDQwXSw4MjpbMiw0MF0sODM6WzIsNDBdLDg0OlsyLDQwXSw4NTpbMiw0MF19LHszMzpbMiw0MV0sNjU6WzIsNDFdLDcyOlsyLDQxXSw4MDpbMiw0MV0sODE6WzIsNDFdLDgyOlsyLDQxXSw4MzpbMiw0MV0sODQ6WzIsNDFdLDg1OlsyLDQxXX0sezIwOjY1LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezI2OjY2LDQ3OlsxLDY3XX0sezMwOjY4LDMzOlsyLDU4XSw2NTpbMiw1OF0sNzI6WzIsNThdLDc1OlsyLDU4XSw4MDpbMiw1OF0sODE6WzIsNThdLDgyOlsyLDU4XSw4MzpbMiw1OF0sODQ6WzIsNThdLDg1OlsyLDU4XX0sezMzOlsyLDY0XSwzNTo2OSw2NTpbMiw2NF0sNzI6WzIsNjRdLDc1OlsyLDY0XSw4MDpbMiw2NF0sODE6WzIsNjRdLDgyOlsyLDY0XSw4MzpbMiw2NF0sODQ6WzIsNjRdLDg1OlsyLDY0XX0sezIxOjcwLDIzOlsyLDUwXSw2NTpbMiw1MF0sNzI6WzIsNTBdLDgwOlsyLDUwXSw4MTpbMiw1MF0sODI6WzIsNTBdLDgzOlsyLDUwXSw4NDpbMiw1MF0sODU6WzIsNTBdfSx7MzM6WzIsOTBdLDYxOjcxLDY1OlsyLDkwXSw3MjpbMiw5MF0sODA6WzIsOTBdLDgxOlsyLDkwXSw4MjpbMiw5MF0sODM6WzIsOTBdLDg0OlsyLDkwXSw4NTpbMiw5MF19LHsyMDo3NSwzMzpbMiw4MF0sNTA6NzIsNjM6NzMsNjQ6NzYsNjU6WzEsNDRdLDY5Ojc0LDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezcyOlsxLDgwXX0sezIzOlsyLDQyXSwzMzpbMiw0Ml0sNTQ6WzIsNDJdLDY1OlsyLDQyXSw2ODpbMiw0Ml0sNzI6WzIsNDJdLDc1OlsyLDQyXSw4MDpbMiw0Ml0sODE6WzIsNDJdLDgyOlsyLDQyXSw4MzpbMiw0Ml0sODQ6WzIsNDJdLDg1OlsyLDQyXSw4NzpbMSw1MV19LHsyMDo3NSw1Mzo4MSw1NDpbMiw4NF0sNjM6ODIsNjQ6NzYsNjU6WzEsNDRdLDY5OjgzLDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezI2Ojg0LDQ3OlsxLDY3XX0sezQ3OlsyLDU1XX0sezQ6ODUsNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sMzk6WzIsNDZdLDQ0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7NDc6WzIsMjBdfSx7MjA6ODYsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NDo4Nyw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7MjY6ODgsNDc6WzEsNjddfSx7NDc6WzIsNTddfSx7NTpbMiwxMV0sMTQ6WzIsMTFdLDE1OlsyLDExXSwxOTpbMiwxMV0sMjk6WzIsMTFdLDM0OlsyLDExXSwzOTpbMiwxMV0sNDQ6WzIsMTFdLDQ3OlsyLDExXSw0ODpbMiwxMV0sNTE6WzIsMTFdLDU1OlsyLDExXSw2MDpbMiwxMV19LHsxNTpbMiw0OV0sMTg6WzIsNDldfSx7MjA6NzUsMzM6WzIsODhdLDU4Ojg5LDYzOjkwLDY0Ojc2LDY1OlsxLDQ0XSw2OTo5MSw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs2NTpbMiw5NF0sNjY6OTIsNjg6WzIsOTRdLDcyOlsyLDk0XSw4MDpbMiw5NF0sODE6WzIsOTRdLDgyOlsyLDk0XSw4MzpbMiw5NF0sODQ6WzIsOTRdLDg1OlsyLDk0XX0sezU6WzIsMjVdLDE0OlsyLDI1XSwxNTpbMiwyNV0sMTk6WzIsMjVdLDI5OlsyLDI1XSwzNDpbMiwyNV0sMzk6WzIsMjVdLDQ0OlsyLDI1XSw0NzpbMiwyNV0sNDg6WzIsMjVdLDUxOlsyLDI1XSw1NTpbMiwyNV0sNjA6WzIsMjVdfSx7MjA6OTMsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NzUsMzE6OTQsMzM6WzIsNjBdLDYzOjk1LDY0Ojc2LDY1OlsxLDQ0XSw2OTo5Niw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzU6WzIsNjBdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NzUsMzM6WzIsNjZdLDM2Ojk3LDYzOjk4LDY0Ojc2LDY1OlsxLDQ0XSw2OTo5OSw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzU6WzIsNjZdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NzUsMjI6MTAwLDIzOlsyLDUyXSw2MzoxMDEsNjQ6NzYsNjU6WzEsNDRdLDY5OjEwMiw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo3NSwzMzpbMiw5Ml0sNjI6MTAzLDYzOjEwNCw2NDo3Niw2NTpbMSw0NF0sNjk6MTA1LDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezMzOlsxLDEwNl19LHszMzpbMiw3OV0sNjU6WzIsNzldLDcyOlsyLDc5XSw4MDpbMiw3OV0sODE6WzIsNzldLDgyOlsyLDc5XSw4MzpbMiw3OV0sODQ6WzIsNzldLDg1OlsyLDc5XX0sezMzOlsyLDgxXX0sezIzOlsyLDI3XSwzMzpbMiwyN10sNTQ6WzIsMjddLDY1OlsyLDI3XSw2ODpbMiwyN10sNzI6WzIsMjddLDc1OlsyLDI3XSw4MDpbMiwyN10sODE6WzIsMjddLDgyOlsyLDI3XSw4MzpbMiwyN10sODQ6WzIsMjddLDg1OlsyLDI3XX0sezIzOlsyLDI4XSwzMzpbMiwyOF0sNTQ6WzIsMjhdLDY1OlsyLDI4XSw2ODpbMiwyOF0sNzI6WzIsMjhdLDc1OlsyLDI4XSw4MDpbMiwyOF0sODE6WzIsMjhdLDgyOlsyLDI4XSw4MzpbMiwyOF0sODQ6WzIsMjhdLDg1OlsyLDI4XX0sezIzOlsyLDMwXSwzMzpbMiwzMF0sNTQ6WzIsMzBdLDY4OlsyLDMwXSw3MToxMDcsNzI6WzEsMTA4XSw3NTpbMiwzMF19LHsyMzpbMiw5OF0sMzM6WzIsOThdLDU0OlsyLDk4XSw2ODpbMiw5OF0sNzI6WzIsOThdLDc1OlsyLDk4XX0sezIzOlsyLDQ1XSwzMzpbMiw0NV0sNTQ6WzIsNDVdLDY1OlsyLDQ1XSw2ODpbMiw0NV0sNzI6WzIsNDVdLDczOlsxLDEwOV0sNzU6WzIsNDVdLDgwOlsyLDQ1XSw4MTpbMiw0NV0sODI6WzIsNDVdLDgzOlsyLDQ1XSw4NDpbMiw0NV0sODU6WzIsNDVdLDg3OlsyLDQ1XX0sezIzOlsyLDQ0XSwzMzpbMiw0NF0sNTQ6WzIsNDRdLDY1OlsyLDQ0XSw2ODpbMiw0NF0sNzI6WzIsNDRdLDc1OlsyLDQ0XSw4MDpbMiw0NF0sODE6WzIsNDRdLDgyOlsyLDQ0XSw4MzpbMiw0NF0sODQ6WzIsNDRdLDg1OlsyLDQ0XSw4NzpbMiw0NF19LHs1NDpbMSwxMTBdfSx7NTQ6WzIsODNdLDY1OlsyLDgzXSw3MjpbMiw4M10sODA6WzIsODNdLDgxOlsyLDgzXSw4MjpbMiw4M10sODM6WzIsODNdLDg0OlsyLDgzXSw4NTpbMiw4M119LHs1NDpbMiw4NV19LHs1OlsyLDEzXSwxNDpbMiwxM10sMTU6WzIsMTNdLDE5OlsyLDEzXSwyOTpbMiwxM10sMzQ6WzIsMTNdLDM5OlsyLDEzXSw0NDpbMiwxM10sNDc6WzIsMTNdLDQ4OlsyLDEzXSw1MTpbMiwxM10sNTU6WzIsMTNdLDYwOlsyLDEzXX0sezM4OjU2LDM5OlsxLDU4XSw0Mzo1Nyw0NDpbMSw1OV0sNDU6MTEyLDQ2OjExMSw0NzpbMiw3Nl19LHszMzpbMiw3MF0sNDA6MTEzLDY1OlsyLDcwXSw3MjpbMiw3MF0sNzU6WzIsNzBdLDgwOlsyLDcwXSw4MTpbMiw3MF0sODI6WzIsNzBdLDgzOlsyLDcwXSw4NDpbMiw3MF0sODU6WzIsNzBdfSx7NDc6WzIsMThdfSx7NTpbMiwxNF0sMTQ6WzIsMTRdLDE1OlsyLDE0XSwxOTpbMiwxNF0sMjk6WzIsMTRdLDM0OlsyLDE0XSwzOTpbMiwxNF0sNDQ6WzIsMTRdLDQ3OlsyLDE0XSw0ODpbMiwxNF0sNTE6WzIsMTRdLDU1OlsyLDE0XSw2MDpbMiwxNF19LHszMzpbMSwxMTRdfSx7MzM6WzIsODddLDY1OlsyLDg3XSw3MjpbMiw4N10sODA6WzIsODddLDgxOlsyLDg3XSw4MjpbMiw4N10sODM6WzIsODddLDg0OlsyLDg3XSw4NTpbMiw4N119LHszMzpbMiw4OV19LHsyMDo3NSw2MzoxMTYsNjQ6NzYsNjU6WzEsNDRdLDY3OjExNSw2ODpbMiw5Nl0sNjk6MTE3LDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezMzOlsxLDExOF19LHszMjoxMTksMzM6WzIsNjJdLDc0OjEyMCw3NTpbMSwxMjFdfSx7MzM6WzIsNTldLDY1OlsyLDU5XSw3MjpbMiw1OV0sNzU6WzIsNTldLDgwOlsyLDU5XSw4MTpbMiw1OV0sODI6WzIsNTldLDgzOlsyLDU5XSw4NDpbMiw1OV0sODU6WzIsNTldfSx7MzM6WzIsNjFdLDc1OlsyLDYxXX0sezMzOlsyLDY4XSwzNzoxMjIsNzQ6MTIzLDc1OlsxLDEyMV19LHszMzpbMiw2NV0sNjU6WzIsNjVdLDcyOlsyLDY1XSw3NTpbMiw2NV0sODA6WzIsNjVdLDgxOlsyLDY1XSw4MjpbMiw2NV0sODM6WzIsNjVdLDg0OlsyLDY1XSw4NTpbMiw2NV19LHszMzpbMiw2N10sNzU6WzIsNjddfSx7MjM6WzEsMTI0XX0sezIzOlsyLDUxXSw2NTpbMiw1MV0sNzI6WzIsNTFdLDgwOlsyLDUxXSw4MTpbMiw1MV0sODI6WzIsNTFdLDgzOlsyLDUxXSw4NDpbMiw1MV0sODU6WzIsNTFdfSx7MjM6WzIsNTNdfSx7MzM6WzEsMTI1XX0sezMzOlsyLDkxXSw2NTpbMiw5MV0sNzI6WzIsOTFdLDgwOlsyLDkxXSw4MTpbMiw5MV0sODI6WzIsOTFdLDgzOlsyLDkxXSw4NDpbMiw5MV0sODU6WzIsOTFdfSx7MzM6WzIsOTNdfSx7NTpbMiwyMl0sMTQ6WzIsMjJdLDE1OlsyLDIyXSwxOTpbMiwyMl0sMjk6WzIsMjJdLDM0OlsyLDIyXSwzOTpbMiwyMl0sNDQ6WzIsMjJdLDQ3OlsyLDIyXSw0ODpbMiwyMl0sNTE6WzIsMjJdLDU1OlsyLDIyXSw2MDpbMiwyMl19LHsyMzpbMiw5OV0sMzM6WzIsOTldLDU0OlsyLDk5XSw2ODpbMiw5OV0sNzI6WzIsOTldLDc1OlsyLDk5XX0sezczOlsxLDEwOV19LHsyMDo3NSw2MzoxMjYsNjQ6NzYsNjU6WzEsNDRdLDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezU6WzIsMjNdLDE0OlsyLDIzXSwxNTpbMiwyM10sMTk6WzIsMjNdLDI5OlsyLDIzXSwzNDpbMiwyM10sMzk6WzIsMjNdLDQ0OlsyLDIzXSw0NzpbMiwyM10sNDg6WzIsMjNdLDUxOlsyLDIzXSw1NTpbMiwyM10sNjA6WzIsMjNdfSx7NDc6WzIsMTldfSx7NDc6WzIsNzddfSx7MjA6NzUsMzM6WzIsNzJdLDQxOjEyNyw2MzoxMjgsNjQ6NzYsNjU6WzEsNDRdLDY5OjEyOSw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzU6WzIsNzJdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NTpbMiwyNF0sMTQ6WzIsMjRdLDE1OlsyLDI0XSwxOTpbMiwyNF0sMjk6WzIsMjRdLDM0OlsyLDI0XSwzOTpbMiwyNF0sNDQ6WzIsMjRdLDQ3OlsyLDI0XSw0ODpbMiwyNF0sNTE6WzIsMjRdLDU1OlsyLDI0XSw2MDpbMiwyNF19LHs2ODpbMSwxMzBdfSx7NjU6WzIsOTVdLDY4OlsyLDk1XSw3MjpbMiw5NV0sODA6WzIsOTVdLDgxOlsyLDk1XSw4MjpbMiw5NV0sODM6WzIsOTVdLDg0OlsyLDk1XSw4NTpbMiw5NV19LHs2ODpbMiw5N119LHs1OlsyLDIxXSwxNDpbMiwyMV0sMTU6WzIsMjFdLDE5OlsyLDIxXSwyOTpbMiwyMV0sMzQ6WzIsMjFdLDM5OlsyLDIxXSw0NDpbMiwyMV0sNDc6WzIsMjFdLDQ4OlsyLDIxXSw1MTpbMiwyMV0sNTU6WzIsMjFdLDYwOlsyLDIxXX0sezMzOlsxLDEzMV19LHszMzpbMiw2M119LHs3MjpbMSwxMzNdLDc2OjEzMn0sezMzOlsxLDEzNF19LHszMzpbMiw2OV19LHsxNTpbMiwxMl19LHsxNDpbMiwyNl0sMTU6WzIsMjZdLDE5OlsyLDI2XSwyOTpbMiwyNl0sMzQ6WzIsMjZdLDQ3OlsyLDI2XSw0ODpbMiwyNl0sNTE6WzIsMjZdLDU1OlsyLDI2XSw2MDpbMiwyNl19LHsyMzpbMiwzMV0sMzM6WzIsMzFdLDU0OlsyLDMxXSw2ODpbMiwzMV0sNzI6WzIsMzFdLDc1OlsyLDMxXX0sezMzOlsyLDc0XSw0MjoxMzUsNzQ6MTM2LDc1OlsxLDEyMV19LHszMzpbMiw3MV0sNjU6WzIsNzFdLDcyOlsyLDcxXSw3NTpbMiw3MV0sODA6WzIsNzFdLDgxOlsyLDcxXSw4MjpbMiw3MV0sODM6WzIsNzFdLDg0OlsyLDcxXSw4NTpbMiw3MV19LHszMzpbMiw3M10sNzU6WzIsNzNdfSx7MjM6WzIsMjldLDMzOlsyLDI5XSw1NDpbMiwyOV0sNjU6WzIsMjldLDY4OlsyLDI5XSw3MjpbMiwyOV0sNzU6WzIsMjldLDgwOlsyLDI5XSw4MTpbMiwyOV0sODI6WzIsMjldLDgzOlsyLDI5XSw4NDpbMiwyOV0sODU6WzIsMjldfSx7MTQ6WzIsMTVdLDE1OlsyLDE1XSwxOTpbMiwxNV0sMjk6WzIsMTVdLDM0OlsyLDE1XSwzOTpbMiwxNV0sNDQ6WzIsMTVdLDQ3OlsyLDE1XSw0ODpbMiwxNV0sNTE6WzIsMTVdLDU1OlsyLDE1XSw2MDpbMiwxNV19LHs3MjpbMSwxMzhdLDc3OlsxLDEzN119LHs3MjpbMiwxMDBdLDc3OlsyLDEwMF19LHsxNDpbMiwxNl0sMTU6WzIsMTZdLDE5OlsyLDE2XSwyOTpbMiwxNl0sMzQ6WzIsMTZdLDQ0OlsyLDE2XSw0NzpbMiwxNl0sNDg6WzIsMTZdLDUxOlsyLDE2XSw1NTpbMiwxNl0sNjA6WzIsMTZdfSx7MzM6WzEsMTM5XX0sezMzOlsyLDc1XX0sezMzOlsyLDMyXX0sezcyOlsyLDEwMV0sNzc6WzIsMTAxXX0sezE0OlsyLDE3XSwxNTpbMiwxN10sMTk6WzIsMTddLDI5OlsyLDE3XSwzNDpbMiwxN10sMzk6WzIsMTddLDQ0OlsyLDE3XSw0NzpbMiwxN10sNDg6WzIsMTddLDUxOlsyLDE3XSw1NTpbMiwxN10sNjA6WzIsMTddfV0sXG5kZWZhdWx0QWN0aW9uczogezQ6WzIsMV0sNTU6WzIsNTVdLDU3OlsyLDIwXSw2MTpbMiw1N10sNzQ6WzIsODFdLDgzOlsyLDg1XSw4NzpbMiwxOF0sOTE6WzIsODldLDEwMjpbMiw1M10sMTA1OlsyLDkzXSwxMTE6WzIsMTldLDExMjpbMiw3N10sMTE3OlsyLDk3XSwxMjA6WzIsNjNdLDEyMzpbMiw2OV0sMTI0OlsyLDEyXSwxMzY6WzIsNzVdLDEzNzpbMiwzMl19LFxucGFyc2VFcnJvcjogZnVuY3Rpb24gcGFyc2VFcnJvcihzdHIsIGhhc2gpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcbn0sXG5wYXJzZTogZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsIHN0YWNrID0gWzBdLCB2c3RhY2sgPSBbbnVsbF0sIGxzdGFjayA9IFtdLCB0YWJsZSA9IHRoaXMudGFibGUsIHl5dGV4dCA9IFwiXCIsIHl5bGluZW5vID0gMCwgeXlsZW5nID0gMCwgcmVjb3ZlcmluZyA9IDAsIFRFUlJPUiA9IDIsIEVPRiA9IDE7XG4gICAgdGhpcy5sZXhlci5zZXRJbnB1dChpbnB1dCk7XG4gICAgdGhpcy5sZXhlci55eSA9IHRoaXMueXk7XG4gICAgdGhpcy55eS5sZXhlciA9IHRoaXMubGV4ZXI7XG4gICAgdGhpcy55eS5wYXJzZXIgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGhpcy5sZXhlci55eWxsb2MgPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgdGhpcy5sZXhlci55eWxsb2MgPSB7fTtcbiAgICB2YXIgeXlsb2MgPSB0aGlzLmxleGVyLnl5bGxvYztcbiAgICBsc3RhY2sucHVzaCh5eWxvYyk7XG4gICAgdmFyIHJhbmdlcyA9IHRoaXMubGV4ZXIub3B0aW9ucyAmJiB0aGlzLmxleGVyLm9wdGlvbnMucmFuZ2VzO1xuICAgIGlmICh0eXBlb2YgdGhpcy55eS5wYXJzZUVycm9yID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRoaXMueXkucGFyc2VFcnJvcjtcbiAgICBmdW5jdGlvbiBwb3BTdGFjayhuKSB7XG4gICAgICAgIHN0YWNrLmxlbmd0aCA9IHN0YWNrLmxlbmd0aCAtIDIgKiBuO1xuICAgICAgICB2c3RhY2subGVuZ3RoID0gdnN0YWNrLmxlbmd0aCAtIG47XG4gICAgICAgIGxzdGFjay5sZW5ndGggPSBsc3RhY2subGVuZ3RoIC0gbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGV4KCkge1xuICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgIHRva2VuID0gc2VsZi5sZXhlci5sZXgoKSB8fCAxO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHNlbGYuc3ltYm9sc19bdG9rZW5dIHx8IHRva2VuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgdmFyIHN5bWJvbCwgcHJlRXJyb3JTeW1ib2wsIHN0YXRlLCBhY3Rpb24sIGEsIHIsIHl5dmFsID0ge30sIHAsIGxlbiwgbmV3U3RhdGUsIGV4cGVjdGVkO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXSkge1xuICAgICAgICAgICAgYWN0aW9uID0gdGhpcy5kZWZhdWx0QWN0aW9uc1tzdGF0ZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc3ltYm9sID09PSBudWxsIHx8IHR5cGVvZiBzeW1ib2wgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHN5bWJvbCA9IGxleCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0aW9uID0gdGFibGVbc3RhdGVdICYmIHRhYmxlW3N0YXRlXVtzeW1ib2xdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSBcInVuZGVmaW5lZFwiIHx8ICFhY3Rpb24ubGVuZ3RoIHx8ICFhY3Rpb25bMF0pIHtcbiAgICAgICAgICAgIHZhciBlcnJTdHIgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKCFyZWNvdmVyaW5nKSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHAgaW4gdGFibGVbc3RhdGVdKVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXJtaW5hbHNfW3BdICYmIHAgPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZC5wdXNoKFwiJ1wiICsgdGhpcy50ZXJtaW5hbHNfW3BdICsgXCInXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGVyclN0ciA9IFwiUGFyc2UgZXJyb3Igb24gbGluZSBcIiArICh5eWxpbmVubyArIDEpICsgXCI6XFxuXCIgKyB0aGlzLmxleGVyLnNob3dQb3NpdGlvbigpICsgXCJcXG5FeHBlY3RpbmcgXCIgKyBleHBlY3RlZC5qb2luKFwiLCBcIikgKyBcIiwgZ290ICdcIiArICh0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wpICsgXCInXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjogVW5leHBlY3RlZCBcIiArIChzeW1ib2wgPT0gMT9cImVuZCBvZiBpbnB1dFwiOlwiJ1wiICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyBcIidcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VFcnJvcihlcnJTdHIsIHt0ZXh0OiB0aGlzLmxleGVyLm1hdGNoLCB0b2tlbjogdGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sLCBsaW5lOiB0aGlzLmxleGVyLnl5bGluZW5vLCBsb2M6IHl5bG9jLCBleHBlY3RlZDogZXhwZWN0ZWR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uWzBdIGluc3RhbmNlb2YgQXJyYXkgJiYgYWN0aW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlIEVycm9yOiBtdWx0aXBsZSBhY3Rpb25zIHBvc3NpYmxlIGF0IHN0YXRlOiBcIiArIHN0YXRlICsgXCIsIHRva2VuOiBcIiArIHN5bWJvbCk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChhY3Rpb25bMF0pIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgc3RhY2sucHVzaChzeW1ib2wpO1xuICAgICAgICAgICAgdnN0YWNrLnB1c2godGhpcy5sZXhlci55eXRleHQpO1xuICAgICAgICAgICAgbHN0YWNrLnB1c2godGhpcy5sZXhlci55eWxsb2MpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChhY3Rpb25bMV0pO1xuICAgICAgICAgICAgc3ltYm9sID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghcHJlRXJyb3JTeW1ib2wpIHtcbiAgICAgICAgICAgICAgICB5eWxlbmcgPSB0aGlzLmxleGVyLnl5bGVuZztcbiAgICAgICAgICAgICAgICB5eXRleHQgPSB0aGlzLmxleGVyLnl5dGV4dDtcbiAgICAgICAgICAgICAgICB5eWxpbmVubyA9IHRoaXMubGV4ZXIueXlsaW5lbm87XG4gICAgICAgICAgICAgICAgeXlsb2MgPSB0aGlzLmxleGVyLnl5bGxvYztcbiAgICAgICAgICAgICAgICBpZiAocmVjb3ZlcmluZyA+IDApXG4gICAgICAgICAgICAgICAgICAgIHJlY292ZXJpbmctLTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gcHJlRXJyb3JTeW1ib2w7XG4gICAgICAgICAgICAgICAgcHJlRXJyb3JTeW1ib2wgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGxlbiA9IHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMV07XG4gICAgICAgICAgICB5eXZhbC4kID0gdnN0YWNrW3ZzdGFjay5sZW5ndGggLSBsZW5dO1xuICAgICAgICAgICAgeXl2YWwuXyQgPSB7Zmlyc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5maXJzdF9saW5lLCBsYXN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ubGFzdF9saW5lLCBmaXJzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfY29sdW1uLCBsYXN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2NvbHVtbn07XG4gICAgICAgICAgICBpZiAocmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgeXl2YWwuXyQucmFuZ2UgPSBbbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5yYW5nZVswXSwgbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5yYW5nZVsxXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwoeXl2YWwsIHl5dGV4dCwgeXlsZW5nLCB5eWxpbmVubywgdGhpcy55eSwgYWN0aW9uWzFdLCB2c3RhY2ssIGxzdGFjayk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKDAsIC0xICogbGVuICogMik7XG4gICAgICAgICAgICAgICAgdnN0YWNrID0gdnN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcbiAgICAgICAgICAgICAgICBsc3RhY2sgPSBsc3RhY2suc2xpY2UoMCwgLTEgKiBsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2sucHVzaCh0aGlzLnByb2R1Y3Rpb25zX1thY3Rpb25bMV1dWzBdKTtcbiAgICAgICAgICAgIHZzdGFjay5wdXNoKHl5dmFsLiQpO1xuICAgICAgICAgICAgbHN0YWNrLnB1c2goeXl2YWwuXyQpO1xuICAgICAgICAgICAgbmV3U3RhdGUgPSB0YWJsZVtzdGFja1tzdGFjay5sZW5ndGggLSAyXV1bc3RhY2tbc3RhY2subGVuZ3RoIC0gMV1dO1xuICAgICAgICAgICAgc3RhY2sucHVzaChuZXdTdGF0ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG59O1xuLyogSmlzb24gZ2VuZXJhdGVkIGxleGVyICovXG52YXIgbGV4ZXIgPSAoZnVuY3Rpb24oKXtcbnZhciBsZXhlciA9ICh7RU9GOjEsXG5wYXJzZUVycm9yOmZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XG4gICAgICAgIGlmICh0aGlzLnl5LnBhcnNlcikge1xuICAgICAgICAgICAgdGhpcy55eS5wYXJzZXIucGFyc2VFcnJvcihzdHIsIGhhc2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7XG4gICAgICAgIH1cbiAgICB9LFxuc2V0SW5wdXQ6ZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMuX21vcmUgPSB0aGlzLl9sZXNzID0gdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIHRoaXMueXlsaW5lbm8gPSB0aGlzLnl5bGVuZyA9IDA7XG4gICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy5tYXRjaGVkID0gdGhpcy5tYXRjaCA9ICcnO1xuICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrID0gWydJTklUSUFMJ107XG4gICAgICAgIHRoaXMueXlsbG9jID0ge2ZpcnN0X2xpbmU6MSxmaXJzdF9jb2x1bW46MCxsYXN0X2xpbmU6MSxsYXN0X2NvbHVtbjowfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHRoaXMueXlsbG9jLnJhbmdlID0gWzAsMF07XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbmlucHV0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNoID0gdGhpcy5faW5wdXRbMF07XG4gICAgICAgIHRoaXMueXl0ZXh0ICs9IGNoO1xuICAgICAgICB0aGlzLnl5bGVuZysrO1xuICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICB0aGlzLm1hdGNoICs9IGNoO1xuICAgICAgICB0aGlzLm1hdGNoZWQgKz0gY2g7XG4gICAgICAgIHZhciBsaW5lcyA9IGNoLm1hdGNoKC8oPzpcXHJcXG4/fFxcbikuKi9nKTtcbiAgICAgICAgaWYgKGxpbmVzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGluZW5vKys7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2xpbmUrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfY29sdW1uKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHRoaXMueXlsbG9jLnJhbmdlWzFdKys7XG5cbiAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZSgxKTtcbiAgICAgICAgcmV0dXJuIGNoO1xuICAgIH0sXG51bnB1dDpmdW5jdGlvbiAoY2gpIHtcbiAgICAgICAgdmFyIGxlbiA9IGNoLmxlbmd0aDtcbiAgICAgICAgdmFyIGxpbmVzID0gY2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcblxuICAgICAgICB0aGlzLl9pbnB1dCA9IGNoICsgdGhpcy5faW5wdXQ7XG4gICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy55eXRleHQuc3Vic3RyKDAsIHRoaXMueXl0ZXh0Lmxlbmd0aC1sZW4tMSk7XG4gICAgICAgIC8vdGhpcy55eWxlbmcgLT0gbGVuO1xuICAgICAgICB0aGlzLm9mZnNldCAtPSBsZW47XG4gICAgICAgIHZhciBvbGRMaW5lcyA9IHRoaXMubWF0Y2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcbiAgICAgICAgdGhpcy5tYXRjaCA9IHRoaXMubWF0Y2guc3Vic3RyKDAsIHRoaXMubWF0Y2gubGVuZ3RoLTEpO1xuICAgICAgICB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoZWQuc3Vic3RyKDAsIHRoaXMubWF0Y2hlZC5sZW5ndGgtMSk7XG5cbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aC0xKSB0aGlzLnl5bGluZW5vIC09IGxpbmVzLmxlbmd0aC0xO1xuICAgICAgICB2YXIgciA9IHRoaXMueXlsbG9jLnJhbmdlO1xuXG4gICAgICAgIHRoaXMueXlsbG9jID0ge2ZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmZpcnN0X2xpbmUsXG4gICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vKzEsXG4gICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4sXG4gICAgICAgICAgbGFzdF9jb2x1bW46IGxpbmVzID9cbiAgICAgICAgICAgICAgKGxpbmVzLmxlbmd0aCA9PT0gb2xkTGluZXMubGVuZ3RoID8gdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIDogMCkgKyBvbGRMaW5lc1tvbGRMaW5lcy5sZW5ndGggLSBsaW5lcy5sZW5ndGhdLmxlbmd0aCAtIGxpbmVzWzBdLmxlbmd0aDpcbiAgICAgICAgICAgICAgdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIC0gbGVuXG4gICAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbclswXSwgclswXSArIHRoaXMueXlsZW5nIC0gbGVuXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxubW9yZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX21vcmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxubGVzczpmdW5jdGlvbiAobikge1xuICAgICAgICB0aGlzLnVucHV0KHRoaXMubWF0Y2guc2xpY2UobikpO1xuICAgIH0sXG5wYXN0SW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFzdCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIHRoaXMubWF0Y2gubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIChwYXN0Lmxlbmd0aCA+IDIwID8gJy4uLic6JycpICsgcGFzdC5zdWJzdHIoLTIwKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgfSxcbnVwY29taW5nSW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV4dCA9IHRoaXMubWF0Y2g7XG4gICAgICAgIGlmIChuZXh0Lmxlbmd0aCA8IDIwKSB7XG4gICAgICAgICAgICBuZXh0ICs9IHRoaXMuX2lucHV0LnN1YnN0cigwLCAyMC1uZXh0Lmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChuZXh0LnN1YnN0cigwLDIwKSsobmV4dC5sZW5ndGggPiAyMCA/ICcuLi4nOicnKSkucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xuICAgIH0sXG5zaG93UG9zaXRpb246ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJlID0gdGhpcy5wYXN0SW5wdXQoKTtcbiAgICAgICAgdmFyIGMgPSBuZXcgQXJyYXkocHJlLmxlbmd0aCArIDEpLmpvaW4oXCItXCIpO1xuICAgICAgICByZXR1cm4gcHJlICsgdGhpcy51cGNvbWluZ0lucHV0KCkgKyBcIlxcblwiICsgYytcIl5cIjtcbiAgICB9LFxubmV4dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lucHV0KSB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICAgIHZhciB0b2tlbixcbiAgICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgICAgdGVtcE1hdGNoLFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICBsaW5lcztcbiAgICAgICAgaWYgKCF0aGlzLl9tb3JlKSB7XG4gICAgICAgICAgICB0aGlzLnl5dGV4dCA9ICcnO1xuICAgICAgICAgICAgdGhpcy5tYXRjaCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBydWxlcyA9IHRoaXMuX2N1cnJlbnRSdWxlcygpO1xuICAgICAgICBmb3IgKHZhciBpPTA7aSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0ZW1wTWF0Y2ggPSB0aGlzLl9pbnB1dC5tYXRjaCh0aGlzLnJ1bGVzW3J1bGVzW2ldXSk7XG4gICAgICAgICAgICBpZiAodGVtcE1hdGNoICYmICghbWF0Y2ggfHwgdGVtcE1hdGNoWzBdLmxlbmd0aCA+IG1hdGNoWzBdLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHRlbXBNYXRjaDtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZmxleCkgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBsaW5lcyA9IG1hdGNoWzBdLm1hdGNoKC8oPzpcXHJcXG4/fFxcbikuKi9nKTtcbiAgICAgICAgICAgIGlmIChsaW5lcykgdGhpcy55eWxpbmVubyArPSBsaW5lcy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHtmaXJzdF9saW5lOiB0aGlzLnl5bGxvYy5sYXN0X2xpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8rMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyBsaW5lc1tsaW5lcy5sZW5ndGgtMV0ubGVuZ3RoLWxpbmVzW2xpbmVzLmxlbmd0aC0xXS5tYXRjaCgvXFxyP1xcbj8vKVswXS5sZW5ndGggOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiArIG1hdGNoWzBdLmxlbmd0aH07XG4gICAgICAgICAgICB0aGlzLnl5dGV4dCArPSBtYXRjaFswXTtcbiAgICAgICAgICAgIHRoaXMubWF0Y2ggKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBtYXRjaDtcbiAgICAgICAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFt0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKz0gdGhpcy55eWxlbmddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbW9yZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZShtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5tYXRjaGVkICs9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdG9rZW4gPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh0aGlzLCB0aGlzLnl5LCB0aGlzLCBydWxlc1tpbmRleF0sdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aC0xXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5kb25lICYmIHRoaXMuX2lucHV0KSB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0b2tlbikgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgZWxzZSByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lucHV0ID09PSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKCdMZXhpY2FsIGVycm9yIG9uIGxpbmUgJysodGhpcy55eWxpbmVubysxKSsnLiBVbnJlY29nbml6ZWQgdGV4dC5cXG4nK3RoaXMuc2hvd1Bvc2l0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIHt0ZXh0OiBcIlwiLCB0b2tlbjogbnVsbCwgbGluZTogdGhpcy55eWxpbmVub30pO1xuICAgICAgICB9XG4gICAgfSxcbmxleDpmdW5jdGlvbiBsZXgoKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5uZXh0KCk7XG4gICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV4KCk7XG4gICAgICAgIH1cbiAgICB9LFxuYmVnaW46ZnVuY3Rpb24gYmVnaW4oY29uZGl0aW9uKSB7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uU3RhY2sucHVzaChjb25kaXRpb24pO1xuICAgIH0sXG5wb3BTdGF0ZTpmdW5jdGlvbiBwb3BTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2sucG9wKCk7XG4gICAgfSxcbl9jdXJyZW50UnVsZXM6ZnVuY3Rpb24gX2N1cnJlbnRSdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uc1t0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoLTFdXS5ydWxlcztcbiAgICB9LFxudG9wU3RhdGU6ZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aC0yXTtcbiAgICB9LFxucHVzaFN0YXRlOmZ1bmN0aW9uIGJlZ2luKGNvbmRpdGlvbikge1xuICAgICAgICB0aGlzLmJlZ2luKGNvbmRpdGlvbik7XG4gICAgfX0pO1xubGV4ZXIub3B0aW9ucyA9IHt9O1xubGV4ZXIucGVyZm9ybUFjdGlvbiA9IGZ1bmN0aW9uIGFub255bW91cyh5eSx5eV8sJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucyxZWV9TVEFSVFxuLypgYCovKSB7XG5cblxuZnVuY3Rpb24gc3RyaXAoc3RhcnQsIGVuZCkge1xuICByZXR1cm4geXlfLnl5dGV4dCA9IHl5Xy55eXRleHQuc3Vic3RyKHN0YXJ0LCB5eV8ueXlsZW5nLWVuZCk7XG59XG5cblxudmFyIFlZU1RBVEU9WVlfU1RBUlRcbnN3aXRjaCgkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zKSB7XG5jYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHl5Xy55eXRleHQuc2xpY2UoLTIpID09PSBcIlxcXFxcXFxcXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpcCgwLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJtdVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHl5Xy55eXRleHQuc2xpY2UoLTEpID09PSBcIlxcXFxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwKDAsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihcImVtdVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwibXVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoeXlfLnl5dGV4dCkgcmV0dXJuIDE1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgMTpyZXR1cm4gMTU7XG5icmVhaztcbmNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSAzOnRoaXMuYmVnaW4oJ3JhdycpOyByZXR1cm4gMTU7XG5icmVhaztcbmNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvdWxkIGJlIHVzaW5nIGB0aGlzLnRvcFN0YXRlKClgIGJlbG93LCBidXQgaXQgY3VycmVudGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyB0aGUgc2Vjb25kIHRvcCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCB0b3AuIE9wZW5lZCBhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzc3VlIGFib3V0IGl0IGF0IGh0dHBzOi8vZ2l0aHViLmNvbS96YWFjaC9qaXNvbi9pc3N1ZXMvMjkxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGgtMV0gPT09ICdyYXcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnN1YnN0cig1LCB5eV8ueXlsZW5nLTkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdFTkRfUkFXX0JMT0NLJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSA1OiByZXR1cm4gMTU7IFxuYnJlYWs7XG5jYXNlIDY6XG4gIHRoaXMucG9wU3RhdGUoKTtcbiAgcmV0dXJuIDE0O1xuXG5icmVhaztcbmNhc2UgNzpyZXR1cm4gNjU7XG5icmVhaztcbmNhc2UgODpyZXR1cm4gNjg7XG5icmVhaztcbmNhc2UgOTogcmV0dXJuIDE5OyBcbmJyZWFrO1xuY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbigncmF3Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgMTE6cmV0dXJuIDU1O1xuYnJlYWs7XG5jYXNlIDEyOnJldHVybiA2MDtcbmJyZWFrO1xuY2FzZSAxMzpyZXR1cm4gMjk7XG5icmVhaztcbmNhc2UgMTQ6cmV0dXJuIDQ3O1xuYnJlYWs7XG5jYXNlIDE1OnRoaXMucG9wU3RhdGUoKTsgcmV0dXJuIDQ0O1xuYnJlYWs7XG5jYXNlIDE2OnRoaXMucG9wU3RhdGUoKTsgcmV0dXJuIDQ0O1xuYnJlYWs7XG5jYXNlIDE3OnJldHVybiAzNDtcbmJyZWFrO1xuY2FzZSAxODpyZXR1cm4gMzk7XG5icmVhaztcbmNhc2UgMTk6cmV0dXJuIDUxO1xuYnJlYWs7XG5jYXNlIDIwOnJldHVybiA0ODtcbmJyZWFrO1xuY2FzZSAyMTpcbiAgdGhpcy51bnB1dCh5eV8ueXl0ZXh0KTtcbiAgdGhpcy5wb3BTdGF0ZSgpO1xuICB0aGlzLmJlZ2luKCdjb20nKTtcblxuYnJlYWs7XG5jYXNlIDIyOlxuICB0aGlzLnBvcFN0YXRlKCk7XG4gIHJldHVybiAxNDtcblxuYnJlYWs7XG5jYXNlIDIzOnJldHVybiA0ODtcbmJyZWFrO1xuY2FzZSAyNDpyZXR1cm4gNzM7XG5icmVhaztcbmNhc2UgMjU6cmV0dXJuIDcyO1xuYnJlYWs7XG5jYXNlIDI2OnJldHVybiA3MjtcbmJyZWFrO1xuY2FzZSAyNzpyZXR1cm4gODc7XG5icmVhaztcbmNhc2UgMjg6Ly8gaWdub3JlIHdoaXRlc3BhY2VcbmJyZWFrO1xuY2FzZSAyOTp0aGlzLnBvcFN0YXRlKCk7IHJldHVybiA1NDtcbmJyZWFrO1xuY2FzZSAzMDp0aGlzLnBvcFN0YXRlKCk7IHJldHVybiAzMztcbmJyZWFrO1xuY2FzZSAzMTp5eV8ueXl0ZXh0ID0gc3RyaXAoMSwyKS5yZXBsYWNlKC9cXFxcXCIvZywnXCInKTsgcmV0dXJuIDgwO1xuYnJlYWs7XG5jYXNlIDMyOnl5Xy55eXRleHQgPSBzdHJpcCgxLDIpLnJlcGxhY2UoL1xcXFwnL2csXCInXCIpOyByZXR1cm4gODA7XG5icmVhaztcbmNhc2UgMzM6cmV0dXJuIDg1O1xuYnJlYWs7XG5jYXNlIDM0OnJldHVybiA4MjtcbmJyZWFrO1xuY2FzZSAzNTpyZXR1cm4gODI7XG5icmVhaztcbmNhc2UgMzY6cmV0dXJuIDgzO1xuYnJlYWs7XG5jYXNlIDM3OnJldHVybiA4NDtcbmJyZWFrO1xuY2FzZSAzODpyZXR1cm4gODE7XG5icmVhaztcbmNhc2UgMzk6cmV0dXJuIDc1O1xuYnJlYWs7XG5jYXNlIDQwOnJldHVybiA3NztcbmJyZWFrO1xuY2FzZSA0MTpyZXR1cm4gNzI7XG5icmVhaztcbmNhc2UgNDI6eXlfLnl5dGV4dCA9IHl5Xy55eXRleHQucmVwbGFjZSgvXFxcXChbXFxcXFxcXV0pL2csJyQxJyk7IHJldHVybiA3MjtcbmJyZWFrO1xuY2FzZSA0MzpyZXR1cm4gJ0lOVkFMSUQnO1xuYnJlYWs7XG5jYXNlIDQ0OnJldHVybiA1O1xuYnJlYWs7XG59XG59O1xubGV4ZXIucnVsZXMgPSBbL14oPzpbXlxceDAwXSo/KD89KFxce1xceykpKS8sL14oPzpbXlxceDAwXSspLywvXig/OlteXFx4MDBdezIsfT8oPz0oXFx7XFx7fFxcXFxcXHtcXHt8XFxcXFxcXFxcXHtcXHt8JCkpKS8sL14oPzpcXHtcXHtcXHtcXHsoPz1bXlxcL10pKS8sL14oPzpcXHtcXHtcXHtcXHtcXC9bXlxccyFcIiMlLSxcXC5cXC87LT5AXFxbLVxcXmBcXHstfl0rKD89Wz19XFxzXFwvLl0pXFx9XFx9XFx9XFx9KS8sL14oPzpbXlxceDAwXSo/KD89KFxce1xce1xce1xceykpKS8sL14oPzpbXFxzXFxTXSo/LS0ofik/XFx9XFx9KS8sL14oPzpcXCgpLywvXig/OlxcKSkvLC9eKD86XFx7XFx7XFx7XFx7KS8sL14oPzpcXH1cXH1cXH1cXH0pLywvXig/Olxce1xceyh+KT8+KS8sL14oPzpcXHtcXHsofik/Iz4pLywvXig/Olxce1xceyh+KT8jXFwqPykvLC9eKD86XFx7XFx7KH4pP1xcLykvLC9eKD86XFx7XFx7KH4pP1xcXlxccyoofik/XFx9XFx9KS8sL14oPzpcXHtcXHsofik/XFxzKmVsc2VcXHMqKH4pP1xcfVxcfSkvLC9eKD86XFx7XFx7KH4pP1xcXikvLC9eKD86XFx7XFx7KH4pP1xccyplbHNlXFxiKS8sL14oPzpcXHtcXHsofik/XFx7KS8sL14oPzpcXHtcXHsofik/JikvLC9eKD86XFx7XFx7KH4pPyEtLSkvLC9eKD86XFx7XFx7KH4pPyFbXFxzXFxTXSo/XFx9XFx9KS8sL14oPzpcXHtcXHsofik/XFwqPykvLC9eKD86PSkvLC9eKD86XFwuXFwuKS8sL14oPzpcXC4oPz0oWz1+fVxcc1xcLy4pfF0pKSkvLC9eKD86W1xcLy5dKS8sL14oPzpcXHMrKS8sL14oPzpcXH0ofik/XFx9XFx9KS8sL14oPzoofik/XFx9XFx9KS8sL14oPzpcIihcXFxcW1wiXXxbXlwiXSkqXCIpLywvXig/OicoXFxcXFsnXXxbXiddKSonKS8sL14oPzpAKS8sL14oPzp0cnVlKD89KFt+fVxccyldKSkpLywvXig/OmZhbHNlKD89KFt+fVxccyldKSkpLywvXig/OnVuZGVmaW5lZCg/PShbfn1cXHMpXSkpKS8sL14oPzpudWxsKD89KFt+fVxccyldKSkpLywvXig/Oi0/WzAtOV0rKD86XFwuWzAtOV0rKT8oPz0oW359XFxzKV0pKSkvLC9eKD86YXNcXHMrXFx8KS8sL14oPzpcXHwpLywvXig/OihbXlxccyFcIiMlLSxcXC5cXC87LT5AXFxbLVxcXmBcXHstfl0rKD89KFs9fn1cXHNcXC8uKXxdKSkpKS8sL14oPzpcXFsoXFxcXFxcXXxbXlxcXV0pKlxcXSkvLC9eKD86LikvLC9eKD86JCkvXTtcbmxleGVyLmNvbmRpdGlvbnMgPSB7XCJtdVwiOntcInJ1bGVzXCI6WzcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0XSxcImluY2x1c2l2ZVwiOmZhbHNlfSxcImVtdVwiOntcInJ1bGVzXCI6WzJdLFwiaW5jbHVzaXZlXCI6ZmFsc2V9LFwiY29tXCI6e1wicnVsZXNcIjpbNl0sXCJpbmNsdXNpdmVcIjpmYWxzZX0sXCJyYXdcIjp7XCJydWxlc1wiOlszLDQsNV0sXCJpbmNsdXNpdmVcIjpmYWxzZX0sXCJJTklUSUFMXCI6e1wicnVsZXNcIjpbMCwxLDQ0XSxcImluY2x1c2l2ZVwiOnRydWV9fTtcbnJldHVybiBsZXhlcjt9KSgpXG5wYXJzZXIubGV4ZXIgPSBsZXhlcjtcbmZ1bmN0aW9uIFBhcnNlciAoKSB7IHRoaXMueXkgPSB7fTsgfVBhcnNlci5wcm90b3R5cGUgPSBwYXJzZXI7cGFyc2VyLlBhcnNlciA9IFBhcnNlcjtcbnJldHVybiBuZXcgUGFyc2VyO1xufSkoKTtleHBvcnQgZGVmYXVsdCBoYW5kbGViYXJzO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xuaW1wb3J0IFZpc2l0b3IgZnJvbSAnLi92aXNpdG9yJztcblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50KGFzdCkge1xuICByZXR1cm4gbmV3IFByaW50VmlzaXRvcigpLmFjY2VwdChhc3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUHJpbnRWaXNpdG9yKCkge1xuICB0aGlzLnBhZGRpbmcgPSAwO1xufVxuXG5QcmludFZpc2l0b3IucHJvdG90eXBlID0gbmV3IFZpc2l0b3IoKTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5wYWQgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgbGV0IG91dCA9ICcnO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5wYWRkaW5nOyBpIDwgbDsgaSsrKSB7XG4gICAgb3V0ICs9ICcgICc7XG4gIH1cblxuICBvdXQgKz0gc3RyaW5nICsgJ1xcbic7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLlByb2dyYW0gPSBmdW5jdGlvbihwcm9ncmFtKSB7XG4gIGxldCBvdXQgPSAnJyxcbiAgICAgIGJvZHkgPSBwcm9ncmFtLmJvZHksXG4gICAgICBpLCBsO1xuXG4gIGlmIChwcm9ncmFtLmJsb2NrUGFyYW1zKSB7XG4gICAgbGV0IGJsb2NrUGFyYW1zID0gJ0JMT0NLIFBBUkFNUzogWyc7XG4gICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW0uYmxvY2tQYXJhbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgYmxvY2tQYXJhbXMgKz0gJyAnICsgcHJvZ3JhbS5ibG9ja1BhcmFtc1tpXTtcbiAgICB9XG4gICAgYmxvY2tQYXJhbXMgKz0gJyBdJztcbiAgICBvdXQgKz0gdGhpcy5wYWQoYmxvY2tQYXJhbXMpO1xuICB9XG5cbiAgZm9yIChpID0gMCwgbCA9IGJvZHkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3V0ICs9IHRoaXMuYWNjZXB0KGJvZHlbaV0pO1xuICB9XG5cbiAgdGhpcy5wYWRkaW5nLS07XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuTXVzdGFjaGVTdGF0ZW1lbnQgPSBmdW5jdGlvbihtdXN0YWNoZSkge1xuICByZXR1cm4gdGhpcy5wYWQoJ3t7ICcgKyB0aGlzLlN1YkV4cHJlc3Npb24obXVzdGFjaGUpICsgJyB9fScpO1xufTtcblByaW50VmlzaXRvci5wcm90b3R5cGUuRGVjb3JhdG9yID0gZnVuY3Rpb24obXVzdGFjaGUpIHtcbiAgcmV0dXJuIHRoaXMucGFkKCd7eyBESVJFQ1RJVkUgJyArIHRoaXMuU3ViRXhwcmVzc2lvbihtdXN0YWNoZSkgKyAnIH19Jyk7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLkJsb2NrU3RhdGVtZW50ID1cblByaW50VmlzaXRvci5wcm90b3R5cGUuRGVjb3JhdG9yQmxvY2sgPSBmdW5jdGlvbihibG9jaykge1xuICBsZXQgb3V0ID0gJyc7XG5cbiAgb3V0ICs9IHRoaXMucGFkKChibG9jay50eXBlID09PSAnRGVjb3JhdG9yQmxvY2snID8gJ0RJUkVDVElWRSAnIDogJycpICsgJ0JMT0NLOicpO1xuICB0aGlzLnBhZGRpbmcrKztcbiAgb3V0ICs9IHRoaXMucGFkKHRoaXMuU3ViRXhwcmVzc2lvbihibG9jaykpO1xuICBpZiAoYmxvY2sucHJvZ3JhbSkge1xuICAgIG91dCArPSB0aGlzLnBhZCgnUFJPR1JBTTonKTtcbiAgICB0aGlzLnBhZGRpbmcrKztcbiAgICBvdXQgKz0gdGhpcy5hY2NlcHQoYmxvY2sucHJvZ3JhbSk7XG4gICAgdGhpcy5wYWRkaW5nLS07XG4gIH1cbiAgaWYgKGJsb2NrLmludmVyc2UpIHtcbiAgICBpZiAoYmxvY2sucHJvZ3JhbSkgeyB0aGlzLnBhZGRpbmcrKzsgfVxuICAgIG91dCArPSB0aGlzLnBhZCgne3tefX0nKTtcbiAgICB0aGlzLnBhZGRpbmcrKztcbiAgICBvdXQgKz0gdGhpcy5hY2NlcHQoYmxvY2suaW52ZXJzZSk7XG4gICAgdGhpcy5wYWRkaW5nLS07XG4gICAgaWYgKGJsb2NrLnByb2dyYW0pIHsgdGhpcy5wYWRkaW5nLS07IH1cbiAgfVxuICB0aGlzLnBhZGRpbmctLTtcblxuICByZXR1cm4gb3V0O1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5QYXJ0aWFsU3RhdGVtZW50ID0gZnVuY3Rpb24ocGFydGlhbCkge1xuICBsZXQgY29udGVudCA9ICdQQVJUSUFMOicgKyBwYXJ0aWFsLm5hbWUub3JpZ2luYWw7XG4gIGlmIChwYXJ0aWFsLnBhcmFtc1swXSkge1xuICAgIGNvbnRlbnQgKz0gJyAnICsgdGhpcy5hY2NlcHQocGFydGlhbC5wYXJhbXNbMF0pO1xuICB9XG4gIGlmIChwYXJ0aWFsLmhhc2gpIHtcbiAgICBjb250ZW50ICs9ICcgJyArIHRoaXMuYWNjZXB0KHBhcnRpYWwuaGFzaCk7XG4gIH1cbiAgcmV0dXJuIHRoaXMucGFkKCd7ez4gJyArIGNvbnRlbnQgKyAnIH19Jyk7XG59O1xuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5QYXJ0aWFsQmxvY2tTdGF0ZW1lbnQgPSBmdW5jdGlvbihwYXJ0aWFsKSB7XG4gIGxldCBjb250ZW50ID0gJ1BBUlRJQUwgQkxPQ0s6JyArIHBhcnRpYWwubmFtZS5vcmlnaW5hbDtcbiAgaWYgKHBhcnRpYWwucGFyYW1zWzBdKSB7XG4gICAgY29udGVudCArPSAnICcgKyB0aGlzLmFjY2VwdChwYXJ0aWFsLnBhcmFtc1swXSk7XG4gIH1cbiAgaWYgKHBhcnRpYWwuaGFzaCkge1xuICAgIGNvbnRlbnQgKz0gJyAnICsgdGhpcy5hY2NlcHQocGFydGlhbC5oYXNoKTtcbiAgfVxuXG4gIGNvbnRlbnQgKz0gJyAnICsgdGhpcy5wYWQoJ1BST0dSQU06Jyk7XG4gIHRoaXMucGFkZGluZysrO1xuICBjb250ZW50ICs9IHRoaXMuYWNjZXB0KHBhcnRpYWwucHJvZ3JhbSk7XG4gIHRoaXMucGFkZGluZy0tO1xuXG4gIHJldHVybiB0aGlzLnBhZCgne3s+ICcgKyBjb250ZW50ICsgJyB9fScpO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5Db250ZW50U3RhdGVtZW50ID0gZnVuY3Rpb24oY29udGVudCkge1xuICByZXR1cm4gdGhpcy5wYWQoXCJDT05URU5UWyAnXCIgKyBjb250ZW50LnZhbHVlICsgXCInIF1cIik7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLkNvbW1lbnRTdGF0ZW1lbnQgPSBmdW5jdGlvbihjb21tZW50KSB7XG4gIHJldHVybiB0aGlzLnBhZChcInt7ISAnXCIgKyBjb21tZW50LnZhbHVlICsgXCInIH19XCIpO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5TdWJFeHByZXNzaW9uID0gZnVuY3Rpb24oc2V4cHIpIHtcbiAgbGV0IHBhcmFtcyA9IHNleHByLnBhcmFtcyxcbiAgICAgIHBhcmFtU3RyaW5ncyA9IFtdLFxuICAgICAgaGFzaDtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcmFtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBwYXJhbVN0cmluZ3MucHVzaCh0aGlzLmFjY2VwdChwYXJhbXNbaV0pKTtcbiAgfVxuXG4gIHBhcmFtcyA9ICdbJyArIHBhcmFtU3RyaW5ncy5qb2luKCcsICcpICsgJ10nO1xuXG4gIGhhc2ggPSBzZXhwci5oYXNoID8gJyAnICsgdGhpcy5hY2NlcHQoc2V4cHIuaGFzaCkgOiAnJztcblxuICByZXR1cm4gdGhpcy5hY2NlcHQoc2V4cHIucGF0aCkgKyAnICcgKyBwYXJhbXMgKyBoYXNoO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5QYXRoRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKGlkKSB7XG4gIGxldCBwYXRoID0gaWQucGFydHMuam9pbignLycpO1xuICByZXR1cm4gKGlkLmRhdGEgPyAnQCcgOiAnJykgKyAnUEFUSDonICsgcGF0aDtcbn07XG5cblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5TdHJpbmdMaXRlcmFsID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHJldHVybiAnXCInICsgc3RyaW5nLnZhbHVlICsgJ1wiJztcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuTnVtYmVyTGl0ZXJhbCA9IGZ1bmN0aW9uKG51bWJlcikge1xuICByZXR1cm4gJ05VTUJFUnsnICsgbnVtYmVyLnZhbHVlICsgJ30nO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5Cb29sZWFuTGl0ZXJhbCA9IGZ1bmN0aW9uKGJvb2wpIHtcbiAgcmV0dXJuICdCT09MRUFOeycgKyBib29sLnZhbHVlICsgJ30nO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5VbmRlZmluZWRMaXRlcmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnVU5ERUZJTkVEJztcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuTnVsbExpdGVyYWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICdOVUxMJztcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuSGFzaCA9IGZ1bmN0aW9uKGhhc2gpIHtcbiAgbGV0IHBhaXJzID0gaGFzaC5wYWlycyxcbiAgICAgIGpvaW5lZFBhaXJzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBqb2luZWRQYWlycy5wdXNoKHRoaXMuYWNjZXB0KHBhaXJzW2ldKSk7XG4gIH1cblxuICByZXR1cm4gJ0hBU0h7JyArIGpvaW5lZFBhaXJzLmpvaW4oJywgJykgKyAnfSc7XG59O1xuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5IYXNoUGFpciA9IGZ1bmN0aW9uKHBhaXIpIHtcbiAgcmV0dXJuIHBhaXIua2V5ICsgJz0nICsgdGhpcy5hY2NlcHQocGFpci52YWx1ZSk7XG59O1xuLyogZXNsaW50LWVuYWJsZSBuZXctY2FwICovXG4iLCJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmZ1bmN0aW9uIFZpc2l0b3IoKSB7XG4gIHRoaXMucGFyZW50cyA9IFtdO1xufVxuXG5WaXNpdG9yLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFZpc2l0b3IsXG4gIG11dGF0aW5nOiBmYWxzZSxcblxuICAvLyBWaXNpdHMgYSBnaXZlbiB2YWx1ZS4gSWYgbXV0YXRpbmcsIHdpbGwgcmVwbGFjZSB0aGUgdmFsdWUgaWYgbmVjZXNzYXJ5LlxuICBhY2NlcHRLZXk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmFjY2VwdChub2RlW25hbWVdKTtcbiAgICBpZiAodGhpcy5tdXRhdGluZykge1xuICAgICAgLy8gSGFja3kgc2FuaXR5IGNoZWNrOiBUaGlzIG1heSBoYXZlIGEgZmV3IGZhbHNlIHBvc2l0aXZlcyBmb3IgdHlwZSBmb3IgdGhlIGhlbHBlclxuICAgICAgLy8gbWV0aG9kcyBidXQgd2lsbCBnZW5lcmFsbHkgZG8gdGhlIHJpZ2h0IHRoaW5nIHdpdGhvdXQgYSBsb3Qgb2Ygb3ZlcmhlYWQuXG4gICAgICBpZiAodmFsdWUgJiYgIVZpc2l0b3IucHJvdG90eXBlW3ZhbHVlLnR5cGVdKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1VuZXhwZWN0ZWQgbm9kZSB0eXBlIFwiJyArIHZhbHVlLnR5cGUgKyAnXCIgZm91bmQgd2hlbiBhY2NlcHRpbmcgJyArIG5hbWUgKyAnIG9uICcgKyBub2RlLnR5cGUpO1xuICAgICAgfVxuICAgICAgbm9kZVtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfSxcblxuICAvLyBQZXJmb3JtcyBhbiBhY2NlcHQgb3BlcmF0aW9uIHdpdGggYWRkZWQgc2FuaXR5IGNoZWNrIHRvIGVuc3VyZVxuICAvLyByZXF1aXJlZCBrZXlzIGFyZSBub3QgcmVtb3ZlZC5cbiAgYWNjZXB0UmVxdWlyZWQ6IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgICB0aGlzLmFjY2VwdEtleShub2RlLCBuYW1lKTtcblxuICAgIGlmICghbm9kZVtuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihub2RlLnR5cGUgKyAnIHJlcXVpcmVzICcgKyBuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gVHJhdmVyc2VzIGEgZ2l2ZW4gYXJyYXkuIElmIG11dGF0aW5nLCBlbXB0eSByZXNwbnNlcyB3aWxsIGJlIHJlbW92ZWRcbiAgLy8gZm9yIGNoaWxkIGVsZW1lbnRzLlxuICBhY2NlcHRBcnJheTogZnVuY3Rpb24oYXJyYXkpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5hY2NlcHRLZXkoYXJyYXksIGkpO1xuXG4gICAgICBpZiAoIWFycmF5W2ldKSB7XG4gICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcbiAgICAgICAgaS0tO1xuICAgICAgICBsLS07XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFjY2VwdDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKCFvYmplY3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogU2FuaXR5IGNvZGUgKi9cbiAgICBpZiAoIXRoaXNbb2JqZWN0LnR5cGVdKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmtub3duIHR5cGU6ICcgKyBvYmplY3QudHlwZSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jdXJyZW50KSB7XG4gICAgICB0aGlzLnBhcmVudHMudW5zaGlmdCh0aGlzLmN1cnJlbnQpO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnQgPSBvYmplY3Q7XG5cbiAgICBsZXQgcmV0ID0gdGhpc1tvYmplY3QudHlwZV0ob2JqZWN0KTtcblxuICAgIHRoaXMuY3VycmVudCA9IHRoaXMucGFyZW50cy5zaGlmdCgpO1xuXG4gICAgaWYgKCF0aGlzLm11dGF0aW5nIHx8IHJldCkge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IGVsc2UgaWYgKHJldCAhPT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICB9LFxuXG4gIFByb2dyYW06IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgICB0aGlzLmFjY2VwdEFycmF5KHByb2dyYW0uYm9keSk7XG4gIH0sXG5cbiAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHZpc2l0U3ViRXhwcmVzc2lvbixcbiAgRGVjb3JhdG9yOiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cbiAgQmxvY2tTdGF0ZW1lbnQ6IHZpc2l0QmxvY2ssXG4gIERlY29yYXRvckJsb2NrOiB2aXNpdEJsb2NrLFxuXG4gIFBhcnRpYWxTdGF0ZW1lbnQ6IHZpc2l0UGFydGlhbCxcbiAgUGFydGlhbEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbihwYXJ0aWFsKSB7XG4gICAgdmlzaXRQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCk7XG5cbiAgICB0aGlzLmFjY2VwdEtleShwYXJ0aWFsLCAncHJvZ3JhbScpO1xuICB9LFxuXG4gIENvbnRlbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uKC8qIGNvbnRlbnQgKi8pIHt9LFxuICBDb21tZW50U3RhdGVtZW50OiBmdW5jdGlvbigvKiBjb21tZW50ICovKSB7fSxcblxuICBTdWJFeHByZXNzaW9uOiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cbiAgUGF0aEV4cHJlc3Npb246IGZ1bmN0aW9uKC8qIHBhdGggKi8pIHt9LFxuXG4gIFN0cmluZ0xpdGVyYWw6IGZ1bmN0aW9uKC8qIHN0cmluZyAqLykge30sXG4gIE51bWJlckxpdGVyYWw6IGZ1bmN0aW9uKC8qIG51bWJlciAqLykge30sXG4gIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbigvKiBib29sICovKSB7fSxcbiAgVW5kZWZpbmVkTGl0ZXJhbDogZnVuY3Rpb24oLyogbGl0ZXJhbCAqLykge30sXG4gIE51bGxMaXRlcmFsOiBmdW5jdGlvbigvKiBsaXRlcmFsICovKSB7fSxcblxuICBIYXNoOiBmdW5jdGlvbihoYXNoKSB7XG4gICAgdGhpcy5hY2NlcHRBcnJheShoYXNoLnBhaXJzKTtcbiAgfSxcbiAgSGFzaFBhaXI6IGZ1bmN0aW9uKHBhaXIpIHtcbiAgICB0aGlzLmFjY2VwdFJlcXVpcmVkKHBhaXIsICd2YWx1ZScpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB2aXNpdFN1YkV4cHJlc3Npb24obXVzdGFjaGUpIHtcbiAgdGhpcy5hY2NlcHRSZXF1aXJlZChtdXN0YWNoZSwgJ3BhdGgnKTtcbiAgdGhpcy5hY2NlcHRBcnJheShtdXN0YWNoZS5wYXJhbXMpO1xuICB0aGlzLmFjY2VwdEtleShtdXN0YWNoZSwgJ2hhc2gnKTtcbn1cbmZ1bmN0aW9uIHZpc2l0QmxvY2soYmxvY2spIHtcbiAgdmlzaXRTdWJFeHByZXNzaW9uLmNhbGwodGhpcywgYmxvY2spO1xuXG4gIHRoaXMuYWNjZXB0S2V5KGJsb2NrLCAncHJvZ3JhbScpO1xuICB0aGlzLmFjY2VwdEtleShibG9jaywgJ2ludmVyc2UnKTtcbn1cbmZ1bmN0aW9uIHZpc2l0UGFydGlhbChwYXJ0aWFsKSB7XG4gIHRoaXMuYWNjZXB0UmVxdWlyZWQocGFydGlhbCwgJ25hbWUnKTtcbiAgdGhpcy5hY2NlcHRBcnJheShwYXJ0aWFsLnBhcmFtcyk7XG4gIHRoaXMuYWNjZXB0S2V5KHBhcnRpYWwsICdoYXNoJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpc2l0b3I7XG4iLCJpbXBvcnQgVmlzaXRvciBmcm9tICcuL3Zpc2l0b3InO1xuXG5mdW5jdGlvbiBXaGl0ZXNwYWNlQ29udHJvbChvcHRpb25zID0ge30pIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn1cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZSA9IG5ldyBWaXNpdG9yKCk7XG5cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5Qcm9ncmFtID0gZnVuY3Rpb24ocHJvZ3JhbSkge1xuICBjb25zdCBkb1N0YW5kYWxvbmUgPSAhdGhpcy5vcHRpb25zLmlnbm9yZVN0YW5kYWxvbmU7XG5cbiAgbGV0IGlzUm9vdCA9ICF0aGlzLmlzUm9vdFNlZW47XG4gIHRoaXMuaXNSb290U2VlbiA9IHRydWU7XG5cbiAgbGV0IGJvZHkgPSBwcm9ncmFtLmJvZHk7XG4gIGZvciAobGV0IGkgPSAwLCBsID0gYm9keS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZXQgY3VycmVudCA9IGJvZHlbaV0sXG4gICAgICAgIHN0cmlwID0gdGhpcy5hY2NlcHQoY3VycmVudCk7XG5cbiAgICBpZiAoIXN0cmlwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBsZXQgX2lzUHJldldoaXRlc3BhY2UgPSBpc1ByZXZXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCksXG4gICAgICAgIF9pc05leHRXaGl0ZXNwYWNlID0gaXNOZXh0V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpLFxuXG4gICAgICAgIG9wZW5TdGFuZGFsb25lID0gc3RyaXAub3BlblN0YW5kYWxvbmUgJiYgX2lzUHJldldoaXRlc3BhY2UsXG4gICAgICAgIGNsb3NlU3RhbmRhbG9uZSA9IHN0cmlwLmNsb3NlU3RhbmRhbG9uZSAmJiBfaXNOZXh0V2hpdGVzcGFjZSxcbiAgICAgICAgaW5saW5lU3RhbmRhbG9uZSA9IHN0cmlwLmlubGluZVN0YW5kYWxvbmUgJiYgX2lzUHJldldoaXRlc3BhY2UgJiYgX2lzTmV4dFdoaXRlc3BhY2U7XG5cbiAgICBpZiAoc3RyaXAuY2xvc2UpIHtcbiAgICAgIG9taXRSaWdodChib2R5LCBpLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKHN0cmlwLm9wZW4pIHtcbiAgICAgIG9taXRMZWZ0KGJvZHksIGksIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChkb1N0YW5kYWxvbmUgJiYgaW5saW5lU3RhbmRhbG9uZSkge1xuICAgICAgb21pdFJpZ2h0KGJvZHksIGkpO1xuXG4gICAgICBpZiAob21pdExlZnQoYm9keSwgaSkpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIG9uIGEgc3RhbmRhbG9uZSBub2RlLCBzYXZlIHRoZSBpbmRlbnQgaW5mbyBmb3IgcGFydGlhbHNcbiAgICAgICAgaWYgKGN1cnJlbnQudHlwZSA9PT0gJ1BhcnRpYWxTdGF0ZW1lbnQnKSB7XG4gICAgICAgICAgLy8gUHVsbCBvdXQgdGhlIHdoaXRlc3BhY2UgZnJvbSB0aGUgZmluYWwgbGluZVxuICAgICAgICAgIGN1cnJlbnQuaW5kZW50ID0gKC8oWyBcXHRdKyQpLykuZXhlYyhib2R5W2kgLSAxXS5vcmlnaW5hbClbMV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRvU3RhbmRhbG9uZSAmJiBvcGVuU3RhbmRhbG9uZSkge1xuICAgICAgb21pdFJpZ2h0KChjdXJyZW50LnByb2dyYW0gfHwgY3VycmVudC5pbnZlcnNlKS5ib2R5KTtcblxuICAgICAgLy8gU3RyaXAgb3V0IHRoZSBwcmV2aW91cyBjb250ZW50IG5vZGUgaWYgaXQncyB3aGl0ZXNwYWNlIG9ubHlcbiAgICAgIG9taXRMZWZ0KGJvZHksIGkpO1xuICAgIH1cbiAgICBpZiAoZG9TdGFuZGFsb25lICYmIGNsb3NlU3RhbmRhbG9uZSkge1xuICAgICAgLy8gQWx3YXlzIHN0cmlwIHRoZSBuZXh0IG5vZGVcbiAgICAgIG9taXRSaWdodChib2R5LCBpKTtcblxuICAgICAgb21pdExlZnQoKGN1cnJlbnQuaW52ZXJzZSB8fCBjdXJyZW50LnByb2dyYW0pLmJvZHkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcm9ncmFtO1xufTtcblxuV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkJsb2NrU3RhdGVtZW50ID1cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5EZWNvcmF0b3JCbG9jayA9XG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbEJsb2NrU3RhdGVtZW50ID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgdGhpcy5hY2NlcHQoYmxvY2sucHJvZ3JhbSk7XG4gIHRoaXMuYWNjZXB0KGJsb2NrLmludmVyc2UpO1xuXG4gIC8vIEZpbmQgdGhlIGludmVyc2UgcHJvZ3JhbSB0aGF0IGlzIGludm9sZWQgd2l0aCB3aGl0ZXNwYWNlIHN0cmlwcGluZy5cbiAgbGV0IHByb2dyYW0gPSBibG9jay5wcm9ncmFtIHx8IGJsb2NrLmludmVyc2UsXG4gICAgICBpbnZlcnNlID0gYmxvY2sucHJvZ3JhbSAmJiBibG9jay5pbnZlcnNlLFxuICAgICAgZmlyc3RJbnZlcnNlID0gaW52ZXJzZSxcbiAgICAgIGxhc3RJbnZlcnNlID0gaW52ZXJzZTtcblxuICBpZiAoaW52ZXJzZSAmJiBpbnZlcnNlLmNoYWluZWQpIHtcbiAgICBmaXJzdEludmVyc2UgPSBpbnZlcnNlLmJvZHlbMF0ucHJvZ3JhbTtcblxuICAgIC8vIFdhbGsgdGhlIGludmVyc2UgY2hhaW4gdG8gZmluZCB0aGUgbGFzdCBpbnZlcnNlIHRoYXQgaXMgYWN0dWFsbHkgaW4gdGhlIGNoYWluLlxuICAgIHdoaWxlIChsYXN0SW52ZXJzZS5jaGFpbmVkKSB7XG4gICAgICBsYXN0SW52ZXJzZSA9IGxhc3RJbnZlcnNlLmJvZHlbbGFzdEludmVyc2UuYm9keS5sZW5ndGggLSAxXS5wcm9ncmFtO1xuICAgIH1cbiAgfVxuXG4gIGxldCBzdHJpcCA9IHtcbiAgICBvcGVuOiBibG9jay5vcGVuU3RyaXAub3BlbixcbiAgICBjbG9zZTogYmxvY2suY2xvc2VTdHJpcC5jbG9zZSxcblxuICAgIC8vIERldGVybWluZSB0aGUgc3RhbmRhbG9uZSBjYW5kaWFjeS4gQmFzaWNhbGx5IGZsYWcgb3VyIGNvbnRlbnQgYXMgYmVpbmcgcG9zc2libHkgc3RhbmRhbG9uZVxuICAgIC8vIHNvIG91ciBwYXJlbnQgY2FuIGRldGVybWluZSBpZiB3ZSBhY3R1YWxseSBhcmUgc3RhbmRhbG9uZVxuICAgIG9wZW5TdGFuZGFsb25lOiBpc05leHRXaGl0ZXNwYWNlKHByb2dyYW0uYm9keSksXG4gICAgY2xvc2VTdGFuZGFsb25lOiBpc1ByZXZXaGl0ZXNwYWNlKChmaXJzdEludmVyc2UgfHwgcHJvZ3JhbSkuYm9keSlcbiAgfTtcblxuICBpZiAoYmxvY2sub3BlblN0cmlwLmNsb3NlKSB7XG4gICAgb21pdFJpZ2h0KHByb2dyYW0uYm9keSwgbnVsbCwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoaW52ZXJzZSkge1xuICAgIGxldCBpbnZlcnNlU3RyaXAgPSBibG9jay5pbnZlcnNlU3RyaXA7XG5cbiAgICBpZiAoaW52ZXJzZVN0cmlwLm9wZW4pIHtcbiAgICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGludmVyc2VTdHJpcC5jbG9zZSkge1xuICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5LCBudWxsLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGJsb2NrLmNsb3NlU3RyaXAub3Blbikge1xuICAgICAgb21pdExlZnQobGFzdEludmVyc2UuYm9keSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gRmluZCBzdGFuZGFsb25lIGVsc2Ugc3RhdG1lbnRzXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlU3RhbmRhbG9uZVxuICAgICAgICAmJiBpc1ByZXZXaGl0ZXNwYWNlKHByb2dyYW0uYm9keSlcbiAgICAgICAgJiYgaXNOZXh0V2hpdGVzcGFjZShmaXJzdEludmVyc2UuYm9keSkpIHtcbiAgICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSk7XG4gICAgICBvbWl0UmlnaHQoZmlyc3RJbnZlcnNlLmJvZHkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChibG9jay5jbG9zZVN0cmlwLm9wZW4pIHtcbiAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmlwO1xufTtcblxuV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkRlY29yYXRvciA9XG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuTXVzdGFjaGVTdGF0ZW1lbnQgPSBmdW5jdGlvbihtdXN0YWNoZSkge1xuICByZXR1cm4gbXVzdGFjaGUuc3RyaXA7XG59O1xuXG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbFN0YXRlbWVudCA9XG4gICAgV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkNvbW1lbnRTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGxldCBzdHJpcCA9IG5vZGUuc3RyaXAgfHwge307XG4gIHJldHVybiB7XG4gICAgaW5saW5lU3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBvcGVuOiBzdHJpcC5vcGVuLFxuICAgIGNsb3NlOiBzdHJpcC5jbG9zZVxuICB9O1xufTtcblxuXG5mdW5jdGlvbiBpc1ByZXZXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCkge1xuICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaSA9IGJvZHkubGVuZ3RoO1xuICB9XG5cbiAgLy8gTm9kZXMgdGhhdCBlbmQgd2l0aCBuZXdsaW5lcyBhcmUgY29uc2lkZXJlZCB3aGl0ZXNwYWNlIChidXQgYXJlIHNwZWNpYWxcbiAgLy8gY2FzZWQgZm9yIHN0cmlwIG9wZXJhdGlvbnMpXG4gIGxldCBwcmV2ID0gYm9keVtpIC0gMV0sXG4gICAgICBzaWJsaW5nID0gYm9keVtpIC0gMl07XG4gIGlmICghcHJldikge1xuICAgIHJldHVybiBpc1Jvb3Q7XG4gIH1cblxuICBpZiAocHJldi50eXBlID09PSAnQ29udGVudFN0YXRlbWVudCcpIHtcbiAgICByZXR1cm4gKHNpYmxpbmcgfHwgIWlzUm9vdCA/ICgvXFxyP1xcblxccyo/JC8pIDogKC8oXnxcXHI/XFxuKVxccyo/JC8pKS50ZXN0KHByZXYub3JpZ2luYWwpO1xuICB9XG59XG5mdW5jdGlvbiBpc05leHRXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCkge1xuICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaSA9IC0xO1xuICB9XG5cbiAgbGV0IG5leHQgPSBib2R5W2kgKyAxXSxcbiAgICAgIHNpYmxpbmcgPSBib2R5W2kgKyAyXTtcbiAgaWYgKCFuZXh0KSB7XG4gICAgcmV0dXJuIGlzUm9vdDtcbiAgfVxuXG4gIGlmIChuZXh0LnR5cGUgPT09ICdDb250ZW50U3RhdGVtZW50Jykge1xuICAgIHJldHVybiAoc2libGluZyB8fCAhaXNSb290ID8gKC9eXFxzKj9cXHI/XFxuLykgOiAoL15cXHMqPyhcXHI/XFxufCQpLykpLnRlc3QobmV4dC5vcmlnaW5hbCk7XG4gIH1cbn1cblxuLy8gTWFya3MgdGhlIG5vZGUgdG8gdGhlIHJpZ2h0IG9mIHRoZSBwb3NpdGlvbiBhcyBvbWl0dGVkLlxuLy8gSS5lLiB7e2Zvb319JyAnIHdpbGwgbWFyayB0aGUgJyAnIG5vZGUgYXMgb21pdHRlZC5cbi8vXG4vLyBJZiBpIGlzIHVuZGVmaW5lZCwgdGhlbiB0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSBtYXJrZWQgYXMgc3VjaC5cbi8vXG4vLyBJZiBtdWxpdHBsZSBpcyB0cnV0aHkgdGhlbiBhbGwgd2hpdGVzcGFjZSB3aWxsIGJlIHN0cmlwcGVkIG91dCB1bnRpbCBub24td2hpdGVzcGFjZVxuLy8gY29udGVudCBpcyBtZXQuXG5mdW5jdGlvbiBvbWl0UmlnaHQoYm9keSwgaSwgbXVsdGlwbGUpIHtcbiAgbGV0IGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IDAgOiBpICsgMV07XG4gIGlmICghY3VycmVudCB8fCBjdXJyZW50LnR5cGUgIT09ICdDb250ZW50U3RhdGVtZW50JyB8fCAoIW11bHRpcGxlICYmIGN1cnJlbnQucmlnaHRTdHJpcHBlZCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgb3JpZ2luYWwgPSBjdXJyZW50LnZhbHVlO1xuICBjdXJyZW50LnZhbHVlID0gY3VycmVudC52YWx1ZS5yZXBsYWNlKG11bHRpcGxlID8gKC9eXFxzKy8pIDogKC9eWyBcXHRdKlxccj9cXG4/LyksICcnKTtcbiAgY3VycmVudC5yaWdodFN0cmlwcGVkID0gY3VycmVudC52YWx1ZSAhPT0gb3JpZ2luYWw7XG59XG5cbi8vIE1hcmtzIHRoZSBub2RlIHRvIHRoZSBsZWZ0IG9mIHRoZSBwb3NpdGlvbiBhcyBvbWl0dGVkLlxuLy8gSS5lLiAnICd7e2Zvb319IHdpbGwgbWFyayB0aGUgJyAnIG5vZGUgYXMgb21pdHRlZC5cbi8vXG4vLyBJZiBpIGlzIHVuZGVmaW5lZCB0aGVuIHRoZSBsYXN0IGNoaWxkIHdpbGwgYmUgbWFya2VkIGFzIHN1Y2guXG4vL1xuLy8gSWYgbXVsaXRwbGUgaXMgdHJ1dGh5IHRoZW4gYWxsIHdoaXRlc3BhY2Ugd2lsbCBiZSBzdHJpcHBlZCBvdXQgdW50aWwgbm9uLXdoaXRlc3BhY2Vcbi8vIGNvbnRlbnQgaXMgbWV0LlxuZnVuY3Rpb24gb21pdExlZnQoYm9keSwgaSwgbXVsdGlwbGUpIHtcbiAgbGV0IGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IGJvZHkubGVuZ3RoIC0gMSA6IGkgLSAxXTtcbiAgaWYgKCFjdXJyZW50IHx8IGN1cnJlbnQudHlwZSAhPT0gJ0NvbnRlbnRTdGF0ZW1lbnQnIHx8ICghbXVsdGlwbGUgJiYgY3VycmVudC5sZWZ0U3RyaXBwZWQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV2Ugb21pdCB0aGUgbGFzdCBub2RlIGlmIGl0J3Mgd2hpdGVzcGFjZSBvbmx5IGFuZCBub3QgcHJlY2VlZGVkIGJ5IGEgbm9uLWNvbnRlbnQgbm9kZS5cbiAgbGV0IG9yaWdpbmFsID0gY3VycmVudC52YWx1ZTtcbiAgY3VycmVudC52YWx1ZSA9IGN1cnJlbnQudmFsdWUucmVwbGFjZShtdWx0aXBsZSA/ICgvXFxzKyQvKSA6ICgvWyBcXHRdKyQvKSwgJycpO1xuICBjdXJyZW50LmxlZnRTdHJpcHBlZCA9IGN1cnJlbnQudmFsdWUgIT09IG9yaWdpbmFsO1xuICByZXR1cm4gY3VycmVudC5sZWZ0U3RyaXBwZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdoaXRlc3BhY2VDb250cm9sO1xuIiwiaW1wb3J0IHJlZ2lzdGVySW5saW5lIGZyb20gJy4vZGVjb3JhdG9ycy9pbmxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuICByZWdpc3RlcklubGluZShpbnN0YW5jZSk7XG59XG5cbiIsImltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGxldCByZXQgPSBmbjtcbiAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG4gICAgICBwcm9wcy5wYXJ0aWFscyA9IHt9O1xuICAgICAgcmV0ID0gZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcGFydGlhbHMgc3RhY2sgZnJhbWUgcHJpb3IgdG8gZXhlYy5cbiAgICAgICAgbGV0IG9yaWdpbmFsID0gY29udGFpbmVyLnBhcnRpYWxzO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBleHRlbmQoe30sIG9yaWdpbmFsLCBwcm9wcy5wYXJ0aWFscyk7XG4gICAgICAgIGxldCByZXQgPSBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iLCJcbmNvbnN0IGVycm9yUHJvcHMgPSBbJ2Rlc2NyaXB0aW9uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnbWVzc2FnZScsICduYW1lJywgJ251bWJlcicsICdzdGFjayddO1xuXG5mdW5jdGlvbiBFeGNlcHRpb24obWVzc2FnZSwgbm9kZSkge1xuICBsZXQgbG9jID0gbm9kZSAmJiBub2RlLmxvYyxcbiAgICAgIGxpbmUsXG4gICAgICBjb2x1bW47XG4gIGlmIChsb2MpIHtcbiAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XG4gICAgY29sdW1uID0gbG9jLnN0YXJ0LmNvbHVtbjtcblxuICAgIG1lc3NhZ2UgKz0gJyAtICcgKyBsaW5lICsgJzonICsgY29sdW1uO1xuICB9XG5cbiAgbGV0IHRtcCA9IEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXG4gIC8vIFVuZm9ydHVuYXRlbHkgZXJyb3JzIGFyZSBub3QgZW51bWVyYWJsZSBpbiBDaHJvbWUgKGF0IGxlYXN0KSwgc28gYGZvciBwcm9wIGluIHRtcGAgZG9lc24ndCB3b3JrLlxuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBlcnJvclByb3BzLmxlbmd0aDsgaWR4KyspIHtcbiAgICB0aGlzW2Vycm9yUHJvcHNbaWR4XV0gPSB0bXBbZXJyb3JQcm9wc1tpZHhdXTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEV4Y2VwdGlvbik7XG4gIH1cblxuICB0cnkge1xuICAgIGlmIChsb2MpIHtcbiAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmU7XG5cbiAgICAgIC8vIFdvcmsgYXJvdW5kIGlzc3VlIHVuZGVyIHNhZmFyaSB3aGVyZSB3ZSBjYW4ndCBkaXJlY3RseSBzZXQgdGhlIGNvbHVtbiB2YWx1ZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2x1bW4nLCB7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChub3ApIHtcbiAgICAvKiBJZ25vcmUgaWYgdGhlIGJyb3dzZXIgaXMgdmVyeSBwYXJ0aWN1bGFyICovXG4gIH1cbn1cblxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBFeGNlcHRpb247XG4iLCJpbXBvcnQgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2Jsb2NrLWhlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlckVhY2ggZnJvbSAnLi9oZWxwZXJzL2VhY2gnO1xuaW1wb3J0IHJlZ2lzdGVySGVscGVyTWlzc2luZyBmcm9tICcuL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcnO1xuaW1wb3J0IHJlZ2lzdGVySWYgZnJvbSAnLi9oZWxwZXJzL2lmJztcbmltcG9ydCByZWdpc3RlckxvZyBmcm9tICcuL2hlbHBlcnMvbG9nJztcbmltcG9ydCByZWdpc3Rlckxvb2t1cCBmcm9tICcuL2hlbHBlcnMvbG9va3VwJztcbmltcG9ydCByZWdpc3RlcldpdGggZnJvbSAnLi9oZWxwZXJzL3dpdGgnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0SGVscGVycyhpbnN0YW5jZSkge1xuICByZWdpc3RlckJsb2NrSGVscGVyTWlzc2luZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyRWFjaChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVySGVscGVyTWlzc2luZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVySWYoaW5zdGFuY2UpO1xuICByZWdpc3RlckxvZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyTG9va3VwKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJXaXRoKGluc3RhbmNlKTtcbn1cbiIsImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGNyZWF0ZUZyYW1lLCBpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgbGV0IGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcbiAgICAgICAgb3B0aW9ucyA9IHtkYXRhOiBkYXRhfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBibG9ja1BhcmFtcywgY3JlYXRlRnJhbWUsIGlzQXJyYXksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2VhY2gnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdNdXN0IHBhc3MgaXRlcmF0b3IgdG8gI2VhY2gnKTtcbiAgICB9XG5cbiAgICBsZXQgZm4gPSBvcHRpb25zLmZuLFxuICAgICAgICBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgcmV0ID0gJycsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHRQYXRoO1xuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgY29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMuaWRzWzBdKSArICcuJztcbiAgICB9XG5cbiAgICBpZiAoaXNGdW5jdGlvbihjb250ZXh0KSkgeyBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpOyB9XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleGVjSXRlcmF0aW9uKGZpZWxkLCBpbmRleCwgbGFzdCkge1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgZGF0YS5rZXkgPSBmaWVsZDtcbiAgICAgICAgZGF0YS5pbmRleCA9IGluZGV4O1xuICAgICAgICBkYXRhLmZpcnN0ID0gaW5kZXggPT09IDA7XG4gICAgICAgIGRhdGEubGFzdCA9ICEhbGFzdDtcblxuICAgICAgICBpZiAoY29udGV4dFBhdGgpIHtcbiAgICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gY29udGV4dFBhdGggKyBmaWVsZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXQgPSByZXQgKyBmbihjb250ZXh0W2ZpZWxkXSwge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBibG9ja1BhcmFtczogYmxvY2tQYXJhbXMoW2NvbnRleHRbZmllbGRdLCBmaWVsZF0sIFtjb250ZXh0UGF0aCArIGZpZWxkLCBudWxsXSlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKGlzQXJyYXkoY29udGV4dCkpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgaW4gY29udGV4dCkge1xuICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHByaW9yS2V5O1xuXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgaWYgKGNvbnRleHQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgLy8gV2UncmUgcnVubmluZyB0aGUgaXRlcmF0aW9ucyBvbmUgc3RlcCBvdXQgb2Ygc3luYyBzbyB3ZSBjYW4gZGV0ZWN0XG4gICAgICAgICAgICAvLyB0aGUgbGFzdCBpdGVyYXRpb24gd2l0aG91dCBoYXZlIHRvIHNjYW4gdGhlIG9iamVjdCB0d2ljZSBhbmQgY3JlYXRlXG4gICAgICAgICAgICAvLyBhbiBpdGVybWVkaWF0ZSBrZXlzIGFycmF5LlxuICAgICAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJpb3JLZXkgPSBrZXk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHJldCA9IGludmVyc2UodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iLCJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdoZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24oLyogW2FyZ3MsIF1vcHRpb25zICovKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdNaXNzaW5nIGhlbHBlcjogXCInICsgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXS5uYW1lICsgJ1wiJyk7XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCB7aXNFbXB0eSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaWYnLCBmdW5jdGlvbihjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIGlmIChpc0Z1bmN0aW9uKGNvbmRpdGlvbmFsKSkgeyBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmNhbGwodGhpcyk7IH1cblxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcmVuZGVyIHRoZSBwb3NpdGl2ZSBwYXRoIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgYW5kIG5vdCBlbXB0eS5cbiAgICAvLyBUaGUgYGluY2x1ZGVaZXJvYCBvcHRpb24gbWF5IGJlIHNldCB0byB0cmVhdCB0aGUgY29uZHRpb25hbCBhcyBwdXJlbHkgbm90IGVtcHR5IGJhc2VkIG9uIHRoZVxuICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXG4gICAgaWYgKCghb3B0aW9ucy5oYXNoLmluY2x1ZGVaZXJvICYmICFjb25kaXRpb25hbCkgfHwgaXNFbXB0eShjb25kaXRpb25hbCkpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3VubGVzcycsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnNbJ2lmJ10uY2FsbCh0aGlzLCBjb25kaXRpb25hbCwge2ZuOiBvcHRpb25zLmludmVyc2UsIGludmVyc2U6IG9wdGlvbnMuZm4sIGhhc2g6IG9wdGlvbnMuaGFzaH0pO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb2cnLCBmdW5jdGlvbigvKiBtZXNzYWdlLCBvcHRpb25zICovKSB7XG4gICAgbGV0IGFyZ3MgPSBbdW5kZWZpbmVkXSxcbiAgICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICBsZXQgbGV2ZWwgPSAxO1xuICAgIGlmIChvcHRpb25zLmhhc2gubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmhhc2gubGV2ZWw7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5kYXRhLmxldmVsO1xuICAgIH1cbiAgICBhcmdzWzBdID0gbGV2ZWw7XG5cbiAgICBpbnN0YW5jZS5sb2coLi4uIGFyZ3MpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb29rdXAnLCBmdW5jdGlvbihvYmosIGZpZWxkKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmpbZmllbGRdO1xuICB9KTtcbn1cbiIsImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGJsb2NrUGFyYW1zLCBjcmVhdGVGcmFtZSwgaXNFbXB0eSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignd2l0aCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihjb250ZXh0KSkgeyBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpOyB9XG5cbiAgICBsZXQgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKCFpc0VtcHR5KGNvbnRleHQpKSB7XG4gICAgICBsZXQgZGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgICAgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMuaWRzWzBdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IGJsb2NrUGFyYW1zKFtjb250ZXh0XSwgW2RhdGEgJiYgZGF0YS5jb250ZXh0UGF0aF0pXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtpbmRleE9mfSBmcm9tICcuL3V0aWxzJztcblxubGV0IGxvZ2dlciA9IHtcbiAgbWV0aG9kTWFwOiBbJ2RlYnVnJywgJ2luZm8nLCAnd2FybicsICdlcnJvciddLFxuICBsZXZlbDogJ2luZm8nLFxuXG4gIC8vIE1hcHMgYSBnaXZlbiBsZXZlbCB2YWx1ZSB0byB0aGUgYG1ldGhvZE1hcGAgaW5kZXhlcyBhYm92ZS5cbiAgbG9va3VwTGV2ZWw6IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBsZXZlbE1hcCA9IGluZGV4T2YobG9nZ2VyLm1ldGhvZE1hcCwgbGV2ZWwudG9Mb3dlckNhc2UoKSk7XG4gICAgICBpZiAobGV2ZWxNYXAgPj0gMCkge1xuICAgICAgICBsZXZlbCA9IGxldmVsTWFwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWwgPSBwYXJzZUludChsZXZlbCwgMTApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsZXZlbDtcbiAgfSxcblxuICAvLyBDYW4gYmUgb3ZlcnJpZGRlbiBpbiB0aGUgaG9zdCBlbnZpcm9ubWVudFxuICBsb2c6IGZ1bmN0aW9uKGxldmVsLCAuLi5tZXNzYWdlKSB7XG4gICAgbGV2ZWwgPSBsb2dnZXIubG9va3VwTGV2ZWwobGV2ZWwpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBsb2dnZXIubG9va3VwTGV2ZWwobG9nZ2VyLmxldmVsKSA8PSBsZXZlbCkge1xuICAgICAgbGV0IG1ldGhvZCA9IGxvZ2dlci5tZXRob2RNYXBbbGV2ZWxdO1xuICAgICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIG1ldGhvZCA9ICdsb2cnO1xuICAgICAgfVxuICAgICAgY29uc29sZVttZXRob2RdKC4uLm1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgbGV0IHJvb3QgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvdyxcbiAgICAgICRIYW5kbGViYXJzID0gcm9vdC5IYW5kbGViYXJzO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBIYW5kbGViYXJzLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAocm9vdC5IYW5kbGViYXJzID09PSBIYW5kbGViYXJzKSB7XG4gICAgICByb290LkhhbmRsZWJhcnMgPSAkSGFuZGxlYmFycztcbiAgICB9XG4gICAgcmV0dXJuIEhhbmRsZWJhcnM7XG4gIH07XG59XG4iLCJpbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9leGNlcHRpb24nO1xuaW1wb3J0IHsgQ09NUElMRVJfUkVWSVNJT04sIFJFVklTSU9OX0NIQU5HRVMsIGNyZWF0ZUZyYW1lIH0gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmV2aXNpb24oY29tcGlsZXJJbmZvKSB7XG4gIGNvbnN0IGNvbXBpbGVyUmV2aXNpb24gPSBjb21waWxlckluZm8gJiYgY29tcGlsZXJJbmZvWzBdIHx8IDEsXG4gICAgICAgIGN1cnJlbnRSZXZpc2lvbiA9IENPTVBJTEVSX1JFVklTSU9OO1xuXG4gIGlmIChjb21waWxlclJldmlzaW9uICE9PSBjdXJyZW50UmV2aXNpb24pIHtcbiAgICBpZiAoY29tcGlsZXJSZXZpc2lvbiA8IGN1cnJlbnRSZXZpc2lvbikge1xuICAgICAgY29uc3QgcnVudGltZVZlcnNpb25zID0gUkVWSVNJT05fQ0hBTkdFU1tjdXJyZW50UmV2aXNpb25dLFxuICAgICAgICAgICAgY29tcGlsZXJWZXJzaW9ucyA9IFJFVklTSU9OX0NIQU5HRVNbY29tcGlsZXJSZXZpc2lvbl07XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhbiBvbGRlciB2ZXJzaW9uIG9mIEhhbmRsZWJhcnMgdGhhbiB0aGUgY3VycmVudCBydW50aW1lLiAnICtcbiAgICAgICAgICAgICdQbGVhc2UgdXBkYXRlIHlvdXIgcHJlY29tcGlsZXIgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgcnVudGltZVZlcnNpb25zICsgJykgb3IgZG93bmdyYWRlIHlvdXIgcnVudGltZSB0byBhbiBvbGRlciB2ZXJzaW9uICgnICsgY29tcGlsZXJWZXJzaW9ucyArICcpLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVc2UgdGhlIGVtYmVkZGVkIHZlcnNpb24gaW5mbyBzaW5jZSB0aGUgcnVudGltZSBkb2Vzbid0IGtub3cgYWJvdXQgdGhpcyByZXZpc2lvbiB5ZXRcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGEgbmV3ZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArXG4gICAgICAgICAgICAnUGxlYXNlIHVwZGF0ZSB5b3VyIHJ1bnRpbWUgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgY29tcGlsZXJJbmZvWzFdICsgJykuJyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMsIGVudikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoIWVudikge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ05vIGVudmlyb25tZW50IHBhc3NlZCB0byB0ZW1wbGF0ZScpO1xuICB9XG4gIGlmICghdGVtcGxhdGVTcGVjIHx8ICF0ZW1wbGF0ZVNwZWMubWFpbikge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1Vua25vd24gdGVtcGxhdGUgb2JqZWN0OiAnICsgdHlwZW9mIHRlbXBsYXRlU3BlYyk7XG4gIH1cblxuICB0ZW1wbGF0ZVNwZWMubWFpbi5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWMubWFpbl9kO1xuXG4gIC8vIE5vdGU6IFVzaW5nIGVudi5WTSByZWZlcmVuY2VzIHJhdGhlciB0aGFuIGxvY2FsIHZhciByZWZlcmVuY2VzIHRocm91Z2hvdXQgdGhpcyBzZWN0aW9uIHRvIGFsbG93XG4gIC8vIGZvciBleHRlcm5hbCB1c2VycyB0byBvdmVycmlkZSB0aGVzZSBhcyBwc3VlZG8tc3VwcG9ydGVkIEFQSXMuXG4gIGVudi5WTS5jaGVja1JldmlzaW9uKHRlbXBsYXRlU3BlYy5jb21waWxlcik7XG5cbiAgZnVuY3Rpb24gaW52b2tlUGFydGlhbFdyYXBwZXIocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAgIGNvbnRleHQgPSBVdGlscy5leHRlbmQoe30sIGNvbnRleHQsIG9wdGlvbnMuaGFzaCk7XG4gICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgb3B0aW9ucy5pZHNbMF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnRpYWwgPSBlbnYuVk0ucmVzb2x2ZVBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKTtcbiAgICBsZXQgcmVzdWx0ID0gZW52LlZNLmludm9rZVBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKTtcblxuICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBlbnYuY29tcGlsZSkge1xuICAgICAgb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdID0gZW52LmNvbXBpbGUocGFydGlhbCwgdGVtcGxhdGVTcGVjLmNvbXBpbGVyT3B0aW9ucywgZW52KTtcbiAgICAgIHJlc3VsdCA9IG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXShjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICBpZiAob3B0aW9ucy5pbmRlbnQpIHtcbiAgICAgICAgbGV0IGxpbmVzID0gcmVzdWx0LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpZiAoIWxpbmVzW2ldICYmIGkgKyAxID09PSBsKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaW5lc1tpXSA9IG9wdGlvbnMuaW5kZW50ICsgbGluZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gbGluZXMuam9pbignXFxuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgY29tcGlsZWQgd2hlbiBydW5uaW5nIGluIHJ1bnRpbWUtb25seSBtb2RlJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gSnVzdCBhZGQgd2F0ZXJcbiAgbGV0IGNvbnRhaW5lciA9IHtcbiAgICBzdHJpY3Q6IGZ1bmN0aW9uKG9iaiwgbmFtZSkge1xuICAgICAgaWYgKCEobmFtZSBpbiBvYmopKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1wiJyArIG5hbWUgKyAnXCIgbm90IGRlZmluZWQgaW4gJyArIG9iaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqW25hbWVdO1xuICAgIH0sXG4gICAgbG9va3VwOiBmdW5jdGlvbihkZXB0aHMsIG5hbWUpIHtcbiAgICAgIGNvbnN0IGxlbiA9IGRlcHRocy5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChkZXB0aHNbaV0gJiYgZGVwdGhzW2ldW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZGVwdGhzW2ldW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBsYW1iZGE6IGZ1bmN0aW9uKGN1cnJlbnQsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgY3VycmVudCA9PT0gJ2Z1bmN0aW9uJyA/IGN1cnJlbnQuY2FsbChjb250ZXh0KSA6IGN1cnJlbnQ7XG4gICAgfSxcblxuICAgIGVzY2FwZUV4cHJlc3Npb246IFV0aWxzLmVzY2FwZUV4cHJlc3Npb24sXG4gICAgaW52b2tlUGFydGlhbDogaW52b2tlUGFydGlhbFdyYXBwZXIsXG5cbiAgICBmbjogZnVuY3Rpb24oaSkge1xuICAgICAgbGV0IHJldCA9IHRlbXBsYXRlU3BlY1tpXTtcbiAgICAgIHJldC5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWNbaSArICdfZCddO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuXG4gICAgcHJvZ3JhbXM6IFtdLFxuICAgIHByb2dyYW06IGZ1bmN0aW9uKGksIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICAgIGxldCBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0sXG4gICAgICAgICAgZm4gPSB0aGlzLmZuKGkpO1xuICAgICAgaWYgKGRhdGEgfHwgZGVwdGhzIHx8IGJsb2NrUGFyYW1zIHx8IGRlY2xhcmVkQmxvY2tQYXJhbXMpIHtcbiAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgICB9IGVsc2UgaWYgKCFwcm9ncmFtV3JhcHBlcikge1xuICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0gPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvZ3JhbVdyYXBwZXI7XG4gICAgfSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKHZhbHVlLCBkZXB0aCkge1xuICAgICAgd2hpbGUgKHZhbHVlICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5fcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgbWVyZ2U6IGZ1bmN0aW9uKHBhcmFtLCBjb21tb24pIHtcbiAgICAgIGxldCBvYmogPSBwYXJhbSB8fCBjb21tb247XG5cbiAgICAgIGlmIChwYXJhbSAmJiBjb21tb24gJiYgKHBhcmFtICE9PSBjb21tb24pKSB7XG4gICAgICAgIG9iaiA9IFV0aWxzLmV4dGVuZCh7fSwgY29tbW9uLCBwYXJhbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICAvLyBBbiBlbXB0eSBvYmplY3QgdG8gdXNlIGFzIHJlcGxhY2VtZW50IGZvciBudWxsLWNvbnRleHRzXG4gICAgbnVsbENvbnRleHQ6IE9iamVjdC5zZWFsKHt9KSxcblxuICAgIG5vb3A6IGVudi5WTS5ub29wLFxuICAgIGNvbXBpbGVySW5mbzogdGVtcGxhdGVTcGVjLmNvbXBpbGVyXG4gIH07XG5cbiAgZnVuY3Rpb24gcmV0KGNvbnRleHQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBkYXRhID0gb3B0aW9ucy5kYXRhO1xuXG4gICAgcmV0Ll9zZXR1cChvcHRpb25zKTtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCAmJiB0ZW1wbGF0ZVNwZWMudXNlRGF0YSkge1xuICAgICAgZGF0YSA9IGluaXREYXRhKGNvbnRleHQsIGRhdGEpO1xuICAgIH1cbiAgICBsZXQgZGVwdGhzLFxuICAgICAgICBibG9ja1BhcmFtcyA9IHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyA/IFtdIDogdW5kZWZpbmVkO1xuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzKSB7XG4gICAgICBpZiAob3B0aW9ucy5kZXB0aHMpIHtcbiAgICAgICAgZGVwdGhzID0gY29udGV4dCAhPSBvcHRpb25zLmRlcHRoc1swXSA/IFtjb250ZXh0XS5jb25jYXQob3B0aW9ucy5kZXB0aHMpIDogb3B0aW9ucy5kZXB0aHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXB0aHMgPSBbY29udGV4dF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFpbihjb250ZXh0LyosIG9wdGlvbnMqLykge1xuICAgICAgcmV0dXJuICcnICsgdGVtcGxhdGVTcGVjLm1haW4oY29udGFpbmVyLCBjb250ZXh0LCBjb250YWluZXIuaGVscGVycywgY29udGFpbmVyLnBhcnRpYWxzLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgICB9XG4gICAgbWFpbiA9IGV4ZWN1dGVEZWNvcmF0b3JzKHRlbXBsYXRlU3BlYy5tYWluLCBtYWluLCBjb250YWluZXIsIG9wdGlvbnMuZGVwdGhzIHx8IFtdLCBkYXRhLCBibG9ja1BhcmFtcyk7XG4gICAgcmV0dXJuIG1haW4oY29udGV4dCwgb3B0aW9ucyk7XG4gIH1cbiAgcmV0LmlzVG9wID0gdHJ1ZTtcblxuICByZXQuX3NldHVwID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy5wYXJ0aWFsKSB7XG4gICAgICBjb250YWluZXIuaGVscGVycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmhlbHBlcnMsIGVudi5oZWxwZXJzKTtcblxuICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsKSB7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLnBhcnRpYWxzLCBlbnYucGFydGlhbHMpO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsIHx8IHRlbXBsYXRlU3BlYy51c2VEZWNvcmF0b3JzKSB7XG4gICAgICAgIGNvbnRhaW5lci5kZWNvcmF0b3JzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMuZGVjb3JhdG9ycywgZW52LmRlY29yYXRvcnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXIuaGVscGVycyA9IG9wdGlvbnMuaGVscGVycztcbiAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IG9wdGlvbnMucGFydGlhbHM7XG4gICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IG9wdGlvbnMuZGVjb3JhdG9ycztcbiAgICB9XG4gIH07XG5cbiAgcmV0Ll9jaGlsZCA9IGZ1bmN0aW9uKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZUJsb2NrUGFyYW1zICYmICFibG9ja1BhcmFtcykge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignbXVzdCBwYXNzIGJsb2NrIHBhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocyAmJiAhZGVwdGhzKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdtdXN0IHBhc3MgcGFyZW50IGRlcHRocycpO1xuICAgIH1cblxuICAgIHJldHVybiB3cmFwUHJvZ3JhbShjb250YWluZXIsIGksIHRlbXBsYXRlU3BlY1tpXSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gIH07XG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwUHJvZ3JhbShjb250YWluZXIsIGksIGZuLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gIGZ1bmN0aW9uIHByb2coY29udGV4dCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGN1cnJlbnREZXB0aHMgPSBkZXB0aHM7XG4gICAgaWYgKGRlcHRocyAmJiBjb250ZXh0ICE9IGRlcHRoc1swXSAmJiAhKGNvbnRleHQgPT09IGNvbnRhaW5lci5udWxsQ29udGV4dCAmJiBkZXB0aHNbMF0gPT09IG51bGwpKSB7XG4gICAgICBjdXJyZW50RGVwdGhzID0gW2NvbnRleHRdLmNvbmNhdChkZXB0aHMpO1xuICAgIH1cblxuICAgIHJldHVybiBmbihjb250YWluZXIsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNvbnRhaW5lci5oZWxwZXJzLCBjb250YWluZXIucGFydGlhbHMsXG4gICAgICAgIG9wdGlvbnMuZGF0YSB8fCBkYXRhLFxuICAgICAgICBibG9ja1BhcmFtcyAmJiBbb3B0aW9ucy5ibG9ja1BhcmFtc10uY29uY2F0KGJsb2NrUGFyYW1zKSxcbiAgICAgICAgY3VycmVudERlcHRocyk7XG4gIH1cblxuICBwcm9nID0gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcyk7XG5cbiAgcHJvZy5wcm9ncmFtID0gaTtcbiAgcHJvZy5kZXB0aCA9IGRlcHRocyA/IGRlcHRocy5sZW5ndGggOiAwO1xuICBwcm9nLmJsb2NrUGFyYW1zID0gZGVjbGFyZWRCbG9ja1BhcmFtcyB8fCAwO1xuICByZXR1cm4gcHJvZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgaWYgKCFwYXJ0aWFsKSB7XG4gICAgaWYgKG9wdGlvbnMubmFtZSA9PT0gJ0BwYXJ0aWFsLWJsb2NrJykge1xuICAgICAgcGFydGlhbCA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdO1xuICAgIH1cbiAgfSBlbHNlIGlmICghcGFydGlhbC5jYWxsICYmICFvcHRpb25zLm5hbWUpIHtcbiAgICAvLyBUaGlzIGlzIGEgZHluYW1pYyBwYXJ0aWFsIHRoYXQgcmV0dXJuZWQgYSBzdHJpbmdcbiAgICBvcHRpb25zLm5hbWUgPSBwYXJ0aWFsO1xuICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW3BhcnRpYWxdO1xuICB9XG4gIHJldHVybiBwYXJ0aWFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52b2tlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIC8vIFVzZSB0aGUgY3VycmVudCBjbG9zdXJlIGNvbnRleHQgdG8gc2F2ZSB0aGUgcGFydGlhbC1ibG9jayBpZiB0aGlzIHBhcnRpYWxcbiAgY29uc3QgY3VycmVudFBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcbiAgb3B0aW9ucy5wYXJ0aWFsID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoID0gb3B0aW9ucy5pZHNbMF0gfHwgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoO1xuICB9XG5cbiAgbGV0IHBhcnRpYWxCbG9jaztcbiAgaWYgKG9wdGlvbnMuZm4gJiYgb3B0aW9ucy5mbiAhPT0gbm9vcCkge1xuICAgIG9wdGlvbnMuZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgLy8gV3JhcHBlciBmdW5jdGlvbiB0byBnZXQgYWNjZXNzIHRvIGN1cnJlbnRQYXJ0aWFsQmxvY2sgZnJvbSB0aGUgY2xvc3VyZVxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm47XG4gICAgcGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBmdW5jdGlvbiBwYXJ0aWFsQmxvY2tXcmFwcGVyKGNvbnRleHQsIG9wdGlvbnMgPSB7fSkge1xuXG4gICAgICAvLyBSZXN0b3JlIHRoZSBwYXJ0aWFsLWJsb2NrIGZyb20gdGhlIGNsb3N1cmUgZm9yIHRoZSBleGVjdXRpb24gb2YgdGhlIGJsb2NrXG4gICAgICAvLyBpLmUuIHRoZSBwYXJ0IGluc2lkZSB0aGUgYmxvY2sgb2YgdGhlIHBhcnRpYWwgY2FsbC5cbiAgICAgIG9wdGlvbnMuZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGN1cnJlbnRQYXJ0aWFsQmxvY2s7XG4gICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBpZiAoZm4ucGFydGlhbHMpIHtcbiAgICAgIG9wdGlvbnMucGFydGlhbHMgPSBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMucGFydGlhbHMsIGZuLnBhcnRpYWxzKTtcbiAgICB9XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkICYmIHBhcnRpYWxCbG9jaykge1xuICAgIHBhcnRpYWwgPSBwYXJ0aWFsQmxvY2s7XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGhlIHBhcnRpYWwgJyArIG9wdGlvbnMubmFtZSArICcgY291bGQgbm90IGJlIGZvdW5kJyk7XG4gIH0gZWxzZSBpZiAocGFydGlhbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHBhcnRpYWwoY29udGV4dCwgb3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IHJldHVybiAnJzsgfVxuXG5mdW5jdGlvbiBpbml0RGF0YShjb250ZXh0LCBkYXRhKSB7XG4gIGlmICghZGF0YSB8fCAhKCdyb290JyBpbiBkYXRhKSkge1xuICAgIGRhdGEgPSBkYXRhID8gY3JlYXRlRnJhbWUoZGF0YSkgOiB7fTtcbiAgICBkYXRhLnJvb3QgPSBjb250ZXh0O1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKSB7XG4gIGlmIChmbi5kZWNvcmF0b3IpIHtcbiAgICBsZXQgcHJvcHMgPSB7fTtcbiAgICBwcm9nID0gZm4uZGVjb3JhdG9yKHByb2csIHByb3BzLCBjb250YWluZXIsIGRlcHRocyAmJiBkZXB0aHNbMF0sIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgIFV0aWxzLmV4dGVuZChwcm9nLCBwcm9wcyk7XG4gIH1cbiAgcmV0dXJuIHByb2c7XG59XG4iLCIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiIsImNvbnN0IGVzY2FwZSA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjeDI3OycsXG4gICdgJzogJyYjeDYwOycsXG4gICc9JzogJyYjeDNEOydcbn07XG5cbmNvbnN0IGJhZENoYXJzID0gL1smPD5cIidgPV0vZyxcbiAgICAgIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xuICByZXR1cm4gZXNjYXBlW2Nocl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQob2JqLyogLCAuLi5zb3VyY2UgKi8pIHtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3VtZW50c1tpXSwga2V5KSkge1xuICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBsZXQgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vLyBTb3VyY2VkIGZyb20gbG9kYXNoXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvbG9kYXNoL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0XG4vKiBlc2xpbnQtZGlzYWJsZSBmdW5jLXN0eWxlICovXG5sZXQgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59O1xuLy8gZmFsbGJhY2sgZm9yIG9sZGVyIHZlcnNpb25zIG9mIENocm9tZSBhbmQgU2FmYXJpXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGlzRnVuY3Rpb24oL3gvKSkge1xuICBpc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICB9O1xufVxuZXhwb3J0IHtpc0Z1bmN0aW9ufTtcbi8qIGVzbGludC1lbmFibGUgZnVuYy1zdHlsZSAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JykgPyB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJyA6IGZhbHNlO1xufTtcblxuLy8gT2xkZXIgSUUgdmVyc2lvbnMgZG8gbm90IGRpcmVjdGx5IHN1cHBvcnQgaW5kZXhPZiBzbyB3ZSBtdXN0IGltcGxlbWVudCBvdXIgb3duLCBzYWRseS5cbmV4cG9ydCBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVFeHByZXNzaW9uKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBlc2NhcGUgU2FmZVN0cmluZ3MsIHNpbmNlIHRoZXkncmUgYWxyZWFkeSBzYWZlXG4gICAgaWYgKHN0cmluZyAmJiBzdHJpbmcudG9IVE1MKSB7XG4gICAgICByZXR1cm4gc3RyaW5nLnRvSFRNTCgpO1xuICAgIH0gZWxzZSBpZiAoc3RyaW5nID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9IGVsc2UgaWYgKCFzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcgKyAnJztcbiAgICB9XG5cbiAgICAvLyBGb3JjZSBhIHN0cmluZyBjb252ZXJzaW9uIGFzIHRoaXMgd2lsbCBiZSBkb25lIGJ5IHRoZSBhcHBlbmQgcmVnYXJkbGVzcyBhbmRcbiAgICAvLyB0aGUgcmVnZXggdGVzdCB3aWxsIGRvIHRoaXMgdHJhbnNwYXJlbnRseSBiZWhpbmQgdGhlIHNjZW5lcywgY2F1c2luZyBpc3N1ZXMgaWZcbiAgICAvLyBhbiBvYmplY3QncyB0byBzdHJpbmcgaGFzIGVzY2FwZWQgY2hhcmFjdGVycyBpbiBpdC5cbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZztcbiAgfVxuXG4gIGlmICghcG9zc2libGUudGVzdChzdHJpbmcpKSB7IHJldHVybiBzdHJpbmc7IH1cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGJhZENoYXJzLCBlc2NhcGVDaGFyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRnJhbWUob2JqZWN0KSB7XG4gIGxldCBmcmFtZSA9IGV4dGVuZCh7fSwgb2JqZWN0KTtcbiAgZnJhbWUuX3BhcmVudCA9IG9iamVjdDtcbiAgcmV0dXJuIGZyYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmxvY2tQYXJhbXMocGFyYW1zLCBpZHMpIHtcbiAgcGFyYW1zLnBhdGggPSBpZHM7XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRDb250ZXh0UGF0aChjb250ZXh0UGF0aCwgaWQpIHtcbiAgcmV0dXJuIChjb250ZXh0UGF0aCA/IGNvbnRleHRQYXRoICsgJy4nIDogJycpICsgaWQ7XG59XG4iLCIvLyBVU0FHRTpcbi8vIHZhciBoYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdmFyICovXG5cbi8vIHZhciBsb2NhbCA9IGhhbmRsZWJhcnMuY3JlYXRlKCk7XG5cbnZhciBoYW5kbGViYXJzID0gcmVxdWlyZSgnLi4vZGlzdC9janMvaGFuZGxlYmFycycpWydkZWZhdWx0J107XG5cbnZhciBwcmludGVyID0gcmVxdWlyZSgnLi4vZGlzdC9janMvaGFuZGxlYmFycy9jb21waWxlci9wcmludGVyJyk7XG5oYW5kbGViYXJzLlByaW50VmlzaXRvciA9IHByaW50ZXIuUHJpbnRWaXNpdG9yO1xuaGFuZGxlYmFycy5wcmludCA9IHByaW50ZXIucHJpbnQ7XG5cbm1vZHVsZS5leHBvcnRzID0gaGFuZGxlYmFycztcblxuLy8gUHVibGlzaCBhIE5vZGUuanMgcmVxdWlyZSgpIGhhbmRsZXIgZm9yIC5oYW5kbGViYXJzIGFuZCAuaGJzIGZpbGVzXG5mdW5jdGlvbiBleHRlbnNpb24obW9kdWxlLCBmaWxlbmFtZSkge1xuICB2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuICB2YXIgdGVtcGxhdGVTdHJpbmcgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsICd1dGY4Jyk7XG4gIG1vZHVsZS5leHBvcnRzID0gaGFuZGxlYmFycy5jb21waWxlKHRlbXBsYXRlU3RyaW5nKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5pZiAodHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnICYmIHJlcXVpcmUuZXh0ZW5zaW9ucykge1xuICByZXF1aXJlLmV4dGVuc2lvbnNbJy5oYW5kbGViYXJzJ10gPSBleHRlbnNpb247XG4gIHJlcXVpcmUuZXh0ZW5zaW9uc1snLmhicyddID0gZXh0ZW5zaW9uO1xufVxuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaGFzTmF0aXZlTWFwID0gdHlwZW9mIE1hcCAhPT0gXCJ1bmRlZmluZWRcIjtcblxuLyoqXG4gKiBBIGRhdGEgc3RydWN0dXJlIHdoaWNoIGlzIGEgY29tYmluYXRpb24gb2YgYW4gYXJyYXkgYW5kIGEgc2V0LiBBZGRpbmcgYSBuZXdcbiAqIG1lbWJlciBpcyBPKDEpLCB0ZXN0aW5nIGZvciBtZW1iZXJzaGlwIGlzIE8oMSksIGFuZCBmaW5kaW5nIHRoZSBpbmRleCBvZiBhblxuICogZWxlbWVudCBpcyBPKDEpLiBSZW1vdmluZyBlbGVtZW50cyBmcm9tIHRoZSBzZXQgaXMgbm90IHN1cHBvcnRlZC4gT25seVxuICogc3RyaW5ncyBhcmUgc3VwcG9ydGVkIGZvciBtZW1iZXJzaGlwLlxuICovXG5mdW5jdGlvbiBBcnJheVNldCgpIHtcbiAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgdGhpcy5fc2V0ID0gaGFzTmF0aXZlTWFwID8gbmV3IE1hcCgpIDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kIGZvciBjcmVhdGluZyBBcnJheVNldCBpbnN0YW5jZXMgZnJvbSBhbiBleGlzdGluZyBhcnJheS5cbiAqL1xuQXJyYXlTZXQuZnJvbUFycmF5ID0gZnVuY3Rpb24gQXJyYXlTZXRfZnJvbUFycmF5KGFBcnJheSwgYUFsbG93RHVwbGljYXRlcykge1xuICB2YXIgc2V0ID0gbmV3IEFycmF5U2V0KCk7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhQXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzZXQuYWRkKGFBcnJheVtpXSwgYUFsbG93RHVwbGljYXRlcyk7XG4gIH1cbiAgcmV0dXJuIHNldDtcbn07XG5cbi8qKlxuICogUmV0dXJuIGhvdyBtYW55IHVuaXF1ZSBpdGVtcyBhcmUgaW4gdGhpcyBBcnJheVNldC4gSWYgZHVwbGljYXRlcyBoYXZlIGJlZW5cbiAqIGFkZGVkLCB0aGFuIHRob3NlIGRvIG5vdCBjb3VudCB0b3dhcmRzIHRoZSBzaXplLlxuICpcbiAqIEByZXR1cm5zIE51bWJlclxuICovXG5BcnJheVNldC5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uIEFycmF5U2V0X3NpemUoKSB7XG4gIHJldHVybiBoYXNOYXRpdmVNYXAgPyB0aGlzLl9zZXQuc2l6ZSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX3NldCkubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBBZGQgdGhlIGdpdmVuIHN0cmluZyB0byB0aGlzIHNldC5cbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIEFycmF5U2V0X2FkZChhU3RyLCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gIHZhciBzU3RyID0gaGFzTmF0aXZlTWFwID8gYVN0ciA6IHV0aWwudG9TZXRTdHJpbmcoYVN0cik7XG4gIHZhciBpc0R1cGxpY2F0ZSA9IGhhc05hdGl2ZU1hcCA/IHRoaXMuaGFzKGFTdHIpIDogaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKTtcbiAgdmFyIGlkeCA9IHRoaXMuX2FycmF5Lmxlbmd0aDtcbiAgaWYgKCFpc0R1cGxpY2F0ZSB8fCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhU3RyKTtcbiAgfVxuICBpZiAoIWlzRHVwbGljYXRlKSB7XG4gICAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgICAgdGhpcy5fc2V0LnNldChhU3RyLCBpZHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXRbc1N0cl0gPSBpZHg7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIElzIHRoZSBnaXZlbiBzdHJpbmcgYSBtZW1iZXIgb2YgdGhpcyBzZXQ/XG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBBcnJheVNldF9oYXMoYVN0cikge1xuICBpZiAoaGFzTmF0aXZlTWFwKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NldC5oYXMoYVN0cik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNTdHIgPSB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpO1xuICAgIHJldHVybiBoYXMuY2FsbCh0aGlzLl9zZXQsIHNTdHIpO1xuICB9XG59O1xuXG4vKipcbiAqIFdoYXQgaXMgdGhlIGluZGV4IG9mIHRoZSBnaXZlbiBzdHJpbmcgaW4gdGhlIGFycmF5P1xuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5BcnJheVNldC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIEFycmF5U2V0X2luZGV4T2YoYVN0cikge1xuICBpZiAoaGFzTmF0aXZlTWFwKSB7XG4gICAgdmFyIGlkeCA9IHRoaXMuX3NldC5nZXQoYVN0cik7XG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBzU3RyID0gdXRpbC50b1NldFN0cmluZyhhU3RyKTtcbiAgICBpZiAoaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NldFtzU3RyXTtcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFTdHIgKyAnXCIgaXMgbm90IGluIHRoZSBzZXQuJyk7XG59O1xuXG4vKipcbiAqIFdoYXQgaXMgdGhlIGVsZW1lbnQgYXQgdGhlIGdpdmVuIGluZGV4P1xuICpcbiAqIEBwYXJhbSBOdW1iZXIgYUlkeFxuICovXG5BcnJheVNldC5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbiBBcnJheVNldF9hdChhSWR4KSB7XG4gIGlmIChhSWR4ID49IDAgJiYgYUlkeCA8IHRoaXMuX2FycmF5Lmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLl9hcnJheVthSWR4XTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ05vIGVsZW1lbnQgaW5kZXhlZCBieSAnICsgYUlkeCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFycmF5IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc2V0ICh3aGljaCBoYXMgdGhlIHByb3BlciBpbmRpY2VzXG4gKiBpbmRpY2F0ZWQgYnkgaW5kZXhPZikuIE5vdGUgdGhhdCB0aGlzIGlzIGEgY29weSBvZiB0aGUgaW50ZXJuYWwgYXJyYXkgdXNlZFxuICogZm9yIHN0b3JpbmcgdGhlIG1lbWJlcnMgc28gdGhhdCBubyBvbmUgY2FuIG1lc3Mgd2l0aCBpbnRlcm5hbCBzdGF0ZS5cbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiBBcnJheVNldF90b0FycmF5KCkge1xuICByZXR1cm4gdGhpcy5fYXJyYXkuc2xpY2UoKTtcbn07XG5cbmV4cG9ydHMuQXJyYXlTZXQgPSBBcnJheVNldDtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKlxuICogQmFzZWQgb24gdGhlIEJhc2UgNjQgVkxRIGltcGxlbWVudGF0aW9uIGluIENsb3N1cmUgQ29tcGlsZXI6XG4gKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nsb3N1cmUtY29tcGlsZXIvc291cmNlL2Jyb3dzZS90cnVuay9zcmMvY29tL2dvb2dsZS9kZWJ1Z2dpbmcvc291cmNlbWFwL0Jhc2U2NFZMUS5qYXZhXG4gKlxuICogQ29weXJpZ2h0IDIwMTEgVGhlIENsb3N1cmUgQ29tcGlsZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlXG4gKiAgICBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuICogICAgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkXG4gKiAgICB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEdvb2dsZSBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWRcbiAqICAgIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxuICogREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZXG4gKiBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0VcbiAqIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJy4vYmFzZTY0Jyk7XG5cbi8vIEEgc2luZ2xlIGJhc2UgNjQgZGlnaXQgY2FuIGNvbnRhaW4gNiBiaXRzIG9mIGRhdGEuIEZvciB0aGUgYmFzZSA2NCB2YXJpYWJsZVxuLy8gbGVuZ3RoIHF1YW50aXRpZXMgd2UgdXNlIGluIHRoZSBzb3VyY2UgbWFwIHNwZWMsIHRoZSBmaXJzdCBiaXQgaXMgdGhlIHNpZ24sXG4vLyB0aGUgbmV4dCBmb3VyIGJpdHMgYXJlIHRoZSBhY3R1YWwgdmFsdWUsIGFuZCB0aGUgNnRoIGJpdCBpcyB0aGVcbi8vIGNvbnRpbnVhdGlvbiBiaXQuIFRoZSBjb250aW51YXRpb24gYml0IHRlbGxzIHVzIHdoZXRoZXIgdGhlcmUgYXJlIG1vcmVcbi8vIGRpZ2l0cyBpbiB0aGlzIHZhbHVlIGZvbGxvd2luZyB0aGlzIGRpZ2l0LlxuLy9cbi8vICAgQ29udGludWF0aW9uXG4vLyAgIHwgICAgU2lnblxuLy8gICB8ICAgIHxcbi8vICAgViAgICBWXG4vLyAgIDEwMTAxMVxuXG52YXIgVkxRX0JBU0VfU0hJRlQgPSA1O1xuXG4vLyBiaW5hcnk6IDEwMDAwMFxudmFyIFZMUV9CQVNFID0gMSA8PCBWTFFfQkFTRV9TSElGVDtcblxuLy8gYmluYXJ5OiAwMTExMTFcbnZhciBWTFFfQkFTRV9NQVNLID0gVkxRX0JBU0UgLSAxO1xuXG4vLyBiaW5hcnk6IDEwMDAwMFxudmFyIFZMUV9DT05USU5VQVRJT05fQklUID0gVkxRX0JBU0U7XG5cbi8qKlxuICogQ29udmVydHMgZnJvbSBhIHR3by1jb21wbGVtZW50IHZhbHVlIHRvIGEgdmFsdWUgd2hlcmUgdGhlIHNpZ24gYml0IGlzXG4gKiBwbGFjZWQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC4gIEZvciBleGFtcGxlLCBhcyBkZWNpbWFsczpcbiAqICAgMSBiZWNvbWVzIDIgKDEwIGJpbmFyeSksIC0xIGJlY29tZXMgMyAoMTEgYmluYXJ5KVxuICogICAyIGJlY29tZXMgNCAoMTAwIGJpbmFyeSksIC0yIGJlY29tZXMgNSAoMTAxIGJpbmFyeSlcbiAqL1xuZnVuY3Rpb24gdG9WTFFTaWduZWQoYVZhbHVlKSB7XG4gIHJldHVybiBhVmFsdWUgPCAwXG4gICAgPyAoKC1hVmFsdWUpIDw8IDEpICsgMVxuICAgIDogKGFWYWx1ZSA8PCAxKSArIDA7XG59XG5cbi8qKlxuICogQ29udmVydHMgdG8gYSB0d28tY29tcGxlbWVudCB2YWx1ZSBmcm9tIGEgdmFsdWUgd2hlcmUgdGhlIHNpZ24gYml0IGlzXG4gKiBwbGFjZWQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC4gIEZvciBleGFtcGxlLCBhcyBkZWNpbWFsczpcbiAqICAgMiAoMTAgYmluYXJ5KSBiZWNvbWVzIDEsIDMgKDExIGJpbmFyeSkgYmVjb21lcyAtMVxuICogICA0ICgxMDAgYmluYXJ5KSBiZWNvbWVzIDIsIDUgKDEwMSBiaW5hcnkpIGJlY29tZXMgLTJcbiAqL1xuZnVuY3Rpb24gZnJvbVZMUVNpZ25lZChhVmFsdWUpIHtcbiAgdmFyIGlzTmVnYXRpdmUgPSAoYVZhbHVlICYgMSkgPT09IDE7XG4gIHZhciBzaGlmdGVkID0gYVZhbHVlID4+IDE7XG4gIHJldHVybiBpc05lZ2F0aXZlXG4gICAgPyAtc2hpZnRlZFxuICAgIDogc2hpZnRlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiYXNlIDY0IFZMUSBlbmNvZGVkIHZhbHVlLlxuICovXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIGJhc2U2NFZMUV9lbmNvZGUoYVZhbHVlKSB7XG4gIHZhciBlbmNvZGVkID0gXCJcIjtcbiAgdmFyIGRpZ2l0O1xuXG4gIHZhciB2bHEgPSB0b1ZMUVNpZ25lZChhVmFsdWUpO1xuXG4gIGRvIHtcbiAgICBkaWdpdCA9IHZscSAmIFZMUV9CQVNFX01BU0s7XG4gICAgdmxxID4+Pj0gVkxRX0JBU0VfU0hJRlQ7XG4gICAgaWYgKHZscSA+IDApIHtcbiAgICAgIC8vIFRoZXJlIGFyZSBzdGlsbCBtb3JlIGRpZ2l0cyBpbiB0aGlzIHZhbHVlLCBzbyB3ZSBtdXN0IG1ha2Ugc3VyZSB0aGVcbiAgICAgIC8vIGNvbnRpbnVhdGlvbiBiaXQgaXMgbWFya2VkLlxuICAgICAgZGlnaXQgfD0gVkxRX0NPTlRJTlVBVElPTl9CSVQ7XG4gICAgfVxuICAgIGVuY29kZWQgKz0gYmFzZTY0LmVuY29kZShkaWdpdCk7XG4gIH0gd2hpbGUgKHZscSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIHRoZSBuZXh0IGJhc2UgNjQgVkxRIHZhbHVlIGZyb20gdGhlIGdpdmVuIHN0cmluZyBhbmQgcmV0dXJucyB0aGVcbiAqIHZhbHVlIGFuZCB0aGUgcmVzdCBvZiB0aGUgc3RyaW5nIHZpYSB0aGUgb3V0IHBhcmFtZXRlci5cbiAqL1xuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiBiYXNlNjRWTFFfZGVjb2RlKGFTdHIsIGFJbmRleCwgYU91dFBhcmFtKSB7XG4gIHZhciBzdHJMZW4gPSBhU3RyLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IDA7XG4gIHZhciBzaGlmdCA9IDA7XG4gIHZhciBjb250aW51YXRpb24sIGRpZ2l0O1xuXG4gIGRvIHtcbiAgICBpZiAoYUluZGV4ID49IHN0ckxlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgbW9yZSBkaWdpdHMgaW4gYmFzZSA2NCBWTFEgdmFsdWUuXCIpO1xuICAgIH1cblxuICAgIGRpZ2l0ID0gYmFzZTY0LmRlY29kZShhU3RyLmNoYXJDb2RlQXQoYUluZGV4KyspKTtcbiAgICBpZiAoZGlnaXQgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBkaWdpdDogXCIgKyBhU3RyLmNoYXJBdChhSW5kZXggLSAxKSk7XG4gICAgfVxuXG4gICAgY29udGludWF0aW9uID0gISEoZGlnaXQgJiBWTFFfQ09OVElOVUFUSU9OX0JJVCk7XG4gICAgZGlnaXQgJj0gVkxRX0JBU0VfTUFTSztcbiAgICByZXN1bHQgPSByZXN1bHQgKyAoZGlnaXQgPDwgc2hpZnQpO1xuICAgIHNoaWZ0ICs9IFZMUV9CQVNFX1NISUZUO1xuICB9IHdoaWxlIChjb250aW51YXRpb24pO1xuXG4gIGFPdXRQYXJhbS52YWx1ZSA9IGZyb21WTFFTaWduZWQocmVzdWx0KTtcbiAgYU91dFBhcmFtLnJlc3QgPSBhSW5kZXg7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgaW50VG9DaGFyTWFwID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLnNwbGl0KCcnKTtcblxuLyoqXG4gKiBFbmNvZGUgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2Ugb2YgMCB0byA2MyB0byBhIHNpbmdsZSBiYXNlIDY0IGRpZ2l0LlxuICovXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgaWYgKDAgPD0gbnVtYmVyICYmIG51bWJlciA8IGludFRvQ2hhck1hcC5sZW5ndGgpIHtcbiAgICByZXR1cm4gaW50VG9DaGFyTWFwW251bWJlcl07XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk11c3QgYmUgYmV0d2VlbiAwIGFuZCA2MzogXCIgKyBudW1iZXIpO1xufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBzaW5nbGUgYmFzZSA2NCBjaGFyYWN0ZXIgY29kZSBkaWdpdCB0byBhbiBpbnRlZ2VyLiBSZXR1cm5zIC0xIG9uXG4gKiBmYWlsdXJlLlxuICovXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIChjaGFyQ29kZSkge1xuICB2YXIgYmlnQSA9IDY1OyAgICAgLy8gJ0EnXG4gIHZhciBiaWdaID0gOTA7ICAgICAvLyAnWidcblxuICB2YXIgbGl0dGxlQSA9IDk3OyAgLy8gJ2EnXG4gIHZhciBsaXR0bGVaID0gMTIyOyAvLyAneidcblxuICB2YXIgemVybyA9IDQ4OyAgICAgLy8gJzAnXG4gIHZhciBuaW5lID0gNTc7ICAgICAvLyAnOSdcblxuICB2YXIgcGx1cyA9IDQzOyAgICAgLy8gJysnXG4gIHZhciBzbGFzaCA9IDQ3OyAgICAvLyAnLydcblxuICB2YXIgbGl0dGxlT2Zmc2V0ID0gMjY7XG4gIHZhciBudW1iZXJPZmZzZXQgPSA1MjtcblxuICAvLyAwIC0gMjU6IEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXG4gIGlmIChiaWdBIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IGJpZ1opIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gYmlnQSk7XG4gIH1cblxuICAvLyAyNiAtIDUxOiBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elxuICBpZiAobGl0dGxlQSA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBsaXR0bGVaKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIGxpdHRsZUEgKyBsaXR0bGVPZmZzZXQpO1xuICB9XG5cbiAgLy8gNTIgLSA2MTogMDEyMzQ1Njc4OVxuICBpZiAoemVybyA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBuaW5lKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIHplcm8gKyBudW1iZXJPZmZzZXQpO1xuICB9XG5cbiAgLy8gNjI6ICtcbiAgaWYgKGNoYXJDb2RlID09IHBsdXMpIHtcbiAgICByZXR1cm4gNjI7XG4gIH1cblxuICAvLyA2MzogL1xuICBpZiAoY2hhckNvZGUgPT0gc2xhc2gpIHtcbiAgICByZXR1cm4gNjM7XG4gIH1cblxuICAvLyBJbnZhbGlkIGJhc2U2NCBkaWdpdC5cbiAgcmV0dXJuIC0xO1xufTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxuZXhwb3J0cy5HUkVBVEVTVF9MT1dFUl9CT1VORCA9IDE7XG5leHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EID0gMjtcblxuLyoqXG4gKiBSZWN1cnNpdmUgaW1wbGVtZW50YXRpb24gb2YgYmluYXJ5IHNlYXJjaC5cbiAqXG4gKiBAcGFyYW0gYUxvdyBJbmRpY2VzIGhlcmUgYW5kIGxvd2VyIGRvIG5vdCBjb250YWluIHRoZSBuZWVkbGUuXG4gKiBAcGFyYW0gYUhpZ2ggSW5kaWNlcyBoZXJlIGFuZCBoaWdoZXIgZG8gbm90IGNvbnRhaW4gdGhlIG5lZWRsZS5cbiAqIEBwYXJhbSBhTmVlZGxlIFRoZSBlbGVtZW50IGJlaW5nIHNlYXJjaGVkIGZvci5cbiAqIEBwYXJhbSBhSGF5c3RhY2sgVGhlIG5vbi1lbXB0eSBhcnJheSBiZWluZyBzZWFyY2hlZC5cbiAqIEBwYXJhbSBhQ29tcGFyZSBGdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gZWxlbWVudHMgYW5kIHJldHVybnMgLTEsIDAsIG9yIDEuXG4gKiBAcGFyYW0gYUJpYXMgRWl0aGVyICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ2JpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIHJlY3Vyc2l2ZVNlYXJjaChhTG93LCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpIHtcbiAgLy8gVGhpcyBmdW5jdGlvbiB0ZXJtaW5hdGVzIHdoZW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgaXMgdHJ1ZTpcbiAgLy9cbiAgLy8gICAxLiBXZSBmaW5kIHRoZSBleGFjdCBlbGVtZW50IHdlIGFyZSBsb29raW5nIGZvci5cbiAgLy9cbiAgLy8gICAyLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGJ1dCB3ZSBjYW4gcmV0dXJuIHRoZSBpbmRleCBvZlxuICAvLyAgICAgIHRoZSBuZXh0LWNsb3Nlc3QgZWxlbWVudC5cbiAgLy9cbiAgLy8gICAzLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGFuZCB0aGVyZSBpcyBubyBuZXh0LWNsb3Nlc3RcbiAgLy8gICAgICBlbGVtZW50IHRoYW4gdGhlIG9uZSB3ZSBhcmUgc2VhcmNoaW5nIGZvciwgc28gd2UgcmV0dXJuIC0xLlxuICB2YXIgbWlkID0gTWF0aC5mbG9vcigoYUhpZ2ggLSBhTG93KSAvIDIpICsgYUxvdztcbiAgdmFyIGNtcCA9IGFDb21wYXJlKGFOZWVkbGUsIGFIYXlzdGFja1ttaWRdLCB0cnVlKTtcbiAgaWYgKGNtcCA9PT0gMCkge1xuICAgIC8vIEZvdW5kIHRoZSBlbGVtZW50IHdlIGFyZSBsb29raW5nIGZvci5cbiAgICByZXR1cm4gbWlkO1xuICB9XG4gIGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAvLyBPdXIgbmVlZGxlIGlzIGdyZWF0ZXIgdGhhbiBhSGF5c3RhY2tbbWlkXS5cbiAgICBpZiAoYUhpZ2ggLSBtaWQgPiAxKSB7XG4gICAgICAvLyBUaGUgZWxlbWVudCBpcyBpbiB0aGUgdXBwZXIgaGFsZi5cbiAgICAgIHJldHVybiByZWN1cnNpdmVTZWFyY2gobWlkLCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpO1xuICAgIH1cblxuICAgIC8vIFRoZSBleGFjdCBuZWVkbGUgZWxlbWVudCB3YXMgbm90IGZvdW5kIGluIHRoaXMgaGF5c3RhY2suIERldGVybWluZSBpZlxuICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgzKSBvciAoMikgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgaWYgKGFCaWFzID09IGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQpIHtcbiAgICAgIHJldHVybiBhSGlnaCA8IGFIYXlzdGFjay5sZW5ndGggPyBhSGlnaCA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWlkO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICAvLyBPdXIgbmVlZGxlIGlzIGxlc3MgdGhhbiBhSGF5c3RhY2tbbWlkXS5cbiAgICBpZiAobWlkIC0gYUxvdyA+IDEpIHtcbiAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSBsb3dlciBoYWxmLlxuICAgICAgcmV0dXJuIHJlY3Vyc2l2ZVNlYXJjaChhTG93LCBtaWQsIGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKTtcbiAgICB9XG5cbiAgICAvLyB3ZSBhcmUgaW4gdGVybWluYXRpb24gY2FzZSAoMykgb3IgKDIpIGFuZCByZXR1cm4gdGhlIGFwcHJvcHJpYXRlIHRoaW5nLlxuICAgIGlmIChhQmlhcyA9PSBleHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EKSB7XG4gICAgICByZXR1cm4gbWlkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYUxvdyA8IDAgPyAtMSA6IGFMb3c7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoIHdoaWNoIHdpbGwgYWx3YXlzIHRyeSBhbmQgcmV0dXJuXG4gKiB0aGUgaW5kZXggb2YgdGhlIGNsb3Nlc3QgZWxlbWVudCBpZiB0aGVyZSBpcyBubyBleGFjdCBoaXQuIFRoaXMgaXMgYmVjYXVzZVxuICogbWFwcGluZ3MgYmV0d2VlbiBvcmlnaW5hbCBhbmQgZ2VuZXJhdGVkIGxpbmUvY29sIHBhaXJzIGFyZSBzaW5nbGUgcG9pbnRzLFxuICogYW5kIHRoZXJlIGlzIGFuIGltcGxpY2l0IHJlZ2lvbiBiZXR3ZWVuIGVhY2ggb2YgdGhlbSwgc28gYSBtaXNzIGp1c3QgbWVhbnNcbiAqIHRoYXQgeW91IGFyZW4ndCBvbiB0aGUgdmVyeSBzdGFydCBvZiBhIHJlZ2lvbi5cbiAqXG4gKiBAcGFyYW0gYU5lZWRsZSBUaGUgZWxlbWVudCB5b3UgYXJlIGxvb2tpbmcgZm9yLlxuICogQHBhcmFtIGFIYXlzdGFjayBUaGUgYXJyYXkgdGhhdCBpcyBiZWluZyBzZWFyY2hlZC5cbiAqIEBwYXJhbSBhQ29tcGFyZSBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHRoZSBuZWVkbGUgYW5kIGFuIGVsZW1lbnQgaW4gdGhlXG4gKiAgICAgYXJyYXkgYW5kIHJldHVybnMgLTEsIDAsIG9yIDEgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIG5lZWRsZSBpcyBsZXNzXG4gKiAgICAgdGhhbiwgZXF1YWwgdG8sIG9yIGdyZWF0ZXIgdGhhbiB0aGUgZWxlbWVudCwgcmVzcGVjdGl2ZWx5LlxuICogQHBhcmFtIGFCaWFzIEVpdGhlciAnYmluYXJ5U2VhcmNoLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICogICAgIERlZmF1bHRzIHRvICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICovXG5leHBvcnRzLnNlYXJjaCA9IGZ1bmN0aW9uIHNlYXJjaChhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcykge1xuICBpZiAoYUhheXN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IHJlY3Vyc2l2ZVNlYXJjaCgtMSwgYUhheXN0YWNrLmxlbmd0aCwgYU5lZWRsZSwgYUhheXN0YWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYUNvbXBhcmUsIGFCaWFzIHx8IGV4cG9ydHMuR1JFQVRFU1RfTE9XRVJfQk9VTkQpO1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLy8gV2UgaGF2ZSBmb3VuZCBlaXRoZXIgdGhlIGV4YWN0IGVsZW1lbnQsIG9yIHRoZSBuZXh0LWNsb3Nlc3QgZWxlbWVudCB0aGFuXG4gIC8vIHRoZSBvbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IuIEhvd2V2ZXIsIHRoZXJlIG1heSBiZSBtb3JlIHRoYW4gb25lIHN1Y2hcbiAgLy8gZWxlbWVudC4gTWFrZSBzdXJlIHdlIGFsd2F5cyByZXR1cm4gdGhlIHNtYWxsZXN0IG9mIHRoZXNlLlxuICB3aGlsZSAoaW5kZXggLSAxID49IDApIHtcbiAgICBpZiAoYUNvbXBhcmUoYUhheXN0YWNrW2luZGV4XSwgYUhheXN0YWNrW2luZGV4IC0gMV0sIHRydWUpICE9PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLS1pbmRleDtcbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn07XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTQgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgbWFwcGluZ0IgaXMgYWZ0ZXIgbWFwcGluZ0Egd2l0aCByZXNwZWN0IHRvIGdlbmVyYXRlZFxuICogcG9zaXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlZFBvc2l0aW9uQWZ0ZXIobWFwcGluZ0EsIG1hcHBpbmdCKSB7XG4gIC8vIE9wdGltaXplZCBmb3IgbW9zdCBjb21tb24gY2FzZVxuICB2YXIgbGluZUEgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lO1xuICB2YXIgbGluZUIgPSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICB2YXIgY29sdW1uQSA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbjtcbiAgdmFyIGNvbHVtbkIgPSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIHJldHVybiBsaW5lQiA+IGxpbmVBIHx8IGxpbmVCID09IGxpbmVBICYmIGNvbHVtbkIgPj0gY29sdW1uQSB8fFxuICAgICAgICAgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIDw9IDA7XG59XG5cbi8qKlxuICogQSBkYXRhIHN0cnVjdHVyZSB0byBwcm92aWRlIGEgc29ydGVkIHZpZXcgb2YgYWNjdW11bGF0ZWQgbWFwcGluZ3MgaW4gYVxuICogcGVyZm9ybWFuY2UgY29uc2Npb3VzIG1hbm5lci4gSXQgdHJhZGVzIGEgbmVnbGliYWJsZSBvdmVyaGVhZCBpbiBnZW5lcmFsXG4gKiBjYXNlIGZvciBhIGxhcmdlIHNwZWVkdXAgaW4gY2FzZSBvZiBtYXBwaW5ncyBiZWluZyBhZGRlZCBpbiBvcmRlci5cbiAqL1xuZnVuY3Rpb24gTWFwcGluZ0xpc3QoKSB7XG4gIHRoaXMuX2FycmF5ID0gW107XG4gIHRoaXMuX3NvcnRlZCA9IHRydWU7XG4gIC8vIFNlcnZlcyBhcyBpbmZpbXVtXG4gIHRoaXMuX2xhc3QgPSB7Z2VuZXJhdGVkTGluZTogLTEsIGdlbmVyYXRlZENvbHVtbjogMH07XG59XG5cbi8qKlxuICogSXRlcmF0ZSB0aHJvdWdoIGludGVybmFsIGl0ZW1zLiBUaGlzIG1ldGhvZCB0YWtlcyB0aGUgc2FtZSBhcmd1bWVudHMgdGhhdFxuICogYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCB0YWtlcy5cbiAqXG4gKiBOT1RFOiBUaGUgb3JkZXIgb2YgdGhlIG1hcHBpbmdzIGlzIE5PVCBndWFyYW50ZWVkLlxuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUudW5zb3J0ZWRGb3JFYWNoID1cbiAgZnVuY3Rpb24gTWFwcGluZ0xpc3RfZm9yRWFjaChhQ2FsbGJhY2ssIGFUaGlzQXJnKSB7XG4gICAgdGhpcy5fYXJyYXkuZm9yRWFjaChhQ2FsbGJhY2ssIGFUaGlzQXJnKTtcbiAgfTtcblxuLyoqXG4gKiBBZGQgdGhlIGdpdmVuIHNvdXJjZSBtYXBwaW5nLlxuICpcbiAqIEBwYXJhbSBPYmplY3QgYU1hcHBpbmdcbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIE1hcHBpbmdMaXN0X2FkZChhTWFwcGluZykge1xuICBpZiAoZ2VuZXJhdGVkUG9zaXRpb25BZnRlcih0aGlzLl9sYXN0LCBhTWFwcGluZykpIHtcbiAgICB0aGlzLl9sYXN0ID0gYU1hcHBpbmc7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhTWFwcGluZyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fc29ydGVkID0gZmFsc2U7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhTWFwcGluZyk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmxhdCwgc29ydGVkIGFycmF5IG9mIG1hcHBpbmdzLiBUaGUgbWFwcGluZ3MgYXJlIHNvcnRlZCBieVxuICogZ2VuZXJhdGVkIHBvc2l0aW9uLlxuICpcbiAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHJldHVybnMgaW50ZXJuYWwgZGF0YSB3aXRob3V0IGNvcHlpbmcsIGZvclxuICogcGVyZm9ybWFuY2UuIFRoZSByZXR1cm4gdmFsdWUgbXVzdCBOT1QgYmUgbXV0YXRlZCwgYW5kIHNob3VsZCBiZSB0cmVhdGVkIGFzXG4gKiBhbiBpbW11dGFibGUgYm9ycm93LiBJZiB5b3Ugd2FudCB0byB0YWtlIG93bmVyc2hpcCwgeW91IG11c3QgbWFrZSB5b3VyIG93blxuICogY29weS5cbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiBNYXBwaW5nTGlzdF90b0FycmF5KCkge1xuICBpZiAoIXRoaXMuX3NvcnRlZCkge1xuICAgIHRoaXMuX2FycmF5LnNvcnQodXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCk7XG4gICAgdGhpcy5fc29ydGVkID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gdGhpcy5fYXJyYXk7XG59O1xuXG5leHBvcnRzLk1hcHBpbmdMaXN0ID0gTWFwcGluZ0xpc3Q7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbi8vIEl0IHR1cm5zIG91dCB0aGF0IHNvbWUgKG1vc3Q/KSBKYXZhU2NyaXB0IGVuZ2luZXMgZG9uJ3Qgc2VsZi1ob3N0XG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgLiBUaGlzIG1ha2VzIHNlbnNlIGJlY2F1c2UgQysrIHdpbGwgbGlrZWx5IHJlbWFpblxuLy8gZmFzdGVyIHRoYW4gSlMgd2hlbiBkb2luZyByYXcgQ1BVLWludGVuc2l2ZSBzb3J0aW5nLiBIb3dldmVyLCB3aGVuIHVzaW5nIGFcbi8vIGN1c3RvbSBjb21wYXJhdG9yIGZ1bmN0aW9uLCBjYWxsaW5nIGJhY2sgYW5kIGZvcnRoIGJldHdlZW4gdGhlIFZNJ3MgQysrIGFuZFxuLy8gSklUJ2QgSlMgaXMgcmF0aGVyIHNsb3cgKmFuZCogbG9zZXMgSklUIHR5cGUgaW5mb3JtYXRpb24sIHJlc3VsdGluZyBpblxuLy8gd29yc2UgZ2VuZXJhdGVkIGNvZGUgZm9yIHRoZSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRoYW4gd291bGQgYmUgb3B0aW1hbC4gSW5cbi8vIGZhY3QsIHdoZW4gc29ydGluZyB3aXRoIGEgY29tcGFyYXRvciwgdGhlc2UgY29zdHMgb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIG9mXG4vLyBzb3J0aW5nIGluIEMrKy4gQnkgdXNpbmcgb3VyIG93biBKUy1pbXBsZW1lbnRlZCBRdWljayBTb3J0IChiZWxvdyksIHdlIGdldFxuLy8gYSB+MzUwMG1zIG1lYW4gc3BlZWQtdXAgaW4gYGJlbmNoL2JlbmNoLmh0bWxgLlxuXG4vKipcbiAqIFN3YXAgdGhlIGVsZW1lbnRzIGluZGV4ZWQgYnkgYHhgIGFuZCBgeWAgaW4gdGhlIGFycmF5IGBhcnlgLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIFRoZSBhcnJheS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBpdGVtLlxuICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAqICAgICAgICBUaGUgaW5kZXggb2YgdGhlIHNlY29uZCBpdGVtLlxuICovXG5mdW5jdGlvbiBzd2FwKGFyeSwgeCwgeSkge1xuICB2YXIgdGVtcCA9IGFyeVt4XTtcbiAgYXJ5W3hdID0gYXJ5W3ldO1xuICBhcnlbeV0gPSB0ZW1wO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gaW50ZWdlciB3aXRoaW4gdGhlIHJhbmdlIGBsb3cgLi4gaGlnaGAgaW5jbHVzaXZlLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBsb3dcbiAqICAgICAgICBUaGUgbG93ZXIgYm91bmQgb24gdGhlIHJhbmdlLlxuICogQHBhcmFtIHtOdW1iZXJ9IGhpZ2hcbiAqICAgICAgICBUaGUgdXBwZXIgYm91bmQgb24gdGhlIHJhbmdlLlxuICovXG5mdW5jdGlvbiByYW5kb21JbnRJblJhbmdlKGxvdywgaGlnaCkge1xuICByZXR1cm4gTWF0aC5yb3VuZChsb3cgKyAoTWF0aC5yYW5kb20oKSAqIChoaWdoIC0gbG93KSkpO1xufVxuXG4vKipcbiAqIFRoZSBRdWljayBTb3J0IGFsZ29yaXRobS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBBbiBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGFyYXRvclxuICogICAgICAgIEZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIHR3byBpdGVtcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwXG4gKiAgICAgICAgU3RhcnQgaW5kZXggb2YgdGhlIGFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gclxuICogICAgICAgIEVuZCBpbmRleCBvZiB0aGUgYXJyYXlcbiAqL1xuZnVuY3Rpb24gZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCByKSB7XG4gIC8vIElmIG91ciBsb3dlciBib3VuZCBpcyBsZXNzIHRoYW4gb3VyIHVwcGVyIGJvdW5kLCB3ZSAoMSkgcGFydGl0aW9uIHRoZVxuICAvLyBhcnJheSBpbnRvIHR3byBwaWVjZXMgYW5kICgyKSByZWN1cnNlIG9uIGVhY2ggaGFsZi4gSWYgaXQgaXMgbm90LCB0aGlzIGlzXG4gIC8vIHRoZSBlbXB0eSBhcnJheSBhbmQgb3VyIGJhc2UgY2FzZS5cblxuICBpZiAocCA8IHIpIHtcbiAgICAvLyAoMSkgUGFydGl0aW9uaW5nLlxuICAgIC8vXG4gICAgLy8gVGhlIHBhcnRpdGlvbmluZyBjaG9vc2VzIGEgcGl2b3QgYmV0d2VlbiBgcGAgYW5kIGByYCBhbmQgbW92ZXMgYWxsXG4gICAgLy8gZWxlbWVudHMgdGhhdCBhcmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwaXZvdCB0byB0aGUgYmVmb3JlIGl0LCBhbmRcbiAgICAvLyBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgYXJlIGdyZWF0ZXIgdGhhbiBpdCBhZnRlciBpdC4gVGhlIGVmZmVjdCBpcyB0aGF0XG4gICAgLy8gb25jZSBwYXJ0aXRpb24gaXMgZG9uZSwgdGhlIHBpdm90IGlzIGluIHRoZSBleGFjdCBwbGFjZSBpdCB3aWxsIGJlIHdoZW5cbiAgICAvLyB0aGUgYXJyYXkgaXMgcHV0IGluIHNvcnRlZCBvcmRlciwgYW5kIGl0IHdpbGwgbm90IG5lZWQgdG8gYmUgbW92ZWRcbiAgICAvLyBhZ2Fpbi4gVGhpcyBydW5zIGluIE8obikgdGltZS5cblxuICAgIC8vIEFsd2F5cyBjaG9vc2UgYSByYW5kb20gcGl2b3Qgc28gdGhhdCBhbiBpbnB1dCBhcnJheSB3aGljaCBpcyByZXZlcnNlXG4gICAgLy8gc29ydGVkIGRvZXMgbm90IGNhdXNlIE8obl4yKSBydW5uaW5nIHRpbWUuXG4gICAgdmFyIHBpdm90SW5kZXggPSByYW5kb21JbnRJblJhbmdlKHAsIHIpO1xuICAgIHZhciBpID0gcCAtIDE7XG5cbiAgICBzd2FwKGFyeSwgcGl2b3RJbmRleCwgcik7XG4gICAgdmFyIHBpdm90ID0gYXJ5W3JdO1xuXG4gICAgLy8gSW1tZWRpYXRlbHkgYWZ0ZXIgYGpgIGlzIGluY3JlbWVudGVkIGluIHRoaXMgbG9vcCwgdGhlIGZvbGxvd2luZyBob2xkXG4gICAgLy8gdHJ1ZTpcbiAgICAvL1xuICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbcCAuLiBpXWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwaXZvdC5cbiAgICAvL1xuICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbaSsxIC4uIGotMV1gIGlzIGdyZWF0ZXIgdGhhbiB0aGUgcGl2b3QuXG4gICAgZm9yICh2YXIgaiA9IHA7IGogPCByOyBqKyspIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFyeVtqXSwgcGl2b3QpIDw9IDApIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBzd2FwKGFyeSwgaSwgaik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dhcChhcnksIGkgKyAxLCBqKTtcbiAgICB2YXIgcSA9IGkgKyAxO1xuXG4gICAgLy8gKDIpIFJlY3Vyc2Ugb24gZWFjaCBoYWxmLlxuXG4gICAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCBxIC0gMSk7XG4gICAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBxICsgMSwgcik7XG4gIH1cbn1cblxuLyoqXG4gKiBTb3J0IHRoZSBnaXZlbiBhcnJheSBpbi1wbGFjZSB3aXRoIHRoZSBnaXZlbiBjb21wYXJhdG9yIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIEFuIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJhdG9yXG4gKiAgICAgICAgRnVuY3Rpb24gdG8gdXNlIHRvIGNvbXBhcmUgdHdvIGl0ZW1zLlxuICovXG5leHBvcnRzLnF1aWNrU29ydCA9IGZ1bmN0aW9uIChhcnksIGNvbXBhcmF0b3IpIHtcbiAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCAwLCBhcnkubGVuZ3RoIC0gMSk7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIGJpbmFyeVNlYXJjaCA9IHJlcXVpcmUoJy4vYmluYXJ5LXNlYXJjaCcpO1xudmFyIEFycmF5U2V0ID0gcmVxdWlyZSgnLi9hcnJheS1zZXQnKS5BcnJheVNldDtcbnZhciBiYXNlNjRWTFEgPSByZXF1aXJlKCcuL2Jhc2U2NC12bHEnKTtcbnZhciBxdWlja1NvcnQgPSByZXF1aXJlKCcuL3F1aWNrLXNvcnQnKS5xdWlja1NvcnQ7XG5cbmZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gIH1cblxuICByZXR1cm4gc291cmNlTWFwLnNlY3Rpb25zICE9IG51bGxcbiAgICA/IG5ldyBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIoc291cmNlTWFwLCBhU291cmNlTWFwVVJMKVxuICAgIDogbmV3IEJhc2ljU291cmNlTWFwQ29uc3VtZXIoc291cmNlTWFwLCBhU291cmNlTWFwVVJMKTtcbn1cblxuU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcCA9IGZ1bmN0aW9uKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgcmV0dXJuIEJhc2ljU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcChhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKTtcbn1cblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8vIGBfX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmQgYF9fb3JpZ2luYWxNYXBwaW5nc2AgYXJlIGFycmF5cyB0aGF0IGhvbGQgdGhlXG4vLyBwYXJzZWQgbWFwcGluZyBjb29yZGluYXRlcyBmcm9tIHRoZSBzb3VyY2UgbWFwJ3MgXCJtYXBwaW5nc1wiIGF0dHJpYnV0ZS4gVGhleVxuLy8gYXJlIGxhemlseSBpbnN0YW50aWF0ZWQsIGFjY2Vzc2VkIHZpYSB0aGUgYF9nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4vLyBgX29yaWdpbmFsTWFwcGluZ3NgIGdldHRlcnMgcmVzcGVjdGl2ZWx5LCBhbmQgd2Ugb25seSBwYXJzZSB0aGUgbWFwcGluZ3Ncbi8vIGFuZCBjcmVhdGUgdGhlc2UgYXJyYXlzIG9uY2UgcXVlcmllZCBmb3IgYSBzb3VyY2UgbG9jYXRpb24uIFdlIGp1bXAgdGhyb3VnaFxuLy8gdGhlc2UgaG9vcHMgYmVjYXVzZSB0aGVyZSBjYW4gYmUgbWFueSB0aG91c2FuZHMgb2YgbWFwcGluZ3MsIGFuZCBwYXJzaW5nXG4vLyB0aGVtIGlzIGV4cGVuc2l2ZSwgc28gd2Ugb25seSB3YW50IHRvIGRvIGl0IGlmIHdlIG11c3QuXG4vL1xuLy8gRWFjaCBvYmplY3QgaW4gdGhlIGFycmF5cyBpcyBvZiB0aGUgZm9ybTpcbi8vXG4vLyAgICAge1xuLy8gICAgICAgZ2VuZXJhdGVkTGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIGdlbmVyYXRlZENvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgc291cmNlOiBUaGUgcGF0aCB0byB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGUgdGhhdCBnZW5lcmF0ZWQgdGhpc1xuLy8gICAgICAgICAgICAgICBjaHVuayBvZiBjb2RlLFxuLy8gICAgICAgb3JpZ2luYWxMaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSB0aGF0XG4vLyAgICAgICAgICAgICAgICAgICAgIGNvcnJlc3BvbmRzIHRvIHRoaXMgY2h1bmsgb2YgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBvcmlnaW5hbENvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSB0aGF0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIG5hbWU6IFRoZSBuYW1lIG9mIHRoZSBvcmlnaW5hbCBzeW1ib2wgd2hpY2ggZ2VuZXJhdGVkIHRoaXMgY2h1bmsgb2Zcbi8vICAgICAgICAgICAgIGNvZGUuXG4vLyAgICAgfVxuLy9cbi8vIEFsbCBwcm9wZXJ0aWVzIGV4Y2VwdCBmb3IgYGdlbmVyYXRlZExpbmVgIGFuZCBgZ2VuZXJhdGVkQ29sdW1uYCBjYW4gYmVcbi8vIGBudWxsYC5cbi8vXG4vLyBgX2dlbmVyYXRlZE1hcHBpbmdzYCBpcyBvcmRlcmVkIGJ5IHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zLlxuLy9cbi8vIGBfb3JpZ2luYWxNYXBwaW5nc2AgaXMgb3JkZXJlZCBieSB0aGUgb3JpZ2luYWwgcG9zaXRpb25zLlxuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IG51bGw7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnX2dlbmVyYXRlZE1hcHBpbmdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzKSB7XG4gICAgICB0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLCB0aGlzLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gIH1cbn0pO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX19vcmlnaW5hbE1hcHBpbmdzID0gbnVsbDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdfb3JpZ2luYWxNYXBwaW5ncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX19vcmlnaW5hbE1hcHBpbmdzKSB7XG4gICAgICB0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLCB0aGlzLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncztcbiAgfVxufSk7XG5cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fY2hhcklzTWFwcGluZ1NlcGFyYXRvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IoYVN0ciwgaW5kZXgpIHtcbiAgICB2YXIgYyA9IGFTdHIuY2hhckF0KGluZGV4KTtcbiAgICByZXR1cm4gYyA9PT0gXCI7XCIgfHwgYyA9PT0gXCIsXCI7XG4gIH07XG5cbi8qKlxuICogUGFyc2UgdGhlIG1hcHBpbmdzIGluIGEgc3RyaW5nIGluIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggd2UgY2FuIGVhc2lseVxuICogcXVlcnkgKHRoZSBvcmRlcmVkIGFycmF5cyBpbiB0aGUgYHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3ViY2xhc3NlcyBtdXN0IGltcGxlbWVudCBfcGFyc2VNYXBwaW5nc1wiKTtcbiAgfTtcblxuU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSID0gMTtcblNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSID0gMjtcblxuU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQgPSAxO1xuU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQgPSAyO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBlYWNoIG1hcHBpbmcgYmV0d2VlbiBhbiBvcmlnaW5hbCBzb3VyY2UvbGluZS9jb2x1bW4gYW5kIGFcbiAqIGdlbmVyYXRlZCBsaW5lL2NvbHVtbiBpbiB0aGlzIHNvdXJjZSBtYXAuXG4gKlxuICogQHBhcmFtIEZ1bmN0aW9uIGFDYWxsYmFja1xuICogICAgICAgIFRoZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aXRoIGVhY2ggbWFwcGluZy5cbiAqIEBwYXJhbSBPYmplY3QgYUNvbnRleHRcbiAqICAgICAgICBPcHRpb25hbC4gSWYgc3BlY2lmaWVkLCB0aGlzIG9iamVjdCB3aWxsIGJlIHRoZSB2YWx1ZSBvZiBgdGhpc2AgZXZlcnlcbiAqICAgICAgICB0aW1lIHRoYXQgYGFDYWxsYmFja2AgaXMgY2FsbGVkLlxuICogQHBhcmFtIGFPcmRlclxuICogICAgICAgIEVpdGhlciBgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSYCBvclxuICogICAgICAgIGBTb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUmAuIFNwZWNpZmllcyB3aGV0aGVyIHlvdSB3YW50IHRvXG4gKiAgICAgICAgaXRlcmF0ZSBvdmVyIHRoZSBtYXBwaW5ncyBzb3J0ZWQgYnkgdGhlIGdlbmVyYXRlZCBmaWxlJ3MgbGluZS9jb2x1bW5cbiAqICAgICAgICBvcmRlciBvciB0aGUgb3JpZ2luYWwncyBzb3VyY2UvbGluZS9jb2x1bW4gb3JkZXIsIHJlc3BlY3RpdmVseS4gRGVmYXVsdHMgdG9cbiAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSYC5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmVhY2hNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZWFjaE1hcHBpbmcoYUNhbGxiYWNrLCBhQ29udGV4dCwgYU9yZGVyKSB7XG4gICAgdmFyIGNvbnRleHQgPSBhQ29udGV4dCB8fCBudWxsO1xuICAgIHZhciBvcmRlciA9IGFPcmRlciB8fCBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVI7XG5cbiAgICB2YXIgbWFwcGluZ3M7XG4gICAgc3dpdGNoIChvcmRlcikge1xuICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSOlxuICAgICAgbWFwcGluZ3MgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVI6XG4gICAgICBtYXBwaW5ncyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3M7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBvcmRlciBvZiBpdGVyYXRpb24uXCIpO1xuICAgIH1cblxuICAgIHZhciBzb3VyY2VSb290ID0gdGhpcy5zb3VyY2VSb290O1xuICAgIG1hcHBpbmdzLm1hcChmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgdmFyIHNvdXJjZSA9IG1hcHBpbmcuc291cmNlID09PSBudWxsID8gbnVsbCA6IHRoaXMuX3NvdXJjZXMuYXQobWFwcGluZy5zb3VyY2UpO1xuICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHNvdXJjZSwgdGhpcy5fc291cmNlTWFwVVJMKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICBnZW5lcmF0ZWRMaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgIGdlbmVyYXRlZENvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4sXG4gICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgIG9yaWdpbmFsQ29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICBuYW1lOiBtYXBwaW5nLm5hbWUgPT09IG51bGwgPyBudWxsIDogdGhpcy5fbmFtZXMuYXQobWFwcGluZy5uYW1lKVxuICAgICAgfTtcbiAgICB9LCB0aGlzKS5mb3JFYWNoKGFDYWxsYmFjaywgY29udGV4dCk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyBhbGwgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAqIGxpbmUsIGFuZCBjb2x1bW4gcHJvdmlkZWQuIElmIG5vIGNvbHVtbiBpcyBwcm92aWRlZCwgcmV0dXJucyBhbGwgbWFwcGluZ3NcbiAqIGNvcnJlc3BvbmRpbmcgdG8gYSBlaXRoZXIgdGhlIGxpbmUgd2UgYXJlIHNlYXJjaGluZyBmb3Igb3IgdGhlIG5leHRcbiAqIGNsb3Nlc3QgbGluZSB0aGF0IGhhcyBhbnkgbWFwcGluZ3MuIE90aGVyd2lzZSwgcmV0dXJucyBhbGwgbWFwcGluZ3NcbiAqIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIGxpbmUgYW5kIGVpdGhlciB0aGUgY29sdW1uIHdlIGFyZSBzZWFyY2hpbmcgZm9yXG4gKiBvciB0aGUgbmV4dCBjbG9zZXN0IGNvbHVtbiB0aGF0IGhhcyBhbnkgb2Zmc2V0cy5cbiAqXG4gKiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IE9wdGlvbmFsLiB0aGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqXG4gKiBhbmQgYW4gYXJyYXkgb2Ygb2JqZWN0cyBpcyByZXR1cm5lZCwgZWFjaCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yKGFBcmdzKSB7XG4gICAgdmFyIGxpbmUgPSB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKTtcblxuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gZXhhY3QgbWF0Y2gsIEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9maW5kTWFwcGluZ1xuICAgIC8vIHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBjbG9zZXN0IG1hcHBpbmcgbGVzcyB0aGFuIHRoZSBuZWVkbGUuIEJ5XG4gICAgLy8gc2V0dGluZyBuZWVkbGUub3JpZ2luYWxDb2x1bW4gdG8gMCwgd2UgdGh1cyBmaW5kIHRoZSBsYXN0IG1hcHBpbmcgZm9yXG4gICAgLy8gdGhlIGdpdmVuIGxpbmUsIHByb3ZpZGVkIHN1Y2ggYSBtYXBwaW5nIGV4aXN0cy5cbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgc291cmNlOiB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpLFxuICAgICAgb3JpZ2luYWxMaW5lOiBsaW5lLFxuICAgICAgb3JpZ2luYWxDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJywgMClcbiAgICB9O1xuXG4gICAgbmVlZGxlLnNvdXJjZSA9IHRoaXMuX2ZpbmRTb3VyY2VJbmRleChuZWVkbGUuc291cmNlKTtcbiAgICBpZiAobmVlZGxlLnNvdXJjZSA8IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgbWFwcGluZ3MgPSBbXTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKG5lZWRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZ2luYWxMaW5lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hbENvbHVtblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgaWYgKGFBcmdzLmNvbHVtbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZTtcblxuICAgICAgICAvLyBJdGVyYXRlIHVudGlsIGVpdGhlciB3ZSBydW4gb3V0IG9mIG1hcHBpbmdzLCBvciB3ZSBydW4gaW50b1xuICAgICAgICAvLyBhIG1hcHBpbmcgZm9yIGEgZGlmZmVyZW50IGxpbmUgdGhhbiB0aGUgb25lIHdlIGZvdW5kLiBTaW5jZVxuICAgICAgICAvLyBtYXBwaW5ncyBhcmUgc29ydGVkLCB0aGlzIGlzIGd1YXJhbnRlZWQgdG8gZmluZCBhbGwgbWFwcGluZ3MgZm9yXG4gICAgICAgIC8vIHRoZSBsaW5lIHdlIGZvdW5kLlxuICAgICAgICB3aGlsZSAobWFwcGluZyAmJiBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gb3JpZ2luYWxMaW5lKSB7XG4gICAgICAgICAgbWFwcGluZ3MucHVzaCh7XG4gICAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICAvLyBJdGVyYXRlIHVudGlsIGVpdGhlciB3ZSBydW4gb3V0IG9mIG1hcHBpbmdzLCBvciB3ZSBydW4gaW50b1xuICAgICAgICAvLyBhIG1hcHBpbmcgZm9yIGEgZGlmZmVyZW50IGxpbmUgdGhhbiB0aGUgb25lIHdlIHdlcmUgc2VhcmNoaW5nIGZvci5cbiAgICAgICAgLy8gU2luY2UgbWFwcGluZ3MgYXJlIHNvcnRlZCwgdGhpcyBpcyBndWFyYW50ZWVkIHRvIGZpbmQgYWxsIG1hcHBpbmdzIGZvclxuICAgICAgICAvLyB0aGUgbGluZSB3ZSBhcmUgc2VhcmNoaW5nIGZvci5cbiAgICAgICAgd2hpbGUgKG1hcHBpbmcgJiZcbiAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSBsaW5lICYmXG4gICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID09IG9yaWdpbmFsQ29sdW1uKSB7XG4gICAgICAgICAgbWFwcGluZ3MucHVzaCh7XG4gICAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXBwaW5ncztcbiAgfTtcblxuZXhwb3J0cy5Tb3VyY2VNYXBDb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIEEgQmFzaWNTb3VyY2VNYXBDb25zdW1lciBpbnN0YW5jZSByZXByZXNlbnRzIGEgcGFyc2VkIHNvdXJjZSBtYXAgd2hpY2ggd2UgY2FuXG4gKiBxdWVyeSBmb3IgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGZpbGUgcG9zaXRpb25zIGJ5IGdpdmluZyBpdCBhIGZpbGVcbiAqIHBvc2l0aW9uIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICpcbiAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgdGhlIHJhdyBzb3VyY2UgbWFwIChlaXRoZXIgYXMgYSBKU09OIHN0cmluZywgb3JcbiAqIGFscmVhZHkgcGFyc2VkIHRvIGFuIG9iamVjdCkuIEFjY29yZGluZyB0byB0aGUgc3BlYywgc291cmNlIG1hcHMgaGF2ZSB0aGVcbiAqIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICpcbiAqICAgLSB2ZXJzaW9uOiBXaGljaCB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwIHNwZWMgdGhpcyBtYXAgaXMgZm9sbG93aW5nLlxuICogICAtIHNvdXJjZXM6IEFuIGFycmF5IG9mIFVSTHMgdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlcy5cbiAqICAgLSBuYW1lczogQW4gYXJyYXkgb2YgaWRlbnRpZmllcnMgd2hpY2ggY2FuIGJlIHJlZmVycmVuY2VkIGJ5IGluZGl2aWR1YWwgbWFwcGluZ3MuXG4gKiAgIC0gc291cmNlUm9vdDogT3B0aW9uYWwuIFRoZSBVUkwgcm9vdCBmcm9tIHdoaWNoIGFsbCBzb3VyY2VzIGFyZSByZWxhdGl2ZS5cbiAqICAgLSBzb3VyY2VzQ29udGVudDogT3B0aW9uYWwuIEFuIGFycmF5IG9mIGNvbnRlbnRzIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gKiAgIC0gbWFwcGluZ3M6IEEgc3RyaW5nIG9mIGJhc2U2NCBWTFFzIHdoaWNoIGNvbnRhaW4gdGhlIGFjdHVhbCBtYXBwaW5ncy5cbiAqICAgLSBmaWxlOiBPcHRpb25hbC4gVGhlIGdlbmVyYXRlZCBmaWxlIHRoaXMgc291cmNlIG1hcCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKlxuICogSGVyZSBpcyBhbiBleGFtcGxlIHNvdXJjZSBtYXAsIHRha2VuIGZyb20gdGhlIHNvdXJjZSBtYXAgc3BlY1swXTpcbiAqXG4gKiAgICAge1xuICogICAgICAgdmVyc2lvbiA6IDMsXG4gKiAgICAgICBmaWxlOiBcIm91dC5qc1wiLFxuICogICAgICAgc291cmNlUm9vdCA6IFwiXCIsXG4gKiAgICAgICBzb3VyY2VzOiBbXCJmb28uanNcIiwgXCJiYXIuanNcIl0sXG4gKiAgICAgICBuYW1lczogW1wic3JjXCIsIFwibWFwc1wiLCBcImFyZVwiLCBcImZ1blwiXSxcbiAqICAgICAgIG1hcHBpbmdzOiBcIkFBLEFCOztBQkNERTtcIlxuICogICAgIH1cbiAqXG4gKiBUaGUgc2Vjb25kIHBhcmFtZXRlciwgaWYgZ2l2ZW4sIGlzIGEgc3RyaW5nIHdob3NlIHZhbHVlIGlzIHRoZSBVUkxcbiAqIGF0IHdoaWNoIHRoZSBzb3VyY2UgbWFwIHdhcyBmb3VuZC4gIFRoaXMgVVJMIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGVcbiAqIHNvdXJjZXMgYXJyYXkuXG4gKlxuICogWzBdOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFVMVJHQWVoUXdSeXBVVG92RjFLUmxwaU9GemUwYi1fMmdjNmZBSDBLWTBrL2VkaXQ/cGxpPTEjXG4gKi9cbmZ1bmN0aW9uIEJhc2ljU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgaWYgKHR5cGVvZiBhU291cmNlTWFwID09PSAnc3RyaW5nJykge1xuICAgIHNvdXJjZU1hcCA9IHV0aWwucGFyc2VTb3VyY2VNYXBJbnB1dChhU291cmNlTWFwKTtcbiAgfVxuXG4gIHZhciB2ZXJzaW9uID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAndmVyc2lvbicpO1xuICB2YXIgc291cmNlcyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZXMnKTtcbiAgLy8gU2FzcyAzLjMgbGVhdmVzIG91dCB0aGUgJ25hbWVzJyBhcnJheSwgc28gd2UgZGV2aWF0ZSBmcm9tIHRoZSBzcGVjICh3aGljaFxuICAvLyByZXF1aXJlcyB0aGUgYXJyYXkpIHRvIHBsYXkgbmljZSBoZXJlLlxuICB2YXIgbmFtZXMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICduYW1lcycsIFtdKTtcbiAgdmFyIHNvdXJjZVJvb3QgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VSb290JywgbnVsbCk7XG4gIHZhciBzb3VyY2VzQ29udGVudCA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZXNDb250ZW50JywgbnVsbCk7XG4gIHZhciBtYXBwaW5ncyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ21hcHBpbmdzJyk7XG4gIHZhciBmaWxlID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnZmlsZScsIG51bGwpO1xuXG4gIC8vIE9uY2UgYWdhaW4sIFNhc3MgZGV2aWF0ZXMgZnJvbSB0aGUgc3BlYyBhbmQgc3VwcGxpZXMgdGhlIHZlcnNpb24gYXMgYVxuICAvLyBzdHJpbmcgcmF0aGVyIHRoYW4gYSBudW1iZXIsIHNvIHdlIHVzZSBsb29zZSBlcXVhbGl0eSBjaGVja2luZyBoZXJlLlxuICBpZiAodmVyc2lvbiAhPSB0aGlzLl92ZXJzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB2ZXJzaW9uOiAnICsgdmVyc2lvbik7XG4gIH1cblxuICBpZiAoc291cmNlUm9vdCkge1xuICAgIHNvdXJjZVJvb3QgPSB1dGlsLm5vcm1hbGl6ZShzb3VyY2VSb290KTtcbiAgfVxuXG4gIHNvdXJjZXMgPSBzb3VyY2VzXG4gICAgLm1hcChTdHJpbmcpXG4gICAgLy8gU29tZSBzb3VyY2UgbWFwcyBwcm9kdWNlIHJlbGF0aXZlIHNvdXJjZSBwYXRocyBsaWtlIFwiLi9mb28uanNcIiBpbnN0ZWFkIG9mXG4gICAgLy8gXCJmb28uanNcIi4gIE5vcm1hbGl6ZSB0aGVzZSBmaXJzdCBzbyB0aGF0IGZ1dHVyZSBjb21wYXJpc29ucyB3aWxsIHN1Y2NlZWQuXG4gICAgLy8gU2VlIGJ1Z3ppbC5sYS8xMDkwNzY4LlxuICAgIC5tYXAodXRpbC5ub3JtYWxpemUpXG4gICAgLy8gQWx3YXlzIGVuc3VyZSB0aGF0IGFic29sdXRlIHNvdXJjZXMgYXJlIGludGVybmFsbHkgc3RvcmVkIHJlbGF0aXZlIHRvXG4gICAgLy8gdGhlIHNvdXJjZSByb290LCBpZiB0aGUgc291cmNlIHJvb3QgaXMgYWJzb2x1dGUuIE5vdCBkb2luZyB0aGlzIHdvdWxkXG4gICAgLy8gYmUgcGFydGljdWxhcmx5IHByb2JsZW1hdGljIHdoZW4gdGhlIHNvdXJjZSByb290IGlzIGEgcHJlZml4IG9mIHRoZVxuICAgIC8vIHNvdXJjZSAodmFsaWQsIGJ1dCB3aHk/PykuIFNlZSBnaXRodWIgaXNzdWUgIzE5OSBhbmQgYnVnemlsLmxhLzExODg5ODIuXG4gICAgLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlUm9vdCAmJiB1dGlsLmlzQWJzb2x1dGUoc291cmNlUm9vdCkgJiYgdXRpbC5pc0Fic29sdXRlKHNvdXJjZSlcbiAgICAgICAgPyB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZSlcbiAgICAgICAgOiBzb3VyY2U7XG4gICAgfSk7XG5cbiAgLy8gUGFzcyBgdHJ1ZWAgYmVsb3cgdG8gYWxsb3cgZHVwbGljYXRlIG5hbWVzIGFuZCBzb3VyY2VzLiBXaGlsZSBzb3VyY2UgbWFwc1xuICAvLyBhcmUgaW50ZW5kZWQgdG8gYmUgY29tcHJlc3NlZCBhbmQgZGVkdXBsaWNhdGVkLCB0aGUgVHlwZVNjcmlwdCBjb21waWxlclxuICAvLyBzb21ldGltZXMgZ2VuZXJhdGVzIHNvdXJjZSBtYXBzIHdpdGggZHVwbGljYXRlcyBpbiB0aGVtLiBTZWUgR2l0aHViIGlzc3VlXG4gIC8vICM3MiBhbmQgYnVnemlsLmxhLzg4OTQ5Mi5cbiAgdGhpcy5fbmFtZXMgPSBBcnJheVNldC5mcm9tQXJyYXkobmFtZXMubWFwKFN0cmluZyksIHRydWUpO1xuICB0aGlzLl9zb3VyY2VzID0gQXJyYXlTZXQuZnJvbUFycmF5KHNvdXJjZXMsIHRydWUpO1xuXG4gIHRoaXMuX2Fic29sdXRlU291cmNlcyA9IHRoaXMuX3NvdXJjZXMudG9BcnJheSgpLm1hcChmdW5jdGlvbiAocykge1xuICAgIHJldHVybiB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc291cmNlUm9vdCwgcywgYVNvdXJjZU1hcFVSTCk7XG4gIH0pO1xuXG4gIHRoaXMuc291cmNlUm9vdCA9IHNvdXJjZVJvb3Q7XG4gIHRoaXMuc291cmNlc0NvbnRlbnQgPSBzb3VyY2VzQ29udGVudDtcbiAgdGhpcy5fbWFwcGluZ3MgPSBtYXBwaW5ncztcbiAgdGhpcy5fc291cmNlTWFwVVJMID0gYVNvdXJjZU1hcFVSTDtcbiAgdGhpcy5maWxlID0gZmlsZTtcbn1cblxuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSk7XG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gZmluZCB0aGUgaW5kZXggb2YgYSBzb3VyY2UuICBSZXR1cm5zIC0xIGlmIG5vdFxuICogZm91bmQuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9maW5kU291cmNlSW5kZXggPSBmdW5jdGlvbihhU291cmNlKSB7XG4gIHZhciByZWxhdGl2ZVNvdXJjZSA9IGFTb3VyY2U7XG4gIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgIHJlbGF0aXZlU291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIHJlbGF0aXZlU291cmNlKTtcbiAgfVxuXG4gIGlmICh0aGlzLl9zb3VyY2VzLmhhcyhyZWxhdGl2ZVNvdXJjZSkpIHtcbiAgICByZXR1cm4gdGhpcy5fc291cmNlcy5pbmRleE9mKHJlbGF0aXZlU291cmNlKTtcbiAgfVxuXG4gIC8vIE1heWJlIGFTb3VyY2UgaXMgYW4gYWJzb2x1dGUgVVJMIGFzIHJldHVybmVkIGJ5IHxzb3VyY2VzfC4gIEluXG4gIC8vIHRoaXMgY2FzZSB3ZSBjYW4ndCBzaW1wbHkgdW5kbyB0aGUgdHJhbnNmb3JtLlxuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuX2Fic29sdXRlU291cmNlcy5sZW5ndGg7ICsraSkge1xuICAgIGlmICh0aGlzLl9hYnNvbHV0ZVNvdXJjZXNbaV0gPT0gYVNvdXJjZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGZyb20gYSBTb3VyY2VNYXBHZW5lcmF0b3IuXG4gKlxuICogQHBhcmFtIFNvdXJjZU1hcEdlbmVyYXRvciBhU291cmNlTWFwXG4gKiAgICAgICAgVGhlIHNvdXJjZSBtYXAgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuICogQHBhcmFtIFN0cmluZyBhU291cmNlTWFwVVJMXG4gKiAgICAgICAgVGhlIFVSTCBhdCB3aGljaCB0aGUgc291cmNlIG1hcCBjYW4gYmUgZm91bmQgKG9wdGlvbmFsKVxuICogQHJldHVybnMgQmFzaWNTb3VyY2VNYXBDb25zdW1lclxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9mcm9tU291cmNlTWFwKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgICB2YXIgc21jID0gT2JqZWN0LmNyZWF0ZShCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSk7XG5cbiAgICB2YXIgbmFtZXMgPSBzbWMuX25hbWVzID0gQXJyYXlTZXQuZnJvbUFycmF5KGFTb3VyY2VNYXAuX25hbWVzLnRvQXJyYXkoKSwgdHJ1ZSk7XG4gICAgdmFyIHNvdXJjZXMgPSBzbWMuX3NvdXJjZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoYVNvdXJjZU1hcC5fc291cmNlcy50b0FycmF5KCksIHRydWUpO1xuICAgIHNtYy5zb3VyY2VSb290ID0gYVNvdXJjZU1hcC5fc291cmNlUm9vdDtcbiAgICBzbWMuc291cmNlc0NvbnRlbnQgPSBhU291cmNlTWFwLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KHNtYy5fc291cmNlcy50b0FycmF5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbWMuc291cmNlUm9vdCk7XG4gICAgc21jLmZpbGUgPSBhU291cmNlTWFwLl9maWxlO1xuICAgIHNtYy5fc291cmNlTWFwVVJMID0gYVNvdXJjZU1hcFVSTDtcbiAgICBzbWMuX2Fic29sdXRlU291cmNlcyA9IHNtYy5fc291cmNlcy50b0FycmF5KCkubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gdXRpbC5jb21wdXRlU291cmNlVVJMKHNtYy5zb3VyY2VSb290LCBzLCBhU291cmNlTWFwVVJMKTtcbiAgICB9KTtcblxuICAgIC8vIEJlY2F1c2Ugd2UgYXJlIG1vZGlmeWluZyB0aGUgZW50cmllcyAoYnkgY29udmVydGluZyBzdHJpbmcgc291cmNlcyBhbmRcbiAgICAvLyBuYW1lcyB0byBpbmRpY2VzIGludG8gdGhlIHNvdXJjZXMgYW5kIG5hbWVzIEFycmF5U2V0cyksIHdlIGhhdmUgdG8gbWFrZVxuICAgIC8vIGEgY29weSBvZiB0aGUgZW50cnkgb3IgZWxzZSBiYWQgdGhpbmdzIGhhcHBlbi4gU2hhcmVkIG11dGFibGUgc3RhdGVcbiAgICAvLyBzdHJpa2VzIGFnYWluISBTZWUgZ2l0aHViIGlzc3VlICMxOTEuXG5cbiAgICB2YXIgZ2VuZXJhdGVkTWFwcGluZ3MgPSBhU291cmNlTWFwLl9tYXBwaW5ncy50b0FycmF5KCkuc2xpY2UoKTtcbiAgICB2YXIgZGVzdEdlbmVyYXRlZE1hcHBpbmdzID0gc21jLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICB2YXIgZGVzdE9yaWdpbmFsTWFwcGluZ3MgPSBzbWMuX19vcmlnaW5hbE1hcHBpbmdzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzcmNNYXBwaW5nID0gZ2VuZXJhdGVkTWFwcGluZ3NbaV07XG4gICAgICB2YXIgZGVzdE1hcHBpbmcgPSBuZXcgTWFwcGluZztcbiAgICAgIGRlc3RNYXBwaW5nLmdlbmVyYXRlZExpbmUgPSBzcmNNYXBwaW5nLmdlbmVyYXRlZExpbmU7XG4gICAgICBkZXN0TWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gPSBzcmNNYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgaWYgKHNyY01hcHBpbmcuc291cmNlKSB7XG4gICAgICAgIGRlc3RNYXBwaW5nLnNvdXJjZSA9IHNvdXJjZXMuaW5kZXhPZihzcmNNYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIGRlc3RNYXBwaW5nLm9yaWdpbmFsTGluZSA9IHNyY01hcHBpbmcub3JpZ2luYWxMaW5lO1xuICAgICAgICBkZXN0TWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IHNyY01hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgaWYgKHNyY01hcHBpbmcubmFtZSkge1xuICAgICAgICAgIGRlc3RNYXBwaW5nLm5hbWUgPSBuYW1lcy5pbmRleE9mKHNyY01hcHBpbmcubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0T3JpZ2luYWxNYXBwaW5ncy5wdXNoKGRlc3RNYXBwaW5nKTtcbiAgICAgIH1cblxuICAgICAgZGVzdEdlbmVyYXRlZE1hcHBpbmdzLnB1c2goZGVzdE1hcHBpbmcpO1xuICAgIH1cblxuICAgIHF1aWNrU29ydChzbWMuX19vcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcblxuICAgIHJldHVybiBzbWM7XG4gIH07XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogVGhlIGxpc3Qgb2Ygb3JpZ2luYWwgc291cmNlcy5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnc291cmNlcycsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Fic29sdXRlU291cmNlcy5zbGljZSgpO1xuICB9XG59KTtcblxuLyoqXG4gKiBQcm92aWRlIHRoZSBKSVQgd2l0aCBhIG5pY2Ugc2hhcGUgLyBoaWRkZW4gY2xhc3MuXG4gKi9cbmZ1bmN0aW9uIE1hcHBpbmcoKSB7XG4gIHRoaXMuZ2VuZXJhdGVkTGluZSA9IDA7XG4gIHRoaXMuZ2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICB0aGlzLm9yaWdpbmFsTGluZSA9IG51bGw7XG4gIHRoaXMub3JpZ2luYWxDb2x1bW4gPSBudWxsO1xuICB0aGlzLm5hbWUgPSBudWxsO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgdmFyIGdlbmVyYXRlZExpbmUgPSAxO1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gMDtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzU291cmNlID0gMDtcbiAgICB2YXIgcHJldmlvdXNOYW1lID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYVN0ci5sZW5ndGg7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY2FjaGVkU2VnbWVudHMgPSB7fTtcbiAgICB2YXIgdGVtcCA9IHt9O1xuICAgIHZhciBvcmlnaW5hbE1hcHBpbmdzID0gW107XG4gICAgdmFyIGdlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdmFyIG1hcHBpbmcsIHN0ciwgc2VnbWVudCwgZW5kLCB2YWx1ZTtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFTdHIuY2hhckF0KGluZGV4KSA9PT0gJzsnKSB7XG4gICAgICAgIGdlbmVyYXRlZExpbmUrKztcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYVN0ci5jaGFyQXQoaW5kZXgpID09PSAnLCcpIHtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBtYXBwaW5nID0gbmV3IE1hcHBpbmcoKTtcbiAgICAgICAgbWFwcGluZy5nZW5lcmF0ZWRMaW5lID0gZ2VuZXJhdGVkTGluZTtcblxuICAgICAgICAvLyBCZWNhdXNlIGVhY2ggb2Zmc2V0IGlzIGVuY29kZWQgcmVsYXRpdmUgdG8gdGhlIHByZXZpb3VzIG9uZSxcbiAgICAgICAgLy8gbWFueSBzZWdtZW50cyBvZnRlbiBoYXZlIHRoZSBzYW1lIGVuY29kaW5nLiBXZSBjYW4gZXhwbG9pdCB0aGlzXG4gICAgICAgIC8vIGZhY3QgYnkgY2FjaGluZyB0aGUgcGFyc2VkIHZhcmlhYmxlIGxlbmd0aCBmaWVsZHMgb2YgZWFjaCBzZWdtZW50LFxuICAgICAgICAvLyBhbGxvd2luZyB1cyB0byBhdm9pZCBhIHNlY29uZCBwYXJzZSBpZiB3ZSBlbmNvdW50ZXIgdGhlIHNhbWVcbiAgICAgICAgLy8gc2VnbWVudCBhZ2Fpbi5cbiAgICAgICAgZm9yIChlbmQgPSBpbmRleDsgZW5kIDwgbGVuZ3RoOyBlbmQrKykge1xuICAgICAgICAgIGlmICh0aGlzLl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yKGFTdHIsIGVuZCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdHIgPSBhU3RyLnNsaWNlKGluZGV4LCBlbmQpO1xuXG4gICAgICAgIHNlZ21lbnQgPSBjYWNoZWRTZWdtZW50c1tzdHJdO1xuICAgICAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICAgIGluZGV4ICs9IHN0ci5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VnbWVudCA9IFtdO1xuICAgICAgICAgIHdoaWxlIChpbmRleCA8IGVuZCkge1xuICAgICAgICAgICAgYmFzZTY0VkxRLmRlY29kZShhU3RyLCBpbmRleCwgdGVtcCk7XG4gICAgICAgICAgICB2YWx1ZSA9IHRlbXAudmFsdWU7XG4gICAgICAgICAgICBpbmRleCA9IHRlbXAucmVzdDtcbiAgICAgICAgICAgIHNlZ21lbnQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIGEgc291cmNlLCBidXQgbm8gbGluZSBhbmQgY29sdW1uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIGEgc291cmNlIGFuZCBsaW5lLCBidXQgbm8gY29sdW1uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2FjaGVkU2VnbWVudHNbc3RyXSA9IHNlZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZW5lcmF0ZWQgY29sdW1uLlxuICAgICAgICBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiA9IHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uICsgc2VnbWVudFswXTtcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgLy8gT3JpZ2luYWwgc291cmNlLlxuICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gcHJldmlvdXNTb3VyY2UgKyBzZWdtZW50WzFdO1xuICAgICAgICAgIHByZXZpb3VzU291cmNlICs9IHNlZ21lbnRbMV07XG5cbiAgICAgICAgICAvLyBPcmlnaW5hbCBsaW5lLlxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID0gcHJldmlvdXNPcmlnaW5hbExpbmUgKyBzZWdtZW50WzJdO1xuICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmU7XG4gICAgICAgICAgLy8gTGluZXMgYXJlIHN0b3JlZCAwLWJhc2VkXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgKz0gMTtcblxuICAgICAgICAgIC8vIE9yaWdpbmFsIGNvbHVtbi5cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gcHJldmlvdXNPcmlnaW5hbENvbHVtbiArIHNlZ21lbnRbM107XG4gICAgICAgICAgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiA0KSB7XG4gICAgICAgICAgICAvLyBPcmlnaW5hbCBuYW1lLlxuICAgICAgICAgICAgbWFwcGluZy5uYW1lID0gcHJldmlvdXNOYW1lICsgc2VnbWVudFs0XTtcbiAgICAgICAgICAgIHByZXZpb3VzTmFtZSArPSBzZWdtZW50WzRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdlbmVyYXRlZE1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgIGlmICh0eXBlb2YgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgb3JpZ2luYWxNYXBwaW5ncy5wdXNoKG1hcHBpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcXVpY2tTb3J0KGdlbmVyYXRlZE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKTtcbiAgICB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBnZW5lcmF0ZWRNYXBwaW5ncztcblxuICAgIHF1aWNrU29ydChvcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcbiAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncyA9IG9yaWdpbmFsTWFwcGluZ3M7XG4gIH07XG5cbi8qKlxuICogRmluZCB0aGUgbWFwcGluZyB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgaHlwb3RoZXRpY2FsIFwibmVlZGxlXCIgbWFwcGluZyB0aGF0XG4gKiB3ZSBhcmUgc2VhcmNoaW5nIGZvciBpbiB0aGUgZ2l2ZW4gXCJoYXlzdGFja1wiIG9mIG1hcHBpbmdzLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZE1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9maW5kTWFwcGluZyhhTmVlZGxlLCBhTWFwcGluZ3MsIGFMaW5lTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYUNvbHVtbk5hbWUsIGFDb21wYXJhdG9yLCBhQmlhcykge1xuICAgIC8vIFRvIHJldHVybiB0aGUgcG9zaXRpb24gd2UgYXJlIHNlYXJjaGluZyBmb3IsIHdlIG11c3QgZmlyc3QgZmluZCB0aGVcbiAgICAvLyBtYXBwaW5nIGZvciB0aGUgZ2l2ZW4gcG9zaXRpb24gYW5kIHRoZW4gcmV0dXJuIHRoZSBvcHBvc2l0ZSBwb3NpdGlvbiBpdFxuICAgIC8vIHBvaW50cyB0by4gQmVjYXVzZSB0aGUgbWFwcGluZ3MgYXJlIHNvcnRlZCwgd2UgY2FuIHVzZSBiaW5hcnkgc2VhcmNoIHRvXG4gICAgLy8gZmluZCB0aGUgYmVzdCBtYXBwaW5nLlxuXG4gICAgaWYgKGFOZWVkbGVbYUxpbmVOYW1lXSA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdMaW5lIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDEsIGdvdCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthTGluZU5hbWVdKTtcbiAgICB9XG4gICAgaWYgKGFOZWVkbGVbYUNvbHVtbk5hbWVdIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29sdW1uIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAsIGdvdCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthQ29sdW1uTmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiBiaW5hcnlTZWFyY2guc2VhcmNoKGFOZWVkbGUsIGFNYXBwaW5ncywgYUNvbXBhcmF0b3IsIGFCaWFzKTtcbiAgfTtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBsYXN0IGNvbHVtbiBmb3IgZWFjaCBnZW5lcmF0ZWQgbWFwcGluZy4gVGhlIGxhc3QgY29sdW1uIGlzXG4gKiBpbmNsdXNpdmUuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmNvbXB1dGVDb2x1bW5TcGFucyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2NvbXB1dGVDb2x1bW5TcGFucygpIHtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgLy8gTWFwcGluZ3MgZG8gbm90IGNvbnRhaW4gYSBmaWVsZCBmb3IgdGhlIGxhc3QgZ2VuZXJhdGVkIGNvbHVtbnQuIFdlXG4gICAgICAvLyBjYW4gY29tZSB1cCB3aXRoIGFuIG9wdGltaXN0aWMgZXN0aW1hdGUsIGhvd2V2ZXIsIGJ5IGFzc3VtaW5nIHRoYXRcbiAgICAgIC8vIG1hcHBpbmdzIGFyZSBjb250aWd1b3VzIChpLmUuIGdpdmVuIHR3byBjb25zZWN1dGl2ZSBtYXBwaW5ncywgdGhlXG4gICAgICAvLyBmaXJzdCBtYXBwaW5nIGVuZHMgd2hlcmUgdGhlIHNlY29uZCBvbmUgc3RhcnRzKS5cbiAgICAgIGlmIChpbmRleCArIDEgPCB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG5leHRNYXBwaW5nID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NbaW5kZXggKyAxXTtcblxuICAgICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lID09PSBuZXh0TWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgbWFwcGluZy5sYXN0R2VuZXJhdGVkQ29sdW1uID0gbmV4dE1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC0gMTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgbGFzdCBtYXBwaW5nIGZvciBlYWNoIGxpbmUgc3BhbnMgdGhlIGVudGlyZSBsaW5lLlxuICAgICAgbWFwcGluZy5sYXN0R2VuZXJhdGVkQ29sdW1uID0gSW5maW5pdHk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSwgbGluZSwgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGdlbmVyYXRlZFxuICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0XG4gKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyXG4gKiAgICAgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGNvbHVtblxuICogICAgIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIGJpYXM6IEVpdGhlciAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ1NvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqICAgICBEZWZhdWx0cyB0byAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlLCBvciBudWxsLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKiAgIC0gbmFtZTogVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIsIG9yIG51bGwuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLm9yaWdpbmFsUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9vcmlnaW5hbFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIGdlbmVyYXRlZExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgZ2VuZXJhdGVkQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgfTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKFxuICAgICAgbmVlZGxlLFxuICAgICAgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MsXG4gICAgICBcImdlbmVyYXRlZExpbmVcIixcbiAgICAgIFwiZ2VuZXJhdGVkQ29sdW1uXCIsXG4gICAgICB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkLFxuICAgICAgdXRpbC5nZXRBcmcoYUFyZ3MsICdiaWFzJywgU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQpXG4gICAgKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9PT0gbmVlZGxlLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdzb3VyY2UnLCBudWxsKTtcbiAgICAgICAgaWYgKHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuYXQoc291cmNlKTtcbiAgICAgICAgICBzb3VyY2UgPSB1dGlsLmNvbXB1dGVTb3VyY2VVUkwodGhpcy5zb3VyY2VSb290LCBzb3VyY2UsIHRoaXMuX3NvdXJjZU1hcFVSTCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5hbWUgPSB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbmFtZScsIG51bGwpO1xuICAgICAgICBpZiAobmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgIG5hbWUgPSB0aGlzLl9uYW1lcy5hdChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdvcmlnaW5hbExpbmUnLCBudWxsKSxcbiAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdvcmlnaW5hbENvbHVtbicsIG51bGwpLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc291cmNlOiBudWxsLFxuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgIG5hbWU6IG51bGxcbiAgICB9O1xuICB9O1xuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHdlIGhhdmUgdGhlIHNvdXJjZSBjb250ZW50IGZvciBldmVyeSBzb3VyY2UgaW4gdGhlIHNvdXJjZVxuICogbWFwLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzID1cbiAgZnVuY3Rpb24gQmFzaWNTb3VyY2VNYXBDb25zdW1lcl9oYXNDb250ZW50c09mQWxsU291cmNlcygpIHtcbiAgICBpZiAoIXRoaXMuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnQubGVuZ3RoID49IHRoaXMuX3NvdXJjZXMuc2l6ZSgpICYmXG4gICAgICAhdGhpcy5zb3VyY2VzQ29udGVudC5zb21lKGZ1bmN0aW9uIChzYykgeyByZXR1cm4gc2MgPT0gbnVsbDsgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlIGNvbnRlbnQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIHRoZSB1cmwgb2YgdGhlXG4gKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gKiBhdmFpbGFibGUuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIG51bGxPbk1pc3NpbmcpIHtcbiAgICBpZiAoIXRoaXMuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRTb3VyY2VJbmRleChhU291cmNlKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbaW5kZXhdO1xuICAgIH1cblxuICAgIHZhciByZWxhdGl2ZVNvdXJjZSA9IGFTb3VyY2U7XG4gICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICByZWxhdGl2ZVNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LCByZWxhdGl2ZVNvdXJjZSk7XG4gICAgfVxuXG4gICAgdmFyIHVybDtcbiAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGxcbiAgICAgICAgJiYgKHVybCA9IHV0aWwudXJsUGFyc2UodGhpcy5zb3VyY2VSb290KSkpIHtcbiAgICAgIC8vIFhYWDogZmlsZTovLyBVUklzIGFuZCBhYnNvbHV0ZSBwYXRocyBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IgZm9yXG4gICAgICAvLyBtYW55IHVzZXJzLiBXZSBjYW4gaGVscCB0aGVtIG91dCB3aGVuIHRoZXkgZXhwZWN0IGZpbGU6Ly8gVVJJcyB0b1xuICAgICAgLy8gYmVoYXZlIGxpa2UgaXQgd291bGQgaWYgdGhleSB3ZXJlIHJ1bm5pbmcgYSBsb2NhbCBIVFRQIHNlcnZlci4gU2VlXG4gICAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04ODU1OTcuXG4gICAgICB2YXIgZmlsZVVyaUFic1BhdGggPSByZWxhdGl2ZVNvdXJjZS5yZXBsYWNlKC9eZmlsZTpcXC9cXC8vLCBcIlwiKTtcbiAgICAgIGlmICh1cmwuc2NoZW1lID09IFwiZmlsZVwiXG4gICAgICAgICAgJiYgdGhpcy5fc291cmNlcy5oYXMoZmlsZVVyaUFic1BhdGgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihmaWxlVXJpQWJzUGF0aCldXG4gICAgICB9XG5cbiAgICAgIGlmICgoIXVybC5wYXRoIHx8IHVybC5wYXRoID09IFwiL1wiKVxuICAgICAgICAgICYmIHRoaXMuX3NvdXJjZXMuaGFzKFwiL1wiICsgcmVsYXRpdmVTb3VyY2UpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihcIi9cIiArIHJlbGF0aXZlU291cmNlKV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHJlY3Vyc2l2ZWx5IGZyb21cbiAgICAvLyBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IuIEluIHRoYXQgY2FzZSwgd2VcbiAgICAvLyBkb24ndCB3YW50IHRvIHRocm93IGlmIHdlIGNhbid0IGZpbmQgdGhlIHNvdXJjZSAtIHdlIGp1c3Qgd2FudCB0b1xuICAgIC8vIHJldHVybiBudWxsLCBzbyB3ZSBwcm92aWRlIGEgZmxhZyB0byBleGl0IGdyYWNlZnVsbHkuXG4gICAgaWYgKG51bGxPbk1pc3NpbmcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgcmVsYXRpdmVTb3VyY2UgKyAnXCIgaXMgbm90IGluIHRoZSBTb3VyY2VNYXAuJyk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gKiBsaW5lLCBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGhcbiAqIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGNvbHVtblxuICogICAgIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIGJpYXM6IEVpdGhlciAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ1NvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqICAgICBEZWZhdWx0cyB0byAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5nZW5lcmF0ZWRQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2dlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJyk7XG4gICAgc291cmNlID0gdGhpcy5fZmluZFNvdXJjZUluZGV4KHNvdXJjZSk7XG4gICAgaWYgKHNvdXJjZSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgICAgbGFzdENvbHVtbjogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBvcmlnaW5hbExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgb3JpZ2luYWxDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICB9O1xuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcoXG4gICAgICBuZWVkbGUsXG4gICAgICB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzLFxuICAgICAgXCJvcmlnaW5hbExpbmVcIixcbiAgICAgIFwib3JpZ2luYWxDb2x1bW5cIixcbiAgICAgIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMsXG4gICAgICB1dGlsLmdldEFyZyhhQXJncywgJ2JpYXMnLCBTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORClcbiAgICApO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSA9PT0gbmVlZGxlLnNvdXJjZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRMaW5lJywgbnVsbCksXG4gICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBudWxsLFxuICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgbGFzdENvbHVtbjogbnVsbFxuICAgIH07XG4gIH07XG5cbmV4cG9ydHMuQmFzaWNTb3VyY2VNYXBDb25zdW1lciA9IEJhc2ljU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogQW4gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyIGluc3RhbmNlIHJlcHJlc2VudHMgYSBwYXJzZWQgc291cmNlIG1hcCB3aGljaFxuICogd2UgY2FuIHF1ZXJ5IGZvciBpbmZvcm1hdGlvbi4gSXQgZGlmZmVycyBmcm9tIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgaW5cbiAqIHRoYXQgaXQgdGFrZXMgXCJpbmRleGVkXCIgc291cmNlIG1hcHMgKGkuZS4gb25lcyB3aXRoIGEgXCJzZWN0aW9uc1wiIGZpZWxkKSBhc1xuICogaW5wdXQuXG4gKlxuICogVGhlIGZpcnN0IHBhcmFtZXRlciBpcyBhIHJhdyBzb3VyY2UgbWFwIChlaXRoZXIgYXMgYSBKU09OIHN0cmluZywgb3IgYWxyZWFkeVxuICogcGFyc2VkIHRvIGFuIG9iamVjdCkuIEFjY29yZGluZyB0byB0aGUgc3BlYyBmb3IgaW5kZXhlZCBzb3VyY2UgbWFwcywgdGhleVxuICogaGF2ZSB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gKlxuICogICAtIHZlcnNpb246IFdoaWNoIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXAgc3BlYyB0aGlzIG1hcCBpcyBmb2xsb3dpbmcuXG4gKiAgIC0gZmlsZTogT3B0aW9uYWwuIFRoZSBnZW5lcmF0ZWQgZmlsZSB0aGlzIHNvdXJjZSBtYXAgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICogICAtIHNlY3Rpb25zOiBBIGxpc3Qgb2Ygc2VjdGlvbiBkZWZpbml0aW9ucy5cbiAqXG4gKiBFYWNoIHZhbHVlIHVuZGVyIHRoZSBcInNlY3Rpb25zXCIgZmllbGQgaGFzIHR3byBmaWVsZHM6XG4gKiAgIC0gb2Zmc2V0OiBUaGUgb2Zmc2V0IGludG8gdGhlIG9yaWdpbmFsIHNwZWNpZmllZCBhdCB3aGljaCB0aGlzIHNlY3Rpb25cbiAqICAgICAgIGJlZ2lucyB0byBhcHBseSwgZGVmaW5lZCBhcyBhbiBvYmplY3Qgd2l0aCBhIFwibGluZVwiIGFuZCBcImNvbHVtblwiXG4gKiAgICAgICBmaWVsZC5cbiAqICAgLSBtYXA6IEEgc291cmNlIG1hcCBkZWZpbml0aW9uLiBUaGlzIHNvdXJjZSBtYXAgY291bGQgYWxzbyBiZSBpbmRleGVkLFxuICogICAgICAgYnV0IGRvZXNuJ3QgaGF2ZSB0byBiZS5cbiAqXG4gKiBJbnN0ZWFkIG9mIHRoZSBcIm1hcFwiIGZpZWxkLCBpdCdzIGFsc28gcG9zc2libGUgdG8gaGF2ZSBhIFwidXJsXCIgZmllbGRcbiAqIHNwZWNpZnlpbmcgYSBVUkwgdG8gcmV0cmlldmUgYSBzb3VyY2UgbWFwIGZyb20sIGJ1dCB0aGF0J3MgY3VycmVudGx5XG4gKiB1bnN1cHBvcnRlZC5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBzb3VyY2UgbWFwLCB0YWtlbiBmcm9tIHRoZSBzb3VyY2UgbWFwIHNwZWNbMF0sIGJ1dFxuICogbW9kaWZpZWQgdG8gb21pdCBhIHNlY3Rpb24gd2hpY2ggdXNlcyB0aGUgXCJ1cmxcIiBmaWVsZC5cbiAqXG4gKiAge1xuICogICAgdmVyc2lvbiA6IDMsXG4gKiAgICBmaWxlOiBcImFwcC5qc1wiLFxuICogICAgc2VjdGlvbnM6IFt7XG4gKiAgICAgIG9mZnNldDoge2xpbmU6MTAwLCBjb2x1bW46MTB9LFxuICogICAgICBtYXA6IHtcbiAqICAgICAgICB2ZXJzaW9uIDogMyxcbiAqICAgICAgICBmaWxlOiBcInNlY3Rpb24uanNcIixcbiAqICAgICAgICBzb3VyY2VzOiBbXCJmb28uanNcIiwgXCJiYXIuanNcIl0sXG4gKiAgICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gKiAgICAgICAgbWFwcGluZ3M6IFwiQUFBQSxFOztBQkNERTtcIlxuICogICAgICB9XG4gKiAgICB9XSxcbiAqICB9XG4gKlxuICogVGhlIHNlY29uZCBwYXJhbWV0ZXIsIGlmIGdpdmVuLCBpcyBhIHN0cmluZyB3aG9zZSB2YWx1ZSBpcyB0aGUgVVJMXG4gKiBhdCB3aGljaCB0aGUgc291cmNlIG1hcCB3YXMgZm91bmQuICBUaGlzIFVSTCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlXG4gKiBzb3VyY2VzIGFycmF5LlxuICpcbiAqIFswXTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVTFSR0FlaFF3UnlwVVRvdkYxS1JscGlPRnplMGItXzJnYzZmQUgwS1kway9lZGl0I2hlYWRpbmc9aC41MzVlczN4ZXByZ3RcbiAqL1xuZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gIH1cblxuICB2YXIgdmVyc2lvbiA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3ZlcnNpb24nKTtcbiAgdmFyIHNlY3Rpb25zID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc2VjdGlvbnMnKTtcblxuICBpZiAodmVyc2lvbiAhPSB0aGlzLl92ZXJzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB2ZXJzaW9uOiAnICsgdmVyc2lvbik7XG4gIH1cblxuICB0aGlzLl9zb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX25hbWVzID0gbmV3IEFycmF5U2V0KCk7XG5cbiAgdmFyIGxhc3RPZmZzZXQgPSB7XG4gICAgbGluZTogLTEsXG4gICAgY29sdW1uOiAwXG4gIH07XG4gIHRoaXMuX3NlY3Rpb25zID0gc2VjdGlvbnMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgaWYgKHMudXJsKSB7XG4gICAgICAvLyBUaGUgdXJsIGZpZWxkIHdpbGwgcmVxdWlyZSBzdXBwb3J0IGZvciBhc3luY2hyb25pY2l0eS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2lzc3Vlcy8xNlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdXBwb3J0IGZvciB1cmwgZmllbGQgaW4gc2VjdGlvbnMgbm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cbiAgICB2YXIgb2Zmc2V0ID0gdXRpbC5nZXRBcmcocywgJ29mZnNldCcpO1xuICAgIHZhciBvZmZzZXRMaW5lID0gdXRpbC5nZXRBcmcob2Zmc2V0LCAnbGluZScpO1xuICAgIHZhciBvZmZzZXRDb2x1bW4gPSB1dGlsLmdldEFyZyhvZmZzZXQsICdjb2x1bW4nKTtcblxuICAgIGlmIChvZmZzZXRMaW5lIDwgbGFzdE9mZnNldC5saW5lIHx8XG4gICAgICAgIChvZmZzZXRMaW5lID09PSBsYXN0T2Zmc2V0LmxpbmUgJiYgb2Zmc2V0Q29sdW1uIDwgbGFzdE9mZnNldC5jb2x1bW4pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3Rpb24gb2Zmc2V0cyBtdXN0IGJlIG9yZGVyZWQgYW5kIG5vbi1vdmVybGFwcGluZy4nKTtcbiAgICB9XG4gICAgbGFzdE9mZnNldCA9IG9mZnNldDtcblxuICAgIHJldHVybiB7XG4gICAgICBnZW5lcmF0ZWRPZmZzZXQ6IHtcbiAgICAgICAgLy8gVGhlIG9mZnNldCBmaWVsZHMgYXJlIDAtYmFzZWQsIGJ1dCB3ZSB1c2UgMS1iYXNlZCBpbmRpY2VzIHdoZW5cbiAgICAgICAgLy8gZW5jb2RpbmcvZGVjb2RpbmcgZnJvbSBWTFEuXG4gICAgICAgIGdlbmVyYXRlZExpbmU6IG9mZnNldExpbmUgKyAxLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG9mZnNldENvbHVtbiArIDFcbiAgICAgIH0sXG4gICAgICBjb25zdW1lcjogbmV3IFNvdXJjZU1hcENvbnN1bWVyKHV0aWwuZ2V0QXJnKHMsICdtYXAnKSwgYVNvdXJjZU1hcFVSTClcbiAgICB9XG4gIH0pO1xufVxuXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogVGhlIGxpc3Qgb2Ygb3JpZ2luYWwgc291cmNlcy5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdzb3VyY2VzJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBzb3VyY2VzLnB1c2godGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VzO1xuICB9XG59KTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UsIGxpbmUsIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdFxuICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSwgb3IgbnVsbC5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIG5hbWU6IFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLCBvciBudWxsLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLm9yaWdpbmFsUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfb3JpZ2luYWxQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgIH07XG5cbiAgICAvLyBGaW5kIHRoZSBzZWN0aW9uIGNvbnRhaW5pbmcgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbiB3ZSdyZSB0cnlpbmcgdG8gbWFwXG4gICAgLy8gdG8gYW4gb3JpZ2luYWwgcG9zaXRpb24uXG4gICAgdmFyIHNlY3Rpb25JbmRleCA9IGJpbmFyeVNlYXJjaC5zZWFyY2gobmVlZGxlLCB0aGlzLl9zZWN0aW9ucyxcbiAgICAgIGZ1bmN0aW9uKG5lZWRsZSwgc2VjdGlvbikge1xuICAgICAgICB2YXIgY21wID0gbmVlZGxlLmdlbmVyYXRlZExpbmUgLSBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lO1xuICAgICAgICBpZiAoY21wKSB7XG4gICAgICAgICAgcmV0dXJuIGNtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAobmVlZGxlLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgIH0pO1xuICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbc2VjdGlvbkluZGV4XTtcblxuICAgIGlmICghc2VjdGlvbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlOiBudWxsLFxuICAgICAgICBsaW5lOiBudWxsLFxuICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgIG5hbWU6IG51bGxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlY3Rpb24uY29uc3VtZXIub3JpZ2luYWxQb3NpdGlvbkZvcih7XG4gICAgICBsaW5lOiBuZWVkbGUuZ2VuZXJhdGVkTGluZSAtXG4gICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICBjb2x1bW46IG5lZWRsZS5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSA9PT0gbmVlZGxlLmdlbmVyYXRlZExpbmVcbiAgICAgICAgID8gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uIC0gMVxuICAgICAgICAgOiAwKSxcbiAgICAgIGJpYXM6IGFBcmdzLmJpYXNcbiAgICB9KTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBoYXZlIHRoZSBzb3VyY2UgY29udGVudCBmb3IgZXZlcnkgc291cmNlIGluIHRoZSBzb3VyY2VcbiAqIG1hcCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX2hhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCkge1xuICAgIHJldHVybiB0aGlzLl9zZWN0aW9ucy5ldmVyeShmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHMuY29uc3VtZXIuaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKTtcbiAgICB9KTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29udGVudC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgdGhlIHVybCBvZiB0aGVcbiAqIG9yaWdpbmFsIHNvdXJjZSBmaWxlLiBSZXR1cm5zIG51bGwgaWYgbm8gb3JpZ2luYWwgc291cmNlIGNvbnRlbnQgaXNcbiAqIGF2YWlsYWJsZS5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX3NvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgbnVsbE9uTWlzc2luZykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG5cbiAgICAgIHZhciBjb250ZW50ID0gc2VjdGlvbi5jb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIHRydWUpO1xuICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChudWxsT25NaXNzaW5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFTb3VyY2UgKyAnXCIgaXMgbm90IGluIHRoZSBTb3VyY2VNYXAuJyk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gKiBsaW5lLCBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGhcbiAqIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGNvbHVtblxuICogICAgIG51bWJlciBpcyAwLWJhc2VkLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuIFxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5nZW5lcmF0ZWRQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG5cbiAgICAgIC8vIE9ubHkgY29uc2lkZXIgdGhpcyBzZWN0aW9uIGlmIHRoZSByZXF1ZXN0ZWQgc291cmNlIGlzIGluIHRoZSBsaXN0IG9mXG4gICAgICAvLyBzb3VyY2VzIG9mIHRoZSBjb25zdW1lci5cbiAgICAgIGlmIChzZWN0aW9uLmNvbnN1bWVyLl9maW5kU291cmNlSW5kZXgodXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnKSkgPT09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIGdlbmVyYXRlZFBvc2l0aW9uID0gc2VjdGlvbi5jb25zdW1lci5nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncyk7XG4gICAgICBpZiAoZ2VuZXJhdGVkUG9zaXRpb24pIHtcbiAgICAgICAgdmFyIHJldCA9IHtcbiAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWRQb3NpdGlvbi5saW5lICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWRQb3NpdGlvbi5jb2x1bW4gK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IGdlbmVyYXRlZFBvc2l0aW9uLmxpbmVcbiAgICAgICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgICAgICA6IDApXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGxcbiAgICB9O1xuICB9O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fcGFyc2VNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuICAgICAgdmFyIHNlY3Rpb25NYXBwaW5ncyA9IHNlY3Rpb24uY29uc3VtZXIuX2dlbmVyYXRlZE1hcHBpbmdzO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWN0aW9uTWFwcGluZ3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIG1hcHBpbmcgPSBzZWN0aW9uTWFwcGluZ3Nbal07XG5cbiAgICAgICAgdmFyIHNvdXJjZSA9IHNlY3Rpb24uY29uc3VtZXIuX3NvdXJjZXMuYXQobWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBzb3VyY2UgPSB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc2VjdGlvbi5jb25zdW1lci5zb3VyY2VSb290LCBzb3VyY2UsIHRoaXMuX3NvdXJjZU1hcFVSTCk7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICAgIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihzb3VyY2UpO1xuXG4gICAgICAgIHZhciBuYW1lID0gbnVsbDtcbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSkge1xuICAgICAgICAgIG5hbWUgPSBzZWN0aW9uLmNvbnN1bWVyLl9uYW1lcy5hdChtYXBwaW5nLm5hbWUpO1xuICAgICAgICAgIHRoaXMuX25hbWVzLmFkZChuYW1lKTtcbiAgICAgICAgICBuYW1lID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBtYXBwaW5ncyBjb21pbmcgZnJvbSB0aGUgY29uc3VtZXIgZm9yIHRoZSBzZWN0aW9uIGhhdmVcbiAgICAgICAgLy8gZ2VuZXJhdGVkIHBvc2l0aW9ucyByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIHNlY3Rpb24sIHNvIHdlXG4gICAgICAgIC8vIG5lZWQgdG8gb2Zmc2V0IHRoZW0gdG8gYmUgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBjb25jYXRlbmF0ZWRcbiAgICAgICAgLy8gZ2VuZXJhdGVkIGZpbGUuXG4gICAgICAgIHZhciBhZGp1c3RlZE1hcHBpbmcgPSB7XG4gICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgZ2VuZXJhdGVkTGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSA9PT0gbWFwcGluZy5nZW5lcmF0ZWRMaW5lXG4gICAgICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgICAgIDogMCksXG4gICAgICAgICAgb3JpZ2luYWxMaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBvcmlnaW5hbENvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLnB1c2goYWRqdXN0ZWRNYXBwaW5nKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhZGp1c3RlZE1hcHBpbmcub3JpZ2luYWxMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzLnB1c2goYWRqdXN0ZWRNYXBwaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHF1aWNrU29ydCh0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQpO1xuICAgIHF1aWNrU29ydCh0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gIH07XG5cbmV4cG9ydHMuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyID0gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIEFycmF5U2V0ID0gcmVxdWlyZSgnLi9hcnJheS1zZXQnKS5BcnJheVNldDtcbnZhciBNYXBwaW5nTGlzdCA9IHJlcXVpcmUoJy4vbWFwcGluZy1saXN0JykuTWFwcGluZ0xpc3Q7XG5cbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgdGhlIFNvdXJjZU1hcEdlbmVyYXRvciByZXByZXNlbnRzIGEgc291cmNlIG1hcCB3aGljaCBpc1xuICogYmVpbmcgYnVpbHQgaW5jcmVtZW50YWxseS4gWW91IG1heSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAqIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGZpbGU6IFRoZSBmaWxlbmFtZSBvZiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqICAgLSBzb3VyY2VSb290OiBBIHJvb3QgZm9yIGFsbCByZWxhdGl2ZSBVUkxzIGluIHRoaXMgc291cmNlIG1hcC5cbiAqL1xuZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKSB7XG4gIGlmICghYUFyZ3MpIHtcbiAgICBhQXJncyA9IHt9O1xuICB9XG4gIHRoaXMuX2ZpbGUgPSB1dGlsLmdldEFyZyhhQXJncywgJ2ZpbGUnLCBudWxsKTtcbiAgdGhpcy5fc291cmNlUm9vdCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlUm9vdCcsIG51bGwpO1xuICB0aGlzLl9za2lwVmFsaWRhdGlvbiA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc2tpcFZhbGlkYXRpb24nLCBmYWxzZSk7XG4gIHRoaXMuX3NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgdGhpcy5fbmFtZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgdGhpcy5fbWFwcGluZ3MgPSBuZXcgTWFwcGluZ0xpc3QoKTtcbiAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gbnVsbDtcbn1cblxuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBTb3VyY2VNYXBHZW5lcmF0b3IgYmFzZWQgb24gYSBTb3VyY2VNYXBDb25zdW1lclxuICpcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIFNvdXJjZU1hcC5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLmZyb21Tb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfZnJvbVNvdXJjZU1hcChhU291cmNlTWFwQ29uc3VtZXIpIHtcbiAgICB2YXIgc291cmNlUm9vdCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VSb290O1xuICAgIHZhciBnZW5lcmF0b3IgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKHtcbiAgICAgIGZpbGU6IGFTb3VyY2VNYXBDb25zdW1lci5maWxlLFxuICAgICAgc291cmNlUm9vdDogc291cmNlUm9vdFxuICAgIH0pO1xuICAgIGFTb3VyY2VNYXBDb25zdW1lci5lYWNoTWFwcGluZyhmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgdmFyIG5ld01hcHBpbmcgPSB7XG4gICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgIGxpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgIG5ld01hcHBpbmcuc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICBuZXdNYXBwaW5nLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgbmV3TWFwcGluZy5zb3VyY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3TWFwcGluZy5vcmlnaW5hbCA9IHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWFwcGluZy5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICBuZXdNYXBwaW5nLm5hbWUgPSBtYXBwaW5nLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZ2VuZXJhdG9yLmFkZE1hcHBpbmcobmV3TWFwcGluZyk7XG4gICAgfSk7XG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlRmlsZSkge1xuICAgICAgdmFyIHNvdXJjZVJlbGF0aXZlID0gc291cmNlRmlsZTtcbiAgICAgIGlmIChzb3VyY2VSb290ICE9PSBudWxsKSB7XG4gICAgICAgIHNvdXJjZVJlbGF0aXZlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFnZW5lcmF0b3IuX3NvdXJjZXMuaGFzKHNvdXJjZVJlbGF0aXZlKSkge1xuICAgICAgICBnZW5lcmF0b3IuX3NvdXJjZXMuYWRkKHNvdXJjZVJlbGF0aXZlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgZ2VuZXJhdG9yLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfTtcblxuLyoqXG4gKiBBZGQgYSBzaW5nbGUgbWFwcGluZyBmcm9tIG9yaWdpbmFsIHNvdXJjZSBsaW5lIGFuZCBjb2x1bW4gdG8gdGhlIGdlbmVyYXRlZFxuICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIGZvciB0aGlzIHNvdXJjZSBtYXAgYmVpbmcgY3JlYXRlZC4gVGhlIG1hcHBpbmdcbiAqIG9iamVjdCBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGdlbmVyYXRlZDogQW4gb2JqZWN0IHdpdGggdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zLlxuICogICAtIG9yaWdpbmFsOiBBbiBvYmplY3Qgd2l0aCB0aGUgb3JpZ2luYWwgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSAocmVsYXRpdmUgdG8gdGhlIHNvdXJjZVJvb3QpLlxuICogICAtIG5hbWU6IEFuIG9wdGlvbmFsIG9yaWdpbmFsIHRva2VuIG5hbWUgZm9yIHRoaXMgbWFwcGluZy5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hZGRNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2FkZE1hcHBpbmcoYUFyZ3MpIHtcbiAgICB2YXIgZ2VuZXJhdGVkID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdnZW5lcmF0ZWQnKTtcbiAgICB2YXIgb3JpZ2luYWwgPSB1dGlsLmdldEFyZyhhQXJncywgJ29yaWdpbmFsJywgbnVsbCk7XG4gICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJywgbnVsbCk7XG4gICAgdmFyIG5hbWUgPSB1dGlsLmdldEFyZyhhQXJncywgJ25hbWUnLCBudWxsKTtcblxuICAgIGlmICghdGhpcy5fc2tpcFZhbGlkYXRpb24pIHtcbiAgICAgIHRoaXMuX3ZhbGlkYXRlTWFwcGluZyhnZW5lcmF0ZWQsIG9yaWdpbmFsLCBzb3VyY2UsIG5hbWUpO1xuICAgIH1cblxuICAgIGlmIChzb3VyY2UgIT0gbnVsbCkge1xuICAgICAgc291cmNlID0gU3RyaW5nKHNvdXJjZSk7XG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgdGhpcy5fc291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmFtZSAhPSBudWxsKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgICAgaWYgKCF0aGlzLl9uYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgICAgdGhpcy5fbmFtZXMuYWRkKG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX21hcHBpbmdzLmFkZCh7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogZ2VuZXJhdGVkLmNvbHVtbixcbiAgICAgIG9yaWdpbmFsTGluZTogb3JpZ2luYWwgIT0gbnVsbCAmJiBvcmlnaW5hbC5saW5lLFxuICAgICAgb3JpZ2luYWxDb2x1bW46IG9yaWdpbmFsICE9IG51bGwgJiYgb3JpZ2luYWwuY29sdW1uLFxuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBuYW1lOiBuYW1lXG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogU2V0IHRoZSBzb3VyY2UgY29udGVudCBmb3IgYSBzb3VyY2UgZmlsZS5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3NldFNvdXJjZUNvbnRlbnQoYVNvdXJjZUZpbGUsIGFTb3VyY2VDb250ZW50KSB7XG4gICAgdmFyIHNvdXJjZSA9IGFTb3VyY2VGaWxlO1xuICAgIGlmICh0aGlzLl9zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5fc291cmNlUm9vdCwgc291cmNlKTtcbiAgICB9XG5cbiAgICBpZiAoYVNvdXJjZUNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgLy8gQWRkIHRoZSBzb3VyY2UgY29udGVudCB0byB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAuXG4gICAgICAvLyBDcmVhdGUgYSBuZXcgX3NvdXJjZXNDb250ZW50cyBtYXAgaWYgdGhlIHByb3BlcnR5IGlzIG51bGwuXG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoc291cmNlKV0gPSBhU291cmNlQ29udGVudDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBzb3VyY2UgZmlsZSBmcm9tIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcC5cbiAgICAgIC8vIElmIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcCBpcyBlbXB0eSwgc2V0IHRoZSBwcm9wZXJ0eSB0byBudWxsLlxuICAgICAgZGVsZXRlIHRoaXMuX3NvdXJjZXNDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSldO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuX3NvdXJjZXNDb250ZW50cykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIEFwcGxpZXMgdGhlIG1hcHBpbmdzIG9mIGEgc3ViLXNvdXJjZS1tYXAgZm9yIGEgc3BlY2lmaWMgc291cmNlIGZpbGUgdG8gdGhlXG4gKiBzb3VyY2UgbWFwIGJlaW5nIGdlbmVyYXRlZC4gRWFjaCBtYXBwaW5nIHRvIHRoZSBzdXBwbGllZCBzb3VyY2UgZmlsZSBpc1xuICogcmV3cml0dGVuIHVzaW5nIHRoZSBzdXBwbGllZCBzb3VyY2UgbWFwLiBOb3RlOiBUaGUgcmVzb2x1dGlvbiBmb3IgdGhlXG4gKiByZXN1bHRpbmcgbWFwcGluZ3MgaXMgdGhlIG1pbmltaXVtIG9mIHRoaXMgbWFwIGFuZCB0aGUgc3VwcGxpZWQgbWFwLlxuICpcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIHNvdXJjZSBtYXAgdG8gYmUgYXBwbGllZC5cbiAqIEBwYXJhbSBhU291cmNlRmlsZSBPcHRpb25hbC4gVGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VyY2UgZmlsZS5cbiAqICAgICAgICBJZiBvbWl0dGVkLCBTb3VyY2VNYXBDb25zdW1lcidzIGZpbGUgcHJvcGVydHkgd2lsbCBiZSB1c2VkLlxuICogQHBhcmFtIGFTb3VyY2VNYXBQYXRoIE9wdGlvbmFsLiBUaGUgZGlybmFtZSBvZiB0aGUgcGF0aCB0byB0aGUgc291cmNlIG1hcFxuICogICAgICAgIHRvIGJlIGFwcGxpZWQuIElmIHJlbGF0aXZlLCBpdCBpcyByZWxhdGl2ZSB0byB0aGUgU291cmNlTWFwQ29uc3VtZXIuXG4gKiAgICAgICAgVGhpcyBwYXJhbWV0ZXIgaXMgbmVlZGVkIHdoZW4gdGhlIHR3byBzb3VyY2UgbWFwcyBhcmVuJ3QgaW4gdGhlIHNhbWVcbiAqICAgICAgICBkaXJlY3RvcnksIGFuZCB0aGUgc291cmNlIG1hcCB0byBiZSBhcHBsaWVkIGNvbnRhaW5zIHJlbGF0aXZlIHNvdXJjZVxuICogICAgICAgIHBhdGhzLiBJZiBzbywgdGhvc2UgcmVsYXRpdmUgc291cmNlIHBhdGhzIG5lZWQgdG8gYmUgcmV3cml0dGVuXG4gKiAgICAgICAgcmVsYXRpdmUgdG8gdGhlIFNvdXJjZU1hcEdlbmVyYXRvci5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hcHBseVNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9hcHBseVNvdXJjZU1hcChhU291cmNlTWFwQ29uc3VtZXIsIGFTb3VyY2VGaWxlLCBhU291cmNlTWFwUGF0aCkge1xuICAgIHZhciBzb3VyY2VGaWxlID0gYVNvdXJjZUZpbGU7XG4gICAgLy8gSWYgYVNvdXJjZUZpbGUgaXMgb21pdHRlZCwgd2Ugd2lsbCB1c2UgdGhlIGZpbGUgcHJvcGVydHkgb2YgdGhlIFNvdXJjZU1hcFxuICAgIGlmIChhU291cmNlRmlsZSA9PSBudWxsKSB7XG4gICAgICBpZiAoYVNvdXJjZU1hcENvbnN1bWVyLmZpbGUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1NvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYXBwbHlTb3VyY2VNYXAgcmVxdWlyZXMgZWl0aGVyIGFuIGV4cGxpY2l0IHNvdXJjZSBmaWxlLCAnICtcbiAgICAgICAgICAnb3IgdGhlIHNvdXJjZSBtYXBcXCdzIFwiZmlsZVwiIHByb3BlcnR5LiBCb3RoIHdlcmUgb21pdHRlZC4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBzb3VyY2VGaWxlID0gYVNvdXJjZU1hcENvbnN1bWVyLmZpbGU7XG4gICAgfVxuICAgIHZhciBzb3VyY2VSb290ID0gdGhpcy5fc291cmNlUm9vdDtcbiAgICAvLyBNYWtlIFwic291cmNlRmlsZVwiIHJlbGF0aXZlIGlmIGFuIGFic29sdXRlIFVybCBpcyBwYXNzZWQuXG4gICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgc291cmNlRmlsZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgfVxuICAgIC8vIEFwcGx5aW5nIHRoZSBTb3VyY2VNYXAgY2FuIGFkZCBhbmQgcmVtb3ZlIGl0ZW1zIGZyb20gdGhlIHNvdXJjZXMgYW5kXG4gICAgLy8gdGhlIG5hbWVzIGFycmF5LlxuICAgIHZhciBuZXdTb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gICAgdmFyIG5ld05hbWVzID0gbmV3IEFycmF5U2V0KCk7XG5cbiAgICAvLyBGaW5kIG1hcHBpbmdzIGZvciB0aGUgXCJzb3VyY2VGaWxlXCJcbiAgICB0aGlzLl9tYXBwaW5ncy51bnNvcnRlZEZvckVhY2goZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSA9PT0gc291cmNlRmlsZSAmJiBtYXBwaW5nLm9yaWdpbmFsTGluZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGl0IGNhbiBiZSBtYXBwZWQgYnkgdGhlIHNvdXJjZSBtYXAsIHRoZW4gdXBkYXRlIHRoZSBtYXBwaW5nLlxuICAgICAgICB2YXIgb3JpZ2luYWwgPSBhU291cmNlTWFwQ29uc3VtZXIub3JpZ2luYWxQb3NpdGlvbkZvcih7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAob3JpZ2luYWwuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBDb3B5IG1hcHBpbmdcbiAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IG9yaWdpbmFsLnNvdXJjZTtcbiAgICAgICAgICBpZiAoYVNvdXJjZU1hcFBhdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB1dGlsLmpvaW4oYVNvdXJjZU1hcFBhdGgsIG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgbWFwcGluZy5zb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IG9yaWdpbmFsLmxpbmU7XG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgICAgICBpZiAob3JpZ2luYWwubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLm5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICBpZiAoc291cmNlICE9IG51bGwgJiYgIW5ld1NvdXJjZXMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgbmV3U291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5hbWUgPSBtYXBwaW5nLm5hbWU7XG4gICAgICBpZiAobmFtZSAhPSBudWxsICYmICFuZXdOYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgICAgbmV3TmFtZXMuYWRkKG5hbWUpO1xuICAgICAgfVxuXG4gICAgfSwgdGhpcyk7XG4gICAgdGhpcy5fc291cmNlcyA9IG5ld1NvdXJjZXM7XG4gICAgdGhpcy5fbmFtZXMgPSBuZXdOYW1lcztcblxuICAgIC8vIENvcHkgc291cmNlc0NvbnRlbnRzIG9mIGFwcGxpZWQgbWFwLlxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhU291cmNlTWFwUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhU291cmNlTWFwUGF0aCwgc291cmNlRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgfTtcblxuLyoqXG4gKiBBIG1hcHBpbmcgY2FuIGhhdmUgb25lIG9mIHRoZSB0aHJlZSBsZXZlbHMgb2YgZGF0YTpcbiAqXG4gKiAgIDEuIEp1c3QgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi5cbiAqICAgMi4gVGhlIEdlbmVyYXRlZCBwb3NpdGlvbiwgb3JpZ2luYWwgcG9zaXRpb24sIGFuZCBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIDMuIEdlbmVyYXRlZCBhbmQgb3JpZ2luYWwgcG9zaXRpb24sIG9yaWdpbmFsIHNvdXJjZSwgYXMgd2VsbCBhcyBhIG5hbWVcbiAqICAgICAgdG9rZW4uXG4gKlxuICogVG8gbWFpbnRhaW4gY29uc2lzdGVuY3ksIHdlIHZhbGlkYXRlIHRoYXQgYW55IG5ldyBtYXBwaW5nIGJlaW5nIGFkZGVkIGZhbGxzXG4gKiBpbiB0byBvbmUgb2YgdGhlc2UgY2F0ZWdvcmllcy5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGVNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3ZhbGlkYXRlTWFwcGluZyhhR2VuZXJhdGVkLCBhT3JpZ2luYWwsIGFTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYU5hbWUpIHtcbiAgICAvLyBXaGVuIGFPcmlnaW5hbCBpcyB0cnV0aHkgYnV0IGhhcyBlbXB0eSB2YWx1ZXMgZm9yIC5saW5lIGFuZCAuY29sdW1uLFxuICAgIC8vIGl0IGlzIG1vc3QgbGlrZWx5IGEgcHJvZ3JhbW1lciBlcnJvci4gSW4gdGhpcyBjYXNlIHdlIHRocm93IGEgdmVyeVxuICAgIC8vIHNwZWNpZmljIGVycm9yIG1lc3NhZ2UgdG8gdHJ5IHRvIGd1aWRlIHRoZW0gdGhlIHJpZ2h0IHdheS5cbiAgICAvLyBGb3IgZXhhbXBsZTogaHR0cHM6Ly9naXRodWIuY29tL1BvbHltZXIvcG9seW1lci1idW5kbGVyL3B1bGwvNTE5XG4gICAgaWYgKGFPcmlnaW5hbCAmJiB0eXBlb2YgYU9yaWdpbmFsLmxpbmUgIT09ICdudW1iZXInICYmIHR5cGVvZiBhT3JpZ2luYWwuY29sdW1uICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnb3JpZ2luYWwubGluZSBhbmQgb3JpZ2luYWwuY29sdW1uIGFyZSBub3QgbnVtYmVycyAtLSB5b3UgcHJvYmFibHkgbWVhbnQgdG8gb21pdCAnICtcbiAgICAgICAgICAgICd0aGUgb3JpZ2luYWwgbWFwcGluZyBlbnRpcmVseSBhbmQgb25seSBtYXAgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi4gSWYgc28sIHBhc3MgJyArXG4gICAgICAgICAgICAnbnVsbCBmb3IgdGhlIG9yaWdpbmFsIG1hcHBpbmcgaW5zdGVhZCBvZiBhbiBvYmplY3Qgd2l0aCBlbXB0eSBvciBudWxsIHZhbHVlcy4nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGFHZW5lcmF0ZWQgJiYgJ2xpbmUnIGluIGFHZW5lcmF0ZWQgJiYgJ2NvbHVtbicgaW4gYUdlbmVyYXRlZFxuICAgICAgICAmJiBhR2VuZXJhdGVkLmxpbmUgPiAwICYmIGFHZW5lcmF0ZWQuY29sdW1uID49IDBcbiAgICAgICAgJiYgIWFPcmlnaW5hbCAmJiAhYVNvdXJjZSAmJiAhYU5hbWUpIHtcbiAgICAgIC8vIENhc2UgMS5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSBpZiAoYUdlbmVyYXRlZCAmJiAnbGluZScgaW4gYUdlbmVyYXRlZCAmJiAnY29sdW1uJyBpbiBhR2VuZXJhdGVkXG4gICAgICAgICAgICAgJiYgYU9yaWdpbmFsICYmICdsaW5lJyBpbiBhT3JpZ2luYWwgJiYgJ2NvbHVtbicgaW4gYU9yaWdpbmFsXG4gICAgICAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgJiYgYU9yaWdpbmFsLmxpbmUgPiAwICYmIGFPcmlnaW5hbC5jb2x1bW4gPj0gMFxuICAgICAgICAgICAgICYmIGFTb3VyY2UpIHtcbiAgICAgIC8vIENhc2VzIDIgYW5kIDMuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1hcHBpbmc6ICcgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGdlbmVyYXRlZDogYUdlbmVyYXRlZCxcbiAgICAgICAgc291cmNlOiBhU291cmNlLFxuICAgICAgICBvcmlnaW5hbDogYU9yaWdpbmFsLFxuICAgICAgICBuYW1lOiBhTmFtZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBTZXJpYWxpemUgdGhlIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIHRvIHRoZSBzdHJlYW0gb2YgYmFzZSA2NCBWTFFzXG4gKiBzcGVjaWZpZWQgYnkgdGhlIHNvdXJjZSBtYXAgZm9ybWF0LlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9zZXJpYWxpemVNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9zZXJpYWxpemVNYXBwaW5ncygpIHtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZExpbmUgPSAxO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbExpbmUgPSAwO1xuICAgIHZhciBwcmV2aW91c05hbWUgPSAwO1xuICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBuZXh0O1xuICAgIHZhciBtYXBwaW5nO1xuICAgIHZhciBuYW1lSWR4O1xuICAgIHZhciBzb3VyY2VJZHg7XG5cbiAgICB2YXIgbWFwcGluZ3MgPSB0aGlzLl9tYXBwaW5ncy50b0FycmF5KCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG1hcHBpbmdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBtYXBwaW5nID0gbWFwcGluZ3NbaV07XG4gICAgICBuZXh0ID0gJydcblxuICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSAhPT0gcHJldmlvdXNHZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgd2hpbGUgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSAhPT0gcHJldmlvdXNHZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgbmV4dCArPSAnOyc7XG4gICAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICBpZiAoIXV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZywgbWFwcGluZ3NbaSAtIDFdKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHQgKz0gJywnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c0dlbmVyYXRlZENvbHVtbik7XG4gICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VJZHggPSB0aGlzLl9zb3VyY2VzLmluZGV4T2YobWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUoc291cmNlSWR4IC0gcHJldmlvdXNTb3VyY2UpO1xuICAgICAgICBwcmV2aW91c1NvdXJjZSA9IHNvdXJjZUlkeDtcblxuICAgICAgICAvLyBsaW5lcyBhcmUgc3RvcmVkIDAtYmFzZWQgaW4gU291cmNlTWFwIHNwZWMgdmVyc2lvbiAzXG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsTGluZSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c09yaWdpbmFsTGluZSk7XG4gICAgICAgIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmUgLSAxO1xuXG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNPcmlnaW5hbENvbHVtbik7XG4gICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgIG5hbWVJZHggPSB0aGlzLl9uYW1lcy5pbmRleE9mKG1hcHBpbmcubmFtZSk7XG4gICAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG5hbWVJZHggLSBwcmV2aW91c05hbWUpO1xuICAgICAgICAgIHByZXZpb3VzTmFtZSA9IG5hbWVJZHg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzdWx0ICs9IG5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KGFTb3VyY2VzLCBhU291cmNlUm9vdCkge1xuICAgIHJldHVybiBhU291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoYVNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKGFTb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgfVxuICAgICAgdmFyIGtleSA9IHV0aWwudG9TZXRTdHJpbmcoc291cmNlKTtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5fc291cmNlc0NvbnRlbnRzLCBrZXkpXG4gICAgICAgID8gdGhpcy5fc291cmNlc0NvbnRlbnRzW2tleV1cbiAgICAgICAgOiBudWxsO1xuICAgIH0sIHRoaXMpO1xuICB9O1xuXG4vKipcbiAqIEV4dGVybmFsaXplIHRoZSBzb3VyY2UgbWFwLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnRvSlNPTiA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl90b0pTT04oKSB7XG4gICAgdmFyIG1hcCA9IHtcbiAgICAgIHZlcnNpb246IHRoaXMuX3ZlcnNpb24sXG4gICAgICBzb3VyY2VzOiB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKSxcbiAgICAgIG5hbWVzOiB0aGlzLl9uYW1lcy50b0FycmF5KCksXG4gICAgICBtYXBwaW5nczogdGhpcy5fc2VyaWFsaXplTWFwcGluZ3MoKVxuICAgIH07XG4gICAgaWYgKHRoaXMuX2ZpbGUgIT0gbnVsbCkge1xuICAgICAgbWFwLmZpbGUgPSB0aGlzLl9maWxlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBtYXAuc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgIG1hcC5zb3VyY2VzQ29udGVudCA9IHRoaXMuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQobWFwLnNvdXJjZXMsIG1hcC5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwO1xuICB9O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQgdG8gYSBzdHJpbmcuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUudG9TdHJpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpO1xuICB9O1xuXG5leHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvciA9IFNvdXJjZU1hcEdlbmVyYXRvcjtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIFNvdXJjZU1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4vLyBNYXRjaGVzIGEgV2luZG93cy1zdHlsZSBgXFxyXFxuYCBuZXdsaW5lIG9yIGEgYFxcbmAgbmV3bGluZSB1c2VkIGJ5IGFsbCBvdGhlclxuLy8gb3BlcmF0aW5nIHN5c3RlbXMgdGhlc2UgZGF5cyAoY2FwdHVyaW5nIHRoZSByZXN1bHQpLlxudmFyIFJFR0VYX05FV0xJTkUgPSAvKFxccj9cXG4pLztcblxuLy8gTmV3bGluZSBjaGFyYWN0ZXIgY29kZSBmb3IgY2hhckNvZGVBdCgpIGNvbXBhcmlzb25zXG52YXIgTkVXTElORV9DT0RFID0gMTA7XG5cbi8vIFByaXZhdGUgc3ltYm9sIGZvciBpZGVudGlmeWluZyBgU291cmNlTm9kZWBzIHdoZW4gbXVsdGlwbGUgdmVyc2lvbnMgb2Zcbi8vIHRoZSBzb3VyY2UtbWFwIGxpYnJhcnkgYXJlIGxvYWRlZC4gVGhpcyBNVVNUIE5PVCBDSEFOR0UgYWNyb3NzXG4vLyB2ZXJzaW9ucyFcbnZhciBpc1NvdXJjZU5vZGUgPSBcIiQkJGlzU291cmNlTm9kZSQkJFwiO1xuXG4vKipcbiAqIFNvdXJjZU5vZGVzIHByb3ZpZGUgYSB3YXkgdG8gYWJzdHJhY3Qgb3ZlciBpbnRlcnBvbGF0aW5nL2NvbmNhdGVuYXRpbmdcbiAqIHNuaXBwZXRzIG9mIGdlbmVyYXRlZCBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlIHdoaWxlIG1haW50YWluaW5nIHRoZSBsaW5lIGFuZFxuICogY29sdW1uIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgb3JpZ2luYWwgc291cmNlIGNvZGUuXG4gKlxuICogQHBhcmFtIGFMaW5lIFRoZSBvcmlnaW5hbCBsaW5lIG51bWJlci5cbiAqIEBwYXJhbSBhQ29sdW1uIFRoZSBvcmlnaW5hbCBjb2x1bW4gbnVtYmVyLlxuICogQHBhcmFtIGFTb3VyY2UgVGhlIG9yaWdpbmFsIHNvdXJjZSdzIGZpbGVuYW1lLlxuICogQHBhcmFtIGFDaHVua3MgT3B0aW9uYWwuIEFuIGFycmF5IG9mIHN0cmluZ3Mgd2hpY2ggYXJlIHNuaXBwZXRzIG9mXG4gKiAgICAgICAgZ2VuZXJhdGVkIEpTLCBvciBvdGhlciBTb3VyY2VOb2Rlcy5cbiAqIEBwYXJhbSBhTmFtZSBUaGUgb3JpZ2luYWwgaWRlbnRpZmllci5cbiAqL1xuZnVuY3Rpb24gU291cmNlTm9kZShhTGluZSwgYUNvbHVtbiwgYVNvdXJjZSwgYUNodW5rcywgYU5hbWUpIHtcbiAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICB0aGlzLnNvdXJjZUNvbnRlbnRzID0ge307XG4gIHRoaXMubGluZSA9IGFMaW5lID09IG51bGwgPyBudWxsIDogYUxpbmU7XG4gIHRoaXMuY29sdW1uID0gYUNvbHVtbiA9PSBudWxsID8gbnVsbCA6IGFDb2x1bW47XG4gIHRoaXMuc291cmNlID0gYVNvdXJjZSA9PSBudWxsID8gbnVsbCA6IGFTb3VyY2U7XG4gIHRoaXMubmFtZSA9IGFOYW1lID09IG51bGwgPyBudWxsIDogYU5hbWU7XG4gIHRoaXNbaXNTb3VyY2VOb2RlXSA9IHRydWU7XG4gIGlmIChhQ2h1bmtzICE9IG51bGwpIHRoaXMuYWRkKGFDaHVua3MpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBTb3VyY2VOb2RlIGZyb20gZ2VuZXJhdGVkIGNvZGUgYW5kIGEgU291cmNlTWFwQ29uc3VtZXIuXG4gKlxuICogQHBhcmFtIGFHZW5lcmF0ZWRDb2RlIFRoZSBnZW5lcmF0ZWQgY29kZVxuICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgU291cmNlTWFwIGZvciB0aGUgZ2VuZXJhdGVkIGNvZGVcbiAqIEBwYXJhbSBhUmVsYXRpdmVQYXRoIE9wdGlvbmFsLiBUaGUgcGF0aCB0aGF0IHJlbGF0aXZlIHNvdXJjZXMgaW4gdGhlXG4gKiAgICAgICAgU291cmNlTWFwQ29uc3VtZXIgc2hvdWxkIGJlIHJlbGF0aXZlIHRvLlxuICovXG5Tb3VyY2VOb2RlLmZyb21TdHJpbmdXaXRoU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV9mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcChhR2VuZXJhdGVkQ29kZSwgYVNvdXJjZU1hcENvbnN1bWVyLCBhUmVsYXRpdmVQYXRoKSB7XG4gICAgLy8gVGhlIFNvdXJjZU5vZGUgd2Ugd2FudCB0byBmaWxsIHdpdGggdGhlIGdlbmVyYXRlZCBjb2RlXG4gICAgLy8gYW5kIHRoZSBTb3VyY2VNYXBcbiAgICB2YXIgbm9kZSA9IG5ldyBTb3VyY2VOb2RlKCk7XG5cbiAgICAvLyBBbGwgZXZlbiBpbmRpY2VzIG9mIHRoaXMgYXJyYXkgYXJlIG9uZSBsaW5lIG9mIHRoZSBnZW5lcmF0ZWQgY29kZSxcbiAgICAvLyB3aGlsZSBhbGwgb2RkIGluZGljZXMgYXJlIHRoZSBuZXdsaW5lcyBiZXR3ZWVuIHR3byBhZGphY2VudCBsaW5lc1xuICAgIC8vIChzaW5jZSBgUkVHRVhfTkVXTElORWAgY2FwdHVyZXMgaXRzIG1hdGNoKS5cbiAgICAvLyBQcm9jZXNzZWQgZnJhZ21lbnRzIGFyZSBhY2Nlc3NlZCBieSBjYWxsaW5nIGBzaGlmdE5leHRMaW5lYC5cbiAgICB2YXIgcmVtYWluaW5nTGluZXMgPSBhR2VuZXJhdGVkQ29kZS5zcGxpdChSRUdFWF9ORVdMSU5FKTtcbiAgICB2YXIgcmVtYWluaW5nTGluZXNJbmRleCA9IDA7XG4gICAgdmFyIHNoaWZ0TmV4dExpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsaW5lQ29udGVudHMgPSBnZXROZXh0TGluZSgpO1xuICAgICAgLy8gVGhlIGxhc3QgbGluZSBvZiBhIGZpbGUgbWlnaHQgbm90IGhhdmUgYSBuZXdsaW5lLlxuICAgICAgdmFyIG5ld0xpbmUgPSBnZXROZXh0TGluZSgpIHx8IFwiXCI7XG4gICAgICByZXR1cm4gbGluZUNvbnRlbnRzICsgbmV3TGluZTtcblxuICAgICAgZnVuY3Rpb24gZ2V0TmV4dExpbmUoKSB7XG4gICAgICAgIHJldHVybiByZW1haW5pbmdMaW5lc0luZGV4IDwgcmVtYWluaW5nTGluZXMubGVuZ3RoID9cbiAgICAgICAgICAgIHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXgrK10gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFdlIG5lZWQgdG8gcmVtZW1iZXIgdGhlIHBvc2l0aW9uIG9mIFwicmVtYWluaW5nTGluZXNcIlxuICAgIHZhciBsYXN0R2VuZXJhdGVkTGluZSA9IDEsIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuXG4gICAgLy8gVGhlIGdlbmVyYXRlIFNvdXJjZU5vZGVzIHdlIG5lZWQgYSBjb2RlIHJhbmdlLlxuICAgIC8vIFRvIGV4dHJhY3QgaXQgY3VycmVudCBhbmQgbGFzdCBtYXBwaW5nIGlzIHVzZWQuXG4gICAgLy8gSGVyZSB3ZSBzdG9yZSB0aGUgbGFzdCBtYXBwaW5nLlxuICAgIHZhciBsYXN0TWFwcGluZyA9IG51bGw7XG5cbiAgICBhU291cmNlTWFwQ29uc3VtZXIuZWFjaE1hcHBpbmcoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIGlmIChsYXN0TWFwcGluZyAhPT0gbnVsbCkge1xuICAgICAgICAvLyBXZSBhZGQgdGhlIGNvZGUgZnJvbSBcImxhc3RNYXBwaW5nXCIgdG8gXCJtYXBwaW5nXCI6XG4gICAgICAgIC8vIEZpcnN0IGNoZWNrIGlmIHRoZXJlIGlzIGEgbmV3IGxpbmUgaW4gYmV0d2Vlbi5cbiAgICAgICAgaWYgKGxhc3RHZW5lcmF0ZWRMaW5lIDwgbWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgLy8gQXNzb2NpYXRlIGZpcnN0IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZExpbmUrKztcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgICAvLyBUaGUgcmVtYWluaW5nIGNvZGUgaXMgYWRkZWQgd2l0aG91dCBtYXBwaW5nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGhlcmUgaXMgbm8gbmV3IGxpbmUgaW4gYmV0d2Vlbi5cbiAgICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIGNvZGUgYmV0d2VlbiBcImxhc3RHZW5lcmF0ZWRDb2x1bW5cIiBhbmRcbiAgICAgICAgICAvLyBcIm1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXCIgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICB2YXIgbmV4dExpbmUgPSByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSB8fCAnJztcbiAgICAgICAgICB2YXIgY29kZSA9IG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgICAgcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gPSBuZXh0TGluZS5zdWJzdHIobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcbiAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIGNvZGUpO1xuICAgICAgICAgIC8vIE5vIG1vcmUgcmVtYWluaW5nIGNvZGUsIGNvbnRpbnVlXG4gICAgICAgICAgbGFzdE1hcHBpbmcgPSBtYXBwaW5nO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gV2UgYWRkIHRoZSBnZW5lcmF0ZWQgY29kZSB1bnRpbCB0aGUgZmlyc3QgbWFwcGluZ1xuICAgICAgLy8gdG8gdGhlIFNvdXJjZU5vZGUgd2l0aG91dCBhbnkgbWFwcGluZy5cbiAgICAgIC8vIEVhY2ggbGluZSBpcyBhZGRlZCBhcyBzZXBhcmF0ZSBzdHJpbmcuXG4gICAgICB3aGlsZSAobGFzdEdlbmVyYXRlZExpbmUgPCBtYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgbm9kZS5hZGQoc2hpZnROZXh0TGluZSgpKTtcbiAgICAgICAgbGFzdEdlbmVyYXRlZExpbmUrKztcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0R2VuZXJhdGVkQ29sdW1uIDwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pIHtcbiAgICAgICAgdmFyIG5leHRMaW5lID0gcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gfHwgJyc7XG4gICAgICAgIG5vZGUuYWRkKG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikpO1xuICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSA9IG5leHRMaW5lLnN1YnN0cihtYXBwaW5nLmdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcbiAgICAgIH1cbiAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICB9LCB0aGlzKTtcbiAgICAvLyBXZSBoYXZlIHByb2Nlc3NlZCBhbGwgbWFwcGluZ3MuXG4gICAgaWYgKHJlbWFpbmluZ0xpbmVzSW5kZXggPCByZW1haW5pbmdMaW5lcy5sZW5ndGgpIHtcbiAgICAgIGlmIChsYXN0TWFwcGluZykge1xuICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIHJlbWFpbmluZyBjb2RlIGluIHRoZSBjdXJyZW50IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgfVxuICAgICAgLy8gYW5kIGFkZCB0aGUgcmVtYWluaW5nIGxpbmVzIHdpdGhvdXQgYW55IG1hcHBpbmdcbiAgICAgIG5vZGUuYWRkKHJlbWFpbmluZ0xpbmVzLnNwbGljZShyZW1haW5pbmdMaW5lc0luZGV4KS5qb2luKFwiXCIpKTtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50IGludG8gU291cmNlTm9kZVxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhUmVsYXRpdmVQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5qb2luKGFSZWxhdGl2ZVBhdGgsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBub2RlO1xuXG4gICAgZnVuY3Rpb24gYWRkTWFwcGluZ1dpdGhDb2RlKG1hcHBpbmcsIGNvZGUpIHtcbiAgICAgIGlmIChtYXBwaW5nID09PSBudWxsIHx8IG1hcHBpbmcuc291cmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9kZS5hZGQoY29kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc291cmNlID0gYVJlbGF0aXZlUGF0aFxuICAgICAgICAgID8gdXRpbC5qb2luKGFSZWxhdGl2ZVBhdGgsIG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgIDogbWFwcGluZy5zb3VyY2U7XG4gICAgICAgIG5vZGUuYWRkKG5ldyBTb3VyY2VOb2RlKG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBpbmcubmFtZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBBZGQgYSBjaHVuayBvZiBnZW5lcmF0ZWQgSlMgdG8gdGhpcyBzb3VyY2Ugbm9kZS5cbiAqXG4gKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX2FkZChhQ2h1bmspIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYUNodW5rKSkge1xuICAgIGFDaHVuay5mb3JFYWNoKGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgdGhpcy5hZGQoY2h1bmspO1xuICAgIH0sIHRoaXMpO1xuICB9XG4gIGVsc2UgaWYgKGFDaHVua1tpc1NvdXJjZU5vZGVdIHx8IHR5cGVvZiBhQ2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoYUNodW5rKSB7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goYUNodW5rKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGQgYSBjaHVuayBvZiBnZW5lcmF0ZWQgSlMgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGlzIHNvdXJjZSBub2RlLlxuICpcbiAqIEBwYXJhbSBhQ2h1bmsgQSBzdHJpbmcgc25pcHBldCBvZiBnZW5lcmF0ZWQgSlMgY29kZSwgYW5vdGhlciBpbnN0YW5jZSBvZlxuICogICAgICAgIFNvdXJjZU5vZGUsIG9yIGFuIGFycmF5IHdoZXJlIGVhY2ggbWVtYmVyIGlzIG9uZSBvZiB0aG9zZSB0aGluZ3MuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3ByZXBlbmQoYUNodW5rKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFDaHVuaykpIHtcbiAgICBmb3IgKHZhciBpID0gYUNodW5rLmxlbmd0aC0xOyBpID49IDA7IGktLSkge1xuICAgICAgdGhpcy5wcmVwZW5kKGFDaHVua1tpXSk7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGFDaHVua1tpc1NvdXJjZU5vZGVdIHx8IHR5cGVvZiBhQ2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICB0aGlzLmNoaWxkcmVuLnVuc2hpZnQoYUNodW5rKTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgXCJFeHBlY3RlZCBhIFNvdXJjZU5vZGUsIHN0cmluZywgb3IgYW4gYXJyYXkgb2YgU291cmNlTm9kZXMgYW5kIHN0cmluZ3MuIEdvdCBcIiArIGFDaHVua1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFdhbGsgb3ZlciB0aGUgdHJlZSBvZiBKUyBzbmlwcGV0cyBpbiB0aGlzIG5vZGUgYW5kIGl0cyBjaGlsZHJlbi4gVGhlXG4gKiB3YWxraW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGZvciBlYWNoIHNuaXBwZXQgb2YgSlMgYW5kIGlzIHBhc3NlZCB0aGF0XG4gKiBzbmlwcGV0IGFuZCB0aGUgaXRzIG9yaWdpbmFsIGFzc29jaWF0ZWQgc291cmNlJ3MgbGluZS9jb2x1bW4gbG9jYXRpb24uXG4gKlxuICogQHBhcmFtIGFGbiBUaGUgdHJhdmVyc2FsIGZ1bmN0aW9uLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gU291cmNlTm9kZV93YWxrKGFGbikge1xuICB2YXIgY2h1bms7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY2h1bmsgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgIGlmIChjaHVua1tpc1NvdXJjZU5vZGVdKSB7XG4gICAgICBjaHVuay53YWxrKGFGbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKGNodW5rICE9PSAnJykge1xuICAgICAgICBhRm4oY2h1bmssIHsgc291cmNlOiB0aGlzLnNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZSxcbiAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIExpa2UgYFN0cmluZy5wcm90b3R5cGUuam9pbmAgZXhjZXB0IGZvciBTb3VyY2VOb2Rlcy4gSW5zZXJ0cyBgYVN0cmAgYmV0d2VlblxuICogZWFjaCBvZiBgdGhpcy5jaGlsZHJlbmAuXG4gKlxuICogQHBhcmFtIGFTZXAgVGhlIHNlcGFyYXRvci5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfam9pbihhU2VwKSB7XG4gIHZhciBuZXdDaGlsZHJlbjtcbiAgdmFyIGk7XG4gIHZhciBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKGxlbiA+IDApIHtcbiAgICBuZXdDaGlsZHJlbiA9IFtdO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW4tMTsgaSsrKSB7XG4gICAgICBuZXdDaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xuICAgICAgbmV3Q2hpbGRyZW4ucHVzaChhU2VwKTtcbiAgICB9XG4gICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICB0aGlzLmNoaWxkcmVuID0gbmV3Q2hpbGRyZW47XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlIG9uIHRoZSB2ZXJ5IHJpZ2h0LW1vc3Qgc291cmNlIHNuaXBwZXQuIFVzZWZ1bFxuICogZm9yIHRyaW1taW5nIHdoaXRlc3BhY2UgZnJvbSB0aGUgZW5kIG9mIGEgc291cmNlIG5vZGUsIGV0Yy5cbiAqXG4gKiBAcGFyYW0gYVBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAqIEBwYXJhbSBhUmVwbGFjZW1lbnQgVGhlIHRoaW5nIHRvIHJlcGxhY2UgdGhlIHBhdHRlcm4gd2l0aC5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUucmVwbGFjZVJpZ2h0ID0gZnVuY3Rpb24gU291cmNlTm9kZV9yZXBsYWNlUmlnaHQoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCkge1xuICB2YXIgbGFzdENoaWxkID0gdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICBpZiAobGFzdENoaWxkW2lzU291cmNlTm9kZV0pIHtcbiAgICBsYXN0Q2hpbGQucmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBsYXN0Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdID0gbGFzdENoaWxkLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5jaGlsZHJlbi5wdXNoKCcnLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCkpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHNvdXJjZSBjb250ZW50IGZvciBhIHNvdXJjZSBmaWxlLiBUaGlzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIFNvdXJjZU1hcEdlbmVyYXRvclxuICogaW4gdGhlIHNvdXJjZXNDb250ZW50IGZpZWxkLlxuICpcbiAqIEBwYXJhbSBhU291cmNlRmlsZSBUaGUgZmlsZW5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlXG4gKiBAcGFyYW0gYVNvdXJjZUNvbnRlbnQgVGhlIGNvbnRlbnQgb2YgdGhlIHNvdXJjZSBmaWxlXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnNldFNvdXJjZUNvbnRlbnQgPVxuICBmdW5jdGlvbiBTb3VyY2VOb2RlX3NldFNvdXJjZUNvbnRlbnQoYVNvdXJjZUZpbGUsIGFTb3VyY2VDb250ZW50KSB7XG4gICAgdGhpcy5zb3VyY2VDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKGFTb3VyY2VGaWxlKV0gPSBhU291cmNlQ29udGVudDtcbiAgfTtcblxuLyoqXG4gKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgU291cmNlTm9kZXMuIFRoZSB3YWxraW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaFxuICogc291cmNlIGZpbGUgY29udGVudCBhbmQgaXMgcGFzc2VkIHRoZSBmaWxlbmFtZSBhbmQgc291cmNlIGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIGFGbiBUaGUgdHJhdmVyc2FsIGZ1bmN0aW9uLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS53YWxrU291cmNlQ29udGVudHMgPVxuICBmdW5jdGlvbiBTb3VyY2VOb2RlX3dhbGtTb3VyY2VDb250ZW50cyhhRm4pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKHRoaXMuY2hpbGRyZW5baV1baXNTb3VyY2VOb2RlXSkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLndhbGtTb3VyY2VDb250ZW50cyhhRm4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzb3VyY2VzID0gT2JqZWN0LmtleXModGhpcy5zb3VyY2VDb250ZW50cyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFGbih1dGlsLmZyb21TZXRTdHJpbmcoc291cmNlc1tpXSksIHRoaXMuc291cmNlQ29udGVudHNbc291cmNlc1tpXV0pO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNvdXJjZSBub2RlLiBXYWxrcyBvdmVyIHRoZSB0cmVlXG4gKiBhbmQgY29uY2F0ZW5hdGVzIGFsbCB0aGUgdmFyaW91cyBzbmlwcGV0cyB0b2dldGhlciB0byBvbmUgc3RyaW5nLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfdG9TdHJpbmcoKSB7XG4gIHZhciBzdHIgPSBcIlwiO1xuICB0aGlzLndhbGsoZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgc3RyICs9IGNodW5rO1xuICB9KTtcbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc291cmNlIG5vZGUgYWxvbmcgd2l0aCBhIHNvdXJjZVxuICogbWFwLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS50b1N0cmluZ1dpdGhTb3VyY2VNYXAgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3RvU3RyaW5nV2l0aFNvdXJjZU1hcChhQXJncykge1xuICB2YXIgZ2VuZXJhdGVkID0ge1xuICAgIGNvZGU6IFwiXCIsXG4gICAgbGluZTogMSxcbiAgICBjb2x1bW46IDBcbiAgfTtcbiAgdmFyIG1hcCA9IG5ldyBTb3VyY2VNYXBHZW5lcmF0b3IoYUFyZ3MpO1xuICB2YXIgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICB2YXIgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbExpbmUgPSBudWxsO1xuICB2YXIgbGFzdE9yaWdpbmFsQ29sdW1uID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbE5hbWUgPSBudWxsO1xuICB0aGlzLndhbGsoZnVuY3Rpb24gKGNodW5rLCBvcmlnaW5hbCkge1xuICAgIGdlbmVyYXRlZC5jb2RlICs9IGNodW5rO1xuICAgIGlmIChvcmlnaW5hbC5zb3VyY2UgIT09IG51bGxcbiAgICAgICAgJiYgb3JpZ2luYWwubGluZSAhPT0gbnVsbFxuICAgICAgICAmJiBvcmlnaW5hbC5jb2x1bW4gIT09IG51bGwpIHtcbiAgICAgIGlmKGxhc3RPcmlnaW5hbFNvdXJjZSAhPT0gb3JpZ2luYWwuc291cmNlXG4gICAgICAgICB8fCBsYXN0T3JpZ2luYWxMaW5lICE9PSBvcmlnaW5hbC5saW5lXG4gICAgICAgICB8fCBsYXN0T3JpZ2luYWxDb2x1bW4gIT09IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTmFtZSAhPT0gb3JpZ2luYWwubmFtZSkge1xuICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgc291cmNlOiBvcmlnaW5hbC5zb3VyY2UsXG4gICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgIGxpbmU6IG9yaWdpbmFsLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogb3JpZ2luYWwubmFtZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG9yaWdpbmFsLnNvdXJjZTtcbiAgICAgIGxhc3RPcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgbGFzdE9yaWdpbmFsQ29sdW1uID0gb3JpZ2luYWwuY29sdW1uO1xuICAgICAgbGFzdE9yaWdpbmFsTmFtZSA9IG9yaWdpbmFsLm5hbWU7XG4gICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHNvdXJjZU1hcHBpbmdBY3RpdmUpIHtcbiAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuZ3RoID0gY2h1bmsubGVuZ3RoOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICBpZiAoY2h1bmsuY2hhckNvZGVBdChpZHgpID09PSBORVdMSU5FX0NPREUpIHtcbiAgICAgICAgZ2VuZXJhdGVkLmxpbmUrKztcbiAgICAgICAgZ2VuZXJhdGVkLmNvbHVtbiA9IDA7XG4gICAgICAgIC8vIE1hcHBpbmdzIGVuZCBhdCBlb2xcbiAgICAgICAgaWYgKGlkeCArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZU1hcHBpbmdBY3RpdmUpIHtcbiAgICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgICBzb3VyY2U6IG9yaWdpbmFsLnNvdXJjZSxcbiAgICAgICAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgICAgICAgIGxpbmU6IG9yaWdpbmFsLmxpbmUsXG4gICAgICAgICAgICAgIGNvbHVtbjogb3JpZ2luYWwuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZC5jb2x1bW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuYW1lOiBvcmlnaW5hbC5uYW1lXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlbmVyYXRlZC5jb2x1bW4rKztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB0aGlzLndhbGtTb3VyY2VDb250ZW50cyhmdW5jdGlvbiAoc291cmNlRmlsZSwgc291cmNlQ29udGVudCkge1xuICAgIG1hcC5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIHNvdXJjZUNvbnRlbnQpO1xuICB9KTtcblxuICByZXR1cm4geyBjb2RlOiBnZW5lcmF0ZWQuY29kZSwgbWFwOiBtYXAgfTtcbn07XG5cbmV4cG9ydHMuU291cmNlTm9kZSA9IFNvdXJjZU5vZGU7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbi8qKlxuICogVGhpcyBpcyBhIGhlbHBlciBmdW5jdGlvbiBmb3IgZ2V0dGluZyB2YWx1ZXMgZnJvbSBwYXJhbWV0ZXIvb3B0aW9uc1xuICogb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0gYXJncyBUaGUgb2JqZWN0IHdlIGFyZSBleHRyYWN0aW5nIHZhbHVlcyBmcm9tXG4gKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgd2UgYXJlIGdldHRpbmcuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIEFuIG9wdGlvbmFsIHZhbHVlIHRvIHJldHVybiBpZiB0aGUgcHJvcGVydHkgaXMgbWlzc2luZ1xuICogZnJvbSB0aGUgb2JqZWN0LiBJZiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQgYW5kIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nLCBhblxuICogZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gKi9cbmZ1bmN0aW9uIGdldEFyZyhhQXJncywgYU5hbWUsIGFEZWZhdWx0VmFsdWUpIHtcbiAgaWYgKGFOYW1lIGluIGFBcmdzKSB7XG4gICAgcmV0dXJuIGFBcmdzW2FOYW1lXTtcbiAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgcmV0dXJuIGFEZWZhdWx0VmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhTmFtZSArICdcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LicpO1xuICB9XG59XG5leHBvcnRzLmdldEFyZyA9IGdldEFyZztcblxudmFyIHVybFJlZ2V4cCA9IC9eKD86KFtcXHcrXFwtLl0rKTopP1xcL1xcLyg/OihcXHcrOlxcdyspQCk/KFtcXHcuLV0qKSg/OjooXFxkKykpPyguKikkLztcbnZhciBkYXRhVXJsUmVnZXhwID0gL15kYXRhOi4rXFwsLiskLztcblxuZnVuY3Rpb24gdXJsUGFyc2UoYVVybCkge1xuICB2YXIgbWF0Y2ggPSBhVXJsLm1hdGNoKHVybFJlZ2V4cCk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHNjaGVtZTogbWF0Y2hbMV0sXG4gICAgYXV0aDogbWF0Y2hbMl0sXG4gICAgaG9zdDogbWF0Y2hbM10sXG4gICAgcG9ydDogbWF0Y2hbNF0sXG4gICAgcGF0aDogbWF0Y2hbNV1cbiAgfTtcbn1cbmV4cG9ydHMudXJsUGFyc2UgPSB1cmxQYXJzZTtcblxuZnVuY3Rpb24gdXJsR2VuZXJhdGUoYVBhcnNlZFVybCkge1xuICB2YXIgdXJsID0gJyc7XG4gIGlmIChhUGFyc2VkVXJsLnNjaGVtZSkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLnNjaGVtZSArICc6JztcbiAgfVxuICB1cmwgKz0gJy8vJztcbiAgaWYgKGFQYXJzZWRVcmwuYXV0aCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLmF1dGggKyAnQCc7XG4gIH1cbiAgaWYgKGFQYXJzZWRVcmwuaG9zdCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLmhvc3Q7XG4gIH1cbiAgaWYgKGFQYXJzZWRVcmwucG9ydCkge1xuICAgIHVybCArPSBcIjpcIiArIGFQYXJzZWRVcmwucG9ydFxuICB9XG4gIGlmIChhUGFyc2VkVXJsLnBhdGgpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5wYXRoO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5leHBvcnRzLnVybEdlbmVyYXRlID0gdXJsR2VuZXJhdGU7XG5cbi8qKlxuICogTm9ybWFsaXplcyBhIHBhdGgsIG9yIHRoZSBwYXRoIHBvcnRpb24gb2YgYSBVUkw6XG4gKlxuICogLSBSZXBsYWNlcyBjb25zZWN1dGl2ZSBzbGFzaGVzIHdpdGggb25lIHNsYXNoLlxuICogLSBSZW1vdmVzIHVubmVjZXNzYXJ5ICcuJyBwYXJ0cy5cbiAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnPGRpcj4vLi4nIHBhcnRzLlxuICpcbiAqIEJhc2VkIG9uIGNvZGUgaW4gdGhlIE5vZGUuanMgJ3BhdGgnIGNvcmUgbW9kdWxlLlxuICpcbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciB1cmwgdG8gbm9ybWFsaXplLlxuICovXG5mdW5jdGlvbiBub3JtYWxpemUoYVBhdGgpIHtcbiAgdmFyIHBhdGggPSBhUGF0aDtcbiAgdmFyIHVybCA9IHVybFBhcnNlKGFQYXRoKTtcbiAgaWYgKHVybCkge1xuICAgIGlmICghdXJsLnBhdGgpIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG4gICAgcGF0aCA9IHVybC5wYXRoO1xuICB9XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpO1xuXG4gIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoL1xcLysvKTtcbiAgZm9yICh2YXIgcGFydCwgdXAgPSAwLCBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBwYXJ0ID0gcGFydHNbaV07XG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwID4gMCkge1xuICAgICAgaWYgKHBhcnQgPT09ICcnKSB7XG4gICAgICAgIC8vIFRoZSBmaXJzdCBwYXJ0IGlzIGJsYW5rIGlmIHRoZSBwYXRoIGlzIGFic29sdXRlLiBUcnlpbmcgdG8gZ29cbiAgICAgICAgLy8gYWJvdmUgdGhlIHJvb3QgaXMgYSBuby1vcC4gVGhlcmVmb3JlIHdlIGNhbiByZW1vdmUgYWxsICcuLicgcGFydHNcbiAgICAgICAgLy8gZGlyZWN0bHkgYWZ0ZXIgdGhlIHJvb3QuXG4gICAgICAgIHBhcnRzLnNwbGljZShpICsgMSwgdXApO1xuICAgICAgICB1cCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMik7XG4gICAgICAgIHVwLS07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHBhdGggPSBwYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKHBhdGggPT09ICcnKSB7XG4gICAgcGF0aCA9IGlzQWJzb2x1dGUgPyAnLycgOiAnLic7XG4gIH1cblxuICBpZiAodXJsKSB7XG4gICAgdXJsLnBhdGggPSBwYXRoO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZSh1cmwpO1xuICB9XG4gIHJldHVybiBwYXRoO1xufVxuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG5cbi8qKlxuICogSm9pbnMgdHdvIHBhdGhzL1VSTHMuXG4gKlxuICogQHBhcmFtIGFSb290IFRoZSByb290IHBhdGggb3IgVVJMLlxuICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIFVSTCB0byBiZSBqb2luZWQgd2l0aCB0aGUgcm9vdC5cbiAqXG4gKiAtIElmIGFQYXRoIGlzIGEgVVJMIG9yIGEgZGF0YSBVUkksIGFQYXRoIGlzIHJldHVybmVkLCB1bmxlc3MgYVBhdGggaXMgYVxuICogICBzY2hlbWUtcmVsYXRpdmUgVVJMOiBUaGVuIHRoZSBzY2hlbWUgb2YgYVJvb3QsIGlmIGFueSwgaXMgcHJlcGVuZGVkXG4gKiAgIGZpcnN0LlxuICogLSBPdGhlcndpc2UgYVBhdGggaXMgYSBwYXRoLiBJZiBhUm9vdCBpcyBhIFVSTCwgdGhlbiBpdHMgcGF0aCBwb3J0aW9uXG4gKiAgIGlzIHVwZGF0ZWQgd2l0aCB0aGUgcmVzdWx0IGFuZCBhUm9vdCBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlIHRoZSByZXN1bHRcbiAqICAgaXMgcmV0dXJuZWQuXG4gKiAgIC0gSWYgYVBhdGggaXMgYWJzb2x1dGUsIHRoZSByZXN1bHQgaXMgYVBhdGguXG4gKiAgIC0gT3RoZXJ3aXNlIHRoZSB0d28gcGF0aHMgYXJlIGpvaW5lZCB3aXRoIGEgc2xhc2guXG4gKiAtIEpvaW5pbmcgZm9yIGV4YW1wbGUgJ2h0dHA6Ly8nIGFuZCAnd3d3LmV4YW1wbGUuY29tJyBpcyBhbHNvIHN1cHBvcnRlZC5cbiAqL1xuZnVuY3Rpb24gam9pbihhUm9vdCwgYVBhdGgpIHtcbiAgaWYgKGFSb290ID09PSBcIlwiKSB7XG4gICAgYVJvb3QgPSBcIi5cIjtcbiAgfVxuICBpZiAoYVBhdGggPT09IFwiXCIpIHtcbiAgICBhUGF0aCA9IFwiLlwiO1xuICB9XG4gIHZhciBhUGF0aFVybCA9IHVybFBhcnNlKGFQYXRoKTtcbiAgdmFyIGFSb290VXJsID0gdXJsUGFyc2UoYVJvb3QpO1xuICBpZiAoYVJvb3RVcmwpIHtcbiAgICBhUm9vdCA9IGFSb290VXJsLnBhdGggfHwgJy8nO1xuICB9XG5cbiAgLy8gYGpvaW4oZm9vLCAnLy93d3cuZXhhbXBsZS5vcmcnKWBcbiAgaWYgKGFQYXRoVXJsICYmICFhUGF0aFVybC5zY2hlbWUpIHtcbiAgICBpZiAoYVJvb3RVcmwpIHtcbiAgICAgIGFQYXRoVXJsLnNjaGVtZSA9IGFSb290VXJsLnNjaGVtZTtcbiAgICB9XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKGFQYXRoVXJsKTtcbiAgfVxuXG4gIGlmIChhUGF0aFVybCB8fCBhUGF0aC5tYXRjaChkYXRhVXJsUmVnZXhwKSkge1xuICAgIHJldHVybiBhUGF0aDtcbiAgfVxuXG4gIC8vIGBqb2luKCdodHRwOi8vJywgJ3d3dy5leGFtcGxlLmNvbScpYFxuICBpZiAoYVJvb3RVcmwgJiYgIWFSb290VXJsLmhvc3QgJiYgIWFSb290VXJsLnBhdGgpIHtcbiAgICBhUm9vdFVybC5ob3N0ID0gYVBhdGg7XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKGFSb290VXJsKTtcbiAgfVxuXG4gIHZhciBqb2luZWQgPSBhUGF0aC5jaGFyQXQoMCkgPT09ICcvJ1xuICAgID8gYVBhdGhcbiAgICA6IG5vcm1hbGl6ZShhUm9vdC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIGFQYXRoKTtcblxuICBpZiAoYVJvb3RVcmwpIHtcbiAgICBhUm9vdFVybC5wYXRoID0gam9pbmVkO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gIH1cbiAgcmV0dXJuIGpvaW5lZDtcbn1cbmV4cG9ydHMuam9pbiA9IGpvaW47XG5cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uIChhUGF0aCkge1xuICByZXR1cm4gYVBhdGguY2hhckF0KDApID09PSAnLycgfHwgdXJsUmVnZXhwLnRlc3QoYVBhdGgpO1xufTtcblxuLyoqXG4gKiBNYWtlIGEgcGF0aCByZWxhdGl2ZSB0byBhIFVSTCBvciBhbm90aGVyIHBhdGguXG4gKlxuICogQHBhcmFtIGFSb290IFRoZSByb290IHBhdGggb3IgVVJMLlxuICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIFVSTCB0byBiZSBtYWRlIHJlbGF0aXZlIHRvIGFSb290LlxuICovXG5mdW5jdGlvbiByZWxhdGl2ZShhUm9vdCwgYVBhdGgpIHtcbiAgaWYgKGFSb290ID09PSBcIlwiKSB7XG4gICAgYVJvb3QgPSBcIi5cIjtcbiAgfVxuXG4gIGFSb290ID0gYVJvb3QucmVwbGFjZSgvXFwvJC8sICcnKTtcblxuICAvLyBJdCBpcyBwb3NzaWJsZSBmb3IgdGhlIHBhdGggdG8gYmUgYWJvdmUgdGhlIHJvb3QuIEluIHRoaXMgY2FzZSwgc2ltcGx5XG4gIC8vIGNoZWNraW5nIHdoZXRoZXIgdGhlIHJvb3QgaXMgYSBwcmVmaXggb2YgdGhlIHBhdGggd29uJ3Qgd29yay4gSW5zdGVhZCwgd2VcbiAgLy8gbmVlZCB0byByZW1vdmUgY29tcG9uZW50cyBmcm9tIHRoZSByb290IG9uZSBieSBvbmUsIHVudGlsIGVpdGhlciB3ZSBmaW5kXG4gIC8vIGEgcHJlZml4IHRoYXQgZml0cywgb3Igd2UgcnVuIG91dCBvZiBjb21wb25lbnRzIHRvIHJlbW92ZS5cbiAgdmFyIGxldmVsID0gMDtcbiAgd2hpbGUgKGFQYXRoLmluZGV4T2YoYVJvb3QgKyAnLycpICE9PSAwKSB7XG4gICAgdmFyIGluZGV4ID0gYVJvb3QubGFzdEluZGV4T2YoXCIvXCIpO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgb25seSBwYXJ0IG9mIHRoZSByb290IHRoYXQgaXMgbGVmdCBpcyB0aGUgc2NoZW1lIChpLmUuIGh0dHA6Ly8sXG4gICAgLy8gZmlsZTovLy8sIGV0Yy4pLCBvbmUgb3IgbW9yZSBzbGFzaGVzICgvKSwgb3Igc2ltcGx5IG5vdGhpbmcgYXQgYWxsLCB3ZVxuICAgIC8vIGhhdmUgZXhoYXVzdGVkIGFsbCBjb21wb25lbnRzLCBzbyB0aGUgcGF0aCBpcyBub3QgcmVsYXRpdmUgdG8gdGhlIHJvb3QuXG4gICAgYVJvb3QgPSBhUm9vdC5zbGljZSgwLCBpbmRleCk7XG4gICAgaWYgKGFSb290Lm1hdGNoKC9eKFteXFwvXSs6XFwvKT9cXC8qJC8pKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuXG4gICAgKytsZXZlbDtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSB3ZSBhZGQgYSBcIi4uL1wiIGZvciBlYWNoIGNvbXBvbmVudCB3ZSByZW1vdmVkIGZyb20gdGhlIHJvb3QuXG4gIHJldHVybiBBcnJheShsZXZlbCArIDEpLmpvaW4oXCIuLi9cIikgKyBhUGF0aC5zdWJzdHIoYVJvb3QubGVuZ3RoICsgMSk7XG59XG5leHBvcnRzLnJlbGF0aXZlID0gcmVsYXRpdmU7XG5cbnZhciBzdXBwb3J0c051bGxQcm90byA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gISgnX19wcm90b19fJyBpbiBvYmopO1xufSgpKTtcblxuZnVuY3Rpb24gaWRlbnRpdHkgKHMpIHtcbiAgcmV0dXJuIHM7XG59XG5cbi8qKlxuICogQmVjYXVzZSBiZWhhdmlvciBnb2VzIHdhY2t5IHdoZW4geW91IHNldCBgX19wcm90b19fYCBvbiBvYmplY3RzLCB3ZVxuICogaGF2ZSB0byBwcmVmaXggYWxsIHRoZSBzdHJpbmdzIGluIG91ciBzZXQgd2l0aCBhbiBhcmJpdHJhcnkgY2hhcmFjdGVyLlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL3B1bGwvMzEgYW5kXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2lzc3Vlcy8zMFxuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5mdW5jdGlvbiB0b1NldFN0cmluZyhhU3RyKSB7XG4gIGlmIChpc1Byb3RvU3RyaW5nKGFTdHIpKSB7XG4gICAgcmV0dXJuICckJyArIGFTdHI7XG4gIH1cblxuICByZXR1cm4gYVN0cjtcbn1cbmV4cG9ydHMudG9TZXRTdHJpbmcgPSBzdXBwb3J0c051bGxQcm90byA/IGlkZW50aXR5IDogdG9TZXRTdHJpbmc7XG5cbmZ1bmN0aW9uIGZyb21TZXRTdHJpbmcoYVN0cikge1xuICBpZiAoaXNQcm90b1N0cmluZyhhU3RyKSkge1xuICAgIHJldHVybiBhU3RyLnNsaWNlKDEpO1xuICB9XG5cbiAgcmV0dXJuIGFTdHI7XG59XG5leHBvcnRzLmZyb21TZXRTdHJpbmcgPSBzdXBwb3J0c051bGxQcm90byA/IGlkZW50aXR5IDogZnJvbVNldFN0cmluZztcblxuZnVuY3Rpb24gaXNQcm90b1N0cmluZyhzKSB7XG4gIGlmICghcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBzLmxlbmd0aDtcblxuICBpZiAobGVuZ3RoIDwgOSAvKiBcIl9fcHJvdG9fX1wiLmxlbmd0aCAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMSkgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSAyKSAhPT0gOTUgIC8qICdfJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDMpICE9PSAxMTEgLyogJ28nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNCkgIT09IDExNiAvKiAndCcgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA1KSAhPT0gMTExIC8qICdvJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDYpICE9PSAxMTQgLyogJ3InICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNykgIT09IDExMiAvKiAncCcgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA4KSAhPT0gOTUgIC8qICdfJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDkpICE9PSA5NSAgLyogJ18nICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IGxlbmd0aCAtIDEwOyBpID49IDA7IGktLSkge1xuICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgIT09IDM2IC8qICckJyAqLykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2hlcmUgdGhlIG9yaWdpbmFsIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKlxuICogT3B0aW9uYWxseSBwYXNzIGluIGB0cnVlYCBhcyBgb25seUNvbXBhcmVHZW5lcmF0ZWRgIHRvIGNvbnNpZGVyIHR3b1xuICogbWFwcGluZ3Mgd2l0aCB0aGUgc2FtZSBvcmlnaW5hbCBzb3VyY2UvbGluZS9jb2x1bW4sIGJ1dCBkaWZmZXJlbnQgZ2VuZXJhdGVkXG4gKiBsaW5lIGFuZCBjb2x1bW4gdGhlIHNhbWUuIFVzZWZ1bCB3aGVuIHNlYXJjaGluZyBmb3IgYSBtYXBwaW5nIHdpdGggYVxuICogc3R1YmJlZCBvdXQgbWFwcGluZy5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMobWFwcGluZ0EsIG1hcHBpbmdCLCBvbmx5Q29tcGFyZU9yaWdpbmFsKSB7XG4gIHZhciBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwIHx8IG9ubHlDb21wYXJlT3JpZ2luYWwpIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zID0gY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnM7XG5cbi8qKlxuICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aXRoIGRlZmxhdGVkIHNvdXJjZSBhbmQgbmFtZSBpbmRpY2VzIHdoZXJlXG4gKiB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKlxuICogT3B0aW9uYWxseSBwYXNzIGluIGB0cnVlYCBhcyBgb25seUNvbXBhcmVHZW5lcmF0ZWRgIHRvIGNvbnNpZGVyIHR3b1xuICogbWFwcGluZ3Mgd2l0aCB0aGUgc2FtZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uLCBidXQgZGlmZmVyZW50XG4gKiBzb3VyY2UvbmFtZS9vcmlnaW5hbCBsaW5lIGFuZCBjb2x1bW4gdGhlIHNhbWUuIFVzZWZ1bCB3aGVuIHNlYXJjaGluZyBmb3IgYVxuICogbWFwcGluZyB3aXRoIGEgc3R1YmJlZCBvdXQgbWFwcGluZy5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCLCBvbmx5Q29tcGFyZUdlbmVyYXRlZCkge1xuICB2YXIgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwIHx8IG9ubHlDb21wYXJlR2VuZXJhdGVkKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IHN0cmNtcChtYXBwaW5nQS5zb3VyY2UsIG1hcHBpbmdCLnNvdXJjZSk7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgcmV0dXJuIHN0cmNtcChtYXBwaW5nQS5uYW1lLCBtYXBwaW5nQi5uYW1lKTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZDtcblxuZnVuY3Rpb24gc3RyY21wKGFTdHIxLCBhU3RyMikge1xuICBpZiAoYVN0cjEgPT09IGFTdHIyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoYVN0cjEgPT09IG51bGwpIHtcbiAgICByZXR1cm4gMTsgLy8gYVN0cjIgIT09IG51bGxcbiAgfVxuXG4gIGlmIChhU3RyMiA9PT0gbnVsbCkge1xuICAgIHJldHVybiAtMTsgLy8gYVN0cjEgIT09IG51bGxcbiAgfVxuXG4gIGlmIChhU3RyMSA+IGFTdHIyKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aXRoIGluZmxhdGVkIHNvdXJjZSBhbmQgbmFtZSBzdHJpbmdzIHdoZXJlXG4gKiB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQikge1xuICB2YXIgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IHN0cmNtcChtYXBwaW5nQS5zb3VyY2UsIG1hcHBpbmdCLnNvdXJjZSk7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgcmV0dXJuIHN0cmNtcChtYXBwaW5nQS5uYW1lLCBtYXBwaW5nQi5uYW1lKTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZDtcblxuLyoqXG4gKiBTdHJpcCBhbnkgSlNPTiBYU1NJIGF2b2lkYW5jZSBwcmVmaXggZnJvbSB0aGUgc3RyaW5nIChhcyBkb2N1bWVudGVkXG4gKiBpbiB0aGUgc291cmNlIG1hcHMgc3BlY2lmaWNhdGlvbiksIGFuZCB0aGVuIHBhcnNlIHRoZSBzdHJpbmcgYXNcbiAqIEpTT04uXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU291cmNlTWFwSW5wdXQoc3RyKSB7XG4gIHJldHVybiBKU09OLnBhcnNlKHN0ci5yZXBsYWNlKC9eXFwpXX0nW15cXG5dKlxcbi8sICcnKSk7XG59XG5leHBvcnRzLnBhcnNlU291cmNlTWFwSW5wdXQgPSBwYXJzZVNvdXJjZU1hcElucHV0O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIFVSTCBvZiBhIHNvdXJjZSBnaXZlbiB0aGUgdGhlIHNvdXJjZSByb290LCB0aGUgc291cmNlJ3NcbiAqIFVSTCwgYW5kIHRoZSBzb3VyY2UgbWFwJ3MgVVJMLlxuICovXG5mdW5jdGlvbiBjb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHNvdXJjZVVSTCwgc291cmNlTWFwVVJMKSB7XG4gIHNvdXJjZVVSTCA9IHNvdXJjZVVSTCB8fCAnJztcblxuICBpZiAoc291cmNlUm9vdCkge1xuICAgIC8vIFRoaXMgZm9sbG93cyB3aGF0IENocm9tZSBkb2VzLlxuICAgIGlmIChzb3VyY2VSb290W3NvdXJjZVJvb3QubGVuZ3RoIC0gMV0gIT09ICcvJyAmJiBzb3VyY2VVUkxbMF0gIT09ICcvJykge1xuICAgICAgc291cmNlUm9vdCArPSAnLyc7XG4gICAgfVxuICAgIC8vIFRoZSBzcGVjIHNheXM6XG4gICAgLy8gICBMaW5lIDQ6IEFuIG9wdGlvbmFsIHNvdXJjZSByb290LCB1c2VmdWwgZm9yIHJlbG9jYXRpbmcgc291cmNlXG4gICAgLy8gICBmaWxlcyBvbiBhIHNlcnZlciBvciByZW1vdmluZyByZXBlYXRlZCB2YWx1ZXMgaW4gdGhlXG4gICAgLy8gICDigJxzb3VyY2Vz4oCdIGVudHJ5LiAgVGhpcyB2YWx1ZSBpcyBwcmVwZW5kZWQgdG8gdGhlIGluZGl2aWR1YWxcbiAgICAvLyAgIGVudHJpZXMgaW4gdGhlIOKAnHNvdXJjZeKAnSBmaWVsZC5cbiAgICBzb3VyY2VVUkwgPSBzb3VyY2VSb290ICsgc291cmNlVVJMO1xuICB9XG5cbiAgLy8gSGlzdG9yaWNhbGx5LCBTb3VyY2VNYXBDb25zdW1lciBkaWQgbm90IHRha2UgdGhlIHNvdXJjZU1hcFVSTCBhc1xuICAvLyBhIHBhcmFtZXRlci4gIFRoaXMgbW9kZSBpcyBzdGlsbCBzb21ld2hhdCBzdXBwb3J0ZWQsIHdoaWNoIGlzIHdoeVxuICAvLyB0aGlzIGNvZGUgYmxvY2sgaXMgY29uZGl0aW9uYWwuICBIb3dldmVyLCBpdCdzIHByZWZlcmFibGUgdG8gcGFzc1xuICAvLyB0aGUgc291cmNlIG1hcCBVUkwgdG8gU291cmNlTWFwQ29uc3VtZXIsIHNvIHRoYXQgdGhpcyBmdW5jdGlvblxuICAvLyBjYW4gaW1wbGVtZW50IHRoZSBzb3VyY2UgVVJMIHJlc29sdXRpb24gYWxnb3JpdGhtIGFzIG91dGxpbmVkIGluXG4gIC8vIHRoZSBzcGVjLiAgVGhpcyBibG9jayBpcyBiYXNpY2FsbHkgdGhlIGVxdWl2YWxlbnQgb2Y6XG4gIC8vICAgIG5ldyBVUkwoc291cmNlVVJMLCBzb3VyY2VNYXBVUkwpLnRvU3RyaW5nKClcbiAgLy8gLi4uIGV4Y2VwdCBpdCBhdm9pZHMgdXNpbmcgVVJMLCB3aGljaCB3YXNuJ3QgYXZhaWxhYmxlIGluIHRoZVxuICAvLyBvbGRlciByZWxlYXNlcyBvZiBub2RlIHN0aWxsIHN1cHBvcnRlZCBieSB0aGlzIGxpYnJhcnkuXG4gIC8vXG4gIC8vIFRoZSBzcGVjIHNheXM6XG4gIC8vICAgSWYgdGhlIHNvdXJjZXMgYXJlIG5vdCBhYnNvbHV0ZSBVUkxzIGFmdGVyIHByZXBlbmRpbmcgb2YgdGhlXG4gIC8vICAg4oCcc291cmNlUm9vdOKAnSwgdGhlIHNvdXJjZXMgYXJlIHJlc29sdmVkIHJlbGF0aXZlIHRvIHRoZVxuICAvLyAgIFNvdXJjZU1hcCAobGlrZSByZXNvbHZpbmcgc2NyaXB0IHNyYyBpbiBhIGh0bWwgZG9jdW1lbnQpLlxuICBpZiAoc291cmNlTWFwVVJMKSB7XG4gICAgdmFyIHBhcnNlZCA9IHVybFBhcnNlKHNvdXJjZU1hcFVSTCk7XG4gICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInNvdXJjZU1hcFVSTCBjb3VsZCBub3QgYmUgcGFyc2VkXCIpO1xuICAgIH1cbiAgICBpZiAocGFyc2VkLnBhdGgpIHtcbiAgICAgIC8vIFN0cmlwIHRoZSBsYXN0IHBhdGggY29tcG9uZW50LCBidXQga2VlcCB0aGUgXCIvXCIuXG4gICAgICB2YXIgaW5kZXggPSBwYXJzZWQucGF0aC5sYXN0SW5kZXhPZignLycpO1xuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgcGFyc2VkLnBhdGggPSBwYXJzZWQucGF0aC5zdWJzdHJpbmcoMCwgaW5kZXggKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlVVJMID0gam9pbih1cmxHZW5lcmF0ZShwYXJzZWQpLCBzb3VyY2VVUkwpO1xuICB9XG5cbiAgcmV0dXJuIG5vcm1hbGl6ZShzb3VyY2VVUkwpO1xufVxuZXhwb3J0cy5jb21wdXRlU291cmNlVVJMID0gY29tcHV0ZVNvdXJjZVVSTDtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRS50eHQgb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG5leHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1jb25zdW1lcicpLlNvdXJjZU1hcENvbnN1bWVyO1xuZXhwb3J0cy5Tb3VyY2VOb2RlID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW5vZGUnKS5Tb3VyY2VOb2RlO1xuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjMuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTgtMDEtMjBUMTc6MjRaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYywgbm9kZSApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXHRcdFx0XHRpZiAoIG5vZGVbIGkgXSApIHtcblx0XHRcdFx0XHRzY3JpcHRbIGkgXSA9IG5vZGVbIGkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMy4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIGFsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MsIG5vZGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gZGl2Lm9mZnNldFdpZHRoID09PSAzNiB8fCBcImFic29sdXRlXCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXHRcdCkgKTtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveDtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdHZhbHVlSXNCb3JkZXJCb3ggPSB2YWx1ZUlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSApO1xuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgfHxcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApIHtcblxuXHRcdHZhbCA9IGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXTtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBwcm92aWRlIGJvcmRlci1ib3ggdmFsdWVzXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IHRydWU7XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzdXBwb3J0LnNjcm9sbGJveFNpemUoKSA9PT0gc3R5bGVzLnBvc2l0aW9uICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCJtb2R1bGUuZXhwb3J0cz1bXG4gIHtcbiAgICBcImhlYWRcIjogXCJQYWluICYgcHJvZml0XCIsXG4gICAgXCJpbWFnZW5hbWVcIjogXCJwYWlucHJvZml0XCIsXG4gICAgXCJibHVyYlwiOiBcIkRlc2lnbiBhbmQgZnJvbnQtZW5kIGRldmVsb3BtZW50IGZvciBtdWx0aS1wYXJ0IGludmVzdGlnYXRpb24gaW50byB0aGUgZmFpbGluZ3Mgb2YgVGV4YXMgdG8gcHJvdGVjdCB2dWxuZXJhYmxlIGNpdGl6ZW5zIGZyb20gbWFuYWdlZCBjYXJlIGNvbXBhbmllcy5cIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vaW50ZXJhY3RpdmVzLmRhbGxhc25ld3MuY29tLzIwMTgvcGFpbi1hbmQtcHJvZml0XCIsXG4gICAgXCJ0YWdzXCI6IFtcImh0bWxcIiwgXCJjc3NcIiwgXCJqYXZhc2NyaXB0XCJdLFxuICB9LFxuICB7XG4gICAgXCJoZWFkXCI6IFwiU3RhbmRvZmZcIixcbiAgICBcImltYWdlbmFtZVwiOiBcInN0YW5kb2ZmXCIsXG4gICAgXCJibHVyYlwiOiBcIkRlc2lnbiBkaXJlY3Rpb24gYW5kIHByb2plY3QgbWFuYWdlbWVudCBmb3IgYW4gaW4tZGVwdGggbG9vayBpbnRvIHRoZSBjb25mcm9udGF0aW9uIGJldHdlZW4gRGFsbGFzIFNXQVQgb2ZmaWNlcnMgYW5kIHRoZSBEYWxsYXMgUG9saWNlIFNob290aW5nIGd1bm1hbiB3aXRoaW4gdGhlIGhhbGxzIG9mIEVsIENlbnRybyBDb2xsZWdlLlwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9pbnRlcmFjdGl2ZXMuZGFsbGFzbmV3cy5jb20vMjAxNy9kYWxsYXMtcG9saWNlLWFtYnVzaC1hbm5pdmVyc2FyeS1waG90b3MvXCIsXG4gICAgXCJ0YWdzXCI6IFtdLFxuICB9LFxuICB7XG4gICAgXCJoZWFkXCI6IFwiSXTigJlzIGhpc3Rvcnkgbm93XCIsXG4gICAgXCJpbWFnZW5hbWVcIjogXCJoaXN0b3J5bm93XCIsXG4gICAgXCJibHVyYlwiOiBcIkFydCBkaXJlY3Rpb24sIGRlc2lnbiBhbmQgZGV2ZWxvcG1lbnQgZm9yIGEgc2VyaWVzIG9mIHNob3J0IHZpZGVvcyBhbmQgc3RvcmllcyBvbiB0aG9zZSBhZmZlY3RlZCBieSB0aGUgRGFsbGFzIFBvbGljZSBTaG9vdGluZywgb25lIHllYXIgbGF0ZXIuXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2ludGVyYWN0aXZlcy5kYWxsYXNuZXdzLmNvbS8yMDE3L2RhbGxhcy1wb2xpY2UtYW1idXNoLWFubml2ZXJzYXJ5LXBob3Rvcy9cIixcbiAgICBcInRhZ3NcIjogW1wiaHRtbFwiLCBcImNzc1wiLCBcImphdmFzY3JpcHRcIl1cbiAgfSxcbiAge1xuICAgIFwiaGVhZFwiOiBcIk92ZXJsb29rZWRcIixcbiAgICBcImltYWdlbmFtZVwiOiBcIm92ZXJsb29rZWRcIixcbiAgICBcImJsdXJiXCI6IFwiUHJlc2VudGF0aW9uIGRlc2lnbiBhbmQgZnJvbnQtZW5kIGRldmVsb3BtZW50LCBpbmNsdWRpbmcgY3JlYXRpb24gb2YgYSBjdXN0b20gcGhvdG8gZ2FsbGVyeSwgZm9yIGludmVzdGlnYXRpdmUgc3Rvcnkgb24gd2hhdCBoYXBwZW5zIHRvIHRoZSBjaGlsZHJlbiBvZiB3b21lbiB3aG8gZ28gdG8gamFpbC5cIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vaW50ZXJhY3RpdmVzLmRhbGxhc25ld3MuY29tLzIwMTcvb3Zlcmxvb2tlZC9cIixcbiAgICBcInRhZ3NcIjogW1wiaHRtbFwiLCBcImNzc1wiLCBcImphdmFzY3JpcHRcIl1cbiAgfSxcbiAge1xuICAgIFwiaGVhZFwiOiBcIlRoZSB3ZWlnaHQgb2YgYSB3YWxsXCIsXG4gICAgXCJpbWFnZW5hbWVcIjogXCJ3YWxsXCIsXG4gICAgXCJibHVyYlwiOiBcIkN1c3RvbSBwcmVzZW50YXRpb24gYW5kIGZyb250LWVuZCBkZXZlbG9wbWVudCBvZiBnZW9ncmFwaGljYWxseS1iYXNlZCBzdG9yeXRlbGxpbmcgY2VudGVyZWQgb24gd2hhdCBhIGJvcmRlciB3YWxsIHdvdWxkIG1lYW4gZm9yIHRoZSBjaXRpemVucyBhbmQgbGF3IGVuZm9yY2VtZW50IG9mZmljZXJzIHRoYXQgbGl2ZSBhbmQgd29yayBhbG9uZyB0aGUgYm9yZGVyLlwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9pbnRlcmFjdGl2ZXMuZGFsbGFzbmV3cy5jb20vMjAxNy9ib3JkZXJsYW5kLXByb2plY3QvXCIsXG4gICAgXCJ0YWdzXCI6IFtcImh0bWxcIiwgXCJjc3NcIiwgXCJqYXZhc2NyaXB0XCIsIFwibWFwYm94XCJdXG4gIH0sXG4gIHtcbiAgICBcImhlYWRcIjogXCJSb2xsaW5nIHVwIG9uIERpeG9uIENpcmNsZVwiLFxuICAgIFwiaW1hZ2VuYW1lXCI6IFwiZGl4b25cIixcbiAgICBcImJsdXJiXCI6IFwiQ3VzdG9tIHByZXNlbnRhdGlvbiBkZXNpZ24gYW5kIGZyb250LWVuZCBkZXZlbG9wbWVudCBvZiBhbiBhbHRlcm5hdGl2ZSBzdG9yeWZvcm0gZm9yIGEgc2VyaWVzIG9mIHZpZ25ldHRlcyBvbiB3aGF0IGxpZmUgaXMgbGlrZSBmb3IgdGhlIHJlc2lkZW50cyBvZiBhIFNvdXRoIERhbGxhcyBuZWlnaGJvcmhvb2QgdGhhdCB3YXMgbmVhcmx5IHJpcHBlZCBhcGFydCBmb2xsb3dpbmcgYSBwb2xpY2Ugc2hvb3RpbmcgaW4gMjAxMi5cIixcbiAgICBcInVybFwiOiBcImh0dHA6Ly9pbnRlcmFjdGl2ZXMuZGFsbGFzbmV3cy5jb20vMjAxNi9kaXhvbi1jaXJjbGUvXCIsXG4gICAgXCJ0YWdzXCI6IFtcImh0bWxcIiwgXCJjc3NcIiwgXCJqYXZhc2NyaXB0XCIsIFwibWFwYm94XCJdXG4gIH1cbl1cbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgSGFuZGxlYmFycyBmcm9tICdoYW5kbGViYXJzJztcbmltcG9ydCBwcm9qZWN0cyBmcm9tICcuL21vZHVsZXMvZGVzaWduLmpzb24nO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKGUpID0+IHtcbiAgY29uc3Qgc291cmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dvcmstdGVtcGxhdGUnKS5pbm5lckhUTUw7XG4gIGNvbnN0IHdvcmtUZW1wbGF0ZSA9IEhhbmRsZWJhcnMuY29tcGlsZShzb3VyY2UpO1xuICBjb25zdCB3b3JrR3JpZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3b3JrX19ncmlkJyk7XG5cbiAgcHJvamVjdHMuZm9yRWFjaCgocHJvamVjdCkgPT4ge1xuICAgIGNvbnN0IHByb2plY3RCbG9jayA9IHdvcmtUZW1wbGF0ZShwcm9qZWN0KTtcbiAgICAkKCcjd29ya19fZ3JpZCcpLmFwcGVuZChwcm9qZWN0QmxvY2spO1xuICB9KTtcbn0pO1xuLy9cbi8vIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiJdfQ==
